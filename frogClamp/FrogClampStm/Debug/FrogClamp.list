
FrogClamp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045a0  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08004738  08004738  00005738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800477c  0800477c  00006060  2**0
                  CONTENTS
  4 .ARM          00000008  0800477c  0800477c  0000577c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004784  08004784  00006060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08004784  08004784  00005784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  0800478c  0800478c  0000578c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08004794  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000294  20000060  080047f4  00006060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002f4  080047f4  000062f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c506  00000000  00000000  00006090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023eb  00000000  00000000  00012596  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b80  00000000  00000000  00014988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008c0  00000000  00000000  00015508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018bd5  00000000  00000000  00015dc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e765  00000000  00000000  0002e99d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089a7b  00000000  00000000  0003d102  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c6b7d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031f0  00000000  00000000  000c6bc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000c9db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000060 	.word	0x20000060
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08004720 	.word	0x08004720

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000064 	.word	0x20000064
 80001d4:	08004720 	.word	0x08004720

080001d8 <__aeabi_ldivmod>:
 80001d8:	b97b      	cbnz	r3, 80001fa <__aeabi_ldivmod+0x22>
 80001da:	b972      	cbnz	r2, 80001fa <__aeabi_ldivmod+0x22>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bfbe      	ittt	lt
 80001e0:	2000      	movlt	r0, #0
 80001e2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80001e6:	e006      	blt.n	80001f6 <__aeabi_ldivmod+0x1e>
 80001e8:	bf08      	it	eq
 80001ea:	2800      	cmpeq	r0, #0
 80001ec:	bf1c      	itt	ne
 80001ee:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 80001f2:	f04f 30ff 	movne.w	r0, #4294967295
 80001f6:	f000 b9b5 	b.w	8000564 <__aeabi_idiv0>
 80001fa:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fe:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000202:	2900      	cmp	r1, #0
 8000204:	db09      	blt.n	800021a <__aeabi_ldivmod+0x42>
 8000206:	2b00      	cmp	r3, #0
 8000208:	db1a      	blt.n	8000240 <__aeabi_ldivmod+0x68>
 800020a:	f000 f84d 	bl	80002a8 <__udivmoddi4>
 800020e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000212:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000216:	b004      	add	sp, #16
 8000218:	4770      	bx	lr
 800021a:	4240      	negs	r0, r0
 800021c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000220:	2b00      	cmp	r3, #0
 8000222:	db1b      	blt.n	800025c <__aeabi_ldivmod+0x84>
 8000224:	f000 f840 	bl	80002a8 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4240      	negs	r0, r0
 8000234:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000238:	4252      	negs	r2, r2
 800023a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800023e:	4770      	bx	lr
 8000240:	4252      	negs	r2, r2
 8000242:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000246:	f000 f82f 	bl	80002a8 <__udivmoddi4>
 800024a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800024e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000252:	b004      	add	sp, #16
 8000254:	4240      	negs	r0, r0
 8000256:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025a:	4770      	bx	lr
 800025c:	4252      	negs	r2, r2
 800025e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000262:	f000 f821 	bl	80002a8 <__udivmoddi4>
 8000266:	f8dd e004 	ldr.w	lr, [sp, #4]
 800026a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026e:	b004      	add	sp, #16
 8000270:	4252      	negs	r2, r2
 8000272:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000276:	4770      	bx	lr

08000278 <__aeabi_uldivmod>:
 8000278:	b953      	cbnz	r3, 8000290 <__aeabi_uldivmod+0x18>
 800027a:	b94a      	cbnz	r2, 8000290 <__aeabi_uldivmod+0x18>
 800027c:	2900      	cmp	r1, #0
 800027e:	bf08      	it	eq
 8000280:	2800      	cmpeq	r0, #0
 8000282:	bf1c      	itt	ne
 8000284:	f04f 31ff 	movne.w	r1, #4294967295
 8000288:	f04f 30ff 	movne.w	r0, #4294967295
 800028c:	f000 b96a 	b.w	8000564 <__aeabi_idiv0>
 8000290:	f1ad 0c08 	sub.w	ip, sp, #8
 8000294:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000298:	f000 f806 	bl	80002a8 <__udivmoddi4>
 800029c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a4:	b004      	add	sp, #16
 80002a6:	4770      	bx	lr

080002a8 <__udivmoddi4>:
 80002a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002ac:	9d08      	ldr	r5, [sp, #32]
 80002ae:	460c      	mov	r4, r1
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d14e      	bne.n	8000352 <__udivmoddi4+0xaa>
 80002b4:	4694      	mov	ip, r2
 80002b6:	458c      	cmp	ip, r1
 80002b8:	4686      	mov	lr, r0
 80002ba:	fab2 f282 	clz	r2, r2
 80002be:	d962      	bls.n	8000386 <__udivmoddi4+0xde>
 80002c0:	b14a      	cbz	r2, 80002d6 <__udivmoddi4+0x2e>
 80002c2:	f1c2 0320 	rsb	r3, r2, #32
 80002c6:	4091      	lsls	r1, r2
 80002c8:	fa20 f303 	lsr.w	r3, r0, r3
 80002cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d0:	4319      	orrs	r1, r3
 80002d2:	fa00 fe02 	lsl.w	lr, r0, r2
 80002d6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002da:	fa1f f68c 	uxth.w	r6, ip
 80002de:	fbb1 f4f7 	udiv	r4, r1, r7
 80002e2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002e6:	fb07 1114 	mls	r1, r7, r4, r1
 80002ea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ee:	fb04 f106 	mul.w	r1, r4, r6
 80002f2:	4299      	cmp	r1, r3
 80002f4:	d90a      	bls.n	800030c <__udivmoddi4+0x64>
 80002f6:	eb1c 0303 	adds.w	r3, ip, r3
 80002fa:	f104 30ff 	add.w	r0, r4, #4294967295
 80002fe:	f080 8112 	bcs.w	8000526 <__udivmoddi4+0x27e>
 8000302:	4299      	cmp	r1, r3
 8000304:	f240 810f 	bls.w	8000526 <__udivmoddi4+0x27e>
 8000308:	3c02      	subs	r4, #2
 800030a:	4463      	add	r3, ip
 800030c:	1a59      	subs	r1, r3, r1
 800030e:	fa1f f38e 	uxth.w	r3, lr
 8000312:	fbb1 f0f7 	udiv	r0, r1, r7
 8000316:	fb07 1110 	mls	r1, r7, r0, r1
 800031a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031e:	fb00 f606 	mul.w	r6, r0, r6
 8000322:	429e      	cmp	r6, r3
 8000324:	d90a      	bls.n	800033c <__udivmoddi4+0x94>
 8000326:	eb1c 0303 	adds.w	r3, ip, r3
 800032a:	f100 31ff 	add.w	r1, r0, #4294967295
 800032e:	f080 80fc 	bcs.w	800052a <__udivmoddi4+0x282>
 8000332:	429e      	cmp	r6, r3
 8000334:	f240 80f9 	bls.w	800052a <__udivmoddi4+0x282>
 8000338:	4463      	add	r3, ip
 800033a:	3802      	subs	r0, #2
 800033c:	1b9b      	subs	r3, r3, r6
 800033e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000342:	2100      	movs	r1, #0
 8000344:	b11d      	cbz	r5, 800034e <__udivmoddi4+0xa6>
 8000346:	40d3      	lsrs	r3, r2
 8000348:	2200      	movs	r2, #0
 800034a:	e9c5 3200 	strd	r3, r2, [r5]
 800034e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000352:	428b      	cmp	r3, r1
 8000354:	d905      	bls.n	8000362 <__udivmoddi4+0xba>
 8000356:	b10d      	cbz	r5, 800035c <__udivmoddi4+0xb4>
 8000358:	e9c5 0100 	strd	r0, r1, [r5]
 800035c:	2100      	movs	r1, #0
 800035e:	4608      	mov	r0, r1
 8000360:	e7f5      	b.n	800034e <__udivmoddi4+0xa6>
 8000362:	fab3 f183 	clz	r1, r3
 8000366:	2900      	cmp	r1, #0
 8000368:	d146      	bne.n	80003f8 <__udivmoddi4+0x150>
 800036a:	42a3      	cmp	r3, r4
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xcc>
 800036e:	4290      	cmp	r0, r2
 8000370:	f0c0 80f0 	bcc.w	8000554 <__udivmoddi4+0x2ac>
 8000374:	1a86      	subs	r6, r0, r2
 8000376:	eb64 0303 	sbc.w	r3, r4, r3
 800037a:	2001      	movs	r0, #1
 800037c:	2d00      	cmp	r5, #0
 800037e:	d0e6      	beq.n	800034e <__udivmoddi4+0xa6>
 8000380:	e9c5 6300 	strd	r6, r3, [r5]
 8000384:	e7e3      	b.n	800034e <__udivmoddi4+0xa6>
 8000386:	2a00      	cmp	r2, #0
 8000388:	f040 8090 	bne.w	80004ac <__udivmoddi4+0x204>
 800038c:	eba1 040c 	sub.w	r4, r1, ip
 8000390:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000394:	fa1f f78c 	uxth.w	r7, ip
 8000398:	2101      	movs	r1, #1
 800039a:	fbb4 f6f8 	udiv	r6, r4, r8
 800039e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003a2:	fb08 4416 	mls	r4, r8, r6, r4
 80003a6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003aa:	fb07 f006 	mul.w	r0, r7, r6
 80003ae:	4298      	cmp	r0, r3
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x11c>
 80003b2:	eb1c 0303 	adds.w	r3, ip, r3
 80003b6:	f106 34ff 	add.w	r4, r6, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x11a>
 80003bc:	4298      	cmp	r0, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2b4>
 80003c2:	4626      	mov	r6, r4
 80003c4:	1a1c      	subs	r4, r3, r0
 80003c6:	fa1f f38e 	uxth.w	r3, lr
 80003ca:	fbb4 f0f8 	udiv	r0, r4, r8
 80003ce:	fb08 4410 	mls	r4, r8, r0, r4
 80003d2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d6:	fb00 f707 	mul.w	r7, r0, r7
 80003da:	429f      	cmp	r7, r3
 80003dc:	d908      	bls.n	80003f0 <__udivmoddi4+0x148>
 80003de:	eb1c 0303 	adds.w	r3, ip, r3
 80003e2:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e6:	d202      	bcs.n	80003ee <__udivmoddi4+0x146>
 80003e8:	429f      	cmp	r7, r3
 80003ea:	f200 80b0 	bhi.w	800054e <__udivmoddi4+0x2a6>
 80003ee:	4620      	mov	r0, r4
 80003f0:	1bdb      	subs	r3, r3, r7
 80003f2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003f6:	e7a5      	b.n	8000344 <__udivmoddi4+0x9c>
 80003f8:	f1c1 0620 	rsb	r6, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 f706 	lsr.w	r7, r2, r6
 8000402:	431f      	orrs	r7, r3
 8000404:	fa20 fc06 	lsr.w	ip, r0, r6
 8000408:	fa04 f301 	lsl.w	r3, r4, r1
 800040c:	ea43 030c 	orr.w	r3, r3, ip
 8000410:	40f4      	lsrs	r4, r6
 8000412:	fa00 f801 	lsl.w	r8, r0, r1
 8000416:	0c38      	lsrs	r0, r7, #16
 8000418:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800041c:	fbb4 fef0 	udiv	lr, r4, r0
 8000420:	fa1f fc87 	uxth.w	ip, r7
 8000424:	fb00 441e 	mls	r4, r0, lr, r4
 8000428:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800042c:	fb0e f90c 	mul.w	r9, lr, ip
 8000430:	45a1      	cmp	r9, r4
 8000432:	fa02 f201 	lsl.w	r2, r2, r1
 8000436:	d90a      	bls.n	800044e <__udivmoddi4+0x1a6>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800043e:	f080 8084 	bcs.w	800054a <__udivmoddi4+0x2a2>
 8000442:	45a1      	cmp	r9, r4
 8000444:	f240 8081 	bls.w	800054a <__udivmoddi4+0x2a2>
 8000448:	f1ae 0e02 	sub.w	lr, lr, #2
 800044c:	443c      	add	r4, r7
 800044e:	eba4 0409 	sub.w	r4, r4, r9
 8000452:	fa1f f983 	uxth.w	r9, r3
 8000456:	fbb4 f3f0 	udiv	r3, r4, r0
 800045a:	fb00 4413 	mls	r4, r0, r3, r4
 800045e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000462:	fb03 fc0c 	mul.w	ip, r3, ip
 8000466:	45a4      	cmp	ip, r4
 8000468:	d907      	bls.n	800047a <__udivmoddi4+0x1d2>
 800046a:	193c      	adds	r4, r7, r4
 800046c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000470:	d267      	bcs.n	8000542 <__udivmoddi4+0x29a>
 8000472:	45a4      	cmp	ip, r4
 8000474:	d965      	bls.n	8000542 <__udivmoddi4+0x29a>
 8000476:	3b02      	subs	r3, #2
 8000478:	443c      	add	r4, r7
 800047a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800047e:	fba0 9302 	umull	r9, r3, r0, r2
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	429c      	cmp	r4, r3
 8000488:	46ce      	mov	lr, r9
 800048a:	469c      	mov	ip, r3
 800048c:	d351      	bcc.n	8000532 <__udivmoddi4+0x28a>
 800048e:	d04e      	beq.n	800052e <__udivmoddi4+0x286>
 8000490:	b155      	cbz	r5, 80004a8 <__udivmoddi4+0x200>
 8000492:	ebb8 030e 	subs.w	r3, r8, lr
 8000496:	eb64 040c 	sbc.w	r4, r4, ip
 800049a:	fa04 f606 	lsl.w	r6, r4, r6
 800049e:	40cb      	lsrs	r3, r1
 80004a0:	431e      	orrs	r6, r3
 80004a2:	40cc      	lsrs	r4, r1
 80004a4:	e9c5 6400 	strd	r6, r4, [r5]
 80004a8:	2100      	movs	r1, #0
 80004aa:	e750      	b.n	800034e <__udivmoddi4+0xa6>
 80004ac:	f1c2 0320 	rsb	r3, r2, #32
 80004b0:	fa20 f103 	lsr.w	r1, r0, r3
 80004b4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b8:	fa24 f303 	lsr.w	r3, r4, r3
 80004bc:	4094      	lsls	r4, r2
 80004be:	430c      	orrs	r4, r1
 80004c0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004c4:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c8:	fa1f f78c 	uxth.w	r7, ip
 80004cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d0:	fb08 3110 	mls	r1, r8, r0, r3
 80004d4:	0c23      	lsrs	r3, r4, #16
 80004d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004da:	fb00 f107 	mul.w	r1, r0, r7
 80004de:	4299      	cmp	r1, r3
 80004e0:	d908      	bls.n	80004f4 <__udivmoddi4+0x24c>
 80004e2:	eb1c 0303 	adds.w	r3, ip, r3
 80004e6:	f100 36ff 	add.w	r6, r0, #4294967295
 80004ea:	d22c      	bcs.n	8000546 <__udivmoddi4+0x29e>
 80004ec:	4299      	cmp	r1, r3
 80004ee:	d92a      	bls.n	8000546 <__udivmoddi4+0x29e>
 80004f0:	3802      	subs	r0, #2
 80004f2:	4463      	add	r3, ip
 80004f4:	1a5b      	subs	r3, r3, r1
 80004f6:	b2a4      	uxth	r4, r4
 80004f8:	fbb3 f1f8 	udiv	r1, r3, r8
 80004fc:	fb08 3311 	mls	r3, r8, r1, r3
 8000500:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000504:	fb01 f307 	mul.w	r3, r1, r7
 8000508:	42a3      	cmp	r3, r4
 800050a:	d908      	bls.n	800051e <__udivmoddi4+0x276>
 800050c:	eb1c 0404 	adds.w	r4, ip, r4
 8000510:	f101 36ff 	add.w	r6, r1, #4294967295
 8000514:	d213      	bcs.n	800053e <__udivmoddi4+0x296>
 8000516:	42a3      	cmp	r3, r4
 8000518:	d911      	bls.n	800053e <__udivmoddi4+0x296>
 800051a:	3902      	subs	r1, #2
 800051c:	4464      	add	r4, ip
 800051e:	1ae4      	subs	r4, r4, r3
 8000520:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000524:	e739      	b.n	800039a <__udivmoddi4+0xf2>
 8000526:	4604      	mov	r4, r0
 8000528:	e6f0      	b.n	800030c <__udivmoddi4+0x64>
 800052a:	4608      	mov	r0, r1
 800052c:	e706      	b.n	800033c <__udivmoddi4+0x94>
 800052e:	45c8      	cmp	r8, r9
 8000530:	d2ae      	bcs.n	8000490 <__udivmoddi4+0x1e8>
 8000532:	ebb9 0e02 	subs.w	lr, r9, r2
 8000536:	eb63 0c07 	sbc.w	ip, r3, r7
 800053a:	3801      	subs	r0, #1
 800053c:	e7a8      	b.n	8000490 <__udivmoddi4+0x1e8>
 800053e:	4631      	mov	r1, r6
 8000540:	e7ed      	b.n	800051e <__udivmoddi4+0x276>
 8000542:	4603      	mov	r3, r0
 8000544:	e799      	b.n	800047a <__udivmoddi4+0x1d2>
 8000546:	4630      	mov	r0, r6
 8000548:	e7d4      	b.n	80004f4 <__udivmoddi4+0x24c>
 800054a:	46d6      	mov	lr, sl
 800054c:	e77f      	b.n	800044e <__udivmoddi4+0x1a6>
 800054e:	4463      	add	r3, ip
 8000550:	3802      	subs	r0, #2
 8000552:	e74d      	b.n	80003f0 <__udivmoddi4+0x148>
 8000554:	4606      	mov	r6, r0
 8000556:	4623      	mov	r3, r4
 8000558:	4608      	mov	r0, r1
 800055a:	e70f      	b.n	800037c <__udivmoddi4+0xd4>
 800055c:	3e02      	subs	r6, #2
 800055e:	4463      	add	r3, ip
 8000560:	e730      	b.n	80003c4 <__udivmoddi4+0x11c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <_Z12EventLoopCppv>:

//void onButtonChangedHandler(Joy* instance)
//{
//	//CDC_Transmit_FS(buffer, sizeof(buffer));
//}
void EventLoopCpp() {
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0

	// Initialize BMP280 with default parameters
	//bmp280.bmp280_init_default_params(&bmp280.params);
	bmp280.addr = BMP280_I2C_ADDRESS_0; // 0x76 (SDO low), use BMP280_I2C_ADDRESS_1 (0x77) if SDO high
 800056e:	4b1b      	ldr	r3, [pc, #108]	@ (80005dc <_Z12EventLoopCppv+0x74>)
 8000570:	2276      	movs	r2, #118	@ 0x76
 8000572:	849a      	strh	r2, [r3, #36]	@ 0x24
	bmp280.i2c = &hi2c1;
 8000574:	4b19      	ldr	r3, [pc, #100]	@ (80005dc <_Z12EventLoopCppv+0x74>)
 8000576:	4a1a      	ldr	r2, [pc, #104]	@ (80005e0 <_Z12EventLoopCppv+0x78>)
 8000578:	629a      	str	r2, [r3, #40]	@ 0x28

	// Attempt to initialize BMP280
	while (!bmpDevice.bmp280_init()) {
 800057a:	e003      	b.n	8000584 <_Z12EventLoopCppv+0x1c>
	  HAL_Delay(2000);
 800057c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000580:	f001 fe20 	bl	80021c4 <HAL_Delay>
	while (!bmpDevice.bmp280_init()) {
 8000584:	4817      	ldr	r0, [pc, #92]	@ (80005e4 <_Z12EventLoopCppv+0x7c>)
 8000586:	f000 fe3c 	bl	8001202 <_ZN6BMP28011bmp280_initEv>
 800058a:	4603      	mov	r3, r0
 800058c:	f083 0301 	eor.w	r3, r3, #1
 8000590:	b2db      	uxtb	r3, r3
 8000592:	2b00      	cmp	r3, #0
 8000594:	d1f2      	bne.n	800057c <_Z12EventLoopCppv+0x14>
	}

	// Check if BMP280 or BME280 (library supports both)
	bool bme280p = bmp280.id == BME280_CHIP_ID;
 8000596:	4b11      	ldr	r3, [pc, #68]	@ (80005dc <_Z12EventLoopCppv+0x74>)
 8000598:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800059c:	2b60      	cmp	r3, #96	@ 0x60
 800059e:	bf0c      	ite	eq
 80005a0:	2301      	moveq	r3, #1
 80005a2:	2300      	movne	r3, #0
 80005a4:	71fb      	strb	r3, [r7, #7]

	nrfDevice.Init();
 80005a6:	4810      	ldr	r0, [pc, #64]	@ (80005e8 <_Z12EventLoopCppv+0x80>)
 80005a8:	f000 f9d6 	bl	8000958 <_ZN6NRF24L4InitEv>
	nrfDevice.Check();
 80005ac:	480e      	ldr	r0, [pc, #56]	@ (80005e8 <_Z12EventLoopCppv+0x80>)
 80005ae:	f000 fa37 	bl	8000a20 <_ZN6NRF24L5CheckEv>
#ifdef IS_TX
	uint32_t count = 0;
	NRF24L::TXResult tx_res;
	nrfDevice.InitTX();
#else
	nrfDevice.InitRX(nRF24_payload, payload_length);
 80005b2:	4b0e      	ldr	r3, [pc, #56]	@ (80005ec <_Z12EventLoopCppv+0x84>)
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	461a      	mov	r2, r3
 80005b8:	490d      	ldr	r1, [pc, #52]	@ (80005f0 <_Z12EventLoopCppv+0x88>)
 80005ba:	480b      	ldr	r0, [pc, #44]	@ (80005e8 <_Z12EventLoopCppv+0x80>)
 80005bc:	f000 fc16 	bl	8000dec <_ZN6NRF24L6InitRXEPhh>
#endif

	HAL_Delay(100);
 80005c0:	2064      	movs	r0, #100	@ 0x64
 80005c2:	f001 fdff 	bl	80021c4 <HAL_Delay>
	while (1) {
		  // Read temperature and pressure
		    if (!bmpDevice.bmp280_read_float(&temperature, &pressure, &humidity)) {
 80005c6:	4b0b      	ldr	r3, [pc, #44]	@ (80005f4 <_Z12EventLoopCppv+0x8c>)
 80005c8:	4a0b      	ldr	r2, [pc, #44]	@ (80005f8 <_Z12EventLoopCppv+0x90>)
 80005ca:	490c      	ldr	r1, [pc, #48]	@ (80005fc <_Z12EventLoopCppv+0x94>)
 80005cc:	4805      	ldr	r0, [pc, #20]	@ (80005e4 <_Z12EventLoopCppv+0x7c>)
 80005ce:	f001 fad3 	bl	8001b78 <_ZN6BMP28017bmp280_read_floatEPfS0_S0_>
		    	// success
		    } else {
		    	// fail to read
		    }

		    HAL_Delay(2000); // Read every 2 seconds
 80005d2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80005d6:	f001 fdf5 	bl	80021c4 <HAL_Delay>
		    if (!bmpDevice.bmp280_read_float(&temperature, &pressure, &humidity)) {
 80005da:	e7f4      	b.n	80005c6 <_Z12EventLoopCppv+0x5e>
 80005dc:	2000007c 	.word	0x2000007c
 80005e0:	20000104 	.word	0x20000104
 80005e4:	200000b0 	.word	0x200000b0
 80005e8:	200000c0 	.word	0x200000c0
 80005ec:	20000000 	.word	0x20000000
 80005f0:	200000e4 	.word	0x200000e4
 80005f4:	200000bc 	.word	0x200000bc
 80005f8:	200000b4 	.word	0x200000b4
 80005fc:	200000b8 	.word	0x200000b8

08000600 <EventLoopC>:
	}
}

// Define all C function calls from main.c below
extern "C" {
void EventLoopC() {
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
	EventLoopCpp();
 8000604:	f7ff ffb0 	bl	8000568 <_Z12EventLoopCppv>
}
 8000608:	bf00      	nop
 800060a:	bd80      	pop	{r7, pc}

0800060c <_Z41__static_initialization_and_destruction_0ii>:
}
 800060c:	b580      	push	{r7, lr}
 800060e:	b084      	sub	sp, #16
 8000610:	af02      	add	r7, sp, #8
 8000612:	6078      	str	r0, [r7, #4]
 8000614:	6039      	str	r1, [r7, #0]
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	2b01      	cmp	r3, #1
 800061a:	d114      	bne.n	8000646 <_Z41__static_initialization_and_destruction_0ii+0x3a>
 800061c:	683b      	ldr	r3, [r7, #0]
 800061e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000622:	4293      	cmp	r3, r2
 8000624:	d10f      	bne.n	8000646 <_Z41__static_initialization_and_destruction_0ii+0x3a>
BMP280 bmpDevice = BMP280(&bmp280);
 8000626:	4911      	ldr	r1, [pc, #68]	@ (800066c <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8000628:	4811      	ldr	r0, [pc, #68]	@ (8000670 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 800062a:	f000 fc17 	bl	8000e5c <_ZN6BMP280C1EPNS_20BMP280_HandleTypedefE>
NRF24L nrfDevice = NRF24L(&hspi2, NRF_CE_GPIO_Port, NRF_CE_Pin, NRF_CSN_GPIO_Port, NRF_CSN_Pin);
 800062e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000632:	9301      	str	r3, [sp, #4]
 8000634:	4b0f      	ldr	r3, [pc, #60]	@ (8000674 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8000636:	9300      	str	r3, [sp, #0]
 8000638:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800063c:	4a0d      	ldr	r2, [pc, #52]	@ (8000674 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 800063e:	490e      	ldr	r1, [pc, #56]	@ (8000678 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8000640:	480e      	ldr	r0, [pc, #56]	@ (800067c <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8000642:	f000 f82d 	bl	80006a0 <_ZN6NRF24LC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_t>
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	2b00      	cmp	r3, #0
 800064a:	d10a      	bne.n	8000662 <_Z41__static_initialization_and_destruction_0ii+0x56>
 800064c:	683b      	ldr	r3, [r7, #0]
 800064e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000652:	4293      	cmp	r3, r2
 8000654:	d105      	bne.n	8000662 <_Z41__static_initialization_and_destruction_0ii+0x56>
 8000656:	4809      	ldr	r0, [pc, #36]	@ (800067c <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8000658:	f000 f85a 	bl	8000710 <_ZN6NRF24LD1Ev>
BMP280 bmpDevice = BMP280(&bmp280);
 800065c:	4804      	ldr	r0, [pc, #16]	@ (8000670 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 800065e:	f000 fc0d 	bl	8000e7c <_ZN6BMP280D1Ev>
}
 8000662:	bf00      	nop
 8000664:	3708      	adds	r7, #8
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	2000007c 	.word	0x2000007c
 8000670:	200000b0 	.word	0x200000b0
 8000674:	40020400 	.word	0x40020400
 8000678:	20000158 	.word	0x20000158
 800067c:	200000c0 	.word	0x200000c0

08000680 <_GLOBAL__sub_I_bmp280>:
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
 8000684:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000688:	2001      	movs	r0, #1
 800068a:	f7ff ffbf 	bl	800060c <_Z41__static_initialization_and_destruction_0ii>
 800068e:	bd80      	pop	{r7, pc}

08000690 <_GLOBAL__sub_D_bmp280>:
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
 8000694:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000698:	2000      	movs	r0, #0
 800069a:	f7ff ffb7 	bl	800060c <_Z41__static_initialization_and_destruction_0ii>
 800069e:	bd80      	pop	{r7, pc}

080006a0 <_ZN6NRF24LC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_t>:

// Functions to manage the nRF24L01+ transceiver

#define nRF24_WAIT_TIMEOUT         (uint32_t)100;//0x000FFFFF

NRF24L::NRF24L(SPI_HandleTypeDef *spi, GPIO_TypeDef* CEPort, uint16_t CEPin, GPIO_TypeDef* CSNPort, uint16_t CSNPin):
 80006a0:	b480      	push	{r7}
 80006a2:	b085      	sub	sp, #20
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	60f8      	str	r0, [r7, #12]
 80006a8:	60b9      	str	r1, [r7, #8]
 80006aa:	607a      	str	r2, [r7, #4]
 80006ac:	807b      	strh	r3, [r7, #2]
				_spi(spi),
				_CEPort(CEPort),
				_CEPin(CEPin),
				_CSNPort(CSNPort),
				_CSNPin(CSNPin)
 80006ae:	4a15      	ldr	r2, [pc, #84]	@ (8000704 <_ZN6NRF24LC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_t+0x64>)
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	601a      	str	r2, [r3, #0]
				_spi(spi),
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	68ba      	ldr	r2, [r7, #8]
 80006b8:	605a      	str	r2, [r3, #4]
				_CEPort(CEPort),
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	687a      	ldr	r2, [r7, #4]
 80006be:	609a      	str	r2, [r3, #8]
				_CEPin(CEPin),
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	887a      	ldrh	r2, [r7, #2]
 80006c4:	819a      	strh	r2, [r3, #12]
				_CSNPort(CSNPort),
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	69ba      	ldr	r2, [r7, #24]
 80006ca:	611a      	str	r2, [r3, #16]
				_CSNPin(CSNPin)
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	8bba      	ldrh	r2, [r7, #28]
 80006d0:	829a      	strh	r2, [r3, #20]
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	4a0c      	ldr	r2, [pc, #48]	@ (8000708 <_ZN6NRF24LC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_t+0x68>)
 80006d6:	3316      	adds	r3, #22
 80006d8:	6810      	ldr	r0, [r2, #0]
 80006da:	6018      	str	r0, [r3, #0]
 80006dc:	8892      	ldrh	r2, [r2, #4]
 80006de:	809a      	strh	r2, [r3, #4]
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	4a0a      	ldr	r2, [pc, #40]	@ (800070c <_ZN6NRF24LC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_t+0x6c>)
 80006e4:	331c      	adds	r3, #28
 80006e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006ea:	6018      	str	r0, [r3, #0]
 80006ec:	3304      	adds	r3, #4
 80006ee:	8019      	strh	r1, [r3, #0]
 80006f0:	3302      	adds	r3, #2
 80006f2:	0c0a      	lsrs	r2, r1, #16
 80006f4:	701a      	strb	r2, [r3, #0]
{}
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	4618      	mov	r0, r3
 80006fa:	3714      	adds	r7, #20
 80006fc:	46bd      	mov	sp, r7
 80006fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000702:	4770      	bx	lr
 8000704:	0800475c 	.word	0x0800475c
 8000708:	08004738 	.word	0x08004738
 800070c:	08004740 	.word	0x08004740

08000710 <_ZN6NRF24LD1Ev>:

NRF24L::~NRF24L(){}
 8000710:	b480      	push	{r7}
 8000712:	b083      	sub	sp, #12
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
 8000718:	4a04      	ldr	r2, [pc, #16]	@ (800072c <_ZN6NRF24LD1Ev+0x1c>)
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	601a      	str	r2, [r3, #0]
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	4618      	mov	r0, r3
 8000722:	370c      	adds	r7, #12
 8000724:	46bd      	mov	sp, r7
 8000726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072a:	4770      	bx	lr
 800072c:	0800475c 	.word	0x0800475c

08000730 <_ZN6NRF24LD0Ev>:
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
 8000738:	6878      	ldr	r0, [r7, #4]
 800073a:	f7ff ffe9 	bl	8000710 <_ZN6NRF24LD1Ev>
 800073e:	2124      	movs	r1, #36	@ 0x24
 8000740:	6878      	ldr	r0, [r7, #4]
 8000742:	f003 ff5d 	bl	8004600 <_ZdlPvj>
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	4618      	mov	r0, r3
 800074a:	3708      	adds	r7, #8
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}

08000750 <_ZN6NRF24L10nRF24_CE_HEv>:

void NRF24L::nRF24_CE_L() {
    HAL_GPIO_WritePin(_CEPort, _CEPin, GPIO_PIN_RESET);
}

void NRF24L::nRF24_CE_H() {
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(_CEPort, _CEPin, GPIO_PIN_SET);
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	6898      	ldr	r0, [r3, #8]
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	899b      	ldrh	r3, [r3, #12]
 8000760:	2201      	movs	r2, #1
 8000762:	4619      	mov	r1, r3
 8000764:	f001 ffbc 	bl	80026e0 <HAL_GPIO_WritePin>
}
 8000768:	bf00      	nop
 800076a:	3708      	adds	r7, #8
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}

08000770 <_ZN6NRF24L11nRF24_CSN_LEv>:

void NRF24L::nRF24_CSN_L() {
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(_CSNPort, _CSNPin, GPIO_PIN_RESET);
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	6918      	ldr	r0, [r3, #16]
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	8a9b      	ldrh	r3, [r3, #20]
 8000780:	2200      	movs	r2, #0
 8000782:	4619      	mov	r1, r3
 8000784:	f001 ffac 	bl	80026e0 <HAL_GPIO_WritePin>
}
 8000788:	bf00      	nop
 800078a:	3708      	adds	r7, #8
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}

08000790 <_ZN6NRF24L11nRF24_CSN_HEv>:

void NRF24L::nRF24_CSN_H() {
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(_CSNPort, _CSNPin, GPIO_PIN_SET);
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	6918      	ldr	r0, [r3, #16]
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	8a9b      	ldrh	r3, [r3, #20]
 80007a0:	2201      	movs	r2, #1
 80007a2:	4619      	mov	r1, r3
 80007a4:	f001 ff9c 	bl	80026e0 <HAL_GPIO_WritePin>
}
 80007a8:	bf00      	nop
 80007aa:	3708      	adds	r7, #8
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}

080007b0 <_ZN6NRF24L11nRF24_LL_RWEh>:

uint8_t NRF24L::nRF24_LL_RW(uint8_t data) {
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b086      	sub	sp, #24
 80007b4:	af02      	add	r7, sp, #8
 80007b6:	6078      	str	r0, [r7, #4]
 80007b8:	460b      	mov	r3, r1
 80007ba:	70fb      	strb	r3, [r7, #3]
    // Wait until TX buffer is empty
    uint8_t result;
    if(HAL_SPI_TransmitReceive(_spi, &data, &result, 1, 2000)!=HAL_OK) {
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	6858      	ldr	r0, [r3, #4]
 80007c0:	f107 020f 	add.w	r2, r7, #15
 80007c4:	1cf9      	adds	r1, r7, #3
 80007c6:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80007ca:	9300      	str	r3, [sp, #0]
 80007cc:	2301      	movs	r3, #1
 80007ce:	f003 fc92 	bl	80040f6 <HAL_SPI_TransmitReceive>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	bf14      	ite	ne
 80007d8:	2301      	movne	r3, #1
 80007da:	2300      	moveq	r3, #0
 80007dc:	b2db      	uxtb	r3, r3
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <_ZN6NRF24L11nRF24_LL_RWEh+0x36>
        Error_Handler();
 80007e2:	f001 fb65 	bl	8001eb0 <Error_Handler>
    };
    return result;
 80007e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80007e8:	4618      	mov	r0, r3
 80007ea:	3710      	adds	r7, #16
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}

080007f0 <_ZN6NRF24L7ReadRegEh>:

// Read a register
// input:
//   reg - number of register to read
// return: value of register
uint8_t NRF24L::ReadReg(uint8_t reg) {
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b084      	sub	sp, #16
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
 80007f8:	460b      	mov	r3, r1
 80007fa:	70fb      	strb	r3, [r7, #3]
	uint8_t value;

	nRF24_CSN_L();
 80007fc:	6878      	ldr	r0, [r7, #4]
 80007fe:	f7ff ffb7 	bl	8000770 <_ZN6NRF24L11nRF24_CSN_LEv>
	nRF24_LL_RW(reg & nRF24_MASK_REG_MAP);
 8000802:	78fb      	ldrb	r3, [r7, #3]
 8000804:	f003 031f 	and.w	r3, r3, #31
 8000808:	b2db      	uxtb	r3, r3
 800080a:	4619      	mov	r1, r3
 800080c:	6878      	ldr	r0, [r7, #4]
 800080e:	f7ff ffcf 	bl	80007b0 <_ZN6NRF24L11nRF24_LL_RWEh>
	value = nRF24_LL_RW(nRF24_CMD_NOP);
 8000812:	21ff      	movs	r1, #255	@ 0xff
 8000814:	6878      	ldr	r0, [r7, #4]
 8000816:	f7ff ffcb 	bl	80007b0 <_ZN6NRF24L11nRF24_LL_RWEh>
 800081a:	4603      	mov	r3, r0
 800081c:	73fb      	strb	r3, [r7, #15]
	nRF24_CSN_H();
 800081e:	6878      	ldr	r0, [r7, #4]
 8000820:	f7ff ffb6 	bl	8000790 <_ZN6NRF24L11nRF24_CSN_HEv>

	return value;
 8000824:	7bfb      	ldrb	r3, [r7, #15]
}
 8000826:	4618      	mov	r0, r3
 8000828:	3710      	adds	r7, #16
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}

0800082e <_ZN6NRF24L8WriteRegEhh>:

// Write a new value to register
// input:
//   reg - number of register to write
//   value - value to write
void NRF24L::WriteReg(uint8_t reg, uint8_t value) {
 800082e:	b580      	push	{r7, lr}
 8000830:	b082      	sub	sp, #8
 8000832:	af00      	add	r7, sp, #0
 8000834:	6078      	str	r0, [r7, #4]
 8000836:	460b      	mov	r3, r1
 8000838:	70fb      	strb	r3, [r7, #3]
 800083a:	4613      	mov	r3, r2
 800083c:	70bb      	strb	r3, [r7, #2]
	nRF24_CSN_L();
 800083e:	6878      	ldr	r0, [r7, #4]
 8000840:	f7ff ff96 	bl	8000770 <_ZN6NRF24L11nRF24_CSN_LEv>
	if (reg < nRF24_CMD_W_REGISTER) {
 8000844:	78fb      	ldrb	r3, [r7, #3]
 8000846:	2b1f      	cmp	r3, #31
 8000848:	d810      	bhi.n	800086c <_ZN6NRF24L8WriteRegEhh+0x3e>
		// This is a register access
		nRF24_LL_RW(nRF24_CMD_W_REGISTER | (reg & nRF24_MASK_REG_MAP ));
 800084a:	78fb      	ldrb	r3, [r7, #3]
 800084c:	f003 031f 	and.w	r3, r3, #31
 8000850:	b2db      	uxtb	r3, r3
 8000852:	f043 0320 	orr.w	r3, r3, #32
 8000856:	b2db      	uxtb	r3, r3
 8000858:	4619      	mov	r1, r3
 800085a:	6878      	ldr	r0, [r7, #4]
 800085c:	f7ff ffa8 	bl	80007b0 <_ZN6NRF24L11nRF24_LL_RWEh>
		nRF24_LL_RW(value);
 8000860:	78bb      	ldrb	r3, [r7, #2]
 8000862:	4619      	mov	r1, r3
 8000864:	6878      	ldr	r0, [r7, #4]
 8000866:	f7ff ffa3 	bl	80007b0 <_ZN6NRF24L11nRF24_LL_RWEh>
 800086a:	e015      	b.n	8000898 <_ZN6NRF24L8WriteRegEhh+0x6a>
	} else {
		// This is a single byte command or future command/register
		nRF24_LL_RW(reg);
 800086c:	78fb      	ldrb	r3, [r7, #3]
 800086e:	4619      	mov	r1, r3
 8000870:	6878      	ldr	r0, [r7, #4]
 8000872:	f7ff ff9d 	bl	80007b0 <_ZN6NRF24L11nRF24_LL_RWEh>
		if ((reg != nRF24_CMD_FLUSH_TX ) && (reg != nRF24_CMD_FLUSH_RX )
 8000876:	78fb      	ldrb	r3, [r7, #3]
 8000878:	2be1      	cmp	r3, #225	@ 0xe1
 800087a:	d00d      	beq.n	8000898 <_ZN6NRF24L8WriteRegEhh+0x6a>
 800087c:	78fb      	ldrb	r3, [r7, #3]
 800087e:	2be2      	cmp	r3, #226	@ 0xe2
 8000880:	d00a      	beq.n	8000898 <_ZN6NRF24L8WriteRegEhh+0x6a>
				&& (reg != nRF24_CMD_REUSE_TX_PL ) && (reg != nRF24_CMD_NOP )) {
 8000882:	78fb      	ldrb	r3, [r7, #3]
 8000884:	2be3      	cmp	r3, #227	@ 0xe3
 8000886:	d007      	beq.n	8000898 <_ZN6NRF24L8WriteRegEhh+0x6a>
 8000888:	78fb      	ldrb	r3, [r7, #3]
 800088a:	2bff      	cmp	r3, #255	@ 0xff
 800088c:	d004      	beq.n	8000898 <_ZN6NRF24L8WriteRegEhh+0x6a>
			// Send register value
			nRF24_LL_RW(value);
 800088e:	78bb      	ldrb	r3, [r7, #2]
 8000890:	4619      	mov	r1, r3
 8000892:	6878      	ldr	r0, [r7, #4]
 8000894:	f7ff ff8c 	bl	80007b0 <_ZN6NRF24L11nRF24_LL_RWEh>
		}
	}
	nRF24_CSN_H();
 8000898:	6878      	ldr	r0, [r7, #4]
 800089a:	f7ff ff79 	bl	8000790 <_ZN6NRF24L11nRF24_CSN_HEv>
}
 800089e:	bf00      	nop
 80008a0:	3708      	adds	r7, #8
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}

080008a6 <_ZN6NRF24L9ReadMBRegEhPhh>:
// Read a multi-byte register
// input:
//   reg - number of register to read
//   pBuf - pointer to the buffer for register data
//   count - number of bytes to read
void NRF24L::ReadMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count) {
 80008a6:	b590      	push	{r4, r7, lr}
 80008a8:	b085      	sub	sp, #20
 80008aa:	af00      	add	r7, sp, #0
 80008ac:	60f8      	str	r0, [r7, #12]
 80008ae:	607a      	str	r2, [r7, #4]
 80008b0:	461a      	mov	r2, r3
 80008b2:	460b      	mov	r3, r1
 80008b4:	72fb      	strb	r3, [r7, #11]
 80008b6:	4613      	mov	r3, r2
 80008b8:	72bb      	strb	r3, [r7, #10]
	nRF24_CSN_L();
 80008ba:	68f8      	ldr	r0, [r7, #12]
 80008bc:	f7ff ff58 	bl	8000770 <_ZN6NRF24L11nRF24_CSN_LEv>
	nRF24_LL_RW(reg);
 80008c0:	7afb      	ldrb	r3, [r7, #11]
 80008c2:	4619      	mov	r1, r3
 80008c4:	68f8      	ldr	r0, [r7, #12]
 80008c6:	f7ff ff73 	bl	80007b0 <_ZN6NRF24L11nRF24_LL_RWEh>
	while (count--) {
 80008ca:	e008      	b.n	80008de <_ZN6NRF24L9ReadMBRegEhPhh+0x38>
		*pBuf++ = nRF24_LL_RW(nRF24_CMD_NOP);
 80008cc:	687c      	ldr	r4, [r7, #4]
 80008ce:	1c63      	adds	r3, r4, #1
 80008d0:	607b      	str	r3, [r7, #4]
 80008d2:	21ff      	movs	r1, #255	@ 0xff
 80008d4:	68f8      	ldr	r0, [r7, #12]
 80008d6:	f7ff ff6b 	bl	80007b0 <_ZN6NRF24L11nRF24_LL_RWEh>
 80008da:	4603      	mov	r3, r0
 80008dc:	7023      	strb	r3, [r4, #0]
	while (count--) {
 80008de:	7abb      	ldrb	r3, [r7, #10]
 80008e0:	1e5a      	subs	r2, r3, #1
 80008e2:	72ba      	strb	r2, [r7, #10]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	bf14      	ite	ne
 80008e8:	2301      	movne	r3, #1
 80008ea:	2300      	moveq	r3, #0
 80008ec:	b2db      	uxtb	r3, r3
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d1ec      	bne.n	80008cc <_ZN6NRF24L9ReadMBRegEhPhh+0x26>
	}
	nRF24_CSN_H();
 80008f2:	68f8      	ldr	r0, [r7, #12]
 80008f4:	f7ff ff4c 	bl	8000790 <_ZN6NRF24L11nRF24_CSN_HEv>
}
 80008f8:	bf00      	nop
 80008fa:	3714      	adds	r7, #20
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd90      	pop	{r4, r7, pc}

08000900 <_ZN6NRF24L10WriteMBRegEhPhh>:
// Write a multi-byte register
// input:
//   reg - number of register to write
//   pBuf - pointer to the buffer with data to write
//   count - number of bytes to write
void NRF24L::WriteMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count) {
 8000900:	b580      	push	{r7, lr}
 8000902:	b084      	sub	sp, #16
 8000904:	af00      	add	r7, sp, #0
 8000906:	60f8      	str	r0, [r7, #12]
 8000908:	607a      	str	r2, [r7, #4]
 800090a:	461a      	mov	r2, r3
 800090c:	460b      	mov	r3, r1
 800090e:	72fb      	strb	r3, [r7, #11]
 8000910:	4613      	mov	r3, r2
 8000912:	72bb      	strb	r3, [r7, #10]
	nRF24_CSN_L();
 8000914:	68f8      	ldr	r0, [r7, #12]
 8000916:	f7ff ff2b 	bl	8000770 <_ZN6NRF24L11nRF24_CSN_LEv>
	nRF24_LL_RW(reg);
 800091a:	7afb      	ldrb	r3, [r7, #11]
 800091c:	4619      	mov	r1, r3
 800091e:	68f8      	ldr	r0, [r7, #12]
 8000920:	f7ff ff46 	bl	80007b0 <_ZN6NRF24L11nRF24_LL_RWEh>
	while (count--) {
 8000924:	e007      	b.n	8000936 <_ZN6NRF24L10WriteMBRegEhPhh+0x36>
		nRF24_LL_RW(*pBuf++);
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	1c5a      	adds	r2, r3, #1
 800092a:	607a      	str	r2, [r7, #4]
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	4619      	mov	r1, r3
 8000930:	68f8      	ldr	r0, [r7, #12]
 8000932:	f7ff ff3d 	bl	80007b0 <_ZN6NRF24L11nRF24_LL_RWEh>
	while (count--) {
 8000936:	7abb      	ldrb	r3, [r7, #10]
 8000938:	1e5a      	subs	r2, r3, #1
 800093a:	72ba      	strb	r2, [r7, #10]
 800093c:	2b00      	cmp	r3, #0
 800093e:	bf14      	ite	ne
 8000940:	2301      	movne	r3, #1
 8000942:	2300      	moveq	r3, #0
 8000944:	b2db      	uxtb	r3, r3
 8000946:	2b00      	cmp	r3, #0
 8000948:	d1ed      	bne.n	8000926 <_ZN6NRF24L10WriteMBRegEhPhh+0x26>
	}
	nRF24_CSN_H();
 800094a:	68f8      	ldr	r0, [r7, #12]
 800094c:	f7ff ff20 	bl	8000790 <_ZN6NRF24L11nRF24_CSN_HEv>
}
 8000950:	bf00      	nop
 8000952:	3710      	adds	r7, #16
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}

08000958 <_ZN6NRF24L4InitEv>:

// Set transceiver to it's initial state
// note: RX/TX pipe addresses remains untouched
void NRF24L::Init(void) {
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
	// Write to registers their initial values
	WriteReg(nRF24_REG_CONFIG, 0x08);
 8000960:	2208      	movs	r2, #8
 8000962:	2100      	movs	r1, #0
 8000964:	6878      	ldr	r0, [r7, #4]
 8000966:	f7ff ff62 	bl	800082e <_ZN6NRF24L8WriteRegEhh>
	WriteReg(nRF24_REG_EN_AA, 0x3F);
 800096a:	223f      	movs	r2, #63	@ 0x3f
 800096c:	2101      	movs	r1, #1
 800096e:	6878      	ldr	r0, [r7, #4]
 8000970:	f7ff ff5d 	bl	800082e <_ZN6NRF24L8WriteRegEhh>
	WriteReg(nRF24_REG_EN_RXADDR, 0x03);
 8000974:	2203      	movs	r2, #3
 8000976:	2102      	movs	r1, #2
 8000978:	6878      	ldr	r0, [r7, #4]
 800097a:	f7ff ff58 	bl	800082e <_ZN6NRF24L8WriteRegEhh>
	WriteReg(nRF24_REG_SETUP_AW, 0x03);
 800097e:	2203      	movs	r2, #3
 8000980:	2103      	movs	r1, #3
 8000982:	6878      	ldr	r0, [r7, #4]
 8000984:	f7ff ff53 	bl	800082e <_ZN6NRF24L8WriteRegEhh>
	WriteReg(nRF24_REG_SETUP_RETR, 0x03);
 8000988:	2203      	movs	r2, #3
 800098a:	2104      	movs	r1, #4
 800098c:	6878      	ldr	r0, [r7, #4]
 800098e:	f7ff ff4e 	bl	800082e <_ZN6NRF24L8WriteRegEhh>
	WriteReg(nRF24_REG_RF_CH, 0x02);
 8000992:	2202      	movs	r2, #2
 8000994:	2105      	movs	r1, #5
 8000996:	6878      	ldr	r0, [r7, #4]
 8000998:	f7ff ff49 	bl	800082e <_ZN6NRF24L8WriteRegEhh>
	WriteReg(nRF24_REG_RF_SETUP, 0x0E);
 800099c:	220e      	movs	r2, #14
 800099e:	2106      	movs	r1, #6
 80009a0:	6878      	ldr	r0, [r7, #4]
 80009a2:	f7ff ff44 	bl	800082e <_ZN6NRF24L8WriteRegEhh>
	WriteReg(nRF24_REG_STATUS, 0x00);
 80009a6:	2200      	movs	r2, #0
 80009a8:	2107      	movs	r1, #7
 80009aa:	6878      	ldr	r0, [r7, #4]
 80009ac:	f7ff ff3f 	bl	800082e <_ZN6NRF24L8WriteRegEhh>
	WriteReg(nRF24_REG_RX_PW_P0, 0x00);
 80009b0:	2200      	movs	r2, #0
 80009b2:	2111      	movs	r1, #17
 80009b4:	6878      	ldr	r0, [r7, #4]
 80009b6:	f7ff ff3a 	bl	800082e <_ZN6NRF24L8WriteRegEhh>
	WriteReg(nRF24_REG_RX_PW_P1, 0x00);
 80009ba:	2200      	movs	r2, #0
 80009bc:	2112      	movs	r1, #18
 80009be:	6878      	ldr	r0, [r7, #4]
 80009c0:	f7ff ff35 	bl	800082e <_ZN6NRF24L8WriteRegEhh>
	WriteReg(nRF24_REG_RX_PW_P2, 0x00);
 80009c4:	2200      	movs	r2, #0
 80009c6:	2113      	movs	r1, #19
 80009c8:	6878      	ldr	r0, [r7, #4]
 80009ca:	f7ff ff30 	bl	800082e <_ZN6NRF24L8WriteRegEhh>
	WriteReg(nRF24_REG_RX_PW_P3, 0x00);
 80009ce:	2200      	movs	r2, #0
 80009d0:	2114      	movs	r1, #20
 80009d2:	6878      	ldr	r0, [r7, #4]
 80009d4:	f7ff ff2b 	bl	800082e <_ZN6NRF24L8WriteRegEhh>
	WriteReg(nRF24_REG_RX_PW_P4, 0x00);
 80009d8:	2200      	movs	r2, #0
 80009da:	2115      	movs	r1, #21
 80009dc:	6878      	ldr	r0, [r7, #4]
 80009de:	f7ff ff26 	bl	800082e <_ZN6NRF24L8WriteRegEhh>
	WriteReg(nRF24_REG_RX_PW_P5, 0x00);
 80009e2:	2200      	movs	r2, #0
 80009e4:	2116      	movs	r1, #22
 80009e6:	6878      	ldr	r0, [r7, #4]
 80009e8:	f7ff ff21 	bl	800082e <_ZN6NRF24L8WriteRegEhh>
	WriteReg(nRF24_REG_DYNPD, 0x00);
 80009ec:	2200      	movs	r2, #0
 80009ee:	211c      	movs	r1, #28
 80009f0:	6878      	ldr	r0, [r7, #4]
 80009f2:	f7ff ff1c 	bl	800082e <_ZN6NRF24L8WriteRegEhh>
	WriteReg(nRF24_REG_FEATURE, 0x00);
 80009f6:	2200      	movs	r2, #0
 80009f8:	211d      	movs	r1, #29
 80009fa:	6878      	ldr	r0, [r7, #4]
 80009fc:	f7ff ff17 	bl	800082e <_ZN6NRF24L8WriteRegEhh>

	// Clear the FIFO's
	FlushRX();
 8000a00:	6878      	ldr	r0, [r7, #4]
 8000a02:	f000 f9cd 	bl	8000da0 <_ZN6NRF24L7FlushRXEv>
	FlushTX();
 8000a06:	6878      	ldr	r0, [r7, #4]
 8000a08:	f000 f9bd 	bl	8000d86 <_ZN6NRF24L7FlushTXEv>

	// Clear any pending interrupt flags
	ClearIRQFlags();
 8000a0c:	6878      	ldr	r0, [r7, #4]
 8000a0e:	f000 f9d4 	bl	8000dba <_ZN6NRF24L13ClearIRQFlagsEv>

	// Deassert CSN pin (chip release)
	nRF24_CSN_H();
 8000a12:	6878      	ldr	r0, [r7, #4]
 8000a14:	f7ff febc 	bl	8000790 <_ZN6NRF24L11nRF24_CSN_HEv>
}
 8000a18:	bf00      	nop
 8000a1a:	3708      	adds	r7, #8
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}

08000a20 <_ZN6NRF24L5CheckEv>:

// Check if the nRF24L01 present
// return:
//   1 - nRF24L01 is online and responding
//   0 - received sequence differs from original
uint8_t NRF24L::Check(void) {
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b086      	sub	sp, #24
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
	uint8_t rxbuf[5];
	uint8_t i;
	uint8_t *ptr = (uint8_t*) nRF24_TEST_ADDR;
 8000a28:	4b17      	ldr	r3, [pc, #92]	@ (8000a88 <_ZN6NRF24L5CheckEv+0x68>)
 8000a2a:	613b      	str	r3, [r7, #16]

	// Write test TX address and read TX_ADDR register
	WriteMBReg(nRF24_CMD_W_REGISTER | nRF24_REG_TX_ADDR, ptr, 5);
 8000a2c:	2305      	movs	r3, #5
 8000a2e:	693a      	ldr	r2, [r7, #16]
 8000a30:	2130      	movs	r1, #48	@ 0x30
 8000a32:	6878      	ldr	r0, [r7, #4]
 8000a34:	f7ff ff64 	bl	8000900 <_ZN6NRF24L10WriteMBRegEhPhh>
	ReadMBReg(nRF24_CMD_R_REGISTER | nRF24_REG_TX_ADDR, rxbuf, 5);
 8000a38:	f107 0208 	add.w	r2, r7, #8
 8000a3c:	2305      	movs	r3, #5
 8000a3e:	2110      	movs	r1, #16
 8000a40:	6878      	ldr	r0, [r7, #4]
 8000a42:	f7ff ff30 	bl	80008a6 <_ZN6NRF24L9ReadMBRegEhPhh>

	// Compare buffers, return error on first mismatch
	for (i = 0; i < 5; i++) {
 8000a46:	2300      	movs	r3, #0
 8000a48:	75fb      	strb	r3, [r7, #23]
 8000a4a:	e014      	b.n	8000a76 <_ZN6NRF24L5CheckEv+0x56>
		if (rxbuf[i] != *ptr++)
 8000a4c:	7dfb      	ldrb	r3, [r7, #23]
 8000a4e:	3318      	adds	r3, #24
 8000a50:	443b      	add	r3, r7
 8000a52:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8000a56:	693b      	ldr	r3, [r7, #16]
 8000a58:	1c59      	adds	r1, r3, #1
 8000a5a:	6139      	str	r1, [r7, #16]
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	429a      	cmp	r2, r3
 8000a60:	bf14      	ite	ne
 8000a62:	2301      	movne	r3, #1
 8000a64:	2300      	moveq	r3, #0
 8000a66:	b2db      	uxtb	r3, r3
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <_ZN6NRF24L5CheckEv+0x50>
			return 0;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	e006      	b.n	8000a7e <_ZN6NRF24L5CheckEv+0x5e>
	for (i = 0; i < 5; i++) {
 8000a70:	7dfb      	ldrb	r3, [r7, #23]
 8000a72:	3301      	adds	r3, #1
 8000a74:	75fb      	strb	r3, [r7, #23]
 8000a76:	7dfb      	ldrb	r3, [r7, #23]
 8000a78:	2b04      	cmp	r3, #4
 8000a7a:	d9e7      	bls.n	8000a4c <_ZN6NRF24L5CheckEv+0x2c>
	}

	return 1;
 8000a7c:	2301      	movs	r3, #1
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	3718      	adds	r7, #24
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	08004748 	.word	0x08004748

08000a8c <_ZN6NRF24L12SetPowerModeEh>:

// Control transceiver power mode
// input:
//   mode - new state of power mode, one of nRF24_PWR_xx values
void NRF24L::SetPowerMode(uint8_t mode) {
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b084      	sub	sp, #16
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
 8000a94:	460b      	mov	r3, r1
 8000a96:	70fb      	strb	r3, [r7, #3]
	uint8_t reg;

	reg = ReadReg(nRF24_REG_CONFIG);
 8000a98:	2100      	movs	r1, #0
 8000a9a:	6878      	ldr	r0, [r7, #4]
 8000a9c:	f7ff fea8 	bl	80007f0 <_ZN6NRF24L7ReadRegEh>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	73fb      	strb	r3, [r7, #15]
	if (mode == nRF24_PWR_UP) {
 8000aa4:	78fb      	ldrb	r3, [r7, #3]
 8000aa6:	2b02      	cmp	r3, #2
 8000aa8:	d104      	bne.n	8000ab4 <_ZN6NRF24L12SetPowerModeEh+0x28>
		// Set the PWR_UP bit of CONFIG register to wake the transceiver
		// It goes into Stanby-I mode with consumption about 26uA
		reg |= nRF24_CONFIG_PWR_UP;
 8000aaa:	7bfb      	ldrb	r3, [r7, #15]
 8000aac:	f043 0302 	orr.w	r3, r3, #2
 8000ab0:	73fb      	strb	r3, [r7, #15]
 8000ab2:	e003      	b.n	8000abc <_ZN6NRF24L12SetPowerModeEh+0x30>
	} else {
		// Clear the PWR_UP bit of CONFIG register to put the transceiver
		// into power down mode with consumption about 900nA
		reg &= ~nRF24_CONFIG_PWR_UP;
 8000ab4:	7bfb      	ldrb	r3, [r7, #15]
 8000ab6:	f023 0302 	bic.w	r3, r3, #2
 8000aba:	73fb      	strb	r3, [r7, #15]
	}
	WriteReg(nRF24_REG_CONFIG, reg);
 8000abc:	7bfb      	ldrb	r3, [r7, #15]
 8000abe:	461a      	mov	r2, r3
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	6878      	ldr	r0, [r7, #4]
 8000ac4:	f7ff feb3 	bl	800082e <_ZN6NRF24L8WriteRegEhh>
}
 8000ac8:	bf00      	nop
 8000aca:	3710      	adds	r7, #16
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}

08000ad0 <_ZN6NRF24L18SetOperationalModeEh>:

// Set transceiver operational mode
// input:
//   mode - operational mode, one of nRF24_MODE_xx values
void NRF24L::SetOperationalMode(uint8_t mode) {
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b084      	sub	sp, #16
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
 8000ad8:	460b      	mov	r3, r1
 8000ada:	70fb      	strb	r3, [r7, #3]
	uint8_t reg;

	// Configure PRIM_RX bit of the CONFIG register
	reg = ReadReg(nRF24_REG_CONFIG);
 8000adc:	2100      	movs	r1, #0
 8000ade:	6878      	ldr	r0, [r7, #4]
 8000ae0:	f7ff fe86 	bl	80007f0 <_ZN6NRF24L7ReadRegEh>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_CONFIG_PRIM_RX;
 8000ae8:	7bfb      	ldrb	r3, [r7, #15]
 8000aea:	f023 0301 	bic.w	r3, r3, #1
 8000aee:	73fb      	strb	r3, [r7, #15]
	reg |= (mode & nRF24_CONFIG_PRIM_RX );
 8000af0:	78fb      	ldrb	r3, [r7, #3]
 8000af2:	f003 0301 	and.w	r3, r3, #1
 8000af6:	b2da      	uxtb	r2, r3
 8000af8:	7bfb      	ldrb	r3, [r7, #15]
 8000afa:	4313      	orrs	r3, r2
 8000afc:	73fb      	strb	r3, [r7, #15]
	WriteReg(nRF24_REG_CONFIG, reg);
 8000afe:	7bfb      	ldrb	r3, [r7, #15]
 8000b00:	461a      	mov	r2, r3
 8000b02:	2100      	movs	r1, #0
 8000b04:	6878      	ldr	r0, [r7, #4]
 8000b06:	f7ff fe92 	bl	800082e <_ZN6NRF24L8WriteRegEhh>
}
 8000b0a:	bf00      	nop
 8000b0c:	3710      	adds	r7, #16
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}

08000b12 <_ZN6NRF24L12SetCRCSchemeEh>:
// Configure transceiver CRC scheme
// input:
//   scheme - CRC scheme, one of nRF24_CRC_xx values
// note: transceiver will forcibly turn on the CRC in case if auto acknowledgment
//       enabled for at least one RX pipe
void NRF24L::SetCRCScheme(uint8_t scheme) {
 8000b12:	b580      	push	{r7, lr}
 8000b14:	b084      	sub	sp, #16
 8000b16:	af00      	add	r7, sp, #0
 8000b18:	6078      	str	r0, [r7, #4]
 8000b1a:	460b      	mov	r3, r1
 8000b1c:	70fb      	strb	r3, [r7, #3]
	uint8_t reg;

	// Configure EN_CRC[3] and CRCO[2] bits of the CONFIG register
	reg = ReadReg(nRF24_REG_CONFIG);
 8000b1e:	2100      	movs	r1, #0
 8000b20:	6878      	ldr	r0, [r7, #4]
 8000b22:	f7ff fe65 	bl	80007f0 <_ZN6NRF24L7ReadRegEh>
 8000b26:	4603      	mov	r3, r0
 8000b28:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_CRC;
 8000b2a:	7bfb      	ldrb	r3, [r7, #15]
 8000b2c:	f023 030c 	bic.w	r3, r3, #12
 8000b30:	73fb      	strb	r3, [r7, #15]
	reg |= (scheme & nRF24_MASK_CRC );
 8000b32:	78fb      	ldrb	r3, [r7, #3]
 8000b34:	f003 030c 	and.w	r3, r3, #12
 8000b38:	b2da      	uxtb	r2, r3
 8000b3a:	7bfb      	ldrb	r3, [r7, #15]
 8000b3c:	4313      	orrs	r3, r2
 8000b3e:	73fb      	strb	r3, [r7, #15]
	WriteReg(nRF24_REG_CONFIG, reg);
 8000b40:	7bfb      	ldrb	r3, [r7, #15]
 8000b42:	461a      	mov	r2, r3
 8000b44:	2100      	movs	r1, #0
 8000b46:	6878      	ldr	r0, [r7, #4]
 8000b48:	f7ff fe71 	bl	800082e <_ZN6NRF24L8WriteRegEhh>
}
 8000b4c:	bf00      	nop
 8000b4e:	3710      	adds	r7, #16
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}

08000b54 <_ZN6NRF24L12SetRFChannelEh>:
// Set frequency channel
// input:
//   channel - radio frequency channel, value from 0 to 127
// note: frequency will be (2400 + channel)MHz
// note: PLOS_CNT[7:4] bits of the OBSERVER_TX register will be reset
void NRF24L::SetRFChannel(uint8_t channel) {
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
 8000b5c:	460b      	mov	r3, r1
 8000b5e:	70fb      	strb	r3, [r7, #3]
	WriteReg(nRF24_REG_RF_CH, channel);
 8000b60:	78fb      	ldrb	r3, [r7, #3]
 8000b62:	461a      	mov	r2, r3
 8000b64:	2105      	movs	r1, #5
 8000b66:	6878      	ldr	r0, [r7, #4]
 8000b68:	f7ff fe61 	bl	800082e <_ZN6NRF24L8WriteRegEhh>
}
 8000b6c:	bf00      	nop
 8000b6e:	3708      	adds	r7, #8
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}

08000b74 <_ZN6NRF24L12SetAddrWidthEh>:

// Set of address widths
// input:
//   addr_width - RX/TX address field width, value from 3 to 5
// note: this setting is common for all pipes
void NRF24L::SetAddrWidth(uint8_t addr_width) {
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
 8000b7c:	460b      	mov	r3, r1
 8000b7e:	70fb      	strb	r3, [r7, #3]
	WriteReg(nRF24_REG_SETUP_AW, addr_width - 2);
 8000b80:	78fb      	ldrb	r3, [r7, #3]
 8000b82:	3b02      	subs	r3, #2
 8000b84:	b2db      	uxtb	r3, r3
 8000b86:	461a      	mov	r2, r3
 8000b88:	2103      	movs	r1, #3
 8000b8a:	6878      	ldr	r0, [r7, #4]
 8000b8c:	f7ff fe4f 	bl	800082e <_ZN6NRF24L8WriteRegEhh>
}
 8000b90:	bf00      	nop
 8000b92:	3708      	adds	r7, #8
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}

08000b98 <_ZN6NRF24L7SetAddrEhPKh>:
// note: buffer length must be equal to current address width of transceiver
// note: for pipes[2..5] only first byte of address will be written because
//       other bytes of address equals to pipe1
// note: for pipes[2..5] only first byte of address will be written because
//       pipes 1-5 share the four most significant address bytes
void NRF24L::SetAddr(uint8_t pipe, const uint8_t *addr) {
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b086      	sub	sp, #24
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	60f8      	str	r0, [r7, #12]
 8000ba0:	460b      	mov	r3, r1
 8000ba2:	607a      	str	r2, [r7, #4]
 8000ba4:	72fb      	strb	r3, [r7, #11]
	uint8_t addr_width;

	// RX_ADDR_Px register
	switch (pipe) {
 8000ba6:	7afb      	ldrb	r3, [r7, #11]
 8000ba8:	2b06      	cmp	r3, #6
 8000baa:	d00a      	beq.n	8000bc2 <_ZN6NRF24L7SetAddrEhPKh+0x2a>
 8000bac:	2b06      	cmp	r3, #6
 8000bae:	dc42      	bgt.n	8000c36 <_ZN6NRF24L7SetAddrEhPKh+0x9e>
 8000bb0:	2b01      	cmp	r3, #1
 8000bb2:	dc02      	bgt.n	8000bba <_ZN6NRF24L7SetAddrEhPKh+0x22>
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	da04      	bge.n	8000bc2 <_ZN6NRF24L7SetAddrEhPKh+0x2a>
		// Write address LSBbyte (only first byte from the addr buffer)
		WriteReg(NRF24L::ADDR_REGS[pipe], *addr);
		break;
	default:
		// Incorrect pipe number -> do nothing
		break;
 8000bb8:	e03d      	b.n	8000c36 <_ZN6NRF24L7SetAddrEhPKh+0x9e>
 8000bba:	3b02      	subs	r3, #2
	switch (pipe) {
 8000bbc:	2b03      	cmp	r3, #3
 8000bbe:	d83a      	bhi.n	8000c36 <_ZN6NRF24L7SetAddrEhPKh+0x9e>
 8000bc0:	e02e      	b.n	8000c20 <_ZN6NRF24L7SetAddrEhPKh+0x88>
		addr_width = ReadReg(nRF24_REG_SETUP_AW) + 1;
 8000bc2:	2103      	movs	r1, #3
 8000bc4:	68f8      	ldr	r0, [r7, #12]
 8000bc6:	f7ff fe13 	bl	80007f0 <_ZN6NRF24L7ReadRegEh>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	3301      	adds	r3, #1
 8000bce:	75fb      	strb	r3, [r7, #23]
		addr += addr_width;
 8000bd0:	7dfb      	ldrb	r3, [r7, #23]
 8000bd2:	687a      	ldr	r2, [r7, #4]
 8000bd4:	4413      	add	r3, r2
 8000bd6:	607b      	str	r3, [r7, #4]
		nRF24_CSN_L();
 8000bd8:	68f8      	ldr	r0, [r7, #12]
 8000bda:	f7ff fdc9 	bl	8000770 <_ZN6NRF24L11nRF24_CSN_LEv>
		nRF24_LL_RW(nRF24_CMD_W_REGISTER | NRF24L::ADDR_REGS[pipe]);
 8000bde:	7afb      	ldrb	r3, [r7, #11]
 8000be0:	68fa      	ldr	r2, [r7, #12]
 8000be2:	4413      	add	r3, r2
 8000be4:	7f1b      	ldrb	r3, [r3, #28]
 8000be6:	f043 0320 	orr.w	r3, r3, #32
 8000bea:	b2db      	uxtb	r3, r3
 8000bec:	4619      	mov	r1, r3
 8000bee:	68f8      	ldr	r0, [r7, #12]
 8000bf0:	f7ff fdde 	bl	80007b0 <_ZN6NRF24L11nRF24_LL_RWEh>
			nRF24_LL_RW(*addr--);
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	1e5a      	subs	r2, r3, #1
 8000bf8:	607a      	str	r2, [r7, #4]
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	68f8      	ldr	r0, [r7, #12]
 8000c00:	f7ff fdd6 	bl	80007b0 <_ZN6NRF24L11nRF24_LL_RWEh>
		} while (addr_width--);
 8000c04:	7dfb      	ldrb	r3, [r7, #23]
 8000c06:	1e5a      	subs	r2, r3, #1
 8000c08:	75fa      	strb	r2, [r7, #23]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	bf14      	ite	ne
 8000c0e:	2301      	movne	r3, #1
 8000c10:	2300      	moveq	r3, #0
 8000c12:	b2db      	uxtb	r3, r3
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d1ed      	bne.n	8000bf4 <_ZN6NRF24L7SetAddrEhPKh+0x5c>
		nRF24_CSN_H();
 8000c18:	68f8      	ldr	r0, [r7, #12]
 8000c1a:	f7ff fdb9 	bl	8000790 <_ZN6NRF24L11nRF24_CSN_HEv>
		break;
 8000c1e:	e00b      	b.n	8000c38 <_ZN6NRF24L7SetAddrEhPKh+0xa0>
		WriteReg(NRF24L::ADDR_REGS[pipe], *addr);
 8000c20:	7afb      	ldrb	r3, [r7, #11]
 8000c22:	68fa      	ldr	r2, [r7, #12]
 8000c24:	4413      	add	r3, r2
 8000c26:	7f19      	ldrb	r1, [r3, #28]
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	461a      	mov	r2, r3
 8000c2e:	68f8      	ldr	r0, [r7, #12]
 8000c30:	f7ff fdfd 	bl	800082e <_ZN6NRF24L8WriteRegEhh>
		break;
 8000c34:	e000      	b.n	8000c38 <_ZN6NRF24L7SetAddrEhPKh+0xa0>
		break;
 8000c36:	bf00      	nop
	}
}
 8000c38:	bf00      	nop
 8000c3a:	3718      	adds	r7, #24
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <_ZN6NRF24L11SetDataRateEh>:
}

// Configure transceiver data rate
// input:
//   data_rate - data rate, one of nRF24_DR_xx values
void NRF24L::SetDataRate(uint8_t data_rate) {
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
 8000c48:	460b      	mov	r3, r1
 8000c4a:	70fb      	strb	r3, [r7, #3]
	uint8_t reg;

	// Configure RF_DR_LOW[5] and RF_DR_HIGH[3] bits of the RF_SETUP register
	reg = ReadReg(nRF24_REG_RF_SETUP);
 8000c4c:	2106      	movs	r1, #6
 8000c4e:	6878      	ldr	r0, [r7, #4]
 8000c50:	f7ff fdce 	bl	80007f0 <_ZN6NRF24L7ReadRegEh>
 8000c54:	4603      	mov	r3, r0
 8000c56:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_DATARATE;
 8000c58:	7bfb      	ldrb	r3, [r7, #15]
 8000c5a:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 8000c5e:	73fb      	strb	r3, [r7, #15]
	reg |= data_rate;
 8000c60:	7bfa      	ldrb	r2, [r7, #15]
 8000c62:	78fb      	ldrb	r3, [r7, #3]
 8000c64:	4313      	orrs	r3, r2
 8000c66:	73fb      	strb	r3, [r7, #15]
	WriteReg(nRF24_REG_RF_SETUP, reg);
 8000c68:	7bfb      	ldrb	r3, [r7, #15]
 8000c6a:	461a      	mov	r2, r3
 8000c6c:	2106      	movs	r1, #6
 8000c6e:	6878      	ldr	r0, [r7, #4]
 8000c70:	f7ff fddd 	bl	800082e <_ZN6NRF24L8WriteRegEhh>
}
 8000c74:	bf00      	nop
 8000c76:	3710      	adds	r7, #16
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}

08000c7c <_ZN6NRF24L9SetRXPipeEhhh>:
// Configure a specified RX pipe
// input:
//   pipe - number of the RX pipe, value from 0 to 5
//   aa_state - state of auto acknowledgment, one of nRF24_AA_xx values
//   payload_len - payload length in bytes
void NRF24L::SetRXPipe(uint8_t pipe, uint8_t aa_state, uint8_t payload_len) {
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b084      	sub	sp, #16
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
 8000c84:	4608      	mov	r0, r1
 8000c86:	4611      	mov	r1, r2
 8000c88:	461a      	mov	r2, r3
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	70fb      	strb	r3, [r7, #3]
 8000c8e:	460b      	mov	r3, r1
 8000c90:	70bb      	strb	r3, [r7, #2]
 8000c92:	4613      	mov	r3, r2
 8000c94:	707b      	strb	r3, [r7, #1]
	uint8_t reg;

	// Enable the specified pipe (EN_RXADDR register)
	reg = (ReadReg(nRF24_REG_EN_RXADDR) | (1 << pipe)) & nRF24_MASK_EN_RX;
 8000c96:	2102      	movs	r1, #2
 8000c98:	6878      	ldr	r0, [r7, #4]
 8000c9a:	f7ff fda9 	bl	80007f0 <_ZN6NRF24L7ReadRegEh>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	b25a      	sxtb	r2, r3
 8000ca2:	78fb      	ldrb	r3, [r7, #3]
 8000ca4:	2101      	movs	r1, #1
 8000ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8000caa:	b25b      	sxtb	r3, r3
 8000cac:	4313      	orrs	r3, r2
 8000cae:	b25b      	sxtb	r3, r3
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000cb6:	73fb      	strb	r3, [r7, #15]
	WriteReg(nRF24_REG_EN_RXADDR, reg);
 8000cb8:	7bfb      	ldrb	r3, [r7, #15]
 8000cba:	461a      	mov	r2, r3
 8000cbc:	2102      	movs	r1, #2
 8000cbe:	6878      	ldr	r0, [r7, #4]
 8000cc0:	f7ff fdb5 	bl	800082e <_ZN6NRF24L8WriteRegEhh>

	// Set RX payload length (RX_PW_Px register)
	WriteReg(NRF24L::RX_PW_PIPE[pipe], payload_len & nRF24_MASK_RX_PW);
 8000cc4:	78fb      	ldrb	r3, [r7, #3]
 8000cc6:	687a      	ldr	r2, [r7, #4]
 8000cc8:	4413      	add	r3, r2
 8000cca:	7d99      	ldrb	r1, [r3, #22]
 8000ccc:	787b      	ldrb	r3, [r7, #1]
 8000cce:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000cd2:	b2db      	uxtb	r3, r3
 8000cd4:	461a      	mov	r2, r3
 8000cd6:	6878      	ldr	r0, [r7, #4]
 8000cd8:	f7ff fda9 	bl	800082e <_ZN6NRF24L8WriteRegEhh>

	// Set auto acknowledgment for a specified pipe (EN_AA register)
	reg = ReadReg(nRF24_REG_EN_AA);
 8000cdc:	2101      	movs	r1, #1
 8000cde:	6878      	ldr	r0, [r7, #4]
 8000ce0:	f7ff fd86 	bl	80007f0 <_ZN6NRF24L7ReadRegEh>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	73fb      	strb	r3, [r7, #15]
	if (aa_state == nRF24_AA_ON) {
 8000ce8:	78bb      	ldrb	r3, [r7, #2]
 8000cea:	2b01      	cmp	r3, #1
 8000cec:	d10a      	bne.n	8000d04 <_ZN6NRF24L9SetRXPipeEhhh+0x88>
		reg |= (1 << pipe);
 8000cee:	78fb      	ldrb	r3, [r7, #3]
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf6:	b25a      	sxtb	r2, r3
 8000cf8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	b25b      	sxtb	r3, r3
 8000d00:	73fb      	strb	r3, [r7, #15]
 8000d02:	e00b      	b.n	8000d1c <_ZN6NRF24L9SetRXPipeEhhh+0xa0>
	} else {
		reg &= ~(1 << pipe);
 8000d04:	78fb      	ldrb	r3, [r7, #3]
 8000d06:	2201      	movs	r2, #1
 8000d08:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0c:	b25b      	sxtb	r3, r3
 8000d0e:	43db      	mvns	r3, r3
 8000d10:	b25a      	sxtb	r2, r3
 8000d12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d16:	4013      	ands	r3, r2
 8000d18:	b25b      	sxtb	r3, r3
 8000d1a:	73fb      	strb	r3, [r7, #15]
	}
	WriteReg(nRF24_REG_EN_AA, reg);
 8000d1c:	7bfb      	ldrb	r3, [r7, #15]
 8000d1e:	461a      	mov	r2, r3
 8000d20:	2101      	movs	r1, #1
 8000d22:	6878      	ldr	r0, [r7, #4]
 8000d24:	f7ff fd83 	bl	800082e <_ZN6NRF24L8WriteRegEhh>
}
 8000d28:	bf00      	nop
 8000d2a:	3710      	adds	r7, #16
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}

08000d30 <_ZN6NRF24L9DisableAAEh>:
}

// Disable the auto retransmit (a.k.a. enhanced ShockBurst) for one or all RX pipes
// input:
//   pipe - number of the RX pipe, value from 0 to 5, any other value will disable AA for all RX pipes
void NRF24L::DisableAA(uint8_t pipe) {
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b084      	sub	sp, #16
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
 8000d38:	460b      	mov	r3, r1
 8000d3a:	70fb      	strb	r3, [r7, #3]
	uint8_t reg;

	if (pipe > 5) {
 8000d3c:	78fb      	ldrb	r3, [r7, #3]
 8000d3e:	2b05      	cmp	r3, #5
 8000d40:	d905      	bls.n	8000d4e <_ZN6NRF24L9DisableAAEh+0x1e>
		// Disable Auto-ACK for ALL pipes
		WriteReg(nRF24_REG_EN_AA, 0x00);
 8000d42:	2200      	movs	r2, #0
 8000d44:	2101      	movs	r1, #1
 8000d46:	6878      	ldr	r0, [r7, #4]
 8000d48:	f7ff fd71 	bl	800082e <_ZN6NRF24L8WriteRegEhh>
		// Clear bit in the EN_AA register
		reg = ReadReg(nRF24_REG_EN_AA);
		reg &= ~(1 << pipe);
		WriteReg(nRF24_REG_EN_AA, reg);
	}
}
 8000d4c:	e017      	b.n	8000d7e <_ZN6NRF24L9DisableAAEh+0x4e>
		reg = ReadReg(nRF24_REG_EN_AA);
 8000d4e:	2101      	movs	r1, #1
 8000d50:	6878      	ldr	r0, [r7, #4]
 8000d52:	f7ff fd4d 	bl	80007f0 <_ZN6NRF24L7ReadRegEh>
 8000d56:	4603      	mov	r3, r0
 8000d58:	73fb      	strb	r3, [r7, #15]
		reg &= ~(1 << pipe);
 8000d5a:	78fb      	ldrb	r3, [r7, #3]
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d62:	b25b      	sxtb	r3, r3
 8000d64:	43db      	mvns	r3, r3
 8000d66:	b25a      	sxtb	r2, r3
 8000d68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	b25b      	sxtb	r3, r3
 8000d70:	73fb      	strb	r3, [r7, #15]
		WriteReg(nRF24_REG_EN_AA, reg);
 8000d72:	7bfb      	ldrb	r3, [r7, #15]
 8000d74:	461a      	mov	r2, r3
 8000d76:	2101      	movs	r1, #1
 8000d78:	6878      	ldr	r0, [r7, #4]
 8000d7a:	f7ff fd58 	bl	800082e <_ZN6NRF24L8WriteRegEhh>
}
 8000d7e:	bf00      	nop
 8000d80:	3710      	adds	r7, #16
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}

08000d86 <_ZN6NRF24L7FlushTXEv>:
	reg = ReadReg(nRF24_REG_RF_CH);
	WriteReg(nRF24_REG_RF_CH, reg);
}

// Flush the TX FIFO
void NRF24L::FlushTX(void) {
 8000d86:	b580      	push	{r7, lr}
 8000d88:	b082      	sub	sp, #8
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	6078      	str	r0, [r7, #4]
	WriteReg(nRF24_CMD_FLUSH_TX, nRF24_CMD_NOP);
 8000d8e:	22ff      	movs	r2, #255	@ 0xff
 8000d90:	21e1      	movs	r1, #225	@ 0xe1
 8000d92:	6878      	ldr	r0, [r7, #4]
 8000d94:	f7ff fd4b 	bl	800082e <_ZN6NRF24L8WriteRegEhh>
}
 8000d98:	bf00      	nop
 8000d9a:	3708      	adds	r7, #8
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}

08000da0 <_ZN6NRF24L7FlushRXEv>:

// Flush the RX FIFO
void NRF24L::FlushRX(void) {
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
	WriteReg(nRF24_CMD_FLUSH_RX, nRF24_CMD_NOP);
 8000da8:	22ff      	movs	r2, #255	@ 0xff
 8000daa:	21e2      	movs	r1, #226	@ 0xe2
 8000dac:	6878      	ldr	r0, [r7, #4]
 8000dae:	f7ff fd3e 	bl	800082e <_ZN6NRF24L8WriteRegEhh>
}
 8000db2:	bf00      	nop
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}

08000dba <_ZN6NRF24L13ClearIRQFlagsEv>:

// Clear any pending IRQ flags
void NRF24L::ClearIRQFlags(void) {
 8000dba:	b580      	push	{r7, lr}
 8000dbc:	b084      	sub	sp, #16
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	6078      	str	r0, [r7, #4]
	uint8_t reg;

	// Clear RX_DR, TX_DS and MAX_RT bits of the STATUS register
	reg = ReadReg(nRF24_REG_STATUS);
 8000dc2:	2107      	movs	r1, #7
 8000dc4:	6878      	ldr	r0, [r7, #4]
 8000dc6:	f7ff fd13 	bl	80007f0 <_ZN6NRF24L7ReadRegEh>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	73fb      	strb	r3, [r7, #15]
	reg |= nRF24_MASK_STATUS_IRQ;
 8000dce:	7bfb      	ldrb	r3, [r7, #15]
 8000dd0:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8000dd4:	73fb      	strb	r3, [r7, #15]
	WriteReg(nRF24_REG_STATUS, reg);
 8000dd6:	7bfb      	ldrb	r3, [r7, #15]
 8000dd8:	461a      	mov	r2, r3
 8000dda:	2107      	movs	r1, #7
 8000ddc:	6878      	ldr	r0, [r7, #4]
 8000dde:	f7ff fd26 	bl	800082e <_ZN6NRF24L8WriteRegEhh>
}
 8000de2:	bf00      	nop
 8000de4:	3710      	adds	r7, #16
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
	...

08000dec <_ZN6NRF24L6InitRXEPhh>:
	ClearIRQFlags();
	// Wake the transceiver
	SetPowerMode(nRF24_PWR_UP);
}

void NRF24L::InitRX(uint8_t *dest, uint8_t len) {
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b084      	sub	sp, #16
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	60f8      	str	r0, [r7, #12]
 8000df4:	60b9      	str	r1, [r7, #8]
 8000df6:	4613      	mov	r3, r2
 8000df8:	71fb      	strb	r3, [r7, #7]
	// Disable ShockBurst for all RX pipes
	DisableAA(0xFF);
 8000dfa:	21ff      	movs	r1, #255	@ 0xff
 8000dfc:	68f8      	ldr	r0, [r7, #12]
 8000dfe:	f7ff ff97 	bl	8000d30 <_ZN6NRF24L9DisableAAEh>
	// Set RF channel
	SetRFChannel(115);
 8000e02:	2173      	movs	r1, #115	@ 0x73
 8000e04:	68f8      	ldr	r0, [r7, #12]
 8000e06:	f7ff fea5 	bl	8000b54 <_ZN6NRF24L12SetRFChannelEh>
	// Set data rate
	SetDataRate(nRF24_DR_250kbps);
 8000e0a:	2120      	movs	r1, #32
 8000e0c:	68f8      	ldr	r0, [r7, #12]
 8000e0e:	f7ff ff17 	bl	8000c40 <_ZN6NRF24L11SetDataRateEh>
	// Set CRC scheme
	SetCRCScheme(nRF24_CRC_2byte);
 8000e12:	210c      	movs	r1, #12
 8000e14:	68f8      	ldr	r0, [r7, #12]
 8000e16:	f7ff fe7c 	bl	8000b12 <_ZN6NRF24L12SetCRCSchemeEh>
	// Set address width, its common for all pipes (RX and TX)
	SetAddrWidth(3);
 8000e1a:	2103      	movs	r1, #3
 8000e1c:	68f8      	ldr	r0, [r7, #12]
 8000e1e:	f7ff fea9 	bl	8000b74 <_ZN6NRF24L12SetAddrWidthEh>
	// Configure RX PIPE#1
	static const uint8_t nRF24_ADDR[] = { 0xE7, 0x1C, 0xE3 };
	SetAddr(nRF24_PIPE1, nRF24_ADDR); // program address for RX pipe #1
 8000e22:	4a0d      	ldr	r2, [pc, #52]	@ (8000e58 <_ZN6NRF24L6InitRXEPhh+0x6c>)
 8000e24:	2101      	movs	r1, #1
 8000e26:	68f8      	ldr	r0, [r7, #12]
 8000e28:	f7ff feb6 	bl	8000b98 <_ZN6NRF24L7SetAddrEhPKh>
	SetRXPipe(nRF24_PIPE1, nRF24_AA_OFF, len); // Auto-ACK: disabled, payload length in bytes
 8000e2c:	79fb      	ldrb	r3, [r7, #7]
 8000e2e:	2200      	movs	r2, #0
 8000e30:	2101      	movs	r1, #1
 8000e32:	68f8      	ldr	r0, [r7, #12]
 8000e34:	f7ff ff22 	bl	8000c7c <_ZN6NRF24L9SetRXPipeEhhh>
	// Set operational mode (PRX == receiver)
	SetOperationalMode(nRF24_MODE_RX);
 8000e38:	2101      	movs	r1, #1
 8000e3a:	68f8      	ldr	r0, [r7, #12]
 8000e3c:	f7ff fe48 	bl	8000ad0 <_ZN6NRF24L18SetOperationalModeEh>
	// Wake the transceiver
	SetPowerMode(nRF24_PWR_UP);
 8000e40:	2102      	movs	r1, #2
 8000e42:	68f8      	ldr	r0, [r7, #12]
 8000e44:	f7ff fe22 	bl	8000a8c <_ZN6NRF24L12SetPowerModeEh>
	// Put the transceiver to the RX mode
	nRF24_CE_H();
 8000e48:	68f8      	ldr	r0, [r7, #12]
 8000e4a:	f7ff fc81 	bl	8000750 <_ZN6NRF24L10nRF24_CE_HEv>
//	nRF24_SetAddrWidth(5); // address width is 5 bytes
//	nRF24_SetAddr(nRF24_PIPE1, dest); // program pipe address
//	nRF24_SetRXPipe(nRF24_PIPE1, nRF24_AA_OFF, 10); // enable RX pipe#1 with Auto-ACK: disabled, payload length: 10 bytes
//	nRF24_SetOperationalMode(nRF24_MODE_RX); // switch transceiver to the RX mode
//	nRF24_SetPowerMode(nRF24_PWR_UP); // wake-up transceiver (in case if it sleeping)
}
 8000e4e:	bf00      	nop
 8000e50:	3710      	adds	r7, #16
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	08004750 	.word	0x08004750

08000e5c <_ZN6BMP280C1EPNS_20BMP280_HandleTypedefE>:

#define BMP280_RESET_VALUE     0xB6



BMP280::BMP280(BMP280_HandleTypedef* device) : _device(device) {
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
 8000e64:	6039      	str	r1, [r7, #0]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	683a      	ldr	r2, [r7, #0]
 8000e6a:	601a      	str	r2, [r3, #0]
    bmp280_init_default_params();
 8000e6c:	6878      	ldr	r0, [r7, #4]
 8000e6e:	f000 f810 	bl	8000e92 <_ZN6BMP28026bmp280_init_default_paramsEv>
}
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4618      	mov	r0, r3
 8000e76:	3708      	adds	r7, #8
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <_ZN6BMP280D1Ev>:

BMP280::~BMP280() {}
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	4618      	mov	r0, r3
 8000e88:	370c      	adds	r7, #12
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr

08000e92 <_ZN6BMP28026bmp280_init_default_paramsEv>:

void BMP280::bmp280_init_default_params() {
 8000e92:	b480      	push	{r7}
 8000e94:	b083      	sub	sp, #12
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	6078      	str	r0, [r7, #4]
    _device->params.mode = BMP280_MODE_NORMAL;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	2203      	movs	r2, #3
 8000ea0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
	_device->params.filter = BMP280_FILTER_OFF;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
	_device->params.oversampling_pressure = BMP280_STANDARD;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	2203      	movs	r2, #3
 8000eb4:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
	_device->params.oversampling_temperature = BMP280_STANDARD;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	2203      	movs	r2, #3
 8000ebe:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	_device->params.oversampling_humidity = BMP280_STANDARD;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	2203      	movs	r2, #3
 8000ec8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	_device->params.standby = BMP280_STANDBY_250;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	2203      	movs	r2, #3
 8000ed2:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
}
 8000ed6:	bf00      	nop
 8000ed8:	370c      	adds	r7, #12
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr

08000ee2 <_ZN6BMP28015read_register16EhPt>:

bool BMP280::read_register16(uint8_t addr, uint16_t *value) {
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	b08a      	sub	sp, #40	@ 0x28
 8000ee6:	af04      	add	r7, sp, #16
 8000ee8:	60f8      	str	r0, [r7, #12]
 8000eea:	460b      	mov	r3, r1
 8000eec:	607a      	str	r2, [r7, #4]
 8000eee:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (_device->addr << 1);
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000ef6:	005b      	lsls	r3, r3, #1
 8000ef8:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(_device->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8000f00:	7afb      	ldrb	r3, [r7, #11]
 8000f02:	b29a      	uxth	r2, r3
 8000f04:	8af9      	ldrh	r1, [r7, #22]
 8000f06:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000f0a:	9302      	str	r3, [sp, #8]
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	9301      	str	r3, [sp, #4]
 8000f10:	f107 0314 	add.w	r3, r7, #20
 8000f14:	9300      	str	r3, [sp, #0]
 8000f16:	2301      	movs	r3, #1
 8000f18:	f001 fe3a 	bl	8002b90 <HAL_I2C_Mem_Read>
 8000f1c:	4603      	mov	r3, r0
			== HAL_OK) {
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	bf0c      	ite	eq
 8000f22:	2301      	moveq	r3, #1
 8000f24:	2300      	movne	r3, #0
 8000f26:	b2db      	uxtb	r3, r3
	if (HAL_I2C_Mem_Read(_device->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d00b      	beq.n	8000f44 <_ZN6BMP28015read_register16EhPt+0x62>
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 8000f2c:	7d7b      	ldrb	r3, [r7, #21]
 8000f2e:	021b      	lsls	r3, r3, #8
 8000f30:	b21a      	sxth	r2, r3
 8000f32:	7d3b      	ldrb	r3, [r7, #20]
 8000f34:	b21b      	sxth	r3, r3
 8000f36:	4313      	orrs	r3, r2
 8000f38:	b21b      	sxth	r3, r3
 8000f3a:	b29a      	uxth	r2, r3
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	801a      	strh	r2, [r3, #0]
		return true;
 8000f40:	2301      	movs	r3, #1
 8000f42:	e000      	b.n	8000f46 <_ZN6BMP28015read_register16EhPt+0x64>
	} else
		return false;
 8000f44:	2300      	movs	r3, #0

}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3718      	adds	r7, #24
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}

08000f4e <_ZN6BMP2809read_dataEhPhh>:

inline int BMP280::read_data(uint8_t addr, uint8_t *value, uint8_t len) {
 8000f4e:	b590      	push	{r4, r7, lr}
 8000f50:	b08b      	sub	sp, #44	@ 0x2c
 8000f52:	af04      	add	r7, sp, #16
 8000f54:	60f8      	str	r0, [r7, #12]
 8000f56:	607a      	str	r2, [r7, #4]
 8000f58:	461a      	mov	r2, r3
 8000f5a:	460b      	mov	r3, r1
 8000f5c:	72fb      	strb	r3, [r7, #11]
 8000f5e:	4613      	mov	r3, r2
 8000f60:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (_device->addr << 1);
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000f68:	005b      	lsls	r3, r3, #1
 8000f6a:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(_device->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8000f72:	7afb      	ldrb	r3, [r7, #11]
 8000f74:	b29a      	uxth	r2, r3
 8000f76:	7abb      	ldrb	r3, [r7, #10]
 8000f78:	b29b      	uxth	r3, r3
 8000f7a:	8af9      	ldrh	r1, [r7, #22]
 8000f7c:	f241 3488 	movw	r4, #5000	@ 0x1388
 8000f80:	9402      	str	r4, [sp, #8]
 8000f82:	9301      	str	r3, [sp, #4]
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	9300      	str	r3, [sp, #0]
 8000f88:	2301      	movs	r3, #1
 8000f8a:	f001 fe01 	bl	8002b90 <HAL_I2C_Mem_Read>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	bf0c      	ite	eq
 8000f94:	2301      	moveq	r3, #1
 8000f96:	2300      	movne	r3, #0
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <_ZN6BMP2809read_dataEhPhh+0x54>
		return 0;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	e000      	b.n	8000fa4 <_ZN6BMP2809read_dataEhPhh+0x56>
	else
		return 1;
 8000fa2:	2301      	movs	r3, #1

}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	371c      	adds	r7, #28
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd90      	pop	{r4, r7, pc}

08000fac <_ZN6BMP28021read_calibration_dataEv>:

bool BMP280::read_calibration_data() {
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]

	if (read_register16( 0x88, &_device->dig_T1)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	461a      	mov	r2, r3
 8000fba:	2188      	movs	r1, #136	@ 0x88
 8000fbc:	6878      	ldr	r0, [r7, #4]
 8000fbe:	f7ff ff90 	bl	8000ee2 <_ZN6BMP28015read_register16EhPt>
 8000fc2:	4603      	mov	r3, r0
			&& read_register16(0x94, (uint16_t *) &_device->dig_P4)
			&& read_register16(0x96, (uint16_t *) &_device->dig_P5)
			&& read_register16(0x98, (uint16_t *) &_device->dig_P6)
			&& read_register16(0x9a, (uint16_t *) &_device->dig_P7)
			&& read_register16(0x9c, (uint16_t *) &_device->dig_P8)
			&& read_register16(0x9e, (uint16_t *) &_device->dig_P9)) {
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d07a      	beq.n	80010be <_ZN6BMP28021read_calibration_dataEv+0x112>
			&& read_register16(0x8a, (uint16_t *) &_device->dig_T2)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	3302      	adds	r3, #2
 8000fce:	461a      	mov	r2, r3
 8000fd0:	218a      	movs	r1, #138	@ 0x8a
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	f7ff ff85 	bl	8000ee2 <_ZN6BMP28015read_register16EhPt>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d06f      	beq.n	80010be <_ZN6BMP28021read_calibration_dataEv+0x112>
			&& read_register16(0x8c, (uint16_t *) &_device->dig_T3)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	3304      	adds	r3, #4
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	218c      	movs	r1, #140	@ 0x8c
 8000fe8:	6878      	ldr	r0, [r7, #4]
 8000fea:	f7ff ff7a 	bl	8000ee2 <_ZN6BMP28015read_register16EhPt>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d064      	beq.n	80010be <_ZN6BMP28021read_calibration_dataEv+0x112>
			&& read_register16(0x8e, &_device->dig_P1)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	3306      	adds	r3, #6
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	218e      	movs	r1, #142	@ 0x8e
 8000ffe:	6878      	ldr	r0, [r7, #4]
 8001000:	f7ff ff6f 	bl	8000ee2 <_ZN6BMP28015read_register16EhPt>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d059      	beq.n	80010be <_ZN6BMP28021read_calibration_dataEv+0x112>
			&& read_register16(0x90, (uint16_t *) &_device->dig_P2)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	3308      	adds	r3, #8
 8001010:	461a      	mov	r2, r3
 8001012:	2190      	movs	r1, #144	@ 0x90
 8001014:	6878      	ldr	r0, [r7, #4]
 8001016:	f7ff ff64 	bl	8000ee2 <_ZN6BMP28015read_register16EhPt>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d04e      	beq.n	80010be <_ZN6BMP28021read_calibration_dataEv+0x112>
			&& read_register16(0x92, (uint16_t *) &_device->dig_P3)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	330a      	adds	r3, #10
 8001026:	461a      	mov	r2, r3
 8001028:	2192      	movs	r1, #146	@ 0x92
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	f7ff ff59 	bl	8000ee2 <_ZN6BMP28015read_register16EhPt>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d043      	beq.n	80010be <_ZN6BMP28021read_calibration_dataEv+0x112>
			&& read_register16(0x94, (uint16_t *) &_device->dig_P4)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	330c      	adds	r3, #12
 800103c:	461a      	mov	r2, r3
 800103e:	2194      	movs	r1, #148	@ 0x94
 8001040:	6878      	ldr	r0, [r7, #4]
 8001042:	f7ff ff4e 	bl	8000ee2 <_ZN6BMP28015read_register16EhPt>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d038      	beq.n	80010be <_ZN6BMP28021read_calibration_dataEv+0x112>
			&& read_register16(0x96, (uint16_t *) &_device->dig_P5)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	330e      	adds	r3, #14
 8001052:	461a      	mov	r2, r3
 8001054:	2196      	movs	r1, #150	@ 0x96
 8001056:	6878      	ldr	r0, [r7, #4]
 8001058:	f7ff ff43 	bl	8000ee2 <_ZN6BMP28015read_register16EhPt>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d02d      	beq.n	80010be <_ZN6BMP28021read_calibration_dataEv+0x112>
			&& read_register16(0x98, (uint16_t *) &_device->dig_P6)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	3310      	adds	r3, #16
 8001068:	461a      	mov	r2, r3
 800106a:	2198      	movs	r1, #152	@ 0x98
 800106c:	6878      	ldr	r0, [r7, #4]
 800106e:	f7ff ff38 	bl	8000ee2 <_ZN6BMP28015read_register16EhPt>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d022      	beq.n	80010be <_ZN6BMP28021read_calibration_dataEv+0x112>
			&& read_register16(0x9a, (uint16_t *) &_device->dig_P7)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	3312      	adds	r3, #18
 800107e:	461a      	mov	r2, r3
 8001080:	219a      	movs	r1, #154	@ 0x9a
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	f7ff ff2d 	bl	8000ee2 <_ZN6BMP28015read_register16EhPt>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d017      	beq.n	80010be <_ZN6BMP28021read_calibration_dataEv+0x112>
			&& read_register16(0x9c, (uint16_t *) &_device->dig_P8)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	3314      	adds	r3, #20
 8001094:	461a      	mov	r2, r3
 8001096:	219c      	movs	r1, #156	@ 0x9c
 8001098:	6878      	ldr	r0, [r7, #4]
 800109a:	f7ff ff22 	bl	8000ee2 <_ZN6BMP28015read_register16EhPt>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d00c      	beq.n	80010be <_ZN6BMP28021read_calibration_dataEv+0x112>
			&& read_register16(0x9e, (uint16_t *) &_device->dig_P9)) {
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	3316      	adds	r3, #22
 80010aa:	461a      	mov	r2, r3
 80010ac:	219e      	movs	r1, #158	@ 0x9e
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	f7ff ff17 	bl	8000ee2 <_ZN6BMP28015read_register16EhPt>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <_ZN6BMP28021read_calibration_dataEv+0x112>
 80010ba:	2301      	movs	r3, #1
 80010bc:	e000      	b.n	80010c0 <_ZN6BMP28021read_calibration_dataEv+0x114>
 80010be:	2300      	movs	r3, #0
	if (read_register16( 0x88, &_device->dig_T1)
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <_ZN6BMP28021read_calibration_dataEv+0x11c>

		return true;
 80010c4:	2301      	movs	r3, #1
 80010c6:	e000      	b.n	80010ca <_ZN6BMP28021read_calibration_dataEv+0x11e>
	}

	return false;
 80010c8:	2300      	movs	r3, #0
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}

080010d2 <_ZN6BMP28025read_hum_calibration_dataEv>:

bool BMP280::read_hum_calibration_data() {
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b084      	sub	sp, #16
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(0xa1, &_device->dig_H1, 1)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f103 0218 	add.w	r2, r3, #24
 80010e2:	2301      	movs	r3, #1
 80010e4:	21a1      	movs	r1, #161	@ 0xa1
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f7ff ff31 	bl	8000f4e <_ZN6BMP2809read_dataEhPhh>
 80010ec:	4603      	mov	r3, r0
			&& read_register16(0xe1, (uint16_t *) &_device->dig_H2)
			&& !read_data(0xe3, &_device->dig_H3, 1)
			&& read_register16(0xe4, &h4)
			&& read_register16(0xe5, &h5)
			&& !read_data(0xe7, (uint8_t *) &_device->dig_H6, 1)) {
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d138      	bne.n	8001164 <_ZN6BMP28025read_hum_calibration_dataEv+0x92>
			&& read_register16(0xe1, (uint16_t *) &_device->dig_H2)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	331a      	adds	r3, #26
 80010f8:	461a      	mov	r2, r3
 80010fa:	21e1      	movs	r1, #225	@ 0xe1
 80010fc:	6878      	ldr	r0, [r7, #4]
 80010fe:	f7ff fef0 	bl	8000ee2 <_ZN6BMP28015read_register16EhPt>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d02d      	beq.n	8001164 <_ZN6BMP28025read_hum_calibration_dataEv+0x92>
			&& !read_data(0xe3, &_device->dig_H3, 1)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f103 021c 	add.w	r2, r3, #28
 8001110:	2301      	movs	r3, #1
 8001112:	21e3      	movs	r1, #227	@ 0xe3
 8001114:	6878      	ldr	r0, [r7, #4]
 8001116:	f7ff ff1a 	bl	8000f4e <_ZN6BMP2809read_dataEhPhh>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d121      	bne.n	8001164 <_ZN6BMP28025read_hum_calibration_dataEv+0x92>
			&& read_register16(0xe4, &h4)
 8001120:	f107 030e 	add.w	r3, r7, #14
 8001124:	461a      	mov	r2, r3
 8001126:	21e4      	movs	r1, #228	@ 0xe4
 8001128:	6878      	ldr	r0, [r7, #4]
 800112a:	f7ff feda 	bl	8000ee2 <_ZN6BMP28015read_register16EhPt>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d017      	beq.n	8001164 <_ZN6BMP28025read_hum_calibration_dataEv+0x92>
			&& read_register16(0xe5, &h5)
 8001134:	f107 030c 	add.w	r3, r7, #12
 8001138:	461a      	mov	r2, r3
 800113a:	21e5      	movs	r1, #229	@ 0xe5
 800113c:	6878      	ldr	r0, [r7, #4]
 800113e:	f7ff fed0 	bl	8000ee2 <_ZN6BMP28015read_register16EhPt>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d00d      	beq.n	8001164 <_ZN6BMP28025read_hum_calibration_dataEv+0x92>
			&& !read_data(0xe7, (uint8_t *) &_device->dig_H6, 1)) {
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f103 0222 	add.w	r2, r3, #34	@ 0x22
 8001150:	2301      	movs	r3, #1
 8001152:	21e7      	movs	r1, #231	@ 0xe7
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f7ff fefa 	bl	8000f4e <_ZN6BMP2809read_dataEhPhh>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d101      	bne.n	8001164 <_ZN6BMP28025read_hum_calibration_dataEv+0x92>
 8001160:	2301      	movs	r3, #1
 8001162:	e000      	b.n	8001166 <_ZN6BMP28025read_hum_calibration_dataEv+0x94>
 8001164:	2300      	movs	r3, #0
	if (!read_data(0xa1, &_device->dig_H1, 1)
 8001166:	2b00      	cmp	r3, #0
 8001168:	d01a      	beq.n	80011a0 <_ZN6BMP28025read_hum_calibration_dataEv+0xce>
		_device->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 800116a:	89fb      	ldrh	r3, [r7, #14]
 800116c:	011b      	lsls	r3, r3, #4
 800116e:	b21b      	sxth	r3, r3
 8001170:	f403 637f 	and.w	r3, r3, #4080	@ 0xff0
 8001174:	b219      	sxth	r1, r3
 8001176:	89fb      	ldrh	r3, [r7, #14]
 8001178:	0a1b      	lsrs	r3, r3, #8
 800117a:	b29b      	uxth	r3, r3
 800117c:	b21b      	sxth	r3, r3
 800117e:	f003 030f 	and.w	r3, r3, #15
 8001182:	b21a      	sxth	r2, r3
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	430a      	orrs	r2, r1
 800118a:	b212      	sxth	r2, r2
 800118c:	83da      	strh	r2, [r3, #30]
		_device->dig_H5 = h5 >> 4;
 800118e:	89bb      	ldrh	r3, [r7, #12]
 8001190:	091b      	lsrs	r3, r3, #4
 8001192:	b29a      	uxth	r2, r3
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	b212      	sxth	r2, r2
 800119a:	841a      	strh	r2, [r3, #32]

		return true;
 800119c:	2301      	movs	r3, #1
 800119e:	e000      	b.n	80011a2 <_ZN6BMP28025read_hum_calibration_dataEv+0xd0>
	}

	return false;
 80011a0:	2300      	movs	r3, #0
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3710      	adds	r7, #16
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}

080011aa <_ZN6BMP28015write_register8Ehh>:

int BMP280::write_register8(uint8_t addr, uint8_t value) {
 80011aa:	b580      	push	{r7, lr}
 80011ac:	b088      	sub	sp, #32
 80011ae:	af04      	add	r7, sp, #16
 80011b0:	6078      	str	r0, [r7, #4]
 80011b2:	460b      	mov	r3, r1
 80011b4:	70fb      	strb	r3, [r7, #3]
 80011b6:	4613      	mov	r3, r2
 80011b8:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (_device->addr << 1);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(_device->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80011ca:	78fb      	ldrb	r3, [r7, #3]
 80011cc:	b29a      	uxth	r2, r3
 80011ce:	89f9      	ldrh	r1, [r7, #14]
 80011d0:	f242 7310 	movw	r3, #10000	@ 0x2710
 80011d4:	9302      	str	r3, [sp, #8]
 80011d6:	2301      	movs	r3, #1
 80011d8:	9301      	str	r3, [sp, #4]
 80011da:	1cbb      	adds	r3, r7, #2
 80011dc:	9300      	str	r3, [sp, #0]
 80011de:	2301      	movs	r3, #1
 80011e0:	f001 fbdc 	bl	800299c <HAL_I2C_Mem_Write>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	bf0c      	ite	eq
 80011ea:	2301      	moveq	r3, #1
 80011ec:	2300      	movne	r3, #0
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <_ZN6BMP28015write_register8Ehh+0x4e>
		return false;
 80011f4:	2300      	movs	r3, #0
 80011f6:	e000      	b.n	80011fa <_ZN6BMP28015write_register8Ehh+0x50>
	else
		return true;
 80011f8:	2301      	movs	r3, #1
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3710      	adds	r7, #16
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}

08001202 <_ZN6BMP28011bmp280_initEv>:

bool BMP280::bmp280_init() {
 8001202:	b580      	push	{r7, lr}
 8001204:	b084      	sub	sp, #16
 8001206:	af00      	add	r7, sp, #0
 8001208:	6078      	str	r0, [r7, #4]

	if (_device->addr != BMP280_I2C_ADDRESS_0
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001210:	2b76      	cmp	r3, #118	@ 0x76
 8001212:	d006      	beq.n	8001222 <_ZN6BMP28011bmp280_initEv+0x20>
			&& _device->addr != BMP280_I2C_ADDRESS_1) {
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800121a:	2b77      	cmp	r3, #119	@ 0x77
 800121c:	d001      	beq.n	8001222 <_ZN6BMP28011bmp280_initEv+0x20>

		return false;
 800121e:	2300      	movs	r3, #0
 8001220:	e0d1      	b.n	80013c6 <_ZN6BMP28011bmp280_initEv+0x1c4>
	}

	if (read_data(BMP280_REG_ID, &_device->id, 1)) {
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800122a:	2301      	movs	r3, #1
 800122c:	21d0      	movs	r1, #208	@ 0xd0
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f7ff fe8d 	bl	8000f4e <_ZN6BMP2809read_dataEhPhh>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	bf14      	ite	ne
 800123a:	2301      	movne	r3, #1
 800123c:	2300      	moveq	r3, #0
 800123e:	b2db      	uxtb	r3, r3
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <_ZN6BMP28011bmp280_initEv+0x46>
		return false;
 8001244:	2300      	movs	r3, #0
 8001246:	e0be      	b.n	80013c6 <_ZN6BMP28011bmp280_initEv+0x1c4>
	}

	if (_device->id != BMP280_CHIP_ID && _device->id != BME280_CHIP_ID) {
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001250:	2b58      	cmp	r3, #88	@ 0x58
 8001252:	d007      	beq.n	8001264 <_ZN6BMP28011bmp280_initEv+0x62>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800125c:	2b60      	cmp	r3, #96	@ 0x60
 800125e:	d001      	beq.n	8001264 <_ZN6BMP28011bmp280_initEv+0x62>

		return false;
 8001260:	2300      	movs	r3, #0
 8001262:	e0b0      	b.n	80013c6 <_ZN6BMP28011bmp280_initEv+0x1c4>
	}

	// Soft reset.
	if (write_register8(BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 8001264:	22b6      	movs	r2, #182	@ 0xb6
 8001266:	21e0      	movs	r1, #224	@ 0xe0
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f7ff ff9e 	bl	80011aa <_ZN6BMP28015write_register8Ehh>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	bf14      	ite	ne
 8001274:	2301      	movne	r3, #1
 8001276:	2300      	moveq	r3, #0
 8001278:	b2db      	uxtb	r3, r3
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <_ZN6BMP28011bmp280_initEv+0x80>
		return false;
 800127e:	2300      	movs	r3, #0
 8001280:	e0a1      	b.n	80013c6 <_ZN6BMP28011bmp280_initEv+0x1c4>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(BMP280_REG_STATUS, &status, 1)
 8001282:	f107 020c 	add.w	r2, r7, #12
 8001286:	2301      	movs	r3, #1
 8001288:	21f3      	movs	r1, #243	@ 0xf3
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	f7ff fe5f 	bl	8000f4e <_ZN6BMP2809read_dataEhPhh>
 8001290:	4603      	mov	r3, r0
				&& (status & 1) == 0)
 8001292:	2b00      	cmp	r3, #0
 8001294:	d106      	bne.n	80012a4 <_ZN6BMP28011bmp280_initEv+0xa2>
 8001296:	7b3b      	ldrb	r3, [r7, #12]
 8001298:	f003 0301 	and.w	r3, r3, #1
 800129c:	2b00      	cmp	r3, #0
 800129e:	d101      	bne.n	80012a4 <_ZN6BMP28011bmp280_initEv+0xa2>
 80012a0:	2301      	movs	r3, #1
 80012a2:	e000      	b.n	80012a6 <_ZN6BMP28011bmp280_initEv+0xa4>
 80012a4:	2300      	movs	r3, #0
		if (!read_data(BMP280_REG_STATUS, &status, 1)
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d0eb      	beq.n	8001282 <_ZN6BMP28011bmp280_initEv+0x80>
			break;
	}

	if (!read_calibration_data()) {
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f7ff fe7e 	bl	8000fac <_ZN6BMP28021read_calibration_dataEv>
 80012b0:	4603      	mov	r3, r0
 80012b2:	f083 0301 	eor.w	r3, r3, #1
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d100      	bne.n	80012be <_ZN6BMP28011bmp280_initEv+0xbc>
 80012bc:	e001      	b.n	80012c2 <_ZN6BMP28011bmp280_initEv+0xc0>
		return false;
 80012be:	2300      	movs	r3, #0
 80012c0:	e081      	b.n	80013c6 <_ZN6BMP28011bmp280_initEv+0x1c4>
	}

	if (_device->id == BME280_CHIP_ID && !read_hum_calibration_data()) {
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80012ca:	2b60      	cmp	r3, #96	@ 0x60
 80012cc:	d10a      	bne.n	80012e4 <_ZN6BMP28011bmp280_initEv+0xe2>
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f7ff feff 	bl	80010d2 <_ZN6BMP28025read_hum_calibration_dataEv>
 80012d4:	4603      	mov	r3, r0
 80012d6:	f083 0301 	eor.w	r3, r3, #1
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <_ZN6BMP28011bmp280_initEv+0xe2>
 80012e0:	2301      	movs	r3, #1
 80012e2:	e000      	b.n	80012e6 <_ZN6BMP28011bmp280_initEv+0xe4>
 80012e4:	2300      	movs	r3, #0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <_ZN6BMP28011bmp280_initEv+0xec>
		return false;
 80012ea:	2300      	movs	r3, #0
 80012ec:	e06b      	b.n	80013c6 <_ZN6BMP28011bmp280_initEv+0x1c4>
	}

	uint8_t config = (_device->params.standby << 5) | (_device->params.filter << 2);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80012f6:	015b      	lsls	r3, r3, #5
 80012f8:	b25a      	sxtb	r2, r3
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	b25b      	sxtb	r3, r3
 8001306:	4313      	orrs	r3, r2
 8001308:	b25b      	sxtb	r3, r3
 800130a:	73fb      	strb	r3, [r7, #15]
	if (write_register8(BMP280_REG_CONFIG, config)) {
 800130c:	7bfb      	ldrb	r3, [r7, #15]
 800130e:	461a      	mov	r2, r3
 8001310:	21f5      	movs	r1, #245	@ 0xf5
 8001312:	6878      	ldr	r0, [r7, #4]
 8001314:	f7ff ff49 	bl	80011aa <_ZN6BMP28015write_register8Ehh>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	bf14      	ite	ne
 800131e:	2301      	movne	r3, #1
 8001320:	2300      	moveq	r3, #0
 8001322:	b2db      	uxtb	r3, r3
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <_ZN6BMP28011bmp280_initEv+0x12a>
		return false;
 8001328:	2300      	movs	r3, #0
 800132a:	e04c      	b.n	80013c6 <_ZN6BMP28011bmp280_initEv+0x1c4>
	}

	if (_device->params.mode == BMP280_MODE_FORCED) {
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001334:	2b01      	cmp	r3, #1
 8001336:	d104      	bne.n	8001342 <_ZN6BMP28011bmp280_initEv+0x140>
		_device->params.mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	2200      	movs	r2, #0
 800133e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
	}

	uint8_t ctrl = (_device->params.oversampling_temperature << 5)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800134a:	015b      	lsls	r3, r3, #5
			| (_device->params.oversampling_pressure << 2) | (_device->params.mode);
 800134c:	b25a      	sxtb	r2, r3
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	b25b      	sxtb	r3, r3
 800135a:	4313      	orrs	r3, r2
 800135c:	b25a      	sxtb	r2, r3
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001366:	b25b      	sxtb	r3, r3
 8001368:	4313      	orrs	r3, r2
 800136a:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (_device->params.oversampling_temperature << 5)
 800136c:	73bb      	strb	r3, [r7, #14]

	if (_device->id == BME280_CHIP_ID) {
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001376:	2b60      	cmp	r3, #96	@ 0x60
 8001378:	d114      	bne.n	80013a4 <_ZN6BMP28011bmp280_initEv+0x1a2>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = _device->params.oversampling_humidity;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001382:	737b      	strb	r3, [r7, #13]
		if (write_register8(BMP280_REG_CTRL_HUM, ctrl_hum)) {
 8001384:	7b7b      	ldrb	r3, [r7, #13]
 8001386:	461a      	mov	r2, r3
 8001388:	21f2      	movs	r1, #242	@ 0xf2
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f7ff ff0d 	bl	80011aa <_ZN6BMP28015write_register8Ehh>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	bf14      	ite	ne
 8001396:	2301      	movne	r3, #1
 8001398:	2300      	moveq	r3, #0
 800139a:	b2db      	uxtb	r3, r3
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <_ZN6BMP28011bmp280_initEv+0x1a2>
			return false;
 80013a0:	2300      	movs	r3, #0
 80013a2:	e010      	b.n	80013c6 <_ZN6BMP28011bmp280_initEv+0x1c4>
		}
	}

	if (write_register8(BMP280_REG_CTRL, ctrl)) {
 80013a4:	7bbb      	ldrb	r3, [r7, #14]
 80013a6:	461a      	mov	r2, r3
 80013a8:	21f4      	movs	r1, #244	@ 0xf4
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	f7ff fefd 	bl	80011aa <_ZN6BMP28015write_register8Ehh>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	bf14      	ite	ne
 80013b6:	2301      	movne	r3, #1
 80013b8:	2300      	moveq	r3, #0
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <_ZN6BMP28011bmp280_initEv+0x1c2>
		return false;
 80013c0:	2300      	movs	r3, #0
 80013c2:	e000      	b.n	80013c6 <_ZN6BMP28011bmp280_initEv+0x1c4>
	}

	return true;
 80013c4:	2301      	movs	r3, #1
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3710      	adds	r7, #16
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}

080013ce <_ZN6BMP28022compensate_temperatureElPl>:
/**
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
inline int32_t BMP280::compensate_temperature(int32_t adc_temp, int32_t *fine_temp) {
 80013ce:	b480      	push	{r7}
 80013d0:	b087      	sub	sp, #28
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	60f8      	str	r0, [r7, #12]
 80013d6:	60b9      	str	r1, [r7, #8]
 80013d8:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) _device->dig_T1 << 1)))
 80013da:	68bb      	ldr	r3, [r7, #8]
 80013dc:	10da      	asrs	r2, r3, #3
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	881b      	ldrh	r3, [r3, #0]
 80013e4:	005b      	lsls	r3, r3, #1
 80013e6:	1ad3      	subs	r3, r2, r3
			* (int32_t) _device->dig_T2) >> 11;
 80013e8:	68fa      	ldr	r2, [r7, #12]
 80013ea:	6812      	ldr	r2, [r2, #0]
 80013ec:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80013f0:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) _device->dig_T1 << 1)))
 80013f4:	12db      	asrs	r3, r3, #11
 80013f6:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) _device->dig_T1)
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	111b      	asrs	r3, r3, #4
 80013fc:	68fa      	ldr	r2, [r7, #12]
 80013fe:	6812      	ldr	r2, [r2, #0]
 8001400:	8812      	ldrh	r2, [r2, #0]
 8001402:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) _device->dig_T1)) >> 12)
 8001404:	68ba      	ldr	r2, [r7, #8]
 8001406:	1112      	asrs	r2, r2, #4
 8001408:	68f9      	ldr	r1, [r7, #12]
 800140a:	6809      	ldr	r1, [r1, #0]
 800140c:	8809      	ldrh	r1, [r1, #0]
 800140e:	1a52      	subs	r2, r2, r1
 8001410:	fb02 f303 	mul.w	r3, r2, r3
 8001414:	131b      	asrs	r3, r3, #12
			* (int32_t) _device->dig_T3) >> 14;
 8001416:	68fa      	ldr	r2, [r7, #12]
 8001418:	6812      	ldr	r2, [r2, #0]
 800141a:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800141e:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) _device->dig_T1)
 8001422:	139b      	asrs	r3, r3, #14
 8001424:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 8001426:	697a      	ldr	r2, [r7, #20]
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	441a      	add	r2, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	4613      	mov	r3, r2
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	4413      	add	r3, r2
 800143a:	3380      	adds	r3, #128	@ 0x80
 800143c:	121b      	asrs	r3, r3, #8
}
 800143e:	4618      	mov	r0, r3
 8001440:	371c      	adds	r7, #28
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr

0800144a <_ZN6BMP28019compensate_pressureEll>:
/**
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
inline uint32_t BMP280::compensate_pressure(int32_t adc_press, int32_t fine_temp) {
 800144a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800144e:	b0cc      	sub	sp, #304	@ 0x130
 8001450:	af00      	add	r7, sp, #0
 8001452:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
 8001456:	f8c7 1110 	str.w	r1, [r7, #272]	@ 0x110
 800145a:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 800145e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001462:	17da      	asrs	r2, r3, #31
 8001464:	461c      	mov	r4, r3
 8001466:	4615      	mov	r5, r2
 8001468:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 800146c:	f145 3bff 	adc.w	fp, r5, #4294967295
 8001470:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	@ 0x128
	var2 = var1 * var1 * (int64_t) _device->dig_P6;
 8001474:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8001478:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800147c:	fb03 f102 	mul.w	r1, r3, r2
 8001480:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8001484:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001488:	fb02 f303 	mul.w	r3, r2, r3
 800148c:	18ca      	adds	r2, r1, r3
 800148e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001492:	fba3 8903 	umull	r8, r9, r3, r3
 8001496:	eb02 0309 	add.w	r3, r2, r9
 800149a:	4699      	mov	r9, r3
 800149c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80014a6:	b21b      	sxth	r3, r3
 80014a8:	17da      	asrs	r2, r3, #31
 80014aa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80014ae:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80014b2:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 80014b6:	4603      	mov	r3, r0
 80014b8:	fb03 f209 	mul.w	r2, r3, r9
 80014bc:	460b      	mov	r3, r1
 80014be:	fb08 f303 	mul.w	r3, r8, r3
 80014c2:	4413      	add	r3, r2
 80014c4:	4602      	mov	r2, r0
 80014c6:	fba8 1202 	umull	r1, r2, r8, r2
 80014ca:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80014ce:	460a      	mov	r2, r1
 80014d0:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 80014d4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80014d8:	4413      	add	r3, r2
 80014da:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80014de:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 80014e2:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
 80014e6:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var2 = var2 + ((var1 * (int64_t) _device->dig_P5) << 17);
 80014ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80014f4:	b21b      	sxth	r3, r3
 80014f6:	17da      	asrs	r2, r3, #31
 80014f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80014fc:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8001500:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001504:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 8001508:	462a      	mov	r2, r5
 800150a:	fb02 f203 	mul.w	r2, r2, r3
 800150e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001512:	4621      	mov	r1, r4
 8001514:	fb01 f303 	mul.w	r3, r1, r3
 8001518:	441a      	add	r2, r3
 800151a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800151e:	4621      	mov	r1, r4
 8001520:	fba3 1301 	umull	r1, r3, r3, r1
 8001524:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001528:	460b      	mov	r3, r1
 800152a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800152e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001532:	18d3      	adds	r3, r2, r3
 8001534:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001538:	f04f 0000 	mov.w	r0, #0
 800153c:	f04f 0100 	mov.w	r1, #0
 8001540:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8001544:	462b      	mov	r3, r5
 8001546:	0459      	lsls	r1, r3, #17
 8001548:	4623      	mov	r3, r4
 800154a:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 800154e:	4623      	mov	r3, r4
 8001550:	0458      	lsls	r0, r3, #17
 8001552:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001556:	1814      	adds	r4, r2, r0
 8001558:	643c      	str	r4, [r7, #64]	@ 0x40
 800155a:	414b      	adcs	r3, r1
 800155c:	647b      	str	r3, [r7, #68]	@ 0x44
 800155e:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8001562:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var2 = var2 + (((int64_t) _device->dig_P4) << 35);
 8001566:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001570:	b21b      	sxth	r3, r3
 8001572:	17da      	asrs	r2, r3, #31
 8001574:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001578:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800157c:	f04f 0000 	mov.w	r0, #0
 8001580:	f04f 0100 	mov.w	r1, #0
 8001584:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001588:	00d9      	lsls	r1, r3, #3
 800158a:	2000      	movs	r0, #0
 800158c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001590:	1814      	adds	r4, r2, r0
 8001592:	63bc      	str	r4, [r7, #56]	@ 0x38
 8001594:	414b      	adcs	r3, r1
 8001596:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001598:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 800159c:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = ((var1 * var1 * (int64_t) _device->dig_P3) >> 8)
 80015a0:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 80015a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80015a8:	fb03 f102 	mul.w	r1, r3, r2
 80015ac:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 80015b0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80015b4:	fb02 f303 	mul.w	r3, r2, r3
 80015b8:	18ca      	adds	r2, r1, r3
 80015ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80015be:	fba3 1303 	umull	r1, r3, r3, r3
 80015c2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80015c6:	460b      	mov	r3, r1
 80015c8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80015cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80015d0:	18d3      	adds	r3, r2, r3
 80015d2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80015d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80015e0:	b21b      	sxth	r3, r3
 80015e2:	17da      	asrs	r2, r3, #31
 80015e4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80015e8:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80015ec:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 80015f0:	462b      	mov	r3, r5
 80015f2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80015f6:	4642      	mov	r2, r8
 80015f8:	fb02 f203 	mul.w	r2, r2, r3
 80015fc:	464b      	mov	r3, r9
 80015fe:	4621      	mov	r1, r4
 8001600:	fb01 f303 	mul.w	r3, r1, r3
 8001604:	4413      	add	r3, r2
 8001606:	4622      	mov	r2, r4
 8001608:	4641      	mov	r1, r8
 800160a:	fba2 1201 	umull	r1, r2, r2, r1
 800160e:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8001612:	460a      	mov	r2, r1
 8001614:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 8001618:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 800161c:	4413      	add	r3, r2
 800161e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8001622:	f04f 0000 	mov.w	r0, #0
 8001626:	f04f 0100 	mov.w	r1, #0
 800162a:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 800162e:	4623      	mov	r3, r4
 8001630:	0a18      	lsrs	r0, r3, #8
 8001632:	462b      	mov	r3, r5
 8001634:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001638:	462b      	mov	r3, r5
 800163a:	1219      	asrs	r1, r3, #8
			+ ((var1 * (int64_t) _device->dig_P2) << 12);
 800163c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001646:	b21b      	sxth	r3, r3
 8001648:	17da      	asrs	r2, r3, #31
 800164a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800164e:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001652:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001656:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 800165a:	464a      	mov	r2, r9
 800165c:	fb02 f203 	mul.w	r2, r2, r3
 8001660:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001664:	4644      	mov	r4, r8
 8001666:	fb04 f303 	mul.w	r3, r4, r3
 800166a:	441a      	add	r2, r3
 800166c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001670:	4644      	mov	r4, r8
 8001672:	fba3 4304 	umull	r4, r3, r3, r4
 8001676:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800167a:	4623      	mov	r3, r4
 800167c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001680:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8001684:	18d3      	adds	r3, r2, r3
 8001686:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800168a:	f04f 0200 	mov.w	r2, #0
 800168e:	f04f 0300 	mov.w	r3, #0
 8001692:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8001696:	464c      	mov	r4, r9
 8001698:	0323      	lsls	r3, r4, #12
 800169a:	4644      	mov	r4, r8
 800169c:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 80016a0:	4644      	mov	r4, r8
 80016a2:	0322      	lsls	r2, r4, #12
	var1 = ((var1 * var1 * (int64_t) _device->dig_P3) >> 8)
 80016a4:	1884      	adds	r4, r0, r2
 80016a6:	633c      	str	r4, [r7, #48]	@ 0x30
 80016a8:	eb41 0303 	adc.w	r3, r1, r3
 80016ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80016ae:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 80016b2:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) _device->dig_P1) >> 33;
 80016b6:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 80016ba:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 80016be:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 80016c2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 80016c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	88db      	ldrh	r3, [r3, #6]
 80016ce:	b29b      	uxth	r3, r3
 80016d0:	2200      	movs	r2, #0
 80016d2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80016d6:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80016da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80016de:	462b      	mov	r3, r5
 80016e0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80016e4:	4642      	mov	r2, r8
 80016e6:	fb02 f203 	mul.w	r2, r2, r3
 80016ea:	464b      	mov	r3, r9
 80016ec:	4621      	mov	r1, r4
 80016ee:	fb01 f303 	mul.w	r3, r1, r3
 80016f2:	4413      	add	r3, r2
 80016f4:	4622      	mov	r2, r4
 80016f6:	4641      	mov	r1, r8
 80016f8:	fba2 1201 	umull	r1, r2, r2, r1
 80016fc:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8001700:	460a      	mov	r2, r1
 8001702:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8001706:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800170a:	4413      	add	r3, r2
 800170c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001710:	f04f 0200 	mov.w	r2, #0
 8001714:	f04f 0300 	mov.w	r3, #0
 8001718:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 800171c:	4629      	mov	r1, r5
 800171e:	104a      	asrs	r2, r1, #1
 8001720:	4629      	mov	r1, r5
 8001722:	17cb      	asrs	r3, r1, #31
 8001724:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128

	if (var1 == 0) {
 8001728:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 800172c:	4313      	orrs	r3, r2
 800172e:	d101      	bne.n	8001734 <_ZN6BMP28019compensate_pressureEll+0x2ea>
		return 0;  // avoid exception caused by division by zero
 8001730:	2300      	movs	r3, #0
 8001732:	e14b      	b.n	80019cc <_ZN6BMP28019compensate_pressureEll+0x582>
	}

	p = 1048576 - adc_press;
 8001734:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001738:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 800173c:	17da      	asrs	r2, r3, #31
 800173e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001740:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001742:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8001746:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	p = (((p << 31) - var2) * 3125) / var1;
 800174a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800174e:	105b      	asrs	r3, r3, #1
 8001750:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001754:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001758:	07db      	lsls	r3, r3, #31
 800175a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800175e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001762:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8001766:	4621      	mov	r1, r4
 8001768:	1a89      	subs	r1, r1, r2
 800176a:	67b9      	str	r1, [r7, #120]	@ 0x78
 800176c:	4629      	mov	r1, r5
 800176e:	eb61 0303 	sbc.w	r3, r1, r3
 8001772:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001774:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001778:	4622      	mov	r2, r4
 800177a:	462b      	mov	r3, r5
 800177c:	1891      	adds	r1, r2, r2
 800177e:	6239      	str	r1, [r7, #32]
 8001780:	415b      	adcs	r3, r3
 8001782:	627b      	str	r3, [r7, #36]	@ 0x24
 8001784:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001788:	4621      	mov	r1, r4
 800178a:	1851      	adds	r1, r2, r1
 800178c:	61b9      	str	r1, [r7, #24]
 800178e:	4629      	mov	r1, r5
 8001790:	414b      	adcs	r3, r1
 8001792:	61fb      	str	r3, [r7, #28]
 8001794:	f04f 0200 	mov.w	r2, #0
 8001798:	f04f 0300 	mov.w	r3, #0
 800179c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80017a0:	4649      	mov	r1, r9
 80017a2:	018b      	lsls	r3, r1, #6
 80017a4:	4641      	mov	r1, r8
 80017a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017aa:	4641      	mov	r1, r8
 80017ac:	018a      	lsls	r2, r1, #6
 80017ae:	4641      	mov	r1, r8
 80017b0:	1889      	adds	r1, r1, r2
 80017b2:	6139      	str	r1, [r7, #16]
 80017b4:	4649      	mov	r1, r9
 80017b6:	eb43 0101 	adc.w	r1, r3, r1
 80017ba:	6179      	str	r1, [r7, #20]
 80017bc:	f04f 0200 	mov.w	r2, #0
 80017c0:	f04f 0300 	mov.w	r3, #0
 80017c4:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80017c8:	4649      	mov	r1, r9
 80017ca:	008b      	lsls	r3, r1, #2
 80017cc:	4641      	mov	r1, r8
 80017ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80017d2:	4641      	mov	r1, r8
 80017d4:	008a      	lsls	r2, r1, #2
 80017d6:	4610      	mov	r0, r2
 80017d8:	4619      	mov	r1, r3
 80017da:	4603      	mov	r3, r0
 80017dc:	4622      	mov	r2, r4
 80017de:	189b      	adds	r3, r3, r2
 80017e0:	60bb      	str	r3, [r7, #8]
 80017e2:	460b      	mov	r3, r1
 80017e4:	462a      	mov	r2, r5
 80017e6:	eb42 0303 	adc.w	r3, r2, r3
 80017ea:	60fb      	str	r3, [r7, #12]
 80017ec:	f04f 0200 	mov.w	r2, #0
 80017f0:	f04f 0300 	mov.w	r3, #0
 80017f4:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80017f8:	4649      	mov	r1, r9
 80017fa:	008b      	lsls	r3, r1, #2
 80017fc:	4641      	mov	r1, r8
 80017fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001802:	4641      	mov	r1, r8
 8001804:	008a      	lsls	r2, r1, #2
 8001806:	4610      	mov	r0, r2
 8001808:	4619      	mov	r1, r3
 800180a:	4603      	mov	r3, r0
 800180c:	4622      	mov	r2, r4
 800180e:	189b      	adds	r3, r3, r2
 8001810:	673b      	str	r3, [r7, #112]	@ 0x70
 8001812:	462b      	mov	r3, r5
 8001814:	460a      	mov	r2, r1
 8001816:	eb42 0303 	adc.w	r3, r2, r3
 800181a:	677b      	str	r3, [r7, #116]	@ 0x74
 800181c:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8001820:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001824:	f7fe fcd8 	bl	80001d8 <__aeabi_ldivmod>
 8001828:	4602      	mov	r2, r0
 800182a:	460b      	mov	r3, r1
 800182c:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	var1 = ((int64_t) _device->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 8001830:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800183a:	b21b      	sxth	r3, r3
 800183c:	17da      	asrs	r2, r3, #31
 800183e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001840:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001842:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001846:	f04f 0000 	mov.w	r0, #0
 800184a:	f04f 0100 	mov.w	r1, #0
 800184e:	0b50      	lsrs	r0, r2, #13
 8001850:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001854:	1359      	asrs	r1, r3, #13
 8001856:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 800185a:	462b      	mov	r3, r5
 800185c:	fb00 f203 	mul.w	r2, r0, r3
 8001860:	4623      	mov	r3, r4
 8001862:	fb03 f301 	mul.w	r3, r3, r1
 8001866:	4413      	add	r3, r2
 8001868:	4622      	mov	r2, r4
 800186a:	fba2 1200 	umull	r1, r2, r2, r0
 800186e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001872:	460a      	mov	r2, r1
 8001874:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8001878:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800187c:	4413      	add	r3, r2
 800187e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8001882:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001886:	f04f 0000 	mov.w	r0, #0
 800188a:	f04f 0100 	mov.w	r1, #0
 800188e:	0b50      	lsrs	r0, r2, #13
 8001890:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001894:	1359      	asrs	r1, r3, #13
 8001896:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 800189a:	462b      	mov	r3, r5
 800189c:	fb00 f203 	mul.w	r2, r0, r3
 80018a0:	4623      	mov	r3, r4
 80018a2:	fb03 f301 	mul.w	r3, r3, r1
 80018a6:	4413      	add	r3, r2
 80018a8:	4622      	mov	r2, r4
 80018aa:	fba2 1200 	umull	r1, r2, r2, r0
 80018ae:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80018b2:	460a      	mov	r2, r1
 80018b4:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 80018b8:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80018bc:	4413      	add	r3, r2
 80018be:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80018c2:	f04f 0200 	mov.w	r2, #0
 80018c6:	f04f 0300 	mov.w	r3, #0
 80018ca:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 80018ce:	4621      	mov	r1, r4
 80018d0:	0e4a      	lsrs	r2, r1, #25
 80018d2:	4629      	mov	r1, r5
 80018d4:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80018d8:	4629      	mov	r1, r5
 80018da:	164b      	asrs	r3, r1, #25
 80018dc:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128
	var2 = ((int64_t) _device->dig_P8 * p) >> 19;
 80018e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80018ea:	b21b      	sxth	r3, r3
 80018ec:	17da      	asrs	r2, r3, #31
 80018ee:	663b      	str	r3, [r7, #96]	@ 0x60
 80018f0:	667a      	str	r2, [r7, #100]	@ 0x64
 80018f2:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80018f6:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80018fa:	462a      	mov	r2, r5
 80018fc:	fb02 f203 	mul.w	r2, r2, r3
 8001900:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001904:	4621      	mov	r1, r4
 8001906:	fb01 f303 	mul.w	r3, r1, r3
 800190a:	4413      	add	r3, r2
 800190c:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001910:	4621      	mov	r1, r4
 8001912:	fba2 1201 	umull	r1, r2, r2, r1
 8001916:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 800191a:	460a      	mov	r2, r1
 800191c:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8001920:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8001924:	4413      	add	r3, r2
 8001926:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800192a:	f04f 0200 	mov.w	r2, #0
 800192e:	f04f 0300 	mov.w	r3, #0
 8001932:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8001936:	4621      	mov	r1, r4
 8001938:	0cca      	lsrs	r2, r1, #19
 800193a:	4629      	mov	r1, r5
 800193c:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001940:	4629      	mov	r1, r5
 8001942:	14cb      	asrs	r3, r1, #19
 8001944:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120

	p = ((p + var1 + var2) >> 8) + ((int64_t) _device->dig_P7 << 4);
 8001948:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 800194c:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8001950:	1884      	adds	r4, r0, r2
 8001952:	65bc      	str	r4, [r7, #88]	@ 0x58
 8001954:	eb41 0303 	adc.w	r3, r1, r3
 8001958:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800195a:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 800195e:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8001962:	4621      	mov	r1, r4
 8001964:	1889      	adds	r1, r1, r2
 8001966:	6539      	str	r1, [r7, #80]	@ 0x50
 8001968:	4629      	mov	r1, r5
 800196a:	eb43 0101 	adc.w	r1, r3, r1
 800196e:	6579      	str	r1, [r7, #84]	@ 0x54
 8001970:	f04f 0000 	mov.w	r0, #0
 8001974:	f04f 0100 	mov.w	r1, #0
 8001978:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 800197c:	4623      	mov	r3, r4
 800197e:	0a18      	lsrs	r0, r3, #8
 8001980:	462b      	mov	r3, r5
 8001982:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001986:	462b      	mov	r3, r5
 8001988:	1219      	asrs	r1, r3, #8
 800198a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001994:	b21b      	sxth	r3, r3
 8001996:	17da      	asrs	r2, r3, #31
 8001998:	64bb      	str	r3, [r7, #72]	@ 0x48
 800199a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800199c:	f04f 0200 	mov.w	r2, #0
 80019a0:	f04f 0300 	mov.w	r3, #0
 80019a4:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 80019a8:	464c      	mov	r4, r9
 80019aa:	0123      	lsls	r3, r4, #4
 80019ac:	4644      	mov	r4, r8
 80019ae:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80019b2:	4644      	mov	r4, r8
 80019b4:	0122      	lsls	r2, r4, #4
 80019b6:	1884      	adds	r4, r0, r2
 80019b8:	603c      	str	r4, [r7, #0]
 80019ba:	eb41 0303 	adc.w	r3, r1, r3
 80019be:	607b      	str	r3, [r7, #4]
 80019c0:	e9d7 3400 	ldrd	r3, r4, [r7]
 80019c4:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	return p;
 80019c8:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80019d2:	46bd      	mov	sp, r7
 80019d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080019d8 <_ZN6BMP28019compensate_humidityEll>:
/**
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
inline uint32_t BMP280::compensate_humidity(int32_t adc_hum, int32_t fine_temp) {
 80019d8:	b480      	push	{r7}
 80019da:	b087      	sub	sp, #28
 80019dc:	af00      	add	r7, sp, #0
 80019de:	60f8      	str	r0, [r7, #12]
 80019e0:	60b9      	str	r1, [r7, #8]
 80019e2:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 80019ea:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) _device->dig_H4 << 20)
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	039a      	lsls	r2, r3, #14
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80019f8:	051b      	lsls	r3, r3, #20
 80019fa:	1ad2      	subs	r2, r2, r3
			- ((int32_t) _device->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001a04:	4619      	mov	r1, r3
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	fb01 f303 	mul.w	r3, r1, r3
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001a12:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) _device->dig_H6) >> 10)
 8001a14:	68fa      	ldr	r2, [r7, #12]
 8001a16:	6812      	ldr	r2, [r2, #0]
 8001a18:	f992 2022 	ldrsb.w	r2, [r2, #34]	@ 0x22
 8001a1c:	4611      	mov	r1, r2
 8001a1e:	697a      	ldr	r2, [r7, #20]
 8001a20:	fb01 f202 	mul.w	r2, r1, r2
 8001a24:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) _device->dig_H3) >> 11)
 8001a26:	68f9      	ldr	r1, [r7, #12]
 8001a28:	6809      	ldr	r1, [r1, #0]
 8001a2a:	7f09      	ldrb	r1, [r1, #28]
 8001a2c:	4608      	mov	r0, r1
 8001a2e:	6979      	ldr	r1, [r7, #20]
 8001a30:	fb00 f101 	mul.w	r1, r0, r1
 8001a34:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001a36:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
					* (((v_x1_u32r * (int32_t) _device->dig_H3) >> 11)
 8001a3a:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001a3e:	1292      	asrs	r2, r2, #10
 8001a40:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
					* (int32_t) _device->dig_H2 + 8192) >> 14);
 8001a44:	68f9      	ldr	r1, [r7, #12]
 8001a46:	6809      	ldr	r1, [r1, #0]
 8001a48:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 8001a4c:	fb01 f202 	mul.w	r2, r1, r2
 8001a50:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8001a54:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) _device->dig_H4 << 20)
 8001a56:	fb02 f303 	mul.w	r3, r2, r3
 8001a5a:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	13db      	asrs	r3, r3, #15
 8001a60:	697a      	ldr	r2, [r7, #20]
 8001a62:	13d2      	asrs	r2, r2, #15
 8001a64:	fb02 f303 	mul.w	r3, r2, r3
 8001a68:	11db      	asrs	r3, r3, #7
					* (int32_t) _device->dig_H1) >> 4);
 8001a6a:	68fa      	ldr	r2, [r7, #12]
 8001a6c:	6812      	ldr	r2, [r2, #0]
 8001a6e:	7e12      	ldrb	r2, [r2, #24]
 8001a70:	fb02 f303 	mul.w	r3, r2, r3
 8001a74:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 8001a76:	697a      	ldr	r2, [r7, #20]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001a82:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 8001a8a:	bfa8      	it	ge
 8001a8c:	f04f 53c8 	movge.w	r3, #419430400	@ 0x19000000
 8001a90:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	131b      	asrs	r3, r3, #12
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	371c      	adds	r7, #28
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr

08001aa2 <_ZN6BMP28017bmp280_read_fixedEPlPmS1_>:

bool BMP280::bmp280_read_fixed(int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 8001aa2:	b580      	push	{r7, lr}
 8001aa4:	b08c      	sub	sp, #48	@ 0x30
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	60f8      	str	r0, [r7, #12]
 8001aaa:	60b9      	str	r1, [r7, #8]
 8001aac:	607a      	str	r2, [r7, #4]
 8001aae:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (_device->id != BME280_CHIP_ID) {
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001ab8:	2b60      	cmp	r3, #96	@ 0x60
 8001aba:	d007      	beq.n	8001acc <_ZN6BMP28017bmp280_read_fixedEPlPmS1_+0x2a>
		if (humidity)
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d002      	beq.n	8001ac8 <_ZN6BMP28017bmp280_read_fixedEPlPmS1_+0x26>
			*humidity = 0;
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d001      	beq.n	8001ad6 <_ZN6BMP28017bmp280_read_fixedEPlPmS1_+0x34>
 8001ad2:	2308      	movs	r3, #8
 8001ad4:	e000      	b.n	8001ad8 <_ZN6BMP28017bmp280_read_fixedEPlPmS1_+0x36>
 8001ad6:	2306      	movs	r3, #6
 8001ad8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (read_data(0xf7, data, size)) {
 8001ada:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	f107 0218 	add.w	r2, r7, #24
 8001ae2:	21f7      	movs	r1, #247	@ 0xf7
 8001ae4:	68f8      	ldr	r0, [r7, #12]
 8001ae6:	f7ff fa32 	bl	8000f4e <_ZN6BMP2809read_dataEhPhh>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	bf14      	ite	ne
 8001af0:	2301      	movne	r3, #1
 8001af2:	2300      	moveq	r3, #0
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <_ZN6BMP28017bmp280_read_fixedEPlPmS1_+0x5c>
		return false;
 8001afa:	2300      	movs	r3, #0
 8001afc:	e038      	b.n	8001b70 <_ZN6BMP28017bmp280_read_fixedEPlPmS1_+0xce>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8001afe:	7e3b      	ldrb	r3, [r7, #24]
 8001b00:	031a      	lsls	r2, r3, #12
 8001b02:	7e7b      	ldrb	r3, [r7, #25]
 8001b04:	011b      	lsls	r3, r3, #4
 8001b06:	4313      	orrs	r3, r2
 8001b08:	7eba      	ldrb	r2, [r7, #26]
 8001b0a:	0912      	lsrs	r2, r2, #4
 8001b0c:	b2d2      	uxtb	r2, r2
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	62bb      	str	r3, [r7, #40]	@ 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 8001b12:	7efb      	ldrb	r3, [r7, #27]
 8001b14:	031a      	lsls	r2, r3, #12
 8001b16:	7f3b      	ldrb	r3, [r7, #28]
 8001b18:	011b      	lsls	r3, r3, #4
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	7f7a      	ldrb	r2, [r7, #29]
 8001b1e:	0912      	lsrs	r2, r2, #4
 8001b20:	b2d2      	uxtb	r2, r2
 8001b22:	4313      	orrs	r3, r2
 8001b24:	627b      	str	r3, [r7, #36]	@ 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(adc_temp, &fine_temp);
 8001b26:	f107 0314 	add.w	r3, r7, #20
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001b2e:	68f8      	ldr	r0, [r7, #12]
 8001b30:	f7ff fc4d 	bl	80013ce <_ZN6BMP28022compensate_temperatureElPl>
 8001b34:	4602      	mov	r2, r0
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(adc_pressure, fine_temp);
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001b40:	68f8      	ldr	r0, [r7, #12]
 8001b42:	f7ff fc82 	bl	800144a <_ZN6BMP28019compensate_pressureEll>
 8001b46:	4602      	mov	r2, r0
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	601a      	str	r2, [r3, #0]

	if (humidity) {
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d00d      	beq.n	8001b6e <_ZN6BMP28017bmp280_read_fixedEPlPmS1_+0xcc>
		int32_t adc_humidity = data[6] << 8 | data[7];
 8001b52:	7fbb      	ldrb	r3, [r7, #30]
 8001b54:	021b      	lsls	r3, r3, #8
 8001b56:	7ffa      	ldrb	r2, [r7, #31]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(adc_humidity, fine_temp);
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	461a      	mov	r2, r3
 8001b60:	6a39      	ldr	r1, [r7, #32]
 8001b62:	68f8      	ldr	r0, [r7, #12]
 8001b64:	f7ff ff38 	bl	80019d8 <_ZN6BMP28019compensate_humidityEll>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	601a      	str	r2, [r3, #0]
	}

	return true;
 8001b6e:	2301      	movs	r3, #1
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3730      	adds	r7, #48	@ 0x30
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <_ZN6BMP28017bmp280_read_floatEPfS0_S0_>:

bool BMP280::bmp280_read_float(float *temperature, float *pressure,
		float *humidity) {
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b088      	sub	sp, #32
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	60f8      	str	r0, [r7, #12]
 8001b80:	60b9      	str	r1, [r7, #8]
 8001b82:	607a      	str	r2, [r7, #4]
 8001b84:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(&fixed_temperature, &fixed_pressure,
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d002      	beq.n	8001b92 <_ZN6BMP28017bmp280_read_floatEPfS0_S0_+0x1a>
 8001b8c:	f107 0314 	add.w	r3, r7, #20
 8001b90:	e000      	b.n	8001b94 <_ZN6BMP28017bmp280_read_floatEPfS0_S0_+0x1c>
 8001b92:	2300      	movs	r3, #0
 8001b94:	f107 0218 	add.w	r2, r7, #24
 8001b98:	f107 011c 	add.w	r1, r7, #28
 8001b9c:	68f8      	ldr	r0, [r7, #12]
 8001b9e:	f7ff ff80 	bl	8001aa2 <_ZN6BMP28017bmp280_read_fixedEPlPmS1_>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d028      	beq.n	8001bfa <_ZN6BMP28017bmp280_read_floatEPfS0_S0_+0x82>
			humidity ? &fixed_humidity : NULL)) {
		*temperature = (float) fixed_temperature / 100;
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	ee07 3a90 	vmov	s15, r3
 8001bae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bb2:	eddf 6a14 	vldr	s13, [pc, #80]	@ 8001c04 <_ZN6BMP28017bmp280_read_floatEPfS0_S0_+0x8c>
 8001bb6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	edc3 7a00 	vstr	s15, [r3]
		*pressure = (float) fixed_pressure / 256;
 8001bc0:	69bb      	ldr	r3, [r7, #24]
 8001bc2:	ee07 3a90 	vmov	s15, r3
 8001bc6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001bca:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8001c08 <_ZN6BMP28017bmp280_read_floatEPfS0_S0_+0x90>
 8001bce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	edc3 7a00 	vstr	s15, [r3]
		if (humidity)
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d00b      	beq.n	8001bf6 <_ZN6BMP28017bmp280_read_floatEPfS0_S0_+0x7e>
			*humidity = (float) fixed_humidity / 1024;
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	ee07 3a90 	vmov	s15, r3
 8001be4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001be8:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8001c0c <_ZN6BMP28017bmp280_read_floatEPfS0_S0_+0x94>
 8001bec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	edc3 7a00 	vstr	s15, [r3]
		return true;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e000      	b.n	8001bfc <_ZN6BMP28017bmp280_read_floatEPfS0_S0_+0x84>
	}

	return false;
 8001bfa:	2300      	movs	r3, #0
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3720      	adds	r7, #32
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	42c80000 	.word	0x42c80000
 8001c08:	43800000 	.word	0x43800000
 8001c0c:	44800000 	.word	0x44800000

08001c10 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b088      	sub	sp, #32
 8001c14:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c16:	f107 030c 	add.w	r3, r7, #12
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	601a      	str	r2, [r3, #0]
 8001c1e:	605a      	str	r2, [r3, #4]
 8001c20:	609a      	str	r2, [r3, #8]
 8001c22:	60da      	str	r2, [r3, #12]
 8001c24:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c26:	2300      	movs	r3, #0
 8001c28:	60bb      	str	r3, [r7, #8]
 8001c2a:	4b27      	ldr	r3, [pc, #156]	@ (8001cc8 <MX_GPIO_Init+0xb8>)
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c2e:	4a26      	ldr	r2, [pc, #152]	@ (8001cc8 <MX_GPIO_Init+0xb8>)
 8001c30:	f043 0304 	orr.w	r3, r3, #4
 8001c34:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c36:	4b24      	ldr	r3, [pc, #144]	@ (8001cc8 <MX_GPIO_Init+0xb8>)
 8001c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c3a:	f003 0304 	and.w	r3, r3, #4
 8001c3e:	60bb      	str	r3, [r7, #8]
 8001c40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c42:	2300      	movs	r3, #0
 8001c44:	607b      	str	r3, [r7, #4]
 8001c46:	4b20      	ldr	r3, [pc, #128]	@ (8001cc8 <MX_GPIO_Init+0xb8>)
 8001c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c4a:	4a1f      	ldr	r2, [pc, #124]	@ (8001cc8 <MX_GPIO_Init+0xb8>)
 8001c4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c50:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c52:	4b1d      	ldr	r3, [pc, #116]	@ (8001cc8 <MX_GPIO_Init+0xb8>)
 8001c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c5a:	607b      	str	r3, [r7, #4]
 8001c5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c5e:	2300      	movs	r3, #0
 8001c60:	603b      	str	r3, [r7, #0]
 8001c62:	4b19      	ldr	r3, [pc, #100]	@ (8001cc8 <MX_GPIO_Init+0xb8>)
 8001c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c66:	4a18      	ldr	r2, [pc, #96]	@ (8001cc8 <MX_GPIO_Init+0xb8>)
 8001c68:	f043 0302 	orr.w	r3, r3, #2
 8001c6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c6e:	4b16      	ldr	r3, [pc, #88]	@ (8001cc8 <MX_GPIO_Init+0xb8>)
 8001c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c72:	f003 0302 	and.w	r3, r3, #2
 8001c76:	603b      	str	r3, [r7, #0]
 8001c78:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001c80:	4812      	ldr	r0, [pc, #72]	@ (8001ccc <MX_GPIO_Init+0xbc>)
 8001c82:	f000 fd2d 	bl	80026e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8001c86:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c8a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c90:	2300      	movs	r3, #0
 8001c92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c94:	2300      	movs	r3, #0
 8001c96:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8001c98:	f107 030c 	add.w	r3, r7, #12
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	480b      	ldr	r0, [pc, #44]	@ (8001ccc <MX_GPIO_Init+0xbc>)
 8001ca0:	f000 fb9a 	bl	80023d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = NRF_CE_Pin|NRF_CSN_Pin;
 8001ca4:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001ca8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001caa:	2300      	movs	r3, #0
 8001cac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cb2:	f107 030c 	add.w	r3, r7, #12
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	4805      	ldr	r0, [pc, #20]	@ (8001cd0 <MX_GPIO_Init+0xc0>)
 8001cba:	f000 fb8d 	bl	80023d8 <HAL_GPIO_Init>

}
 8001cbe:	bf00      	nop
 8001cc0:	3720      	adds	r7, #32
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	40023800 	.word	0x40023800
 8001ccc:	40020800 	.word	0x40020800
 8001cd0:	40020400 	.word	0x40020400

08001cd4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001cd8:	4b12      	ldr	r3, [pc, #72]	@ (8001d24 <MX_I2C1_Init+0x50>)
 8001cda:	4a13      	ldr	r2, [pc, #76]	@ (8001d28 <MX_I2C1_Init+0x54>)
 8001cdc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001cde:	4b11      	ldr	r3, [pc, #68]	@ (8001d24 <MX_I2C1_Init+0x50>)
 8001ce0:	4a12      	ldr	r2, [pc, #72]	@ (8001d2c <MX_I2C1_Init+0x58>)
 8001ce2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ce4:	4b0f      	ldr	r3, [pc, #60]	@ (8001d24 <MX_I2C1_Init+0x50>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001cea:	4b0e      	ldr	r3, [pc, #56]	@ (8001d24 <MX_I2C1_Init+0x50>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001cf0:	4b0c      	ldr	r3, [pc, #48]	@ (8001d24 <MX_I2C1_Init+0x50>)
 8001cf2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001cf6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001cf8:	4b0a      	ldr	r3, [pc, #40]	@ (8001d24 <MX_I2C1_Init+0x50>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001cfe:	4b09      	ldr	r3, [pc, #36]	@ (8001d24 <MX_I2C1_Init+0x50>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d04:	4b07      	ldr	r3, [pc, #28]	@ (8001d24 <MX_I2C1_Init+0x50>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d0a:	4b06      	ldr	r3, [pc, #24]	@ (8001d24 <MX_I2C1_Init+0x50>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d10:	4804      	ldr	r0, [pc, #16]	@ (8001d24 <MX_I2C1_Init+0x50>)
 8001d12:	f000 fcff 	bl	8002714 <HAL_I2C_Init>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d001      	beq.n	8001d20 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001d1c:	f000 f8c8 	bl	8001eb0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001d20:	bf00      	nop
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	20000104 	.word	0x20000104
 8001d28:	40005400 	.word	0x40005400
 8001d2c:	000186a0 	.word	0x000186a0

08001d30 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b08a      	sub	sp, #40	@ 0x28
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d38:	f107 0314 	add.w	r3, r7, #20
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	601a      	str	r2, [r3, #0]
 8001d40:	605a      	str	r2, [r3, #4]
 8001d42:	609a      	str	r2, [r3, #8]
 8001d44:	60da      	str	r2, [r3, #12]
 8001d46:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a19      	ldr	r2, [pc, #100]	@ (8001db4 <HAL_I2C_MspInit+0x84>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d12b      	bne.n	8001daa <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d52:	2300      	movs	r3, #0
 8001d54:	613b      	str	r3, [r7, #16]
 8001d56:	4b18      	ldr	r3, [pc, #96]	@ (8001db8 <HAL_I2C_MspInit+0x88>)
 8001d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d5a:	4a17      	ldr	r2, [pc, #92]	@ (8001db8 <HAL_I2C_MspInit+0x88>)
 8001d5c:	f043 0302 	orr.w	r3, r3, #2
 8001d60:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d62:	4b15      	ldr	r3, [pc, #84]	@ (8001db8 <HAL_I2C_MspInit+0x88>)
 8001d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d66:	f003 0302 	and.w	r3, r3, #2
 8001d6a:	613b      	str	r3, [r7, #16]
 8001d6c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d6e:	23c0      	movs	r3, #192	@ 0xc0
 8001d70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d72:	2312      	movs	r3, #18
 8001d74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d76:	2300      	movs	r3, #0
 8001d78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d7e:	2304      	movs	r3, #4
 8001d80:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d82:	f107 0314 	add.w	r3, r7, #20
 8001d86:	4619      	mov	r1, r3
 8001d88:	480c      	ldr	r0, [pc, #48]	@ (8001dbc <HAL_I2C_MspInit+0x8c>)
 8001d8a:	f000 fb25 	bl	80023d8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d8e:	2300      	movs	r3, #0
 8001d90:	60fb      	str	r3, [r7, #12]
 8001d92:	4b09      	ldr	r3, [pc, #36]	@ (8001db8 <HAL_I2C_MspInit+0x88>)
 8001d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d96:	4a08      	ldr	r2, [pc, #32]	@ (8001db8 <HAL_I2C_MspInit+0x88>)
 8001d98:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001d9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d9e:	4b06      	ldr	r3, [pc, #24]	@ (8001db8 <HAL_I2C_MspInit+0x88>)
 8001da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001da2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001da6:	60fb      	str	r3, [r7, #12]
 8001da8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001daa:	bf00      	nop
 8001dac:	3728      	adds	r7, #40	@ 0x28
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	40005400 	.word	0x40005400
 8001db8:	40023800 	.word	0x40023800
 8001dbc:	40020400 	.word	0x40020400

08001dc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001dc4:	f000 f98c 	bl	80020e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001dc8:	f000 f80a 	bl	8001de0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001dcc:	f7ff ff20 	bl	8001c10 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001dd0:	f7ff ff80 	bl	8001cd4 <MX_I2C1_Init>
  MX_SPI2_Init();
 8001dd4:	f000 f872 	bl	8001ebc <MX_SPI2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  EventLoopC();
 8001dd8:	f7fe fc12 	bl	8000600 <EventLoopC>

  while (1)
 8001ddc:	bf00      	nop
 8001dde:	e7fd      	b.n	8001ddc <main+0x1c>

08001de0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b094      	sub	sp, #80	@ 0x50
 8001de4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001de6:	f107 0320 	add.w	r3, r7, #32
 8001dea:	2230      	movs	r2, #48	@ 0x30
 8001dec:	2100      	movs	r1, #0
 8001dee:	4618      	mov	r0, r3
 8001df0:	f002 fc1e 	bl	8004630 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001df4:	f107 030c 	add.w	r3, r7, #12
 8001df8:	2200      	movs	r2, #0
 8001dfa:	601a      	str	r2, [r3, #0]
 8001dfc:	605a      	str	r2, [r3, #4]
 8001dfe:	609a      	str	r2, [r3, #8]
 8001e00:	60da      	str	r2, [r3, #12]
 8001e02:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e04:	2300      	movs	r3, #0
 8001e06:	60bb      	str	r3, [r7, #8]
 8001e08:	4b27      	ldr	r3, [pc, #156]	@ (8001ea8 <SystemClock_Config+0xc8>)
 8001e0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e0c:	4a26      	ldr	r2, [pc, #152]	@ (8001ea8 <SystemClock_Config+0xc8>)
 8001e0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e12:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e14:	4b24      	ldr	r3, [pc, #144]	@ (8001ea8 <SystemClock_Config+0xc8>)
 8001e16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e1c:	60bb      	str	r3, [r7, #8]
 8001e1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e20:	2300      	movs	r3, #0
 8001e22:	607b      	str	r3, [r7, #4]
 8001e24:	4b21      	ldr	r3, [pc, #132]	@ (8001eac <SystemClock_Config+0xcc>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a20      	ldr	r2, [pc, #128]	@ (8001eac <SystemClock_Config+0xcc>)
 8001e2a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001e2e:	6013      	str	r3, [r2, #0]
 8001e30:	4b1e      	ldr	r3, [pc, #120]	@ (8001eac <SystemClock_Config+0xcc>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001e38:	607b      	str	r3, [r7, #4]
 8001e3a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e40:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001e44:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e46:	2302      	movs	r3, #2
 8001e48:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e4a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001e4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8001e50:	230c      	movs	r3, #12
 8001e52:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001e54:	2360      	movs	r3, #96	@ 0x60
 8001e56:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e58:	2302      	movs	r3, #2
 8001e5a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001e5c:	2304      	movs	r3, #4
 8001e5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e60:	f107 0320 	add.w	r3, r7, #32
 8001e64:	4618      	mov	r0, r3
 8001e66:	f001 fc79 	bl	800375c <HAL_RCC_OscConfig>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d001      	beq.n	8001e74 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001e70:	f000 f81e 	bl	8001eb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e74:	230f      	movs	r3, #15
 8001e76:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e78:	2302      	movs	r3, #2
 8001e7a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e80:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e84:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e86:	2300      	movs	r3, #0
 8001e88:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001e8a:	f107 030c 	add.w	r3, r7, #12
 8001e8e:	2103      	movs	r1, #3
 8001e90:	4618      	mov	r0, r3
 8001e92:	f001 fedb 	bl	8003c4c <HAL_RCC_ClockConfig>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d001      	beq.n	8001ea0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001e9c:	f000 f808 	bl	8001eb0 <Error_Handler>
  }
}
 8001ea0:	bf00      	nop
 8001ea2:	3750      	adds	r7, #80	@ 0x50
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	40023800 	.word	0x40023800
 8001eac:	40007000 	.word	0x40007000

08001eb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001eb4:	b672      	cpsid	i
}
 8001eb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001eb8:	bf00      	nop
 8001eba:	e7fd      	b.n	8001eb8 <Error_Handler+0x8>

08001ebc <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001ec0:	4b17      	ldr	r3, [pc, #92]	@ (8001f20 <MX_SPI2_Init+0x64>)
 8001ec2:	4a18      	ldr	r2, [pc, #96]	@ (8001f24 <MX_SPI2_Init+0x68>)
 8001ec4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001ec6:	4b16      	ldr	r3, [pc, #88]	@ (8001f20 <MX_SPI2_Init+0x64>)
 8001ec8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001ecc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001ece:	4b14      	ldr	r3, [pc, #80]	@ (8001f20 <MX_SPI2_Init+0x64>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ed4:	4b12      	ldr	r3, [pc, #72]	@ (8001f20 <MX_SPI2_Init+0x64>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001eda:	4b11      	ldr	r3, [pc, #68]	@ (8001f20 <MX_SPI2_Init+0x64>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ee0:	4b0f      	ldr	r3, [pc, #60]	@ (8001f20 <MX_SPI2_Init+0x64>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001ee6:	4b0e      	ldr	r3, [pc, #56]	@ (8001f20 <MX_SPI2_Init+0x64>)
 8001ee8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001eec:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001eee:	4b0c      	ldr	r3, [pc, #48]	@ (8001f20 <MX_SPI2_Init+0x64>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ef4:	4b0a      	ldr	r3, [pc, #40]	@ (8001f20 <MX_SPI2_Init+0x64>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001efa:	4b09      	ldr	r3, [pc, #36]	@ (8001f20 <MX_SPI2_Init+0x64>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f00:	4b07      	ldr	r3, [pc, #28]	@ (8001f20 <MX_SPI2_Init+0x64>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001f06:	4b06      	ldr	r3, [pc, #24]	@ (8001f20 <MX_SPI2_Init+0x64>)
 8001f08:	220a      	movs	r2, #10
 8001f0a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001f0c:	4804      	ldr	r0, [pc, #16]	@ (8001f20 <MX_SPI2_Init+0x64>)
 8001f0e:	f002 f869 	bl	8003fe4 <HAL_SPI_Init>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d001      	beq.n	8001f1c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001f18:	f7ff ffca 	bl	8001eb0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001f1c:	bf00      	nop
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	20000158 	.word	0x20000158
 8001f24:	40003800 	.word	0x40003800

08001f28 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b08a      	sub	sp, #40	@ 0x28
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f30:	f107 0314 	add.w	r3, r7, #20
 8001f34:	2200      	movs	r2, #0
 8001f36:	601a      	str	r2, [r3, #0]
 8001f38:	605a      	str	r2, [r3, #4]
 8001f3a:	609a      	str	r2, [r3, #8]
 8001f3c:	60da      	str	r2, [r3, #12]
 8001f3e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a19      	ldr	r2, [pc, #100]	@ (8001fac <HAL_SPI_MspInit+0x84>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d12c      	bne.n	8001fa4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	613b      	str	r3, [r7, #16]
 8001f4e:	4b18      	ldr	r3, [pc, #96]	@ (8001fb0 <HAL_SPI_MspInit+0x88>)
 8001f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f52:	4a17      	ldr	r2, [pc, #92]	@ (8001fb0 <HAL_SPI_MspInit+0x88>)
 8001f54:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f58:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f5a:	4b15      	ldr	r3, [pc, #84]	@ (8001fb0 <HAL_SPI_MspInit+0x88>)
 8001f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f62:	613b      	str	r3, [r7, #16]
 8001f64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f66:	2300      	movs	r3, #0
 8001f68:	60fb      	str	r3, [r7, #12]
 8001f6a:	4b11      	ldr	r3, [pc, #68]	@ (8001fb0 <HAL_SPI_MspInit+0x88>)
 8001f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f6e:	4a10      	ldr	r2, [pc, #64]	@ (8001fb0 <HAL_SPI_MspInit+0x88>)
 8001f70:	f043 0302 	orr.w	r3, r3, #2
 8001f74:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f76:	4b0e      	ldr	r3, [pc, #56]	@ (8001fb0 <HAL_SPI_MspInit+0x88>)
 8001f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f7a:	f003 0302 	and.w	r3, r3, #2
 8001f7e:	60fb      	str	r3, [r7, #12]
 8001f80:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = NRF_SCK_Pin|NRF_MISO_Pin|NRF_MOSI_Pin;
 8001f82:	f44f 4344 	mov.w	r3, #50176	@ 0xc400
 8001f86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f88:	2302      	movs	r3, #2
 8001f8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f90:	2303      	movs	r3, #3
 8001f92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f94:	2305      	movs	r3, #5
 8001f96:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f98:	f107 0314 	add.w	r3, r7, #20
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	4805      	ldr	r0, [pc, #20]	@ (8001fb4 <HAL_SPI_MspInit+0x8c>)
 8001fa0:	f000 fa1a 	bl	80023d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001fa4:	bf00      	nop
 8001fa6:	3728      	adds	r7, #40	@ 0x28
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	40003800 	.word	0x40003800
 8001fb0:	40023800 	.word	0x40023800
 8001fb4:	40020400 	.word	0x40020400

08001fb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	607b      	str	r3, [r7, #4]
 8001fc2:	4b10      	ldr	r3, [pc, #64]	@ (8002004 <HAL_MspInit+0x4c>)
 8001fc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fc6:	4a0f      	ldr	r2, [pc, #60]	@ (8002004 <HAL_MspInit+0x4c>)
 8001fc8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fcc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fce:	4b0d      	ldr	r3, [pc, #52]	@ (8002004 <HAL_MspInit+0x4c>)
 8001fd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fd2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fd6:	607b      	str	r3, [r7, #4]
 8001fd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fda:	2300      	movs	r3, #0
 8001fdc:	603b      	str	r3, [r7, #0]
 8001fde:	4b09      	ldr	r3, [pc, #36]	@ (8002004 <HAL_MspInit+0x4c>)
 8001fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fe2:	4a08      	ldr	r2, [pc, #32]	@ (8002004 <HAL_MspInit+0x4c>)
 8001fe4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fe8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fea:	4b06      	ldr	r3, [pc, #24]	@ (8002004 <HAL_MspInit+0x4c>)
 8001fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ff2:	603b      	str	r3, [r7, #0]
 8001ff4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ff6:	bf00      	nop
 8001ff8:	370c      	adds	r7, #12
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	40023800 	.word	0x40023800

08002008 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800200c:	bf00      	nop
 800200e:	e7fd      	b.n	800200c <NMI_Handler+0x4>

08002010 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002014:	bf00      	nop
 8002016:	e7fd      	b.n	8002014 <HardFault_Handler+0x4>

08002018 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800201c:	bf00      	nop
 800201e:	e7fd      	b.n	800201c <MemManage_Handler+0x4>

08002020 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002024:	bf00      	nop
 8002026:	e7fd      	b.n	8002024 <BusFault_Handler+0x4>

08002028 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800202c:	bf00      	nop
 800202e:	e7fd      	b.n	800202c <UsageFault_Handler+0x4>

08002030 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002034:	bf00      	nop
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr

0800203e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800203e:	b480      	push	{r7}
 8002040:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002042:	bf00      	nop
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr

0800204c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002050:	bf00      	nop
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr

0800205a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800205a:	b580      	push	{r7, lr}
 800205c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800205e:	f000 f891 	bl	8002184 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002062:	bf00      	nop
 8002064:	bd80      	pop	{r7, pc}
	...

08002068 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800206c:	4b06      	ldr	r3, [pc, #24]	@ (8002088 <SystemInit+0x20>)
 800206e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002072:	4a05      	ldr	r2, [pc, #20]	@ (8002088 <SystemInit+0x20>)
 8002074:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002078:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800207c:	bf00      	nop
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop
 8002088:	e000ed00 	.word	0xe000ed00

0800208c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800208c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80020c4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002090:	f7ff ffea 	bl	8002068 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002094:	480c      	ldr	r0, [pc, #48]	@ (80020c8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002096:	490d      	ldr	r1, [pc, #52]	@ (80020cc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002098:	4a0d      	ldr	r2, [pc, #52]	@ (80020d0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800209a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800209c:	e002      	b.n	80020a4 <LoopCopyDataInit>

0800209e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800209e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020a2:	3304      	adds	r3, #4

080020a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020a8:	d3f9      	bcc.n	800209e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020aa:	4a0a      	ldr	r2, [pc, #40]	@ (80020d4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80020ac:	4c0a      	ldr	r4, [pc, #40]	@ (80020d8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80020ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020b0:	e001      	b.n	80020b6 <LoopFillZerobss>

080020b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020b4:	3204      	adds	r2, #4

080020b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020b8:	d3fb      	bcc.n	80020b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80020ba:	f002 fac1 	bl	8004640 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020be:	f7ff fe7f 	bl	8001dc0 <main>
  bx  lr    
 80020c2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80020c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80020c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020cc:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80020d0:	08004794 	.word	0x08004794
  ldr r2, =_sbss
 80020d4:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80020d8:	200002f4 	.word	0x200002f4

080020dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020dc:	e7fe      	b.n	80020dc <ADC_IRQHandler>
	...

080020e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020e4:	4b0e      	ldr	r3, [pc, #56]	@ (8002120 <HAL_Init+0x40>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a0d      	ldr	r2, [pc, #52]	@ (8002120 <HAL_Init+0x40>)
 80020ea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80020ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80020f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002120 <HAL_Init+0x40>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a0a      	ldr	r2, [pc, #40]	@ (8002120 <HAL_Init+0x40>)
 80020f6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80020fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020fc:	4b08      	ldr	r3, [pc, #32]	@ (8002120 <HAL_Init+0x40>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a07      	ldr	r2, [pc, #28]	@ (8002120 <HAL_Init+0x40>)
 8002102:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002106:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002108:	2003      	movs	r0, #3
 800210a:	f000 f931 	bl	8002370 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800210e:	200f      	movs	r0, #15
 8002110:	f000 f808 	bl	8002124 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002114:	f7ff ff50 	bl	8001fb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002118:	2300      	movs	r3, #0
}
 800211a:	4618      	mov	r0, r3
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	40023c00 	.word	0x40023c00

08002124 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800212c:	4b12      	ldr	r3, [pc, #72]	@ (8002178 <HAL_InitTick+0x54>)
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	4b12      	ldr	r3, [pc, #72]	@ (800217c <HAL_InitTick+0x58>)
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	4619      	mov	r1, r3
 8002136:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800213a:	fbb3 f3f1 	udiv	r3, r3, r1
 800213e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002142:	4618      	mov	r0, r3
 8002144:	f000 f93b 	bl	80023be <HAL_SYSTICK_Config>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d001      	beq.n	8002152 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e00e      	b.n	8002170 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2b0f      	cmp	r3, #15
 8002156:	d80a      	bhi.n	800216e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002158:	2200      	movs	r2, #0
 800215a:	6879      	ldr	r1, [r7, #4]
 800215c:	f04f 30ff 	mov.w	r0, #4294967295
 8002160:	f000 f911 	bl	8002386 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002164:	4a06      	ldr	r2, [pc, #24]	@ (8002180 <HAL_InitTick+0x5c>)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800216a:	2300      	movs	r3, #0
 800216c:	e000      	b.n	8002170 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
}
 8002170:	4618      	mov	r0, r3
 8002172:	3708      	adds	r7, #8
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	20000004 	.word	0x20000004
 800217c:	2000000c 	.word	0x2000000c
 8002180:	20000008 	.word	0x20000008

08002184 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002188:	4b06      	ldr	r3, [pc, #24]	@ (80021a4 <HAL_IncTick+0x20>)
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	461a      	mov	r2, r3
 800218e:	4b06      	ldr	r3, [pc, #24]	@ (80021a8 <HAL_IncTick+0x24>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4413      	add	r3, r2
 8002194:	4a04      	ldr	r2, [pc, #16]	@ (80021a8 <HAL_IncTick+0x24>)
 8002196:	6013      	str	r3, [r2, #0]
}
 8002198:	bf00      	nop
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	2000000c 	.word	0x2000000c
 80021a8:	200001b0 	.word	0x200001b0

080021ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0
  return uwTick;
 80021b0:	4b03      	ldr	r3, [pc, #12]	@ (80021c0 <HAL_GetTick+0x14>)
 80021b2:	681b      	ldr	r3, [r3, #0]
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	200001b0 	.word	0x200001b0

080021c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021cc:	f7ff ffee 	bl	80021ac <HAL_GetTick>
 80021d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021dc:	d005      	beq.n	80021ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021de:	4b0a      	ldr	r3, [pc, #40]	@ (8002208 <HAL_Delay+0x44>)
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	461a      	mov	r2, r3
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	4413      	add	r3, r2
 80021e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80021ea:	bf00      	nop
 80021ec:	f7ff ffde 	bl	80021ac <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	68fa      	ldr	r2, [r7, #12]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d8f7      	bhi.n	80021ec <HAL_Delay+0x28>
  {
  }
}
 80021fc:	bf00      	nop
 80021fe:	bf00      	nop
 8002200:	3710      	adds	r7, #16
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	2000000c 	.word	0x2000000c

0800220c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800220c:	b480      	push	{r7}
 800220e:	b085      	sub	sp, #20
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	f003 0307 	and.w	r3, r3, #7
 800221a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800221c:	4b0c      	ldr	r3, [pc, #48]	@ (8002250 <__NVIC_SetPriorityGrouping+0x44>)
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002222:	68ba      	ldr	r2, [r7, #8]
 8002224:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002228:	4013      	ands	r3, r2
 800222a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002234:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002238:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800223c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800223e:	4a04      	ldr	r2, [pc, #16]	@ (8002250 <__NVIC_SetPriorityGrouping+0x44>)
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	60d3      	str	r3, [r2, #12]
}
 8002244:	bf00      	nop
 8002246:	3714      	adds	r7, #20
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr
 8002250:	e000ed00 	.word	0xe000ed00

08002254 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002258:	4b04      	ldr	r3, [pc, #16]	@ (800226c <__NVIC_GetPriorityGrouping+0x18>)
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	0a1b      	lsrs	r3, r3, #8
 800225e:	f003 0307 	and.w	r3, r3, #7
}
 8002262:	4618      	mov	r0, r3
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr
 800226c:	e000ed00 	.word	0xe000ed00

08002270 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	4603      	mov	r3, r0
 8002278:	6039      	str	r1, [r7, #0]
 800227a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800227c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002280:	2b00      	cmp	r3, #0
 8002282:	db0a      	blt.n	800229a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	b2da      	uxtb	r2, r3
 8002288:	490c      	ldr	r1, [pc, #48]	@ (80022bc <__NVIC_SetPriority+0x4c>)
 800228a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800228e:	0112      	lsls	r2, r2, #4
 8002290:	b2d2      	uxtb	r2, r2
 8002292:	440b      	add	r3, r1
 8002294:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002298:	e00a      	b.n	80022b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	b2da      	uxtb	r2, r3
 800229e:	4908      	ldr	r1, [pc, #32]	@ (80022c0 <__NVIC_SetPriority+0x50>)
 80022a0:	79fb      	ldrb	r3, [r7, #7]
 80022a2:	f003 030f 	and.w	r3, r3, #15
 80022a6:	3b04      	subs	r3, #4
 80022a8:	0112      	lsls	r2, r2, #4
 80022aa:	b2d2      	uxtb	r2, r2
 80022ac:	440b      	add	r3, r1
 80022ae:	761a      	strb	r2, [r3, #24]
}
 80022b0:	bf00      	nop
 80022b2:	370c      	adds	r7, #12
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr
 80022bc:	e000e100 	.word	0xe000e100
 80022c0:	e000ed00 	.word	0xe000ed00

080022c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b089      	sub	sp, #36	@ 0x24
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	60f8      	str	r0, [r7, #12]
 80022cc:	60b9      	str	r1, [r7, #8]
 80022ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	f003 0307 	and.w	r3, r3, #7
 80022d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	f1c3 0307 	rsb	r3, r3, #7
 80022de:	2b04      	cmp	r3, #4
 80022e0:	bf28      	it	cs
 80022e2:	2304      	movcs	r3, #4
 80022e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	3304      	adds	r3, #4
 80022ea:	2b06      	cmp	r3, #6
 80022ec:	d902      	bls.n	80022f4 <NVIC_EncodePriority+0x30>
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	3b03      	subs	r3, #3
 80022f2:	e000      	b.n	80022f6 <NVIC_EncodePriority+0x32>
 80022f4:	2300      	movs	r3, #0
 80022f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022f8:	f04f 32ff 	mov.w	r2, #4294967295
 80022fc:	69bb      	ldr	r3, [r7, #24]
 80022fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002302:	43da      	mvns	r2, r3
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	401a      	ands	r2, r3
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800230c:	f04f 31ff 	mov.w	r1, #4294967295
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	fa01 f303 	lsl.w	r3, r1, r3
 8002316:	43d9      	mvns	r1, r3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800231c:	4313      	orrs	r3, r2
         );
}
 800231e:	4618      	mov	r0, r3
 8002320:	3724      	adds	r7, #36	@ 0x24
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr
	...

0800232c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b082      	sub	sp, #8
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	3b01      	subs	r3, #1
 8002338:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800233c:	d301      	bcc.n	8002342 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800233e:	2301      	movs	r3, #1
 8002340:	e00f      	b.n	8002362 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002342:	4a0a      	ldr	r2, [pc, #40]	@ (800236c <SysTick_Config+0x40>)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	3b01      	subs	r3, #1
 8002348:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800234a:	210f      	movs	r1, #15
 800234c:	f04f 30ff 	mov.w	r0, #4294967295
 8002350:	f7ff ff8e 	bl	8002270 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002354:	4b05      	ldr	r3, [pc, #20]	@ (800236c <SysTick_Config+0x40>)
 8002356:	2200      	movs	r2, #0
 8002358:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800235a:	4b04      	ldr	r3, [pc, #16]	@ (800236c <SysTick_Config+0x40>)
 800235c:	2207      	movs	r2, #7
 800235e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002360:	2300      	movs	r3, #0
}
 8002362:	4618      	mov	r0, r3
 8002364:	3708      	adds	r7, #8
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	e000e010 	.word	0xe000e010

08002370 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	f7ff ff47 	bl	800220c <__NVIC_SetPriorityGrouping>
}
 800237e:	bf00      	nop
 8002380:	3708      	adds	r7, #8
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}

08002386 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002386:	b580      	push	{r7, lr}
 8002388:	b086      	sub	sp, #24
 800238a:	af00      	add	r7, sp, #0
 800238c:	4603      	mov	r3, r0
 800238e:	60b9      	str	r1, [r7, #8]
 8002390:	607a      	str	r2, [r7, #4]
 8002392:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002394:	2300      	movs	r3, #0
 8002396:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002398:	f7ff ff5c 	bl	8002254 <__NVIC_GetPriorityGrouping>
 800239c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	68b9      	ldr	r1, [r7, #8]
 80023a2:	6978      	ldr	r0, [r7, #20]
 80023a4:	f7ff ff8e 	bl	80022c4 <NVIC_EncodePriority>
 80023a8:	4602      	mov	r2, r0
 80023aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023ae:	4611      	mov	r1, r2
 80023b0:	4618      	mov	r0, r3
 80023b2:	f7ff ff5d 	bl	8002270 <__NVIC_SetPriority>
}
 80023b6:	bf00      	nop
 80023b8:	3718      	adds	r7, #24
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}

080023be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023be:	b580      	push	{r7, lr}
 80023c0:	b082      	sub	sp, #8
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f7ff ffb0 	bl	800232c <SysTick_Config>
 80023cc:	4603      	mov	r3, r0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3708      	adds	r7, #8
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
	...

080023d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023d8:	b480      	push	{r7}
 80023da:	b089      	sub	sp, #36	@ 0x24
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023e2:	2300      	movs	r3, #0
 80023e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023e6:	2300      	movs	r3, #0
 80023e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023ea:	2300      	movs	r3, #0
 80023ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023ee:	2300      	movs	r3, #0
 80023f0:	61fb      	str	r3, [r7, #28]
 80023f2:	e159      	b.n	80026a8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80023f4:	2201      	movs	r2, #1
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	fa02 f303 	lsl.w	r3, r2, r3
 80023fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	697a      	ldr	r2, [r7, #20]
 8002404:	4013      	ands	r3, r2
 8002406:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002408:	693a      	ldr	r2, [r7, #16]
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	429a      	cmp	r2, r3
 800240e:	f040 8148 	bne.w	80026a2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	f003 0303 	and.w	r3, r3, #3
 800241a:	2b01      	cmp	r3, #1
 800241c:	d005      	beq.n	800242a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002426:	2b02      	cmp	r3, #2
 8002428:	d130      	bne.n	800248c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	005b      	lsls	r3, r3, #1
 8002434:	2203      	movs	r2, #3
 8002436:	fa02 f303 	lsl.w	r3, r2, r3
 800243a:	43db      	mvns	r3, r3
 800243c:	69ba      	ldr	r2, [r7, #24]
 800243e:	4013      	ands	r3, r2
 8002440:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	68da      	ldr	r2, [r3, #12]
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	005b      	lsls	r3, r3, #1
 800244a:	fa02 f303 	lsl.w	r3, r2, r3
 800244e:	69ba      	ldr	r2, [r7, #24]
 8002450:	4313      	orrs	r3, r2
 8002452:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	69ba      	ldr	r2, [r7, #24]
 8002458:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002460:	2201      	movs	r2, #1
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	fa02 f303 	lsl.w	r3, r2, r3
 8002468:	43db      	mvns	r3, r3
 800246a:	69ba      	ldr	r2, [r7, #24]
 800246c:	4013      	ands	r3, r2
 800246e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	091b      	lsrs	r3, r3, #4
 8002476:	f003 0201 	and.w	r2, r3, #1
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	fa02 f303 	lsl.w	r3, r2, r3
 8002480:	69ba      	ldr	r2, [r7, #24]
 8002482:	4313      	orrs	r3, r2
 8002484:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f003 0303 	and.w	r3, r3, #3
 8002494:	2b03      	cmp	r3, #3
 8002496:	d017      	beq.n	80024c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	005b      	lsls	r3, r3, #1
 80024a2:	2203      	movs	r2, #3
 80024a4:	fa02 f303 	lsl.w	r3, r2, r3
 80024a8:	43db      	mvns	r3, r3
 80024aa:	69ba      	ldr	r2, [r7, #24]
 80024ac:	4013      	ands	r3, r2
 80024ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	689a      	ldr	r2, [r3, #8]
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	005b      	lsls	r3, r3, #1
 80024b8:	fa02 f303 	lsl.w	r3, r2, r3
 80024bc:	69ba      	ldr	r2, [r7, #24]
 80024be:	4313      	orrs	r3, r2
 80024c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	69ba      	ldr	r2, [r7, #24]
 80024c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f003 0303 	and.w	r3, r3, #3
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	d123      	bne.n	800251c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	08da      	lsrs	r2, r3, #3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	3208      	adds	r2, #8
 80024dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	f003 0307 	and.w	r3, r3, #7
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	220f      	movs	r2, #15
 80024ec:	fa02 f303 	lsl.w	r3, r2, r3
 80024f0:	43db      	mvns	r3, r3
 80024f2:	69ba      	ldr	r2, [r7, #24]
 80024f4:	4013      	ands	r3, r2
 80024f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	691a      	ldr	r2, [r3, #16]
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	f003 0307 	and.w	r3, r3, #7
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	fa02 f303 	lsl.w	r3, r2, r3
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	4313      	orrs	r3, r2
 800250c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	08da      	lsrs	r2, r3, #3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	3208      	adds	r2, #8
 8002516:	69b9      	ldr	r1, [r7, #24]
 8002518:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	005b      	lsls	r3, r3, #1
 8002526:	2203      	movs	r2, #3
 8002528:	fa02 f303 	lsl.w	r3, r2, r3
 800252c:	43db      	mvns	r3, r3
 800252e:	69ba      	ldr	r2, [r7, #24]
 8002530:	4013      	ands	r3, r2
 8002532:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f003 0203 	and.w	r2, r3, #3
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	005b      	lsls	r3, r3, #1
 8002540:	fa02 f303 	lsl.w	r3, r2, r3
 8002544:	69ba      	ldr	r2, [r7, #24]
 8002546:	4313      	orrs	r3, r2
 8002548:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	69ba      	ldr	r2, [r7, #24]
 800254e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002558:	2b00      	cmp	r3, #0
 800255a:	f000 80a2 	beq.w	80026a2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800255e:	2300      	movs	r3, #0
 8002560:	60fb      	str	r3, [r7, #12]
 8002562:	4b57      	ldr	r3, [pc, #348]	@ (80026c0 <HAL_GPIO_Init+0x2e8>)
 8002564:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002566:	4a56      	ldr	r2, [pc, #344]	@ (80026c0 <HAL_GPIO_Init+0x2e8>)
 8002568:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800256c:	6453      	str	r3, [r2, #68]	@ 0x44
 800256e:	4b54      	ldr	r3, [pc, #336]	@ (80026c0 <HAL_GPIO_Init+0x2e8>)
 8002570:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002572:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002576:	60fb      	str	r3, [r7, #12]
 8002578:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800257a:	4a52      	ldr	r2, [pc, #328]	@ (80026c4 <HAL_GPIO_Init+0x2ec>)
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	089b      	lsrs	r3, r3, #2
 8002580:	3302      	adds	r3, #2
 8002582:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002586:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	f003 0303 	and.w	r3, r3, #3
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	220f      	movs	r2, #15
 8002592:	fa02 f303 	lsl.w	r3, r2, r3
 8002596:	43db      	mvns	r3, r3
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	4013      	ands	r3, r2
 800259c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4a49      	ldr	r2, [pc, #292]	@ (80026c8 <HAL_GPIO_Init+0x2f0>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d019      	beq.n	80025da <HAL_GPIO_Init+0x202>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4a48      	ldr	r2, [pc, #288]	@ (80026cc <HAL_GPIO_Init+0x2f4>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d013      	beq.n	80025d6 <HAL_GPIO_Init+0x1fe>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4a47      	ldr	r2, [pc, #284]	@ (80026d0 <HAL_GPIO_Init+0x2f8>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d00d      	beq.n	80025d2 <HAL_GPIO_Init+0x1fa>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4a46      	ldr	r2, [pc, #280]	@ (80026d4 <HAL_GPIO_Init+0x2fc>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d007      	beq.n	80025ce <HAL_GPIO_Init+0x1f6>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4a45      	ldr	r2, [pc, #276]	@ (80026d8 <HAL_GPIO_Init+0x300>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d101      	bne.n	80025ca <HAL_GPIO_Init+0x1f2>
 80025c6:	2304      	movs	r3, #4
 80025c8:	e008      	b.n	80025dc <HAL_GPIO_Init+0x204>
 80025ca:	2307      	movs	r3, #7
 80025cc:	e006      	b.n	80025dc <HAL_GPIO_Init+0x204>
 80025ce:	2303      	movs	r3, #3
 80025d0:	e004      	b.n	80025dc <HAL_GPIO_Init+0x204>
 80025d2:	2302      	movs	r3, #2
 80025d4:	e002      	b.n	80025dc <HAL_GPIO_Init+0x204>
 80025d6:	2301      	movs	r3, #1
 80025d8:	e000      	b.n	80025dc <HAL_GPIO_Init+0x204>
 80025da:	2300      	movs	r3, #0
 80025dc:	69fa      	ldr	r2, [r7, #28]
 80025de:	f002 0203 	and.w	r2, r2, #3
 80025e2:	0092      	lsls	r2, r2, #2
 80025e4:	4093      	lsls	r3, r2
 80025e6:	69ba      	ldr	r2, [r7, #24]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025ec:	4935      	ldr	r1, [pc, #212]	@ (80026c4 <HAL_GPIO_Init+0x2ec>)
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	089b      	lsrs	r3, r3, #2
 80025f2:	3302      	adds	r3, #2
 80025f4:	69ba      	ldr	r2, [r7, #24]
 80025f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025fa:	4b38      	ldr	r3, [pc, #224]	@ (80026dc <HAL_GPIO_Init+0x304>)
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	43db      	mvns	r3, r3
 8002604:	69ba      	ldr	r2, [r7, #24]
 8002606:	4013      	ands	r3, r2
 8002608:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d003      	beq.n	800261e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002616:	69ba      	ldr	r2, [r7, #24]
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	4313      	orrs	r3, r2
 800261c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800261e:	4a2f      	ldr	r2, [pc, #188]	@ (80026dc <HAL_GPIO_Init+0x304>)
 8002620:	69bb      	ldr	r3, [r7, #24]
 8002622:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002624:	4b2d      	ldr	r3, [pc, #180]	@ (80026dc <HAL_GPIO_Init+0x304>)
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	43db      	mvns	r3, r3
 800262e:	69ba      	ldr	r2, [r7, #24]
 8002630:	4013      	ands	r3, r2
 8002632:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d003      	beq.n	8002648 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002640:	69ba      	ldr	r2, [r7, #24]
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	4313      	orrs	r3, r2
 8002646:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002648:	4a24      	ldr	r2, [pc, #144]	@ (80026dc <HAL_GPIO_Init+0x304>)
 800264a:	69bb      	ldr	r3, [r7, #24]
 800264c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800264e:	4b23      	ldr	r3, [pc, #140]	@ (80026dc <HAL_GPIO_Init+0x304>)
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	43db      	mvns	r3, r3
 8002658:	69ba      	ldr	r2, [r7, #24]
 800265a:	4013      	ands	r3, r2
 800265c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d003      	beq.n	8002672 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800266a:	69ba      	ldr	r2, [r7, #24]
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	4313      	orrs	r3, r2
 8002670:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002672:	4a1a      	ldr	r2, [pc, #104]	@ (80026dc <HAL_GPIO_Init+0x304>)
 8002674:	69bb      	ldr	r3, [r7, #24]
 8002676:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002678:	4b18      	ldr	r3, [pc, #96]	@ (80026dc <HAL_GPIO_Init+0x304>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	43db      	mvns	r3, r3
 8002682:	69ba      	ldr	r2, [r7, #24]
 8002684:	4013      	ands	r3, r2
 8002686:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002690:	2b00      	cmp	r3, #0
 8002692:	d003      	beq.n	800269c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002694:	69ba      	ldr	r2, [r7, #24]
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	4313      	orrs	r3, r2
 800269a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800269c:	4a0f      	ldr	r2, [pc, #60]	@ (80026dc <HAL_GPIO_Init+0x304>)
 800269e:	69bb      	ldr	r3, [r7, #24]
 80026a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	3301      	adds	r3, #1
 80026a6:	61fb      	str	r3, [r7, #28]
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	2b0f      	cmp	r3, #15
 80026ac:	f67f aea2 	bls.w	80023f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026b0:	bf00      	nop
 80026b2:	bf00      	nop
 80026b4:	3724      	adds	r7, #36	@ 0x24
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	40023800 	.word	0x40023800
 80026c4:	40013800 	.word	0x40013800
 80026c8:	40020000 	.word	0x40020000
 80026cc:	40020400 	.word	0x40020400
 80026d0:	40020800 	.word	0x40020800
 80026d4:	40020c00 	.word	0x40020c00
 80026d8:	40021000 	.word	0x40021000
 80026dc:	40013c00 	.word	0x40013c00

080026e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	460b      	mov	r3, r1
 80026ea:	807b      	strh	r3, [r7, #2]
 80026ec:	4613      	mov	r3, r2
 80026ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026f0:	787b      	ldrb	r3, [r7, #1]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d003      	beq.n	80026fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026f6:	887a      	ldrh	r2, [r7, #2]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80026fc:	e003      	b.n	8002706 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80026fe:	887b      	ldrh	r3, [r7, #2]
 8002700:	041a      	lsls	r2, r3, #16
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	619a      	str	r2, [r3, #24]
}
 8002706:	bf00      	nop
 8002708:	370c      	adds	r7, #12
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
	...

08002714 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d101      	bne.n	8002726 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e12b      	b.n	800297e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800272c:	b2db      	uxtb	r3, r3
 800272e:	2b00      	cmp	r3, #0
 8002730:	d106      	bne.n	8002740 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2200      	movs	r2, #0
 8002736:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f7ff faf8 	bl	8001d30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2224      	movs	r2, #36	@ 0x24
 8002744:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f022 0201 	bic.w	r2, r2, #1
 8002756:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002766:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002776:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002778:	f001 fc20 	bl	8003fbc <HAL_RCC_GetPCLK1Freq>
 800277c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	4a81      	ldr	r2, [pc, #516]	@ (8002988 <HAL_I2C_Init+0x274>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d807      	bhi.n	8002798 <HAL_I2C_Init+0x84>
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	4a80      	ldr	r2, [pc, #512]	@ (800298c <HAL_I2C_Init+0x278>)
 800278c:	4293      	cmp	r3, r2
 800278e:	bf94      	ite	ls
 8002790:	2301      	movls	r3, #1
 8002792:	2300      	movhi	r3, #0
 8002794:	b2db      	uxtb	r3, r3
 8002796:	e006      	b.n	80027a6 <HAL_I2C_Init+0x92>
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	4a7d      	ldr	r2, [pc, #500]	@ (8002990 <HAL_I2C_Init+0x27c>)
 800279c:	4293      	cmp	r3, r2
 800279e:	bf94      	ite	ls
 80027a0:	2301      	movls	r3, #1
 80027a2:	2300      	movhi	r3, #0
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d001      	beq.n	80027ae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e0e7      	b.n	800297e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	4a78      	ldr	r2, [pc, #480]	@ (8002994 <HAL_I2C_Init+0x280>)
 80027b2:	fba2 2303 	umull	r2, r3, r2, r3
 80027b6:	0c9b      	lsrs	r3, r3, #18
 80027b8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	68ba      	ldr	r2, [r7, #8]
 80027ca:	430a      	orrs	r2, r1
 80027cc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	6a1b      	ldr	r3, [r3, #32]
 80027d4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	4a6a      	ldr	r2, [pc, #424]	@ (8002988 <HAL_I2C_Init+0x274>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d802      	bhi.n	80027e8 <HAL_I2C_Init+0xd4>
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	3301      	adds	r3, #1
 80027e6:	e009      	b.n	80027fc <HAL_I2C_Init+0xe8>
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80027ee:	fb02 f303 	mul.w	r3, r2, r3
 80027f2:	4a69      	ldr	r2, [pc, #420]	@ (8002998 <HAL_I2C_Init+0x284>)
 80027f4:	fba2 2303 	umull	r2, r3, r2, r3
 80027f8:	099b      	lsrs	r3, r3, #6
 80027fa:	3301      	adds	r3, #1
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	6812      	ldr	r2, [r2, #0]
 8002800:	430b      	orrs	r3, r1
 8002802:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	69db      	ldr	r3, [r3, #28]
 800280a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800280e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	495c      	ldr	r1, [pc, #368]	@ (8002988 <HAL_I2C_Init+0x274>)
 8002818:	428b      	cmp	r3, r1
 800281a:	d819      	bhi.n	8002850 <HAL_I2C_Init+0x13c>
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	1e59      	subs	r1, r3, #1
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	005b      	lsls	r3, r3, #1
 8002826:	fbb1 f3f3 	udiv	r3, r1, r3
 800282a:	1c59      	adds	r1, r3, #1
 800282c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002830:	400b      	ands	r3, r1
 8002832:	2b00      	cmp	r3, #0
 8002834:	d00a      	beq.n	800284c <HAL_I2C_Init+0x138>
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	1e59      	subs	r1, r3, #1
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	005b      	lsls	r3, r3, #1
 8002840:	fbb1 f3f3 	udiv	r3, r1, r3
 8002844:	3301      	adds	r3, #1
 8002846:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800284a:	e051      	b.n	80028f0 <HAL_I2C_Init+0x1dc>
 800284c:	2304      	movs	r3, #4
 800284e:	e04f      	b.n	80028f0 <HAL_I2C_Init+0x1dc>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d111      	bne.n	800287c <HAL_I2C_Init+0x168>
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	1e58      	subs	r0, r3, #1
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6859      	ldr	r1, [r3, #4]
 8002860:	460b      	mov	r3, r1
 8002862:	005b      	lsls	r3, r3, #1
 8002864:	440b      	add	r3, r1
 8002866:	fbb0 f3f3 	udiv	r3, r0, r3
 800286a:	3301      	adds	r3, #1
 800286c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002870:	2b00      	cmp	r3, #0
 8002872:	bf0c      	ite	eq
 8002874:	2301      	moveq	r3, #1
 8002876:	2300      	movne	r3, #0
 8002878:	b2db      	uxtb	r3, r3
 800287a:	e012      	b.n	80028a2 <HAL_I2C_Init+0x18e>
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	1e58      	subs	r0, r3, #1
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6859      	ldr	r1, [r3, #4]
 8002884:	460b      	mov	r3, r1
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	440b      	add	r3, r1
 800288a:	0099      	lsls	r1, r3, #2
 800288c:	440b      	add	r3, r1
 800288e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002892:	3301      	adds	r3, #1
 8002894:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002898:	2b00      	cmp	r3, #0
 800289a:	bf0c      	ite	eq
 800289c:	2301      	moveq	r3, #1
 800289e:	2300      	movne	r3, #0
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d001      	beq.n	80028aa <HAL_I2C_Init+0x196>
 80028a6:	2301      	movs	r3, #1
 80028a8:	e022      	b.n	80028f0 <HAL_I2C_Init+0x1dc>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d10e      	bne.n	80028d0 <HAL_I2C_Init+0x1bc>
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	1e58      	subs	r0, r3, #1
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6859      	ldr	r1, [r3, #4]
 80028ba:	460b      	mov	r3, r1
 80028bc:	005b      	lsls	r3, r3, #1
 80028be:	440b      	add	r3, r1
 80028c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80028c4:	3301      	adds	r3, #1
 80028c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80028ce:	e00f      	b.n	80028f0 <HAL_I2C_Init+0x1dc>
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	1e58      	subs	r0, r3, #1
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6859      	ldr	r1, [r3, #4]
 80028d8:	460b      	mov	r3, r1
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	440b      	add	r3, r1
 80028de:	0099      	lsls	r1, r3, #2
 80028e0:	440b      	add	r3, r1
 80028e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80028e6:	3301      	adds	r3, #1
 80028e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028ec:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80028f0:	6879      	ldr	r1, [r7, #4]
 80028f2:	6809      	ldr	r1, [r1, #0]
 80028f4:	4313      	orrs	r3, r2
 80028f6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	69da      	ldr	r2, [r3, #28]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6a1b      	ldr	r3, [r3, #32]
 800290a:	431a      	orrs	r2, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	430a      	orrs	r2, r1
 8002912:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800291e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	6911      	ldr	r1, [r2, #16]
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	68d2      	ldr	r2, [r2, #12]
 800292a:	4311      	orrs	r1, r2
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	6812      	ldr	r2, [r2, #0]
 8002930:	430b      	orrs	r3, r1
 8002932:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	695a      	ldr	r2, [r3, #20]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	699b      	ldr	r3, [r3, #24]
 8002946:	431a      	orrs	r2, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	430a      	orrs	r2, r1
 800294e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f042 0201 	orr.w	r2, r2, #1
 800295e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2200      	movs	r2, #0
 8002964:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2220      	movs	r2, #32
 800296a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2200      	movs	r2, #0
 8002978:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800297c:	2300      	movs	r3, #0
}
 800297e:	4618      	mov	r0, r3
 8002980:	3710      	adds	r7, #16
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	000186a0 	.word	0x000186a0
 800298c:	001e847f 	.word	0x001e847f
 8002990:	003d08ff 	.word	0x003d08ff
 8002994:	431bde83 	.word	0x431bde83
 8002998:	10624dd3 	.word	0x10624dd3

0800299c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b088      	sub	sp, #32
 80029a0:	af02      	add	r7, sp, #8
 80029a2:	60f8      	str	r0, [r7, #12]
 80029a4:	4608      	mov	r0, r1
 80029a6:	4611      	mov	r1, r2
 80029a8:	461a      	mov	r2, r3
 80029aa:	4603      	mov	r3, r0
 80029ac:	817b      	strh	r3, [r7, #10]
 80029ae:	460b      	mov	r3, r1
 80029b0:	813b      	strh	r3, [r7, #8]
 80029b2:	4613      	mov	r3, r2
 80029b4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80029b6:	f7ff fbf9 	bl	80021ac <HAL_GetTick>
 80029ba:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	2b20      	cmp	r3, #32
 80029c6:	f040 80d9 	bne.w	8002b7c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	9300      	str	r3, [sp, #0]
 80029ce:	2319      	movs	r3, #25
 80029d0:	2201      	movs	r2, #1
 80029d2:	496d      	ldr	r1, [pc, #436]	@ (8002b88 <HAL_I2C_Mem_Write+0x1ec>)
 80029d4:	68f8      	ldr	r0, [r7, #12]
 80029d6:	f000 fc8b 	bl	80032f0 <I2C_WaitOnFlagUntilTimeout>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d001      	beq.n	80029e4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80029e0:	2302      	movs	r3, #2
 80029e2:	e0cc      	b.n	8002b7e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d101      	bne.n	80029f2 <HAL_I2C_Mem_Write+0x56>
 80029ee:	2302      	movs	r3, #2
 80029f0:	e0c5      	b.n	8002b7e <HAL_I2C_Mem_Write+0x1e2>
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2201      	movs	r2, #1
 80029f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0301 	and.w	r3, r3, #1
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d007      	beq.n	8002a18 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f042 0201 	orr.w	r2, r2, #1
 8002a16:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a26:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2221      	movs	r2, #33	@ 0x21
 8002a2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2240      	movs	r2, #64	@ 0x40
 8002a34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	6a3a      	ldr	r2, [r7, #32]
 8002a42:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002a48:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a4e:	b29a      	uxth	r2, r3
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	4a4d      	ldr	r2, [pc, #308]	@ (8002b8c <HAL_I2C_Mem_Write+0x1f0>)
 8002a58:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a5a:	88f8      	ldrh	r0, [r7, #6]
 8002a5c:	893a      	ldrh	r2, [r7, #8]
 8002a5e:	8979      	ldrh	r1, [r7, #10]
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	9301      	str	r3, [sp, #4]
 8002a64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a66:	9300      	str	r3, [sp, #0]
 8002a68:	4603      	mov	r3, r0
 8002a6a:	68f8      	ldr	r0, [r7, #12]
 8002a6c:	f000 fac2 	bl	8002ff4 <I2C_RequestMemoryWrite>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d052      	beq.n	8002b1c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e081      	b.n	8002b7e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a7a:	697a      	ldr	r2, [r7, #20]
 8002a7c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002a7e:	68f8      	ldr	r0, [r7, #12]
 8002a80:	f000 fd50 	bl	8003524 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d00d      	beq.n	8002aa6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a8e:	2b04      	cmp	r3, #4
 8002a90:	d107      	bne.n	8002aa2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002aa0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e06b      	b.n	8002b7e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aaa:	781a      	ldrb	r2, [r3, #0]
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ab6:	1c5a      	adds	r2, r3, #1
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ac0:	3b01      	subs	r3, #1
 8002ac2:	b29a      	uxth	r2, r3
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	3b01      	subs	r3, #1
 8002ad0:	b29a      	uxth	r2, r3
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	695b      	ldr	r3, [r3, #20]
 8002adc:	f003 0304 	and.w	r3, r3, #4
 8002ae0:	2b04      	cmp	r3, #4
 8002ae2:	d11b      	bne.n	8002b1c <HAL_I2C_Mem_Write+0x180>
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d017      	beq.n	8002b1c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002af0:	781a      	ldrb	r2, [r3, #0]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002afc:	1c5a      	adds	r2, r3, #1
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b06:	3b01      	subs	r3, #1
 8002b08:	b29a      	uxth	r2, r3
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	3b01      	subs	r3, #1
 8002b16:	b29a      	uxth	r2, r3
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d1aa      	bne.n	8002a7a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b24:	697a      	ldr	r2, [r7, #20]
 8002b26:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002b28:	68f8      	ldr	r0, [r7, #12]
 8002b2a:	f000 fd43 	bl	80035b4 <I2C_WaitOnBTFFlagUntilTimeout>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d00d      	beq.n	8002b50 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b38:	2b04      	cmp	r3, #4
 8002b3a:	d107      	bne.n	8002b4c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b4a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e016      	b.n	8002b7e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2220      	movs	r2, #32
 8002b64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	e000      	b.n	8002b7e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002b7c:	2302      	movs	r3, #2
  }
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3718      	adds	r7, #24
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	00100002 	.word	0x00100002
 8002b8c:	ffff0000 	.word	0xffff0000

08002b90 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b08c      	sub	sp, #48	@ 0x30
 8002b94:	af02      	add	r7, sp, #8
 8002b96:	60f8      	str	r0, [r7, #12]
 8002b98:	4608      	mov	r0, r1
 8002b9a:	4611      	mov	r1, r2
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	817b      	strh	r3, [r7, #10]
 8002ba2:	460b      	mov	r3, r1
 8002ba4:	813b      	strh	r3, [r7, #8]
 8002ba6:	4613      	mov	r3, r2
 8002ba8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002baa:	f7ff faff 	bl	80021ac <HAL_GetTick>
 8002bae:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	2b20      	cmp	r3, #32
 8002bba:	f040 8214 	bne.w	8002fe6 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bc0:	9300      	str	r3, [sp, #0]
 8002bc2:	2319      	movs	r3, #25
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	497b      	ldr	r1, [pc, #492]	@ (8002db4 <HAL_I2C_Mem_Read+0x224>)
 8002bc8:	68f8      	ldr	r0, [r7, #12]
 8002bca:	f000 fb91 	bl	80032f0 <I2C_WaitOnFlagUntilTimeout>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d001      	beq.n	8002bd8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002bd4:	2302      	movs	r3, #2
 8002bd6:	e207      	b.n	8002fe8 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d101      	bne.n	8002be6 <HAL_I2C_Mem_Read+0x56>
 8002be2:	2302      	movs	r3, #2
 8002be4:	e200      	b.n	8002fe8 <HAL_I2C_Mem_Read+0x458>
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2201      	movs	r2, #1
 8002bea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0301 	and.w	r3, r3, #1
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d007      	beq.n	8002c0c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f042 0201 	orr.w	r2, r2, #1
 8002c0a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c1a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2222      	movs	r2, #34	@ 0x22
 8002c20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2240      	movs	r2, #64	@ 0x40
 8002c28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c36:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002c3c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c42:	b29a      	uxth	r2, r3
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	4a5b      	ldr	r2, [pc, #364]	@ (8002db8 <HAL_I2C_Mem_Read+0x228>)
 8002c4c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c4e:	88f8      	ldrh	r0, [r7, #6]
 8002c50:	893a      	ldrh	r2, [r7, #8]
 8002c52:	8979      	ldrh	r1, [r7, #10]
 8002c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c56:	9301      	str	r3, [sp, #4]
 8002c58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c5a:	9300      	str	r3, [sp, #0]
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	68f8      	ldr	r0, [r7, #12]
 8002c60:	f000 fa5e 	bl	8003120 <I2C_RequestMemoryRead>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d001      	beq.n	8002c6e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e1bc      	b.n	8002fe8 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d113      	bne.n	8002c9e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c76:	2300      	movs	r3, #0
 8002c78:	623b      	str	r3, [r7, #32]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	695b      	ldr	r3, [r3, #20]
 8002c80:	623b      	str	r3, [r7, #32]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	699b      	ldr	r3, [r3, #24]
 8002c88:	623b      	str	r3, [r7, #32]
 8002c8a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c9a:	601a      	str	r2, [r3, #0]
 8002c9c:	e190      	b.n	8002fc0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d11b      	bne.n	8002cde <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002cb4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	61fb      	str	r3, [r7, #28]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	695b      	ldr	r3, [r3, #20]
 8002cc0:	61fb      	str	r3, [r7, #28]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	699b      	ldr	r3, [r3, #24]
 8002cc8:	61fb      	str	r3, [r7, #28]
 8002cca:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cda:	601a      	str	r2, [r3, #0]
 8002cdc:	e170      	b.n	8002fc0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d11b      	bne.n	8002d1e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002cf4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002d04:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d06:	2300      	movs	r3, #0
 8002d08:	61bb      	str	r3, [r7, #24]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	695b      	ldr	r3, [r3, #20]
 8002d10:	61bb      	str	r3, [r7, #24]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	699b      	ldr	r3, [r3, #24]
 8002d18:	61bb      	str	r3, [r7, #24]
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	e150      	b.n	8002fc0 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d1e:	2300      	movs	r3, #0
 8002d20:	617b      	str	r3, [r7, #20]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	695b      	ldr	r3, [r3, #20]
 8002d28:	617b      	str	r3, [r7, #20]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	699b      	ldr	r3, [r3, #24]
 8002d30:	617b      	str	r3, [r7, #20]
 8002d32:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002d34:	e144      	b.n	8002fc0 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d3a:	2b03      	cmp	r3, #3
 8002d3c:	f200 80f1 	bhi.w	8002f22 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d123      	bne.n	8002d90 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d4a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002d4c:	68f8      	ldr	r0, [r7, #12]
 8002d4e:	f000 fc79 	bl	8003644 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d001      	beq.n	8002d5c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e145      	b.n	8002fe8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	691a      	ldr	r2, [r3, #16]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d66:	b2d2      	uxtb	r2, r2
 8002d68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d6e:	1c5a      	adds	r2, r3, #1
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d78:	3b01      	subs	r3, #1
 8002d7a:	b29a      	uxth	r2, r3
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	3b01      	subs	r3, #1
 8002d88:	b29a      	uxth	r2, r3
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002d8e:	e117      	b.n	8002fc0 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d94:	2b02      	cmp	r3, #2
 8002d96:	d14e      	bne.n	8002e36 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d9a:	9300      	str	r3, [sp, #0]
 8002d9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d9e:	2200      	movs	r2, #0
 8002da0:	4906      	ldr	r1, [pc, #24]	@ (8002dbc <HAL_I2C_Mem_Read+0x22c>)
 8002da2:	68f8      	ldr	r0, [r7, #12]
 8002da4:	f000 faa4 	bl	80032f0 <I2C_WaitOnFlagUntilTimeout>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d008      	beq.n	8002dc0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e11a      	b.n	8002fe8 <HAL_I2C_Mem_Read+0x458>
 8002db2:	bf00      	nop
 8002db4:	00100002 	.word	0x00100002
 8002db8:	ffff0000 	.word	0xffff0000
 8002dbc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002dce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	691a      	ldr	r2, [r3, #16]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dda:	b2d2      	uxtb	r2, r2
 8002ddc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002de2:	1c5a      	adds	r2, r3, #1
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dec:	3b01      	subs	r3, #1
 8002dee:	b29a      	uxth	r2, r3
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	3b01      	subs	r3, #1
 8002dfc:	b29a      	uxth	r2, r3
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	691a      	ldr	r2, [r3, #16]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e0c:	b2d2      	uxtb	r2, r2
 8002e0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e14:	1c5a      	adds	r2, r3, #1
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e1e:	3b01      	subs	r3, #1
 8002e20:	b29a      	uxth	r2, r3
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	3b01      	subs	r3, #1
 8002e2e:	b29a      	uxth	r2, r3
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002e34:	e0c4      	b.n	8002fc0 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e38:	9300      	str	r3, [sp, #0]
 8002e3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	496c      	ldr	r1, [pc, #432]	@ (8002ff0 <HAL_I2C_Mem_Read+0x460>)
 8002e40:	68f8      	ldr	r0, [r7, #12]
 8002e42:	f000 fa55 	bl	80032f0 <I2C_WaitOnFlagUntilTimeout>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d001      	beq.n	8002e50 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e0cb      	b.n	8002fe8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e5e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	691a      	ldr	r2, [r3, #16]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e6a:	b2d2      	uxtb	r2, r2
 8002e6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e72:	1c5a      	adds	r2, r3, #1
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e7c:	3b01      	subs	r3, #1
 8002e7e:	b29a      	uxth	r2, r3
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e88:	b29b      	uxth	r3, r3
 8002e8a:	3b01      	subs	r3, #1
 8002e8c:	b29a      	uxth	r2, r3
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e94:	9300      	str	r3, [sp, #0]
 8002e96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e98:	2200      	movs	r2, #0
 8002e9a:	4955      	ldr	r1, [pc, #340]	@ (8002ff0 <HAL_I2C_Mem_Read+0x460>)
 8002e9c:	68f8      	ldr	r0, [r7, #12]
 8002e9e:	f000 fa27 	bl	80032f0 <I2C_WaitOnFlagUntilTimeout>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d001      	beq.n	8002eac <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e09d      	b.n	8002fe8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002eba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	691a      	ldr	r2, [r3, #16]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec6:	b2d2      	uxtb	r2, r2
 8002ec8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ece:	1c5a      	adds	r2, r3, #1
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ed8:	3b01      	subs	r3, #1
 8002eda:	b29a      	uxth	r2, r3
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	3b01      	subs	r3, #1
 8002ee8:	b29a      	uxth	r2, r3
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	691a      	ldr	r2, [r3, #16]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ef8:	b2d2      	uxtb	r2, r2
 8002efa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f00:	1c5a      	adds	r2, r3, #1
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f0a:	3b01      	subs	r3, #1
 8002f0c:	b29a      	uxth	r2, r3
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	3b01      	subs	r3, #1
 8002f1a:	b29a      	uxth	r2, r3
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002f20:	e04e      	b.n	8002fc0 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f24:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002f26:	68f8      	ldr	r0, [r7, #12]
 8002f28:	f000 fb8c 	bl	8003644 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d001      	beq.n	8002f36 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e058      	b.n	8002fe8 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	691a      	ldr	r2, [r3, #16]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f40:	b2d2      	uxtb	r2, r2
 8002f42:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f48:	1c5a      	adds	r2, r3, #1
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f52:	3b01      	subs	r3, #1
 8002f54:	b29a      	uxth	r2, r3
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	3b01      	subs	r3, #1
 8002f62:	b29a      	uxth	r2, r3
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	695b      	ldr	r3, [r3, #20]
 8002f6e:	f003 0304 	and.w	r3, r3, #4
 8002f72:	2b04      	cmp	r3, #4
 8002f74:	d124      	bne.n	8002fc0 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f7a:	2b03      	cmp	r3, #3
 8002f7c:	d107      	bne.n	8002f8e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f8c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	691a      	ldr	r2, [r3, #16]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f98:	b2d2      	uxtb	r2, r2
 8002f9a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fa0:	1c5a      	adds	r2, r3, #1
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002faa:	3b01      	subs	r3, #1
 8002fac:	b29a      	uxth	r2, r3
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	3b01      	subs	r3, #1
 8002fba:	b29a      	uxth	r2, r3
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	f47f aeb6 	bne.w	8002d36 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2220      	movs	r2, #32
 8002fce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	e000      	b.n	8002fe8 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002fe6:	2302      	movs	r3, #2
  }
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3728      	adds	r7, #40	@ 0x28
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	00010004 	.word	0x00010004

08002ff4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b088      	sub	sp, #32
 8002ff8:	af02      	add	r7, sp, #8
 8002ffa:	60f8      	str	r0, [r7, #12]
 8002ffc:	4608      	mov	r0, r1
 8002ffe:	4611      	mov	r1, r2
 8003000:	461a      	mov	r2, r3
 8003002:	4603      	mov	r3, r0
 8003004:	817b      	strh	r3, [r7, #10]
 8003006:	460b      	mov	r3, r1
 8003008:	813b      	strh	r3, [r7, #8]
 800300a:	4613      	mov	r3, r2
 800300c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800301c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800301e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003020:	9300      	str	r3, [sp, #0]
 8003022:	6a3b      	ldr	r3, [r7, #32]
 8003024:	2200      	movs	r2, #0
 8003026:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800302a:	68f8      	ldr	r0, [r7, #12]
 800302c:	f000 f960 	bl	80032f0 <I2C_WaitOnFlagUntilTimeout>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d00d      	beq.n	8003052 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003040:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003044:	d103      	bne.n	800304e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800304c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e05f      	b.n	8003112 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003052:	897b      	ldrh	r3, [r7, #10]
 8003054:	b2db      	uxtb	r3, r3
 8003056:	461a      	mov	r2, r3
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003060:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003064:	6a3a      	ldr	r2, [r7, #32]
 8003066:	492d      	ldr	r1, [pc, #180]	@ (800311c <I2C_RequestMemoryWrite+0x128>)
 8003068:	68f8      	ldr	r0, [r7, #12]
 800306a:	f000 f9bb 	bl	80033e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800306e:	4603      	mov	r3, r0
 8003070:	2b00      	cmp	r3, #0
 8003072:	d001      	beq.n	8003078 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e04c      	b.n	8003112 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003078:	2300      	movs	r3, #0
 800307a:	617b      	str	r3, [r7, #20]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	695b      	ldr	r3, [r3, #20]
 8003082:	617b      	str	r3, [r7, #20]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	699b      	ldr	r3, [r3, #24]
 800308a:	617b      	str	r3, [r7, #20]
 800308c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800308e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003090:	6a39      	ldr	r1, [r7, #32]
 8003092:	68f8      	ldr	r0, [r7, #12]
 8003094:	f000 fa46 	bl	8003524 <I2C_WaitOnTXEFlagUntilTimeout>
 8003098:	4603      	mov	r3, r0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d00d      	beq.n	80030ba <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030a2:	2b04      	cmp	r3, #4
 80030a4:	d107      	bne.n	80030b6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030b4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e02b      	b.n	8003112 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80030ba:	88fb      	ldrh	r3, [r7, #6]
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d105      	bne.n	80030cc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80030c0:	893b      	ldrh	r3, [r7, #8]
 80030c2:	b2da      	uxtb	r2, r3
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	611a      	str	r2, [r3, #16]
 80030ca:	e021      	b.n	8003110 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80030cc:	893b      	ldrh	r3, [r7, #8]
 80030ce:	0a1b      	lsrs	r3, r3, #8
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	b2da      	uxtb	r2, r3
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030dc:	6a39      	ldr	r1, [r7, #32]
 80030de:	68f8      	ldr	r0, [r7, #12]
 80030e0:	f000 fa20 	bl	8003524 <I2C_WaitOnTXEFlagUntilTimeout>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d00d      	beq.n	8003106 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ee:	2b04      	cmp	r3, #4
 80030f0:	d107      	bne.n	8003102 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003100:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e005      	b.n	8003112 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003106:	893b      	ldrh	r3, [r7, #8]
 8003108:	b2da      	uxtb	r2, r3
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003110:	2300      	movs	r3, #0
}
 8003112:	4618      	mov	r0, r3
 8003114:	3718      	adds	r7, #24
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	00010002 	.word	0x00010002

08003120 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b088      	sub	sp, #32
 8003124:	af02      	add	r7, sp, #8
 8003126:	60f8      	str	r0, [r7, #12]
 8003128:	4608      	mov	r0, r1
 800312a:	4611      	mov	r1, r2
 800312c:	461a      	mov	r2, r3
 800312e:	4603      	mov	r3, r0
 8003130:	817b      	strh	r3, [r7, #10]
 8003132:	460b      	mov	r3, r1
 8003134:	813b      	strh	r3, [r7, #8]
 8003136:	4613      	mov	r3, r2
 8003138:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003148:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003158:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800315a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800315c:	9300      	str	r3, [sp, #0]
 800315e:	6a3b      	ldr	r3, [r7, #32]
 8003160:	2200      	movs	r2, #0
 8003162:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003166:	68f8      	ldr	r0, [r7, #12]
 8003168:	f000 f8c2 	bl	80032f0 <I2C_WaitOnFlagUntilTimeout>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d00d      	beq.n	800318e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800317c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003180:	d103      	bne.n	800318a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003188:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e0aa      	b.n	80032e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800318e:	897b      	ldrh	r3, [r7, #10]
 8003190:	b2db      	uxtb	r3, r3
 8003192:	461a      	mov	r2, r3
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800319c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800319e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031a0:	6a3a      	ldr	r2, [r7, #32]
 80031a2:	4952      	ldr	r1, [pc, #328]	@ (80032ec <I2C_RequestMemoryRead+0x1cc>)
 80031a4:	68f8      	ldr	r0, [r7, #12]
 80031a6:	f000 f91d 	bl	80033e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031aa:	4603      	mov	r3, r0
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d001      	beq.n	80031b4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	e097      	b.n	80032e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031b4:	2300      	movs	r3, #0
 80031b6:	617b      	str	r3, [r7, #20]
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	695b      	ldr	r3, [r3, #20]
 80031be:	617b      	str	r3, [r7, #20]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	699b      	ldr	r3, [r3, #24]
 80031c6:	617b      	str	r3, [r7, #20]
 80031c8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031cc:	6a39      	ldr	r1, [r7, #32]
 80031ce:	68f8      	ldr	r0, [r7, #12]
 80031d0:	f000 f9a8 	bl	8003524 <I2C_WaitOnTXEFlagUntilTimeout>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d00d      	beq.n	80031f6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031de:	2b04      	cmp	r3, #4
 80031e0:	d107      	bne.n	80031f2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031f0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e076      	b.n	80032e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80031f6:	88fb      	ldrh	r3, [r7, #6]
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d105      	bne.n	8003208 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80031fc:	893b      	ldrh	r3, [r7, #8]
 80031fe:	b2da      	uxtb	r2, r3
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	611a      	str	r2, [r3, #16]
 8003206:	e021      	b.n	800324c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003208:	893b      	ldrh	r3, [r7, #8]
 800320a:	0a1b      	lsrs	r3, r3, #8
 800320c:	b29b      	uxth	r3, r3
 800320e:	b2da      	uxtb	r2, r3
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003216:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003218:	6a39      	ldr	r1, [r7, #32]
 800321a:	68f8      	ldr	r0, [r7, #12]
 800321c:	f000 f982 	bl	8003524 <I2C_WaitOnTXEFlagUntilTimeout>
 8003220:	4603      	mov	r3, r0
 8003222:	2b00      	cmp	r3, #0
 8003224:	d00d      	beq.n	8003242 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800322a:	2b04      	cmp	r3, #4
 800322c:	d107      	bne.n	800323e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800323c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e050      	b.n	80032e4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003242:	893b      	ldrh	r3, [r7, #8]
 8003244:	b2da      	uxtb	r2, r3
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800324c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800324e:	6a39      	ldr	r1, [r7, #32]
 8003250:	68f8      	ldr	r0, [r7, #12]
 8003252:	f000 f967 	bl	8003524 <I2C_WaitOnTXEFlagUntilTimeout>
 8003256:	4603      	mov	r3, r0
 8003258:	2b00      	cmp	r3, #0
 800325a:	d00d      	beq.n	8003278 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003260:	2b04      	cmp	r3, #4
 8003262:	d107      	bne.n	8003274 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003272:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e035      	b.n	80032e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003286:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800328a:	9300      	str	r3, [sp, #0]
 800328c:	6a3b      	ldr	r3, [r7, #32]
 800328e:	2200      	movs	r2, #0
 8003290:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003294:	68f8      	ldr	r0, [r7, #12]
 8003296:	f000 f82b 	bl	80032f0 <I2C_WaitOnFlagUntilTimeout>
 800329a:	4603      	mov	r3, r0
 800329c:	2b00      	cmp	r3, #0
 800329e:	d00d      	beq.n	80032bc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032ae:	d103      	bne.n	80032b8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80032b6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80032b8:	2303      	movs	r3, #3
 80032ba:	e013      	b.n	80032e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80032bc:	897b      	ldrh	r3, [r7, #10]
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	f043 0301 	orr.w	r3, r3, #1
 80032c4:	b2da      	uxtb	r2, r3
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80032cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ce:	6a3a      	ldr	r2, [r7, #32]
 80032d0:	4906      	ldr	r1, [pc, #24]	@ (80032ec <I2C_RequestMemoryRead+0x1cc>)
 80032d2:	68f8      	ldr	r0, [r7, #12]
 80032d4:	f000 f886 	bl	80033e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d001      	beq.n	80032e2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e000      	b.n	80032e4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80032e2:	2300      	movs	r3, #0
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3718      	adds	r7, #24
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	00010002 	.word	0x00010002

080032f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b084      	sub	sp, #16
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	60f8      	str	r0, [r7, #12]
 80032f8:	60b9      	str	r1, [r7, #8]
 80032fa:	603b      	str	r3, [r7, #0]
 80032fc:	4613      	mov	r3, r2
 80032fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003300:	e048      	b.n	8003394 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003308:	d044      	beq.n	8003394 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800330a:	f7fe ff4f 	bl	80021ac <HAL_GetTick>
 800330e:	4602      	mov	r2, r0
 8003310:	69bb      	ldr	r3, [r7, #24]
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	683a      	ldr	r2, [r7, #0]
 8003316:	429a      	cmp	r2, r3
 8003318:	d302      	bcc.n	8003320 <I2C_WaitOnFlagUntilTimeout+0x30>
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d139      	bne.n	8003394 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	0c1b      	lsrs	r3, r3, #16
 8003324:	b2db      	uxtb	r3, r3
 8003326:	2b01      	cmp	r3, #1
 8003328:	d10d      	bne.n	8003346 <I2C_WaitOnFlagUntilTimeout+0x56>
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	695b      	ldr	r3, [r3, #20]
 8003330:	43da      	mvns	r2, r3
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	4013      	ands	r3, r2
 8003336:	b29b      	uxth	r3, r3
 8003338:	2b00      	cmp	r3, #0
 800333a:	bf0c      	ite	eq
 800333c:	2301      	moveq	r3, #1
 800333e:	2300      	movne	r3, #0
 8003340:	b2db      	uxtb	r3, r3
 8003342:	461a      	mov	r2, r3
 8003344:	e00c      	b.n	8003360 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	699b      	ldr	r3, [r3, #24]
 800334c:	43da      	mvns	r2, r3
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	4013      	ands	r3, r2
 8003352:	b29b      	uxth	r3, r3
 8003354:	2b00      	cmp	r3, #0
 8003356:	bf0c      	ite	eq
 8003358:	2301      	moveq	r3, #1
 800335a:	2300      	movne	r3, #0
 800335c:	b2db      	uxtb	r3, r3
 800335e:	461a      	mov	r2, r3
 8003360:	79fb      	ldrb	r3, [r7, #7]
 8003362:	429a      	cmp	r2, r3
 8003364:	d116      	bne.n	8003394 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2200      	movs	r2, #0
 800336a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2220      	movs	r2, #32
 8003370:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2200      	movs	r2, #0
 8003378:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003380:	f043 0220 	orr.w	r2, r3, #32
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2200      	movs	r2, #0
 800338c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e023      	b.n	80033dc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	0c1b      	lsrs	r3, r3, #16
 8003398:	b2db      	uxtb	r3, r3
 800339a:	2b01      	cmp	r3, #1
 800339c:	d10d      	bne.n	80033ba <I2C_WaitOnFlagUntilTimeout+0xca>
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	695b      	ldr	r3, [r3, #20]
 80033a4:	43da      	mvns	r2, r3
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	4013      	ands	r3, r2
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	bf0c      	ite	eq
 80033b0:	2301      	moveq	r3, #1
 80033b2:	2300      	movne	r3, #0
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	461a      	mov	r2, r3
 80033b8:	e00c      	b.n	80033d4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	699b      	ldr	r3, [r3, #24]
 80033c0:	43da      	mvns	r2, r3
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	4013      	ands	r3, r2
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	bf0c      	ite	eq
 80033cc:	2301      	moveq	r3, #1
 80033ce:	2300      	movne	r3, #0
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	461a      	mov	r2, r3
 80033d4:	79fb      	ldrb	r3, [r7, #7]
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d093      	beq.n	8003302 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80033da:	2300      	movs	r3, #0
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3710      	adds	r7, #16
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}

080033e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b084      	sub	sp, #16
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	60f8      	str	r0, [r7, #12]
 80033ec:	60b9      	str	r1, [r7, #8]
 80033ee:	607a      	str	r2, [r7, #4]
 80033f0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80033f2:	e071      	b.n	80034d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	695b      	ldr	r3, [r3, #20]
 80033fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003402:	d123      	bne.n	800344c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003412:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800341c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2200      	movs	r2, #0
 8003422:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2220      	movs	r2, #32
 8003428:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2200      	movs	r2, #0
 8003430:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003438:	f043 0204 	orr.w	r2, r3, #4
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2200      	movs	r2, #0
 8003444:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	e067      	b.n	800351c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003452:	d041      	beq.n	80034d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003454:	f7fe feaa 	bl	80021ac <HAL_GetTick>
 8003458:	4602      	mov	r2, r0
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	429a      	cmp	r2, r3
 8003462:	d302      	bcc.n	800346a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d136      	bne.n	80034d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	0c1b      	lsrs	r3, r3, #16
 800346e:	b2db      	uxtb	r3, r3
 8003470:	2b01      	cmp	r3, #1
 8003472:	d10c      	bne.n	800348e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	695b      	ldr	r3, [r3, #20]
 800347a:	43da      	mvns	r2, r3
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	4013      	ands	r3, r2
 8003480:	b29b      	uxth	r3, r3
 8003482:	2b00      	cmp	r3, #0
 8003484:	bf14      	ite	ne
 8003486:	2301      	movne	r3, #1
 8003488:	2300      	moveq	r3, #0
 800348a:	b2db      	uxtb	r3, r3
 800348c:	e00b      	b.n	80034a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	699b      	ldr	r3, [r3, #24]
 8003494:	43da      	mvns	r2, r3
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	4013      	ands	r3, r2
 800349a:	b29b      	uxth	r3, r3
 800349c:	2b00      	cmp	r3, #0
 800349e:	bf14      	ite	ne
 80034a0:	2301      	movne	r3, #1
 80034a2:	2300      	moveq	r3, #0
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d016      	beq.n	80034d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2200      	movs	r2, #0
 80034ae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2220      	movs	r2, #32
 80034b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034c4:	f043 0220 	orr.w	r2, r3, #32
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2200      	movs	r2, #0
 80034d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e021      	b.n	800351c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	0c1b      	lsrs	r3, r3, #16
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d10c      	bne.n	80034fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	695b      	ldr	r3, [r3, #20]
 80034e8:	43da      	mvns	r2, r3
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	4013      	ands	r3, r2
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	bf14      	ite	ne
 80034f4:	2301      	movne	r3, #1
 80034f6:	2300      	moveq	r3, #0
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	e00b      	b.n	8003514 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	699b      	ldr	r3, [r3, #24]
 8003502:	43da      	mvns	r2, r3
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	4013      	ands	r3, r2
 8003508:	b29b      	uxth	r3, r3
 800350a:	2b00      	cmp	r3, #0
 800350c:	bf14      	ite	ne
 800350e:	2301      	movne	r3, #1
 8003510:	2300      	moveq	r3, #0
 8003512:	b2db      	uxtb	r3, r3
 8003514:	2b00      	cmp	r3, #0
 8003516:	f47f af6d 	bne.w	80033f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800351a:	2300      	movs	r3, #0
}
 800351c:	4618      	mov	r0, r3
 800351e:	3710      	adds	r7, #16
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}

08003524 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b084      	sub	sp, #16
 8003528:	af00      	add	r7, sp, #0
 800352a:	60f8      	str	r0, [r7, #12]
 800352c:	60b9      	str	r1, [r7, #8]
 800352e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003530:	e034      	b.n	800359c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003532:	68f8      	ldr	r0, [r7, #12]
 8003534:	f000 f8e3 	bl	80036fe <I2C_IsAcknowledgeFailed>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d001      	beq.n	8003542 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e034      	b.n	80035ac <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003548:	d028      	beq.n	800359c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800354a:	f7fe fe2f 	bl	80021ac <HAL_GetTick>
 800354e:	4602      	mov	r2, r0
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	68ba      	ldr	r2, [r7, #8]
 8003556:	429a      	cmp	r2, r3
 8003558:	d302      	bcc.n	8003560 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d11d      	bne.n	800359c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	695b      	ldr	r3, [r3, #20]
 8003566:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800356a:	2b80      	cmp	r3, #128	@ 0x80
 800356c:	d016      	beq.n	800359c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2200      	movs	r2, #0
 8003572:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2220      	movs	r2, #32
 8003578:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2200      	movs	r2, #0
 8003580:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003588:	f043 0220 	orr.w	r2, r3, #32
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2200      	movs	r2, #0
 8003594:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e007      	b.n	80035ac <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	695b      	ldr	r3, [r3, #20]
 80035a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035a6:	2b80      	cmp	r3, #128	@ 0x80
 80035a8:	d1c3      	bne.n	8003532 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80035aa:	2300      	movs	r3, #0
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3710      	adds	r7, #16
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b084      	sub	sp, #16
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	60f8      	str	r0, [r7, #12]
 80035bc:	60b9      	str	r1, [r7, #8]
 80035be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80035c0:	e034      	b.n	800362c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80035c2:	68f8      	ldr	r0, [r7, #12]
 80035c4:	f000 f89b 	bl	80036fe <I2C_IsAcknowledgeFailed>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d001      	beq.n	80035d2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e034      	b.n	800363c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035d8:	d028      	beq.n	800362c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035da:	f7fe fde7 	bl	80021ac <HAL_GetTick>
 80035de:	4602      	mov	r2, r0
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	1ad3      	subs	r3, r2, r3
 80035e4:	68ba      	ldr	r2, [r7, #8]
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d302      	bcc.n	80035f0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d11d      	bne.n	800362c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	695b      	ldr	r3, [r3, #20]
 80035f6:	f003 0304 	and.w	r3, r3, #4
 80035fa:	2b04      	cmp	r3, #4
 80035fc:	d016      	beq.n	800362c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2200      	movs	r2, #0
 8003602:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2220      	movs	r2, #32
 8003608:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2200      	movs	r2, #0
 8003610:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003618:	f043 0220 	orr.w	r2, r3, #32
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2200      	movs	r2, #0
 8003624:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e007      	b.n	800363c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	695b      	ldr	r3, [r3, #20]
 8003632:	f003 0304 	and.w	r3, r3, #4
 8003636:	2b04      	cmp	r3, #4
 8003638:	d1c3      	bne.n	80035c2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800363a:	2300      	movs	r3, #0
}
 800363c:	4618      	mov	r0, r3
 800363e:	3710      	adds	r7, #16
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}

08003644 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b084      	sub	sp, #16
 8003648:	af00      	add	r7, sp, #0
 800364a:	60f8      	str	r0, [r7, #12]
 800364c:	60b9      	str	r1, [r7, #8]
 800364e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003650:	e049      	b.n	80036e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	695b      	ldr	r3, [r3, #20]
 8003658:	f003 0310 	and.w	r3, r3, #16
 800365c:	2b10      	cmp	r3, #16
 800365e:	d119      	bne.n	8003694 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f06f 0210 	mvn.w	r2, #16
 8003668:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2200      	movs	r2, #0
 800366e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2220      	movs	r2, #32
 8003674:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2200      	movs	r2, #0
 800367c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2200      	movs	r2, #0
 800368c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e030      	b.n	80036f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003694:	f7fe fd8a 	bl	80021ac <HAL_GetTick>
 8003698:	4602      	mov	r2, r0
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	1ad3      	subs	r3, r2, r3
 800369e:	68ba      	ldr	r2, [r7, #8]
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d302      	bcc.n	80036aa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d11d      	bne.n	80036e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	695b      	ldr	r3, [r3, #20]
 80036b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036b4:	2b40      	cmp	r3, #64	@ 0x40
 80036b6:	d016      	beq.n	80036e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2200      	movs	r2, #0
 80036bc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2220      	movs	r2, #32
 80036c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2200      	movs	r2, #0
 80036ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036d2:	f043 0220 	orr.w	r2, r3, #32
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2200      	movs	r2, #0
 80036de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e007      	b.n	80036f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	695b      	ldr	r3, [r3, #20]
 80036ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036f0:	2b40      	cmp	r3, #64	@ 0x40
 80036f2:	d1ae      	bne.n	8003652 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80036f4:	2300      	movs	r3, #0
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3710      	adds	r7, #16
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}

080036fe <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80036fe:	b480      	push	{r7}
 8003700:	b083      	sub	sp, #12
 8003702:	af00      	add	r7, sp, #0
 8003704:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	695b      	ldr	r3, [r3, #20]
 800370c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003710:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003714:	d11b      	bne.n	800374e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800371e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2200      	movs	r2, #0
 8003724:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2220      	movs	r2, #32
 800372a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2200      	movs	r2, #0
 8003732:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800373a:	f043 0204 	orr.w	r2, r3, #4
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e000      	b.n	8003750 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800374e:	2300      	movs	r3, #0
}
 8003750:	4618      	mov	r0, r3
 8003752:	370c      	adds	r7, #12
 8003754:	46bd      	mov	sp, r7
 8003756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375a:	4770      	bx	lr

0800375c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b086      	sub	sp, #24
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d101      	bne.n	800376e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e267      	b.n	8003c3e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 0301 	and.w	r3, r3, #1
 8003776:	2b00      	cmp	r3, #0
 8003778:	d075      	beq.n	8003866 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800377a:	4b88      	ldr	r3, [pc, #544]	@ (800399c <HAL_RCC_OscConfig+0x240>)
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	f003 030c 	and.w	r3, r3, #12
 8003782:	2b04      	cmp	r3, #4
 8003784:	d00c      	beq.n	80037a0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003786:	4b85      	ldr	r3, [pc, #532]	@ (800399c <HAL_RCC_OscConfig+0x240>)
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800378e:	2b08      	cmp	r3, #8
 8003790:	d112      	bne.n	80037b8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003792:	4b82      	ldr	r3, [pc, #520]	@ (800399c <HAL_RCC_OscConfig+0x240>)
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800379a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800379e:	d10b      	bne.n	80037b8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037a0:	4b7e      	ldr	r3, [pc, #504]	@ (800399c <HAL_RCC_OscConfig+0x240>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d05b      	beq.n	8003864 <HAL_RCC_OscConfig+0x108>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d157      	bne.n	8003864 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e242      	b.n	8003c3e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037c0:	d106      	bne.n	80037d0 <HAL_RCC_OscConfig+0x74>
 80037c2:	4b76      	ldr	r3, [pc, #472]	@ (800399c <HAL_RCC_OscConfig+0x240>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a75      	ldr	r2, [pc, #468]	@ (800399c <HAL_RCC_OscConfig+0x240>)
 80037c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037cc:	6013      	str	r3, [r2, #0]
 80037ce:	e01d      	b.n	800380c <HAL_RCC_OscConfig+0xb0>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80037d8:	d10c      	bne.n	80037f4 <HAL_RCC_OscConfig+0x98>
 80037da:	4b70      	ldr	r3, [pc, #448]	@ (800399c <HAL_RCC_OscConfig+0x240>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a6f      	ldr	r2, [pc, #444]	@ (800399c <HAL_RCC_OscConfig+0x240>)
 80037e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80037e4:	6013      	str	r3, [r2, #0]
 80037e6:	4b6d      	ldr	r3, [pc, #436]	@ (800399c <HAL_RCC_OscConfig+0x240>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a6c      	ldr	r2, [pc, #432]	@ (800399c <HAL_RCC_OscConfig+0x240>)
 80037ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037f0:	6013      	str	r3, [r2, #0]
 80037f2:	e00b      	b.n	800380c <HAL_RCC_OscConfig+0xb0>
 80037f4:	4b69      	ldr	r3, [pc, #420]	@ (800399c <HAL_RCC_OscConfig+0x240>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a68      	ldr	r2, [pc, #416]	@ (800399c <HAL_RCC_OscConfig+0x240>)
 80037fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037fe:	6013      	str	r3, [r2, #0]
 8003800:	4b66      	ldr	r3, [pc, #408]	@ (800399c <HAL_RCC_OscConfig+0x240>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a65      	ldr	r2, [pc, #404]	@ (800399c <HAL_RCC_OscConfig+0x240>)
 8003806:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800380a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d013      	beq.n	800383c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003814:	f7fe fcca 	bl	80021ac <HAL_GetTick>
 8003818:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800381a:	e008      	b.n	800382e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800381c:	f7fe fcc6 	bl	80021ac <HAL_GetTick>
 8003820:	4602      	mov	r2, r0
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	2b64      	cmp	r3, #100	@ 0x64
 8003828:	d901      	bls.n	800382e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800382a:	2303      	movs	r3, #3
 800382c:	e207      	b.n	8003c3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800382e:	4b5b      	ldr	r3, [pc, #364]	@ (800399c <HAL_RCC_OscConfig+0x240>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d0f0      	beq.n	800381c <HAL_RCC_OscConfig+0xc0>
 800383a:	e014      	b.n	8003866 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800383c:	f7fe fcb6 	bl	80021ac <HAL_GetTick>
 8003840:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003842:	e008      	b.n	8003856 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003844:	f7fe fcb2 	bl	80021ac <HAL_GetTick>
 8003848:	4602      	mov	r2, r0
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	2b64      	cmp	r3, #100	@ 0x64
 8003850:	d901      	bls.n	8003856 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	e1f3      	b.n	8003c3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003856:	4b51      	ldr	r3, [pc, #324]	@ (800399c <HAL_RCC_OscConfig+0x240>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d1f0      	bne.n	8003844 <HAL_RCC_OscConfig+0xe8>
 8003862:	e000      	b.n	8003866 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003864:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0302 	and.w	r3, r3, #2
 800386e:	2b00      	cmp	r3, #0
 8003870:	d063      	beq.n	800393a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003872:	4b4a      	ldr	r3, [pc, #296]	@ (800399c <HAL_RCC_OscConfig+0x240>)
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	f003 030c 	and.w	r3, r3, #12
 800387a:	2b00      	cmp	r3, #0
 800387c:	d00b      	beq.n	8003896 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800387e:	4b47      	ldr	r3, [pc, #284]	@ (800399c <HAL_RCC_OscConfig+0x240>)
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003886:	2b08      	cmp	r3, #8
 8003888:	d11c      	bne.n	80038c4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800388a:	4b44      	ldr	r3, [pc, #272]	@ (800399c <HAL_RCC_OscConfig+0x240>)
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d116      	bne.n	80038c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003896:	4b41      	ldr	r3, [pc, #260]	@ (800399c <HAL_RCC_OscConfig+0x240>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 0302 	and.w	r3, r3, #2
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d005      	beq.n	80038ae <HAL_RCC_OscConfig+0x152>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	68db      	ldr	r3, [r3, #12]
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d001      	beq.n	80038ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e1c7      	b.n	8003c3e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038ae:	4b3b      	ldr	r3, [pc, #236]	@ (800399c <HAL_RCC_OscConfig+0x240>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	691b      	ldr	r3, [r3, #16]
 80038ba:	00db      	lsls	r3, r3, #3
 80038bc:	4937      	ldr	r1, [pc, #220]	@ (800399c <HAL_RCC_OscConfig+0x240>)
 80038be:	4313      	orrs	r3, r2
 80038c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038c2:	e03a      	b.n	800393a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d020      	beq.n	800390e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038cc:	4b34      	ldr	r3, [pc, #208]	@ (80039a0 <HAL_RCC_OscConfig+0x244>)
 80038ce:	2201      	movs	r2, #1
 80038d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038d2:	f7fe fc6b 	bl	80021ac <HAL_GetTick>
 80038d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038d8:	e008      	b.n	80038ec <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038da:	f7fe fc67 	bl	80021ac <HAL_GetTick>
 80038de:	4602      	mov	r2, r0
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	1ad3      	subs	r3, r2, r3
 80038e4:	2b02      	cmp	r3, #2
 80038e6:	d901      	bls.n	80038ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80038e8:	2303      	movs	r3, #3
 80038ea:	e1a8      	b.n	8003c3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038ec:	4b2b      	ldr	r3, [pc, #172]	@ (800399c <HAL_RCC_OscConfig+0x240>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 0302 	and.w	r3, r3, #2
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d0f0      	beq.n	80038da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038f8:	4b28      	ldr	r3, [pc, #160]	@ (800399c <HAL_RCC_OscConfig+0x240>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	691b      	ldr	r3, [r3, #16]
 8003904:	00db      	lsls	r3, r3, #3
 8003906:	4925      	ldr	r1, [pc, #148]	@ (800399c <HAL_RCC_OscConfig+0x240>)
 8003908:	4313      	orrs	r3, r2
 800390a:	600b      	str	r3, [r1, #0]
 800390c:	e015      	b.n	800393a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800390e:	4b24      	ldr	r3, [pc, #144]	@ (80039a0 <HAL_RCC_OscConfig+0x244>)
 8003910:	2200      	movs	r2, #0
 8003912:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003914:	f7fe fc4a 	bl	80021ac <HAL_GetTick>
 8003918:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800391a:	e008      	b.n	800392e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800391c:	f7fe fc46 	bl	80021ac <HAL_GetTick>
 8003920:	4602      	mov	r2, r0
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	2b02      	cmp	r3, #2
 8003928:	d901      	bls.n	800392e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	e187      	b.n	8003c3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800392e:	4b1b      	ldr	r3, [pc, #108]	@ (800399c <HAL_RCC_OscConfig+0x240>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 0302 	and.w	r3, r3, #2
 8003936:	2b00      	cmp	r3, #0
 8003938:	d1f0      	bne.n	800391c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 0308 	and.w	r3, r3, #8
 8003942:	2b00      	cmp	r3, #0
 8003944:	d036      	beq.n	80039b4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	695b      	ldr	r3, [r3, #20]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d016      	beq.n	800397c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800394e:	4b15      	ldr	r3, [pc, #84]	@ (80039a4 <HAL_RCC_OscConfig+0x248>)
 8003950:	2201      	movs	r2, #1
 8003952:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003954:	f7fe fc2a 	bl	80021ac <HAL_GetTick>
 8003958:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800395a:	e008      	b.n	800396e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800395c:	f7fe fc26 	bl	80021ac <HAL_GetTick>
 8003960:	4602      	mov	r2, r0
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	2b02      	cmp	r3, #2
 8003968:	d901      	bls.n	800396e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	e167      	b.n	8003c3e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800396e:	4b0b      	ldr	r3, [pc, #44]	@ (800399c <HAL_RCC_OscConfig+0x240>)
 8003970:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003972:	f003 0302 	and.w	r3, r3, #2
 8003976:	2b00      	cmp	r3, #0
 8003978:	d0f0      	beq.n	800395c <HAL_RCC_OscConfig+0x200>
 800397a:	e01b      	b.n	80039b4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800397c:	4b09      	ldr	r3, [pc, #36]	@ (80039a4 <HAL_RCC_OscConfig+0x248>)
 800397e:	2200      	movs	r2, #0
 8003980:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003982:	f7fe fc13 	bl	80021ac <HAL_GetTick>
 8003986:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003988:	e00e      	b.n	80039a8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800398a:	f7fe fc0f 	bl	80021ac <HAL_GetTick>
 800398e:	4602      	mov	r2, r0
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	1ad3      	subs	r3, r2, r3
 8003994:	2b02      	cmp	r3, #2
 8003996:	d907      	bls.n	80039a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003998:	2303      	movs	r3, #3
 800399a:	e150      	b.n	8003c3e <HAL_RCC_OscConfig+0x4e2>
 800399c:	40023800 	.word	0x40023800
 80039a0:	42470000 	.word	0x42470000
 80039a4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039a8:	4b88      	ldr	r3, [pc, #544]	@ (8003bcc <HAL_RCC_OscConfig+0x470>)
 80039aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039ac:	f003 0302 	and.w	r3, r3, #2
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d1ea      	bne.n	800398a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 0304 	and.w	r3, r3, #4
 80039bc:	2b00      	cmp	r3, #0
 80039be:	f000 8097 	beq.w	8003af0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039c2:	2300      	movs	r3, #0
 80039c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039c6:	4b81      	ldr	r3, [pc, #516]	@ (8003bcc <HAL_RCC_OscConfig+0x470>)
 80039c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d10f      	bne.n	80039f2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039d2:	2300      	movs	r3, #0
 80039d4:	60bb      	str	r3, [r7, #8]
 80039d6:	4b7d      	ldr	r3, [pc, #500]	@ (8003bcc <HAL_RCC_OscConfig+0x470>)
 80039d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039da:	4a7c      	ldr	r2, [pc, #496]	@ (8003bcc <HAL_RCC_OscConfig+0x470>)
 80039dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80039e2:	4b7a      	ldr	r3, [pc, #488]	@ (8003bcc <HAL_RCC_OscConfig+0x470>)
 80039e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039ea:	60bb      	str	r3, [r7, #8]
 80039ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039ee:	2301      	movs	r3, #1
 80039f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039f2:	4b77      	ldr	r3, [pc, #476]	@ (8003bd0 <HAL_RCC_OscConfig+0x474>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d118      	bne.n	8003a30 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039fe:	4b74      	ldr	r3, [pc, #464]	@ (8003bd0 <HAL_RCC_OscConfig+0x474>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a73      	ldr	r2, [pc, #460]	@ (8003bd0 <HAL_RCC_OscConfig+0x474>)
 8003a04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a0a:	f7fe fbcf 	bl	80021ac <HAL_GetTick>
 8003a0e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a10:	e008      	b.n	8003a24 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a12:	f7fe fbcb 	bl	80021ac <HAL_GetTick>
 8003a16:	4602      	mov	r2, r0
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	1ad3      	subs	r3, r2, r3
 8003a1c:	2b02      	cmp	r3, #2
 8003a1e:	d901      	bls.n	8003a24 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003a20:	2303      	movs	r3, #3
 8003a22:	e10c      	b.n	8003c3e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a24:	4b6a      	ldr	r3, [pc, #424]	@ (8003bd0 <HAL_RCC_OscConfig+0x474>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d0f0      	beq.n	8003a12 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d106      	bne.n	8003a46 <HAL_RCC_OscConfig+0x2ea>
 8003a38:	4b64      	ldr	r3, [pc, #400]	@ (8003bcc <HAL_RCC_OscConfig+0x470>)
 8003a3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a3c:	4a63      	ldr	r2, [pc, #396]	@ (8003bcc <HAL_RCC_OscConfig+0x470>)
 8003a3e:	f043 0301 	orr.w	r3, r3, #1
 8003a42:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a44:	e01c      	b.n	8003a80 <HAL_RCC_OscConfig+0x324>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	2b05      	cmp	r3, #5
 8003a4c:	d10c      	bne.n	8003a68 <HAL_RCC_OscConfig+0x30c>
 8003a4e:	4b5f      	ldr	r3, [pc, #380]	@ (8003bcc <HAL_RCC_OscConfig+0x470>)
 8003a50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a52:	4a5e      	ldr	r2, [pc, #376]	@ (8003bcc <HAL_RCC_OscConfig+0x470>)
 8003a54:	f043 0304 	orr.w	r3, r3, #4
 8003a58:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a5a:	4b5c      	ldr	r3, [pc, #368]	@ (8003bcc <HAL_RCC_OscConfig+0x470>)
 8003a5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a5e:	4a5b      	ldr	r2, [pc, #364]	@ (8003bcc <HAL_RCC_OscConfig+0x470>)
 8003a60:	f043 0301 	orr.w	r3, r3, #1
 8003a64:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a66:	e00b      	b.n	8003a80 <HAL_RCC_OscConfig+0x324>
 8003a68:	4b58      	ldr	r3, [pc, #352]	@ (8003bcc <HAL_RCC_OscConfig+0x470>)
 8003a6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a6c:	4a57      	ldr	r2, [pc, #348]	@ (8003bcc <HAL_RCC_OscConfig+0x470>)
 8003a6e:	f023 0301 	bic.w	r3, r3, #1
 8003a72:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a74:	4b55      	ldr	r3, [pc, #340]	@ (8003bcc <HAL_RCC_OscConfig+0x470>)
 8003a76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a78:	4a54      	ldr	r2, [pc, #336]	@ (8003bcc <HAL_RCC_OscConfig+0x470>)
 8003a7a:	f023 0304 	bic.w	r3, r3, #4
 8003a7e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d015      	beq.n	8003ab4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a88:	f7fe fb90 	bl	80021ac <HAL_GetTick>
 8003a8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a8e:	e00a      	b.n	8003aa6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a90:	f7fe fb8c 	bl	80021ac <HAL_GetTick>
 8003a94:	4602      	mov	r2, r0
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d901      	bls.n	8003aa6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003aa2:	2303      	movs	r3, #3
 8003aa4:	e0cb      	b.n	8003c3e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003aa6:	4b49      	ldr	r3, [pc, #292]	@ (8003bcc <HAL_RCC_OscConfig+0x470>)
 8003aa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aaa:	f003 0302 	and.w	r3, r3, #2
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d0ee      	beq.n	8003a90 <HAL_RCC_OscConfig+0x334>
 8003ab2:	e014      	b.n	8003ade <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ab4:	f7fe fb7a 	bl	80021ac <HAL_GetTick>
 8003ab8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003aba:	e00a      	b.n	8003ad2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003abc:	f7fe fb76 	bl	80021ac <HAL_GetTick>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	1ad3      	subs	r3, r2, r3
 8003ac6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d901      	bls.n	8003ad2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e0b5      	b.n	8003c3e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ad2:	4b3e      	ldr	r3, [pc, #248]	@ (8003bcc <HAL_RCC_OscConfig+0x470>)
 8003ad4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ad6:	f003 0302 	and.w	r3, r3, #2
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d1ee      	bne.n	8003abc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003ade:	7dfb      	ldrb	r3, [r7, #23]
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d105      	bne.n	8003af0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ae4:	4b39      	ldr	r3, [pc, #228]	@ (8003bcc <HAL_RCC_OscConfig+0x470>)
 8003ae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ae8:	4a38      	ldr	r2, [pc, #224]	@ (8003bcc <HAL_RCC_OscConfig+0x470>)
 8003aea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003aee:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	699b      	ldr	r3, [r3, #24]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	f000 80a1 	beq.w	8003c3c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003afa:	4b34      	ldr	r3, [pc, #208]	@ (8003bcc <HAL_RCC_OscConfig+0x470>)
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	f003 030c 	and.w	r3, r3, #12
 8003b02:	2b08      	cmp	r3, #8
 8003b04:	d05c      	beq.n	8003bc0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	699b      	ldr	r3, [r3, #24]
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	d141      	bne.n	8003b92 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b0e:	4b31      	ldr	r3, [pc, #196]	@ (8003bd4 <HAL_RCC_OscConfig+0x478>)
 8003b10:	2200      	movs	r2, #0
 8003b12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b14:	f7fe fb4a 	bl	80021ac <HAL_GetTick>
 8003b18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b1a:	e008      	b.n	8003b2e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b1c:	f7fe fb46 	bl	80021ac <HAL_GetTick>
 8003b20:	4602      	mov	r2, r0
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	2b02      	cmp	r3, #2
 8003b28:	d901      	bls.n	8003b2e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	e087      	b.n	8003c3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b2e:	4b27      	ldr	r3, [pc, #156]	@ (8003bcc <HAL_RCC_OscConfig+0x470>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d1f0      	bne.n	8003b1c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	69da      	ldr	r2, [r3, #28]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6a1b      	ldr	r3, [r3, #32]
 8003b42:	431a      	orrs	r2, r3
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b48:	019b      	lsls	r3, r3, #6
 8003b4a:	431a      	orrs	r2, r3
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b50:	085b      	lsrs	r3, r3, #1
 8003b52:	3b01      	subs	r3, #1
 8003b54:	041b      	lsls	r3, r3, #16
 8003b56:	431a      	orrs	r2, r3
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b5c:	061b      	lsls	r3, r3, #24
 8003b5e:	491b      	ldr	r1, [pc, #108]	@ (8003bcc <HAL_RCC_OscConfig+0x470>)
 8003b60:	4313      	orrs	r3, r2
 8003b62:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b64:	4b1b      	ldr	r3, [pc, #108]	@ (8003bd4 <HAL_RCC_OscConfig+0x478>)
 8003b66:	2201      	movs	r2, #1
 8003b68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b6a:	f7fe fb1f 	bl	80021ac <HAL_GetTick>
 8003b6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b70:	e008      	b.n	8003b84 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b72:	f7fe fb1b 	bl	80021ac <HAL_GetTick>
 8003b76:	4602      	mov	r2, r0
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	1ad3      	subs	r3, r2, r3
 8003b7c:	2b02      	cmp	r3, #2
 8003b7e:	d901      	bls.n	8003b84 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003b80:	2303      	movs	r3, #3
 8003b82:	e05c      	b.n	8003c3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b84:	4b11      	ldr	r3, [pc, #68]	@ (8003bcc <HAL_RCC_OscConfig+0x470>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d0f0      	beq.n	8003b72 <HAL_RCC_OscConfig+0x416>
 8003b90:	e054      	b.n	8003c3c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b92:	4b10      	ldr	r3, [pc, #64]	@ (8003bd4 <HAL_RCC_OscConfig+0x478>)
 8003b94:	2200      	movs	r2, #0
 8003b96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b98:	f7fe fb08 	bl	80021ac <HAL_GetTick>
 8003b9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b9e:	e008      	b.n	8003bb2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ba0:	f7fe fb04 	bl	80021ac <HAL_GetTick>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	d901      	bls.n	8003bb2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e045      	b.n	8003c3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bb2:	4b06      	ldr	r3, [pc, #24]	@ (8003bcc <HAL_RCC_OscConfig+0x470>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d1f0      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x444>
 8003bbe:	e03d      	b.n	8003c3c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	699b      	ldr	r3, [r3, #24]
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d107      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e038      	b.n	8003c3e <HAL_RCC_OscConfig+0x4e2>
 8003bcc:	40023800 	.word	0x40023800
 8003bd0:	40007000 	.word	0x40007000
 8003bd4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003bd8:	4b1b      	ldr	r3, [pc, #108]	@ (8003c48 <HAL_RCC_OscConfig+0x4ec>)
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	699b      	ldr	r3, [r3, #24]
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d028      	beq.n	8003c38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d121      	bne.n	8003c38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d11a      	bne.n	8003c38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c02:	68fa      	ldr	r2, [r7, #12]
 8003c04:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003c08:	4013      	ands	r3, r2
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003c0e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d111      	bne.n	8003c38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c1e:	085b      	lsrs	r3, r3, #1
 8003c20:	3b01      	subs	r3, #1
 8003c22:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d107      	bne.n	8003c38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c32:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d001      	beq.n	8003c3c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e000      	b.n	8003c3e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003c3c:	2300      	movs	r3, #0
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3718      	adds	r7, #24
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	bf00      	nop
 8003c48:	40023800 	.word	0x40023800

08003c4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b084      	sub	sp, #16
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
 8003c54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d101      	bne.n	8003c60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e0cc      	b.n	8003dfa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c60:	4b68      	ldr	r3, [pc, #416]	@ (8003e04 <HAL_RCC_ClockConfig+0x1b8>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 0307 	and.w	r3, r3, #7
 8003c68:	683a      	ldr	r2, [r7, #0]
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d90c      	bls.n	8003c88 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c6e:	4b65      	ldr	r3, [pc, #404]	@ (8003e04 <HAL_RCC_ClockConfig+0x1b8>)
 8003c70:	683a      	ldr	r2, [r7, #0]
 8003c72:	b2d2      	uxtb	r2, r2
 8003c74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c76:	4b63      	ldr	r3, [pc, #396]	@ (8003e04 <HAL_RCC_ClockConfig+0x1b8>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 0307 	and.w	r3, r3, #7
 8003c7e:	683a      	ldr	r2, [r7, #0]
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d001      	beq.n	8003c88 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e0b8      	b.n	8003dfa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 0302 	and.w	r3, r3, #2
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d020      	beq.n	8003cd6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 0304 	and.w	r3, r3, #4
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d005      	beq.n	8003cac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ca0:	4b59      	ldr	r3, [pc, #356]	@ (8003e08 <HAL_RCC_ClockConfig+0x1bc>)
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	4a58      	ldr	r2, [pc, #352]	@ (8003e08 <HAL_RCC_ClockConfig+0x1bc>)
 8003ca6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003caa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 0308 	and.w	r3, r3, #8
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d005      	beq.n	8003cc4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003cb8:	4b53      	ldr	r3, [pc, #332]	@ (8003e08 <HAL_RCC_ClockConfig+0x1bc>)
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	4a52      	ldr	r2, [pc, #328]	@ (8003e08 <HAL_RCC_ClockConfig+0x1bc>)
 8003cbe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003cc2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cc4:	4b50      	ldr	r3, [pc, #320]	@ (8003e08 <HAL_RCC_ClockConfig+0x1bc>)
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	494d      	ldr	r1, [pc, #308]	@ (8003e08 <HAL_RCC_ClockConfig+0x1bc>)
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0301 	and.w	r3, r3, #1
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d044      	beq.n	8003d6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d107      	bne.n	8003cfa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cea:	4b47      	ldr	r3, [pc, #284]	@ (8003e08 <HAL_RCC_ClockConfig+0x1bc>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d119      	bne.n	8003d2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e07f      	b.n	8003dfa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	2b02      	cmp	r3, #2
 8003d00:	d003      	beq.n	8003d0a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d06:	2b03      	cmp	r3, #3
 8003d08:	d107      	bne.n	8003d1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d0a:	4b3f      	ldr	r3, [pc, #252]	@ (8003e08 <HAL_RCC_ClockConfig+0x1bc>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d109      	bne.n	8003d2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e06f      	b.n	8003dfa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d1a:	4b3b      	ldr	r3, [pc, #236]	@ (8003e08 <HAL_RCC_ClockConfig+0x1bc>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 0302 	and.w	r3, r3, #2
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d101      	bne.n	8003d2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e067      	b.n	8003dfa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d2a:	4b37      	ldr	r3, [pc, #220]	@ (8003e08 <HAL_RCC_ClockConfig+0x1bc>)
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	f023 0203 	bic.w	r2, r3, #3
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	4934      	ldr	r1, [pc, #208]	@ (8003e08 <HAL_RCC_ClockConfig+0x1bc>)
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d3c:	f7fe fa36 	bl	80021ac <HAL_GetTick>
 8003d40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d42:	e00a      	b.n	8003d5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d44:	f7fe fa32 	bl	80021ac <HAL_GetTick>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d901      	bls.n	8003d5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d56:	2303      	movs	r3, #3
 8003d58:	e04f      	b.n	8003dfa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d5a:	4b2b      	ldr	r3, [pc, #172]	@ (8003e08 <HAL_RCC_ClockConfig+0x1bc>)
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	f003 020c 	and.w	r2, r3, #12
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	009b      	lsls	r3, r3, #2
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d1eb      	bne.n	8003d44 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d6c:	4b25      	ldr	r3, [pc, #148]	@ (8003e04 <HAL_RCC_ClockConfig+0x1b8>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 0307 	and.w	r3, r3, #7
 8003d74:	683a      	ldr	r2, [r7, #0]
 8003d76:	429a      	cmp	r2, r3
 8003d78:	d20c      	bcs.n	8003d94 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d7a:	4b22      	ldr	r3, [pc, #136]	@ (8003e04 <HAL_RCC_ClockConfig+0x1b8>)
 8003d7c:	683a      	ldr	r2, [r7, #0]
 8003d7e:	b2d2      	uxtb	r2, r2
 8003d80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d82:	4b20      	ldr	r3, [pc, #128]	@ (8003e04 <HAL_RCC_ClockConfig+0x1b8>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 0307 	and.w	r3, r3, #7
 8003d8a:	683a      	ldr	r2, [r7, #0]
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d001      	beq.n	8003d94 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	e032      	b.n	8003dfa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 0304 	and.w	r3, r3, #4
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d008      	beq.n	8003db2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003da0:	4b19      	ldr	r3, [pc, #100]	@ (8003e08 <HAL_RCC_ClockConfig+0x1bc>)
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	4916      	ldr	r1, [pc, #88]	@ (8003e08 <HAL_RCC_ClockConfig+0x1bc>)
 8003dae:	4313      	orrs	r3, r2
 8003db0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 0308 	and.w	r3, r3, #8
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d009      	beq.n	8003dd2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003dbe:	4b12      	ldr	r3, [pc, #72]	@ (8003e08 <HAL_RCC_ClockConfig+0x1bc>)
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	691b      	ldr	r3, [r3, #16]
 8003dca:	00db      	lsls	r3, r3, #3
 8003dcc:	490e      	ldr	r1, [pc, #56]	@ (8003e08 <HAL_RCC_ClockConfig+0x1bc>)
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003dd2:	f000 f821 	bl	8003e18 <HAL_RCC_GetSysClockFreq>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	4b0b      	ldr	r3, [pc, #44]	@ (8003e08 <HAL_RCC_ClockConfig+0x1bc>)
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	091b      	lsrs	r3, r3, #4
 8003dde:	f003 030f 	and.w	r3, r3, #15
 8003de2:	490a      	ldr	r1, [pc, #40]	@ (8003e0c <HAL_RCC_ClockConfig+0x1c0>)
 8003de4:	5ccb      	ldrb	r3, [r1, r3]
 8003de6:	fa22 f303 	lsr.w	r3, r2, r3
 8003dea:	4a09      	ldr	r2, [pc, #36]	@ (8003e10 <HAL_RCC_ClockConfig+0x1c4>)
 8003dec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003dee:	4b09      	ldr	r3, [pc, #36]	@ (8003e14 <HAL_RCC_ClockConfig+0x1c8>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4618      	mov	r0, r3
 8003df4:	f7fe f996 	bl	8002124 <HAL_InitTick>

  return HAL_OK;
 8003df8:	2300      	movs	r3, #0
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3710      	adds	r7, #16
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	bf00      	nop
 8003e04:	40023c00 	.word	0x40023c00
 8003e08:	40023800 	.word	0x40023800
 8003e0c:	08004764 	.word	0x08004764
 8003e10:	20000004 	.word	0x20000004
 8003e14:	20000008 	.word	0x20000008

08003e18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e1c:	b090      	sub	sp, #64	@ 0x40
 8003e1e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003e20:	2300      	movs	r3, #0
 8003e22:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003e24:	2300      	movs	r3, #0
 8003e26:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e30:	4b59      	ldr	r3, [pc, #356]	@ (8003f98 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	f003 030c 	and.w	r3, r3, #12
 8003e38:	2b08      	cmp	r3, #8
 8003e3a:	d00d      	beq.n	8003e58 <HAL_RCC_GetSysClockFreq+0x40>
 8003e3c:	2b08      	cmp	r3, #8
 8003e3e:	f200 80a1 	bhi.w	8003f84 <HAL_RCC_GetSysClockFreq+0x16c>
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d002      	beq.n	8003e4c <HAL_RCC_GetSysClockFreq+0x34>
 8003e46:	2b04      	cmp	r3, #4
 8003e48:	d003      	beq.n	8003e52 <HAL_RCC_GetSysClockFreq+0x3a>
 8003e4a:	e09b      	b.n	8003f84 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e4c:	4b53      	ldr	r3, [pc, #332]	@ (8003f9c <HAL_RCC_GetSysClockFreq+0x184>)
 8003e4e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003e50:	e09b      	b.n	8003f8a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e52:	4b53      	ldr	r3, [pc, #332]	@ (8003fa0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003e54:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003e56:	e098      	b.n	8003f8a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e58:	4b4f      	ldr	r3, [pc, #316]	@ (8003f98 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003e60:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e62:	4b4d      	ldr	r3, [pc, #308]	@ (8003f98 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d028      	beq.n	8003ec0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e6e:	4b4a      	ldr	r3, [pc, #296]	@ (8003f98 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	099b      	lsrs	r3, r3, #6
 8003e74:	2200      	movs	r2, #0
 8003e76:	623b      	str	r3, [r7, #32]
 8003e78:	627a      	str	r2, [r7, #36]	@ 0x24
 8003e7a:	6a3b      	ldr	r3, [r7, #32]
 8003e7c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003e80:	2100      	movs	r1, #0
 8003e82:	4b47      	ldr	r3, [pc, #284]	@ (8003fa0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003e84:	fb03 f201 	mul.w	r2, r3, r1
 8003e88:	2300      	movs	r3, #0
 8003e8a:	fb00 f303 	mul.w	r3, r0, r3
 8003e8e:	4413      	add	r3, r2
 8003e90:	4a43      	ldr	r2, [pc, #268]	@ (8003fa0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003e92:	fba0 1202 	umull	r1, r2, r0, r2
 8003e96:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003e98:	460a      	mov	r2, r1
 8003e9a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003e9c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e9e:	4413      	add	r3, r2
 8003ea0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ea2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	61bb      	str	r3, [r7, #24]
 8003ea8:	61fa      	str	r2, [r7, #28]
 8003eaa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003eae:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003eb2:	f7fc f9e1 	bl	8000278 <__aeabi_uldivmod>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	460b      	mov	r3, r1
 8003eba:	4613      	mov	r3, r2
 8003ebc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ebe:	e053      	b.n	8003f68 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ec0:	4b35      	ldr	r3, [pc, #212]	@ (8003f98 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	099b      	lsrs	r3, r3, #6
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	613b      	str	r3, [r7, #16]
 8003eca:	617a      	str	r2, [r7, #20]
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003ed2:	f04f 0b00 	mov.w	fp, #0
 8003ed6:	4652      	mov	r2, sl
 8003ed8:	465b      	mov	r3, fp
 8003eda:	f04f 0000 	mov.w	r0, #0
 8003ede:	f04f 0100 	mov.w	r1, #0
 8003ee2:	0159      	lsls	r1, r3, #5
 8003ee4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ee8:	0150      	lsls	r0, r2, #5
 8003eea:	4602      	mov	r2, r0
 8003eec:	460b      	mov	r3, r1
 8003eee:	ebb2 080a 	subs.w	r8, r2, sl
 8003ef2:	eb63 090b 	sbc.w	r9, r3, fp
 8003ef6:	f04f 0200 	mov.w	r2, #0
 8003efa:	f04f 0300 	mov.w	r3, #0
 8003efe:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003f02:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003f06:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003f0a:	ebb2 0408 	subs.w	r4, r2, r8
 8003f0e:	eb63 0509 	sbc.w	r5, r3, r9
 8003f12:	f04f 0200 	mov.w	r2, #0
 8003f16:	f04f 0300 	mov.w	r3, #0
 8003f1a:	00eb      	lsls	r3, r5, #3
 8003f1c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f20:	00e2      	lsls	r2, r4, #3
 8003f22:	4614      	mov	r4, r2
 8003f24:	461d      	mov	r5, r3
 8003f26:	eb14 030a 	adds.w	r3, r4, sl
 8003f2a:	603b      	str	r3, [r7, #0]
 8003f2c:	eb45 030b 	adc.w	r3, r5, fp
 8003f30:	607b      	str	r3, [r7, #4]
 8003f32:	f04f 0200 	mov.w	r2, #0
 8003f36:	f04f 0300 	mov.w	r3, #0
 8003f3a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003f3e:	4629      	mov	r1, r5
 8003f40:	028b      	lsls	r3, r1, #10
 8003f42:	4621      	mov	r1, r4
 8003f44:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f48:	4621      	mov	r1, r4
 8003f4a:	028a      	lsls	r2, r1, #10
 8003f4c:	4610      	mov	r0, r2
 8003f4e:	4619      	mov	r1, r3
 8003f50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f52:	2200      	movs	r2, #0
 8003f54:	60bb      	str	r3, [r7, #8]
 8003f56:	60fa      	str	r2, [r7, #12]
 8003f58:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f5c:	f7fc f98c 	bl	8000278 <__aeabi_uldivmod>
 8003f60:	4602      	mov	r2, r0
 8003f62:	460b      	mov	r3, r1
 8003f64:	4613      	mov	r3, r2
 8003f66:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003f68:	4b0b      	ldr	r3, [pc, #44]	@ (8003f98 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	0c1b      	lsrs	r3, r3, #16
 8003f6e:	f003 0303 	and.w	r3, r3, #3
 8003f72:	3301      	adds	r3, #1
 8003f74:	005b      	lsls	r3, r3, #1
 8003f76:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003f78:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003f7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f80:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003f82:	e002      	b.n	8003f8a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f84:	4b05      	ldr	r3, [pc, #20]	@ (8003f9c <HAL_RCC_GetSysClockFreq+0x184>)
 8003f86:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003f88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3740      	adds	r7, #64	@ 0x40
 8003f90:	46bd      	mov	sp, r7
 8003f92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f96:	bf00      	nop
 8003f98:	40023800 	.word	0x40023800
 8003f9c:	00f42400 	.word	0x00f42400
 8003fa0:	017d7840 	.word	0x017d7840

08003fa4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fa8:	4b03      	ldr	r3, [pc, #12]	@ (8003fb8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003faa:	681b      	ldr	r3, [r3, #0]
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr
 8003fb6:	bf00      	nop
 8003fb8:	20000004 	.word	0x20000004

08003fbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003fc0:	f7ff fff0 	bl	8003fa4 <HAL_RCC_GetHCLKFreq>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	4b05      	ldr	r3, [pc, #20]	@ (8003fdc <HAL_RCC_GetPCLK1Freq+0x20>)
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	0a9b      	lsrs	r3, r3, #10
 8003fcc:	f003 0307 	and.w	r3, r3, #7
 8003fd0:	4903      	ldr	r1, [pc, #12]	@ (8003fe0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fd2:	5ccb      	ldrb	r3, [r1, r3]
 8003fd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	bd80      	pop	{r7, pc}
 8003fdc:	40023800 	.word	0x40023800
 8003fe0:	08004774 	.word	0x08004774

08003fe4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b082      	sub	sp, #8
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d101      	bne.n	8003ff6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e07b      	b.n	80040ee <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d108      	bne.n	8004010 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004006:	d009      	beq.n	800401c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2200      	movs	r2, #0
 800400c:	61da      	str	r2, [r3, #28]
 800400e:	e005      	b.n	800401c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2200      	movs	r2, #0
 8004014:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2200      	movs	r2, #0
 800401a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2200      	movs	r2, #0
 8004020:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004028:	b2db      	uxtb	r3, r3
 800402a:	2b00      	cmp	r3, #0
 800402c:	d106      	bne.n	800403c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f7fd ff76 	bl	8001f28 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2202      	movs	r2, #2
 8004040:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004052:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004064:	431a      	orrs	r2, r3
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800406e:	431a      	orrs	r2, r3
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	691b      	ldr	r3, [r3, #16]
 8004074:	f003 0302 	and.w	r3, r3, #2
 8004078:	431a      	orrs	r2, r3
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	695b      	ldr	r3, [r3, #20]
 800407e:	f003 0301 	and.w	r3, r3, #1
 8004082:	431a      	orrs	r2, r3
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	699b      	ldr	r3, [r3, #24]
 8004088:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800408c:	431a      	orrs	r2, r3
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	69db      	ldr	r3, [r3, #28]
 8004092:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004096:	431a      	orrs	r2, r3
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6a1b      	ldr	r3, [r3, #32]
 800409c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040a0:	ea42 0103 	orr.w	r1, r2, r3
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040a8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	430a      	orrs	r2, r1
 80040b2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	699b      	ldr	r3, [r3, #24]
 80040b8:	0c1b      	lsrs	r3, r3, #16
 80040ba:	f003 0104 	and.w	r1, r3, #4
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040c2:	f003 0210 	and.w	r2, r3, #16
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	430a      	orrs	r2, r1
 80040cc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	69da      	ldr	r2, [r3, #28]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80040dc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2200      	movs	r2, #0
 80040e2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2201      	movs	r2, #1
 80040e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80040ec:	2300      	movs	r3, #0
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3708      	adds	r7, #8
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}

080040f6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80040f6:	b580      	push	{r7, lr}
 80040f8:	b08a      	sub	sp, #40	@ 0x28
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	60f8      	str	r0, [r7, #12]
 80040fe:	60b9      	str	r1, [r7, #8]
 8004100:	607a      	str	r2, [r7, #4]
 8004102:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004104:	2301      	movs	r3, #1
 8004106:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004108:	f7fe f850 	bl	80021ac <HAL_GetTick>
 800410c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004114:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800411c:	887b      	ldrh	r3, [r7, #2]
 800411e:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004120:	7ffb      	ldrb	r3, [r7, #31]
 8004122:	2b01      	cmp	r3, #1
 8004124:	d00c      	beq.n	8004140 <HAL_SPI_TransmitReceive+0x4a>
 8004126:	69bb      	ldr	r3, [r7, #24]
 8004128:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800412c:	d106      	bne.n	800413c <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d102      	bne.n	800413c <HAL_SPI_TransmitReceive+0x46>
 8004136:	7ffb      	ldrb	r3, [r7, #31]
 8004138:	2b04      	cmp	r3, #4
 800413a:	d001      	beq.n	8004140 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800413c:	2302      	movs	r3, #2
 800413e:	e17f      	b.n	8004440 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d005      	beq.n	8004152 <HAL_SPI_TransmitReceive+0x5c>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d002      	beq.n	8004152 <HAL_SPI_TransmitReceive+0x5c>
 800414c:	887b      	ldrh	r3, [r7, #2]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d101      	bne.n	8004156 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e174      	b.n	8004440 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800415c:	2b01      	cmp	r3, #1
 800415e:	d101      	bne.n	8004164 <HAL_SPI_TransmitReceive+0x6e>
 8004160:	2302      	movs	r3, #2
 8004162:	e16d      	b.n	8004440 <HAL_SPI_TransmitReceive+0x34a>
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004172:	b2db      	uxtb	r3, r3
 8004174:	2b04      	cmp	r3, #4
 8004176:	d003      	beq.n	8004180 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2205      	movs	r2, #5
 800417c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2200      	movs	r2, #0
 8004184:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	687a      	ldr	r2, [r7, #4]
 800418a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	887a      	ldrh	r2, [r7, #2]
 8004190:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	887a      	ldrh	r2, [r7, #2]
 8004196:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	68ba      	ldr	r2, [r7, #8]
 800419c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	887a      	ldrh	r2, [r7, #2]
 80041a2:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	887a      	ldrh	r2, [r7, #2]
 80041a8:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2200      	movs	r2, #0
 80041ae:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2200      	movs	r2, #0
 80041b4:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041c0:	2b40      	cmp	r3, #64	@ 0x40
 80041c2:	d007      	beq.n	80041d4 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80041d2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	68db      	ldr	r3, [r3, #12]
 80041d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80041dc:	d17e      	bne.n	80042dc <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d002      	beq.n	80041ec <HAL_SPI_TransmitReceive+0xf6>
 80041e6:	8afb      	ldrh	r3, [r7, #22]
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d16c      	bne.n	80042c6 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041f0:	881a      	ldrh	r2, [r3, #0]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041fc:	1c9a      	adds	r2, r3, #2
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004206:	b29b      	uxth	r3, r3
 8004208:	3b01      	subs	r3, #1
 800420a:	b29a      	uxth	r2, r3
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004210:	e059      	b.n	80042c6 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	f003 0302 	and.w	r3, r3, #2
 800421c:	2b02      	cmp	r3, #2
 800421e:	d11b      	bne.n	8004258 <HAL_SPI_TransmitReceive+0x162>
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004224:	b29b      	uxth	r3, r3
 8004226:	2b00      	cmp	r3, #0
 8004228:	d016      	beq.n	8004258 <HAL_SPI_TransmitReceive+0x162>
 800422a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800422c:	2b01      	cmp	r3, #1
 800422e:	d113      	bne.n	8004258 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004234:	881a      	ldrh	r2, [r3, #0]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004240:	1c9a      	adds	r2, r3, #2
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800424a:	b29b      	uxth	r3, r3
 800424c:	3b01      	subs	r3, #1
 800424e:	b29a      	uxth	r2, r3
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004254:	2300      	movs	r3, #0
 8004256:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	f003 0301 	and.w	r3, r3, #1
 8004262:	2b01      	cmp	r3, #1
 8004264:	d119      	bne.n	800429a <HAL_SPI_TransmitReceive+0x1a4>
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800426a:	b29b      	uxth	r3, r3
 800426c:	2b00      	cmp	r3, #0
 800426e:	d014      	beq.n	800429a <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	68da      	ldr	r2, [r3, #12]
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800427a:	b292      	uxth	r2, r2
 800427c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004282:	1c9a      	adds	r2, r3, #2
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800428c:	b29b      	uxth	r3, r3
 800428e:	3b01      	subs	r3, #1
 8004290:	b29a      	uxth	r2, r3
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004296:	2301      	movs	r3, #1
 8004298:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800429a:	f7fd ff87 	bl	80021ac <HAL_GetTick>
 800429e:	4602      	mov	r2, r0
 80042a0:	6a3b      	ldr	r3, [r7, #32]
 80042a2:	1ad3      	subs	r3, r2, r3
 80042a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042a6:	429a      	cmp	r2, r3
 80042a8:	d80d      	bhi.n	80042c6 <HAL_SPI_TransmitReceive+0x1d0>
 80042aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042b0:	d009      	beq.n	80042c6 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2201      	movs	r2, #1
 80042b6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2200      	movs	r2, #0
 80042be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80042c2:	2303      	movs	r3, #3
 80042c4:	e0bc      	b.n	8004440 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80042ca:	b29b      	uxth	r3, r3
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d1a0      	bne.n	8004212 <HAL_SPI_TransmitReceive+0x11c>
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80042d4:	b29b      	uxth	r3, r3
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d19b      	bne.n	8004212 <HAL_SPI_TransmitReceive+0x11c>
 80042da:	e082      	b.n	80043e2 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d002      	beq.n	80042ea <HAL_SPI_TransmitReceive+0x1f4>
 80042e4:	8afb      	ldrh	r3, [r7, #22]
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d171      	bne.n	80043ce <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	330c      	adds	r3, #12
 80042f4:	7812      	ldrb	r2, [r2, #0]
 80042f6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042fc:	1c5a      	adds	r2, r3, #1
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004306:	b29b      	uxth	r3, r3
 8004308:	3b01      	subs	r3, #1
 800430a:	b29a      	uxth	r2, r3
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004310:	e05d      	b.n	80043ce <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	f003 0302 	and.w	r3, r3, #2
 800431c:	2b02      	cmp	r3, #2
 800431e:	d11c      	bne.n	800435a <HAL_SPI_TransmitReceive+0x264>
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004324:	b29b      	uxth	r3, r3
 8004326:	2b00      	cmp	r3, #0
 8004328:	d017      	beq.n	800435a <HAL_SPI_TransmitReceive+0x264>
 800432a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800432c:	2b01      	cmp	r3, #1
 800432e:	d114      	bne.n	800435a <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	330c      	adds	r3, #12
 800433a:	7812      	ldrb	r2, [r2, #0]
 800433c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004342:	1c5a      	adds	r2, r3, #1
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800434c:	b29b      	uxth	r3, r3
 800434e:	3b01      	subs	r3, #1
 8004350:	b29a      	uxth	r2, r3
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004356:	2300      	movs	r3, #0
 8004358:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	f003 0301 	and.w	r3, r3, #1
 8004364:	2b01      	cmp	r3, #1
 8004366:	d119      	bne.n	800439c <HAL_SPI_TransmitReceive+0x2a6>
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800436c:	b29b      	uxth	r3, r3
 800436e:	2b00      	cmp	r3, #0
 8004370:	d014      	beq.n	800439c <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	68da      	ldr	r2, [r3, #12]
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800437c:	b2d2      	uxtb	r2, r2
 800437e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004384:	1c5a      	adds	r2, r3, #1
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800438e:	b29b      	uxth	r3, r3
 8004390:	3b01      	subs	r3, #1
 8004392:	b29a      	uxth	r2, r3
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004398:	2301      	movs	r3, #1
 800439a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800439c:	f7fd ff06 	bl	80021ac <HAL_GetTick>
 80043a0:	4602      	mov	r2, r0
 80043a2:	6a3b      	ldr	r3, [r7, #32]
 80043a4:	1ad3      	subs	r3, r2, r3
 80043a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d803      	bhi.n	80043b4 <HAL_SPI_TransmitReceive+0x2be>
 80043ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043b2:	d102      	bne.n	80043ba <HAL_SPI_TransmitReceive+0x2c4>
 80043b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d109      	bne.n	80043ce <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2201      	movs	r2, #1
 80043be:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2200      	movs	r2, #0
 80043c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80043ca:	2303      	movs	r3, #3
 80043cc:	e038      	b.n	8004440 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d19c      	bne.n	8004312 <HAL_SPI_TransmitReceive+0x21c>
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80043dc:	b29b      	uxth	r3, r3
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d197      	bne.n	8004312 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80043e2:	6a3a      	ldr	r2, [r7, #32]
 80043e4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80043e6:	68f8      	ldr	r0, [r7, #12]
 80043e8:	f000 f8b6 	bl	8004558 <SPI_EndRxTxTransaction>
 80043ec:	4603      	mov	r3, r0
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d008      	beq.n	8004404 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2220      	movs	r2, #32
 80043f6:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2200      	movs	r2, #0
 80043fc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	e01d      	b.n	8004440 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d10a      	bne.n	8004422 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800440c:	2300      	movs	r3, #0
 800440e:	613b      	str	r3, [r7, #16]
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	68db      	ldr	r3, [r3, #12]
 8004416:	613b      	str	r3, [r7, #16]
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	613b      	str	r3, [r7, #16]
 8004420:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2201      	movs	r2, #1
 8004426:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2200      	movs	r2, #0
 800442e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004436:	2b00      	cmp	r3, #0
 8004438:	d001      	beq.n	800443e <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e000      	b.n	8004440 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800443e:	2300      	movs	r3, #0
  }
}
 8004440:	4618      	mov	r0, r3
 8004442:	3728      	adds	r7, #40	@ 0x28
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}

08004448 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b088      	sub	sp, #32
 800444c:	af00      	add	r7, sp, #0
 800444e:	60f8      	str	r0, [r7, #12]
 8004450:	60b9      	str	r1, [r7, #8]
 8004452:	603b      	str	r3, [r7, #0]
 8004454:	4613      	mov	r3, r2
 8004456:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004458:	f7fd fea8 	bl	80021ac <HAL_GetTick>
 800445c:	4602      	mov	r2, r0
 800445e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004460:	1a9b      	subs	r3, r3, r2
 8004462:	683a      	ldr	r2, [r7, #0]
 8004464:	4413      	add	r3, r2
 8004466:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004468:	f7fd fea0 	bl	80021ac <HAL_GetTick>
 800446c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800446e:	4b39      	ldr	r3, [pc, #228]	@ (8004554 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	015b      	lsls	r3, r3, #5
 8004474:	0d1b      	lsrs	r3, r3, #20
 8004476:	69fa      	ldr	r2, [r7, #28]
 8004478:	fb02 f303 	mul.w	r3, r2, r3
 800447c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800447e:	e055      	b.n	800452c <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004486:	d051      	beq.n	800452c <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004488:	f7fd fe90 	bl	80021ac <HAL_GetTick>
 800448c:	4602      	mov	r2, r0
 800448e:	69bb      	ldr	r3, [r7, #24]
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	69fa      	ldr	r2, [r7, #28]
 8004494:	429a      	cmp	r2, r3
 8004496:	d902      	bls.n	800449e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004498:	69fb      	ldr	r3, [r7, #28]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d13d      	bne.n	800451a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	685a      	ldr	r2, [r3, #4]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80044ac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80044b6:	d111      	bne.n	80044dc <SPI_WaitFlagStateUntilTimeout+0x94>
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80044c0:	d004      	beq.n	80044cc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044ca:	d107      	bne.n	80044dc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80044da:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80044e4:	d10f      	bne.n	8004506 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80044f4:	601a      	str	r2, [r3, #0]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004504:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2201      	movs	r2, #1
 800450a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2200      	movs	r2, #0
 8004512:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004516:	2303      	movs	r3, #3
 8004518:	e018      	b.n	800454c <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d102      	bne.n	8004526 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8004520:	2300      	movs	r3, #0
 8004522:	61fb      	str	r3, [r7, #28]
 8004524:	e002      	b.n	800452c <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	3b01      	subs	r3, #1
 800452a:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	689a      	ldr	r2, [r3, #8]
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	4013      	ands	r3, r2
 8004536:	68ba      	ldr	r2, [r7, #8]
 8004538:	429a      	cmp	r2, r3
 800453a:	bf0c      	ite	eq
 800453c:	2301      	moveq	r3, #1
 800453e:	2300      	movne	r3, #0
 8004540:	b2db      	uxtb	r3, r3
 8004542:	461a      	mov	r2, r3
 8004544:	79fb      	ldrb	r3, [r7, #7]
 8004546:	429a      	cmp	r2, r3
 8004548:	d19a      	bne.n	8004480 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 800454a:	2300      	movs	r3, #0
}
 800454c:	4618      	mov	r0, r3
 800454e:	3720      	adds	r7, #32
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}
 8004554:	20000004 	.word	0x20000004

08004558 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b088      	sub	sp, #32
 800455c:	af02      	add	r7, sp, #8
 800455e:	60f8      	str	r0, [r7, #12]
 8004560:	60b9      	str	r1, [r7, #8]
 8004562:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	9300      	str	r3, [sp, #0]
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	2201      	movs	r2, #1
 800456c:	2102      	movs	r1, #2
 800456e:	68f8      	ldr	r0, [r7, #12]
 8004570:	f7ff ff6a 	bl	8004448 <SPI_WaitFlagStateUntilTimeout>
 8004574:	4603      	mov	r3, r0
 8004576:	2b00      	cmp	r3, #0
 8004578:	d007      	beq.n	800458a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800457e:	f043 0220 	orr.w	r2, r3, #32
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004586:	2303      	movs	r3, #3
 8004588:	e032      	b.n	80045f0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800458a:	4b1b      	ldr	r3, [pc, #108]	@ (80045f8 <SPI_EndRxTxTransaction+0xa0>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a1b      	ldr	r2, [pc, #108]	@ (80045fc <SPI_EndRxTxTransaction+0xa4>)
 8004590:	fba2 2303 	umull	r2, r3, r2, r3
 8004594:	0d5b      	lsrs	r3, r3, #21
 8004596:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800459a:	fb02 f303 	mul.w	r3, r2, r3
 800459e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80045a8:	d112      	bne.n	80045d0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	9300      	str	r3, [sp, #0]
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	2200      	movs	r2, #0
 80045b2:	2180      	movs	r1, #128	@ 0x80
 80045b4:	68f8      	ldr	r0, [r7, #12]
 80045b6:	f7ff ff47 	bl	8004448 <SPI_WaitFlagStateUntilTimeout>
 80045ba:	4603      	mov	r3, r0
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d016      	beq.n	80045ee <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045c4:	f043 0220 	orr.w	r2, r3, #32
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80045cc:	2303      	movs	r3, #3
 80045ce:	e00f      	b.n	80045f0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d00a      	beq.n	80045ec <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	3b01      	subs	r3, #1
 80045da:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045e6:	2b80      	cmp	r3, #128	@ 0x80
 80045e8:	d0f2      	beq.n	80045d0 <SPI_EndRxTxTransaction+0x78>
 80045ea:	e000      	b.n	80045ee <SPI_EndRxTxTransaction+0x96>
        break;
 80045ec:	bf00      	nop
  }

  return HAL_OK;
 80045ee:	2300      	movs	r3, #0
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	3718      	adds	r7, #24
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}
 80045f8:	20000004 	.word	0x20000004
 80045fc:	165e9f81 	.word	0x165e9f81

08004600 <_ZdlPvj>:
 8004600:	f000 b800 	b.w	8004604 <_ZdlPv>

08004604 <_ZdlPv>:
 8004604:	f000 b800 	b.w	8004608 <free>

08004608 <free>:
 8004608:	4b02      	ldr	r3, [pc, #8]	@ (8004614 <free+0xc>)
 800460a:	4601      	mov	r1, r0
 800460c:	6818      	ldr	r0, [r3, #0]
 800460e:	f000 b83d 	b.w	800468c <_free_r>
 8004612:	bf00      	nop
 8004614:	20000010 	.word	0x20000010

08004618 <__malloc_lock>:
 8004618:	4801      	ldr	r0, [pc, #4]	@ (8004620 <__malloc_lock+0x8>)
 800461a:	f000 b835 	b.w	8004688 <__retarget_lock_acquire_recursive>
 800461e:	bf00      	nop
 8004620:	200002f0 	.word	0x200002f0

08004624 <__malloc_unlock>:
 8004624:	4801      	ldr	r0, [pc, #4]	@ (800462c <__malloc_unlock+0x8>)
 8004626:	f000 b830 	b.w	800468a <__retarget_lock_release_recursive>
 800462a:	bf00      	nop
 800462c:	200002f0 	.word	0x200002f0

08004630 <memset>:
 8004630:	4402      	add	r2, r0
 8004632:	4603      	mov	r3, r0
 8004634:	4293      	cmp	r3, r2
 8004636:	d100      	bne.n	800463a <memset+0xa>
 8004638:	4770      	bx	lr
 800463a:	f803 1b01 	strb.w	r1, [r3], #1
 800463e:	e7f9      	b.n	8004634 <memset+0x4>

08004640 <__libc_init_array>:
 8004640:	b570      	push	{r4, r5, r6, lr}
 8004642:	4d0d      	ldr	r5, [pc, #52]	@ (8004678 <__libc_init_array+0x38>)
 8004644:	4c0d      	ldr	r4, [pc, #52]	@ (800467c <__libc_init_array+0x3c>)
 8004646:	1b64      	subs	r4, r4, r5
 8004648:	10a4      	asrs	r4, r4, #2
 800464a:	2600      	movs	r6, #0
 800464c:	42a6      	cmp	r6, r4
 800464e:	d109      	bne.n	8004664 <__libc_init_array+0x24>
 8004650:	4d0b      	ldr	r5, [pc, #44]	@ (8004680 <__libc_init_array+0x40>)
 8004652:	4c0c      	ldr	r4, [pc, #48]	@ (8004684 <__libc_init_array+0x44>)
 8004654:	f000 f864 	bl	8004720 <_init>
 8004658:	1b64      	subs	r4, r4, r5
 800465a:	10a4      	asrs	r4, r4, #2
 800465c:	2600      	movs	r6, #0
 800465e:	42a6      	cmp	r6, r4
 8004660:	d105      	bne.n	800466e <__libc_init_array+0x2e>
 8004662:	bd70      	pop	{r4, r5, r6, pc}
 8004664:	f855 3b04 	ldr.w	r3, [r5], #4
 8004668:	4798      	blx	r3
 800466a:	3601      	adds	r6, #1
 800466c:	e7ee      	b.n	800464c <__libc_init_array+0xc>
 800466e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004672:	4798      	blx	r3
 8004674:	3601      	adds	r6, #1
 8004676:	e7f2      	b.n	800465e <__libc_init_array+0x1e>
 8004678:	08004784 	.word	0x08004784
 800467c:	08004784 	.word	0x08004784
 8004680:	08004784 	.word	0x08004784
 8004684:	0800478c 	.word	0x0800478c

08004688 <__retarget_lock_acquire_recursive>:
 8004688:	4770      	bx	lr

0800468a <__retarget_lock_release_recursive>:
 800468a:	4770      	bx	lr

0800468c <_free_r>:
 800468c:	b538      	push	{r3, r4, r5, lr}
 800468e:	4605      	mov	r5, r0
 8004690:	2900      	cmp	r1, #0
 8004692:	d041      	beq.n	8004718 <_free_r+0x8c>
 8004694:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004698:	1f0c      	subs	r4, r1, #4
 800469a:	2b00      	cmp	r3, #0
 800469c:	bfb8      	it	lt
 800469e:	18e4      	addlt	r4, r4, r3
 80046a0:	f7ff ffba 	bl	8004618 <__malloc_lock>
 80046a4:	4a1d      	ldr	r2, [pc, #116]	@ (800471c <_free_r+0x90>)
 80046a6:	6813      	ldr	r3, [r2, #0]
 80046a8:	b933      	cbnz	r3, 80046b8 <_free_r+0x2c>
 80046aa:	6063      	str	r3, [r4, #4]
 80046ac:	6014      	str	r4, [r2, #0]
 80046ae:	4628      	mov	r0, r5
 80046b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80046b4:	f7ff bfb6 	b.w	8004624 <__malloc_unlock>
 80046b8:	42a3      	cmp	r3, r4
 80046ba:	d908      	bls.n	80046ce <_free_r+0x42>
 80046bc:	6820      	ldr	r0, [r4, #0]
 80046be:	1821      	adds	r1, r4, r0
 80046c0:	428b      	cmp	r3, r1
 80046c2:	bf01      	itttt	eq
 80046c4:	6819      	ldreq	r1, [r3, #0]
 80046c6:	685b      	ldreq	r3, [r3, #4]
 80046c8:	1809      	addeq	r1, r1, r0
 80046ca:	6021      	streq	r1, [r4, #0]
 80046cc:	e7ed      	b.n	80046aa <_free_r+0x1e>
 80046ce:	461a      	mov	r2, r3
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	b10b      	cbz	r3, 80046d8 <_free_r+0x4c>
 80046d4:	42a3      	cmp	r3, r4
 80046d6:	d9fa      	bls.n	80046ce <_free_r+0x42>
 80046d8:	6811      	ldr	r1, [r2, #0]
 80046da:	1850      	adds	r0, r2, r1
 80046dc:	42a0      	cmp	r0, r4
 80046de:	d10b      	bne.n	80046f8 <_free_r+0x6c>
 80046e0:	6820      	ldr	r0, [r4, #0]
 80046e2:	4401      	add	r1, r0
 80046e4:	1850      	adds	r0, r2, r1
 80046e6:	4283      	cmp	r3, r0
 80046e8:	6011      	str	r1, [r2, #0]
 80046ea:	d1e0      	bne.n	80046ae <_free_r+0x22>
 80046ec:	6818      	ldr	r0, [r3, #0]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	6053      	str	r3, [r2, #4]
 80046f2:	4408      	add	r0, r1
 80046f4:	6010      	str	r0, [r2, #0]
 80046f6:	e7da      	b.n	80046ae <_free_r+0x22>
 80046f8:	d902      	bls.n	8004700 <_free_r+0x74>
 80046fa:	230c      	movs	r3, #12
 80046fc:	602b      	str	r3, [r5, #0]
 80046fe:	e7d6      	b.n	80046ae <_free_r+0x22>
 8004700:	6820      	ldr	r0, [r4, #0]
 8004702:	1821      	adds	r1, r4, r0
 8004704:	428b      	cmp	r3, r1
 8004706:	bf04      	itt	eq
 8004708:	6819      	ldreq	r1, [r3, #0]
 800470a:	685b      	ldreq	r3, [r3, #4]
 800470c:	6063      	str	r3, [r4, #4]
 800470e:	bf04      	itt	eq
 8004710:	1809      	addeq	r1, r1, r0
 8004712:	6021      	streq	r1, [r4, #0]
 8004714:	6054      	str	r4, [r2, #4]
 8004716:	e7ca      	b.n	80046ae <_free_r+0x22>
 8004718:	bd38      	pop	{r3, r4, r5, pc}
 800471a:	bf00      	nop
 800471c:	200001b4 	.word	0x200001b4

08004720 <_init>:
 8004720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004722:	bf00      	nop
 8004724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004726:	bc08      	pop	{r3}
 8004728:	469e      	mov	lr, r3
 800472a:	4770      	bx	lr

0800472c <_fini>:
 800472c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800472e:	bf00      	nop
 8004730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004732:	bc08      	pop	{r3}
 8004734:	469e      	mov	lr, r3
 8004736:	4770      	bx	lr
