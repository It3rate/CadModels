
FrogClamp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d1c  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08004eb4  08004eb4  00005eb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ef8  08004ef8  0000606c  2**0
                  CONTENTS
  4 .ARM          00000008  08004ef8  08004ef8  00005ef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f00  08004f00  0000606c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08004f00  08004f00  00005f00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  08004f08  08004f08  00005f08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08004f10  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f0  2000006c  08004f7c  0000606c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000035c  08004f7c  0000635c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000606c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000db57  00000000  00000000  0000609c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027f9  00000000  00000000  00013bf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c98  00000000  00000000  000163f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000995  00000000  00000000  00017088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a29f  00000000  00000000  00017a1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001071b  00000000  00000000  00031cbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009587f  00000000  00000000  000423d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d7c56  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003670  00000000  00000000  000d7c9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000db30c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000006c 	.word	0x2000006c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08004e9c 	.word	0x08004e9c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000070 	.word	0x20000070
 80001d4:	08004e9c 	.word	0x08004e9c

080001d8 <__aeabi_ldivmod>:
 80001d8:	b97b      	cbnz	r3, 80001fa <__aeabi_ldivmod+0x22>
 80001da:	b972      	cbnz	r2, 80001fa <__aeabi_ldivmod+0x22>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bfbe      	ittt	lt
 80001e0:	2000      	movlt	r0, #0
 80001e2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80001e6:	e006      	blt.n	80001f6 <__aeabi_ldivmod+0x1e>
 80001e8:	bf08      	it	eq
 80001ea:	2800      	cmpeq	r0, #0
 80001ec:	bf1c      	itt	ne
 80001ee:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 80001f2:	f04f 30ff 	movne.w	r0, #4294967295
 80001f6:	f000 b9b5 	b.w	8000564 <__aeabi_idiv0>
 80001fa:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fe:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000202:	2900      	cmp	r1, #0
 8000204:	db09      	blt.n	800021a <__aeabi_ldivmod+0x42>
 8000206:	2b00      	cmp	r3, #0
 8000208:	db1a      	blt.n	8000240 <__aeabi_ldivmod+0x68>
 800020a:	f000 f84d 	bl	80002a8 <__udivmoddi4>
 800020e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000212:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000216:	b004      	add	sp, #16
 8000218:	4770      	bx	lr
 800021a:	4240      	negs	r0, r0
 800021c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000220:	2b00      	cmp	r3, #0
 8000222:	db1b      	blt.n	800025c <__aeabi_ldivmod+0x84>
 8000224:	f000 f840 	bl	80002a8 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4240      	negs	r0, r0
 8000234:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000238:	4252      	negs	r2, r2
 800023a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800023e:	4770      	bx	lr
 8000240:	4252      	negs	r2, r2
 8000242:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000246:	f000 f82f 	bl	80002a8 <__udivmoddi4>
 800024a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800024e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000252:	b004      	add	sp, #16
 8000254:	4240      	negs	r0, r0
 8000256:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025a:	4770      	bx	lr
 800025c:	4252      	negs	r2, r2
 800025e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000262:	f000 f821 	bl	80002a8 <__udivmoddi4>
 8000266:	f8dd e004 	ldr.w	lr, [sp, #4]
 800026a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026e:	b004      	add	sp, #16
 8000270:	4252      	negs	r2, r2
 8000272:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000276:	4770      	bx	lr

08000278 <__aeabi_uldivmod>:
 8000278:	b953      	cbnz	r3, 8000290 <__aeabi_uldivmod+0x18>
 800027a:	b94a      	cbnz	r2, 8000290 <__aeabi_uldivmod+0x18>
 800027c:	2900      	cmp	r1, #0
 800027e:	bf08      	it	eq
 8000280:	2800      	cmpeq	r0, #0
 8000282:	bf1c      	itt	ne
 8000284:	f04f 31ff 	movne.w	r1, #4294967295
 8000288:	f04f 30ff 	movne.w	r0, #4294967295
 800028c:	f000 b96a 	b.w	8000564 <__aeabi_idiv0>
 8000290:	f1ad 0c08 	sub.w	ip, sp, #8
 8000294:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000298:	f000 f806 	bl	80002a8 <__udivmoddi4>
 800029c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a4:	b004      	add	sp, #16
 80002a6:	4770      	bx	lr

080002a8 <__udivmoddi4>:
 80002a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002ac:	9d08      	ldr	r5, [sp, #32]
 80002ae:	460c      	mov	r4, r1
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d14e      	bne.n	8000352 <__udivmoddi4+0xaa>
 80002b4:	4694      	mov	ip, r2
 80002b6:	458c      	cmp	ip, r1
 80002b8:	4686      	mov	lr, r0
 80002ba:	fab2 f282 	clz	r2, r2
 80002be:	d962      	bls.n	8000386 <__udivmoddi4+0xde>
 80002c0:	b14a      	cbz	r2, 80002d6 <__udivmoddi4+0x2e>
 80002c2:	f1c2 0320 	rsb	r3, r2, #32
 80002c6:	4091      	lsls	r1, r2
 80002c8:	fa20 f303 	lsr.w	r3, r0, r3
 80002cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d0:	4319      	orrs	r1, r3
 80002d2:	fa00 fe02 	lsl.w	lr, r0, r2
 80002d6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002da:	fa1f f68c 	uxth.w	r6, ip
 80002de:	fbb1 f4f7 	udiv	r4, r1, r7
 80002e2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002e6:	fb07 1114 	mls	r1, r7, r4, r1
 80002ea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ee:	fb04 f106 	mul.w	r1, r4, r6
 80002f2:	4299      	cmp	r1, r3
 80002f4:	d90a      	bls.n	800030c <__udivmoddi4+0x64>
 80002f6:	eb1c 0303 	adds.w	r3, ip, r3
 80002fa:	f104 30ff 	add.w	r0, r4, #4294967295
 80002fe:	f080 8112 	bcs.w	8000526 <__udivmoddi4+0x27e>
 8000302:	4299      	cmp	r1, r3
 8000304:	f240 810f 	bls.w	8000526 <__udivmoddi4+0x27e>
 8000308:	3c02      	subs	r4, #2
 800030a:	4463      	add	r3, ip
 800030c:	1a59      	subs	r1, r3, r1
 800030e:	fa1f f38e 	uxth.w	r3, lr
 8000312:	fbb1 f0f7 	udiv	r0, r1, r7
 8000316:	fb07 1110 	mls	r1, r7, r0, r1
 800031a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031e:	fb00 f606 	mul.w	r6, r0, r6
 8000322:	429e      	cmp	r6, r3
 8000324:	d90a      	bls.n	800033c <__udivmoddi4+0x94>
 8000326:	eb1c 0303 	adds.w	r3, ip, r3
 800032a:	f100 31ff 	add.w	r1, r0, #4294967295
 800032e:	f080 80fc 	bcs.w	800052a <__udivmoddi4+0x282>
 8000332:	429e      	cmp	r6, r3
 8000334:	f240 80f9 	bls.w	800052a <__udivmoddi4+0x282>
 8000338:	4463      	add	r3, ip
 800033a:	3802      	subs	r0, #2
 800033c:	1b9b      	subs	r3, r3, r6
 800033e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000342:	2100      	movs	r1, #0
 8000344:	b11d      	cbz	r5, 800034e <__udivmoddi4+0xa6>
 8000346:	40d3      	lsrs	r3, r2
 8000348:	2200      	movs	r2, #0
 800034a:	e9c5 3200 	strd	r3, r2, [r5]
 800034e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000352:	428b      	cmp	r3, r1
 8000354:	d905      	bls.n	8000362 <__udivmoddi4+0xba>
 8000356:	b10d      	cbz	r5, 800035c <__udivmoddi4+0xb4>
 8000358:	e9c5 0100 	strd	r0, r1, [r5]
 800035c:	2100      	movs	r1, #0
 800035e:	4608      	mov	r0, r1
 8000360:	e7f5      	b.n	800034e <__udivmoddi4+0xa6>
 8000362:	fab3 f183 	clz	r1, r3
 8000366:	2900      	cmp	r1, #0
 8000368:	d146      	bne.n	80003f8 <__udivmoddi4+0x150>
 800036a:	42a3      	cmp	r3, r4
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xcc>
 800036e:	4290      	cmp	r0, r2
 8000370:	f0c0 80f0 	bcc.w	8000554 <__udivmoddi4+0x2ac>
 8000374:	1a86      	subs	r6, r0, r2
 8000376:	eb64 0303 	sbc.w	r3, r4, r3
 800037a:	2001      	movs	r0, #1
 800037c:	2d00      	cmp	r5, #0
 800037e:	d0e6      	beq.n	800034e <__udivmoddi4+0xa6>
 8000380:	e9c5 6300 	strd	r6, r3, [r5]
 8000384:	e7e3      	b.n	800034e <__udivmoddi4+0xa6>
 8000386:	2a00      	cmp	r2, #0
 8000388:	f040 8090 	bne.w	80004ac <__udivmoddi4+0x204>
 800038c:	eba1 040c 	sub.w	r4, r1, ip
 8000390:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000394:	fa1f f78c 	uxth.w	r7, ip
 8000398:	2101      	movs	r1, #1
 800039a:	fbb4 f6f8 	udiv	r6, r4, r8
 800039e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003a2:	fb08 4416 	mls	r4, r8, r6, r4
 80003a6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003aa:	fb07 f006 	mul.w	r0, r7, r6
 80003ae:	4298      	cmp	r0, r3
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x11c>
 80003b2:	eb1c 0303 	adds.w	r3, ip, r3
 80003b6:	f106 34ff 	add.w	r4, r6, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x11a>
 80003bc:	4298      	cmp	r0, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2b4>
 80003c2:	4626      	mov	r6, r4
 80003c4:	1a1c      	subs	r4, r3, r0
 80003c6:	fa1f f38e 	uxth.w	r3, lr
 80003ca:	fbb4 f0f8 	udiv	r0, r4, r8
 80003ce:	fb08 4410 	mls	r4, r8, r0, r4
 80003d2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d6:	fb00 f707 	mul.w	r7, r0, r7
 80003da:	429f      	cmp	r7, r3
 80003dc:	d908      	bls.n	80003f0 <__udivmoddi4+0x148>
 80003de:	eb1c 0303 	adds.w	r3, ip, r3
 80003e2:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e6:	d202      	bcs.n	80003ee <__udivmoddi4+0x146>
 80003e8:	429f      	cmp	r7, r3
 80003ea:	f200 80b0 	bhi.w	800054e <__udivmoddi4+0x2a6>
 80003ee:	4620      	mov	r0, r4
 80003f0:	1bdb      	subs	r3, r3, r7
 80003f2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003f6:	e7a5      	b.n	8000344 <__udivmoddi4+0x9c>
 80003f8:	f1c1 0620 	rsb	r6, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 f706 	lsr.w	r7, r2, r6
 8000402:	431f      	orrs	r7, r3
 8000404:	fa20 fc06 	lsr.w	ip, r0, r6
 8000408:	fa04 f301 	lsl.w	r3, r4, r1
 800040c:	ea43 030c 	orr.w	r3, r3, ip
 8000410:	40f4      	lsrs	r4, r6
 8000412:	fa00 f801 	lsl.w	r8, r0, r1
 8000416:	0c38      	lsrs	r0, r7, #16
 8000418:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800041c:	fbb4 fef0 	udiv	lr, r4, r0
 8000420:	fa1f fc87 	uxth.w	ip, r7
 8000424:	fb00 441e 	mls	r4, r0, lr, r4
 8000428:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800042c:	fb0e f90c 	mul.w	r9, lr, ip
 8000430:	45a1      	cmp	r9, r4
 8000432:	fa02 f201 	lsl.w	r2, r2, r1
 8000436:	d90a      	bls.n	800044e <__udivmoddi4+0x1a6>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800043e:	f080 8084 	bcs.w	800054a <__udivmoddi4+0x2a2>
 8000442:	45a1      	cmp	r9, r4
 8000444:	f240 8081 	bls.w	800054a <__udivmoddi4+0x2a2>
 8000448:	f1ae 0e02 	sub.w	lr, lr, #2
 800044c:	443c      	add	r4, r7
 800044e:	eba4 0409 	sub.w	r4, r4, r9
 8000452:	fa1f f983 	uxth.w	r9, r3
 8000456:	fbb4 f3f0 	udiv	r3, r4, r0
 800045a:	fb00 4413 	mls	r4, r0, r3, r4
 800045e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000462:	fb03 fc0c 	mul.w	ip, r3, ip
 8000466:	45a4      	cmp	ip, r4
 8000468:	d907      	bls.n	800047a <__udivmoddi4+0x1d2>
 800046a:	193c      	adds	r4, r7, r4
 800046c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000470:	d267      	bcs.n	8000542 <__udivmoddi4+0x29a>
 8000472:	45a4      	cmp	ip, r4
 8000474:	d965      	bls.n	8000542 <__udivmoddi4+0x29a>
 8000476:	3b02      	subs	r3, #2
 8000478:	443c      	add	r4, r7
 800047a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800047e:	fba0 9302 	umull	r9, r3, r0, r2
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	429c      	cmp	r4, r3
 8000488:	46ce      	mov	lr, r9
 800048a:	469c      	mov	ip, r3
 800048c:	d351      	bcc.n	8000532 <__udivmoddi4+0x28a>
 800048e:	d04e      	beq.n	800052e <__udivmoddi4+0x286>
 8000490:	b155      	cbz	r5, 80004a8 <__udivmoddi4+0x200>
 8000492:	ebb8 030e 	subs.w	r3, r8, lr
 8000496:	eb64 040c 	sbc.w	r4, r4, ip
 800049a:	fa04 f606 	lsl.w	r6, r4, r6
 800049e:	40cb      	lsrs	r3, r1
 80004a0:	431e      	orrs	r6, r3
 80004a2:	40cc      	lsrs	r4, r1
 80004a4:	e9c5 6400 	strd	r6, r4, [r5]
 80004a8:	2100      	movs	r1, #0
 80004aa:	e750      	b.n	800034e <__udivmoddi4+0xa6>
 80004ac:	f1c2 0320 	rsb	r3, r2, #32
 80004b0:	fa20 f103 	lsr.w	r1, r0, r3
 80004b4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b8:	fa24 f303 	lsr.w	r3, r4, r3
 80004bc:	4094      	lsls	r4, r2
 80004be:	430c      	orrs	r4, r1
 80004c0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004c4:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c8:	fa1f f78c 	uxth.w	r7, ip
 80004cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d0:	fb08 3110 	mls	r1, r8, r0, r3
 80004d4:	0c23      	lsrs	r3, r4, #16
 80004d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004da:	fb00 f107 	mul.w	r1, r0, r7
 80004de:	4299      	cmp	r1, r3
 80004e0:	d908      	bls.n	80004f4 <__udivmoddi4+0x24c>
 80004e2:	eb1c 0303 	adds.w	r3, ip, r3
 80004e6:	f100 36ff 	add.w	r6, r0, #4294967295
 80004ea:	d22c      	bcs.n	8000546 <__udivmoddi4+0x29e>
 80004ec:	4299      	cmp	r1, r3
 80004ee:	d92a      	bls.n	8000546 <__udivmoddi4+0x29e>
 80004f0:	3802      	subs	r0, #2
 80004f2:	4463      	add	r3, ip
 80004f4:	1a5b      	subs	r3, r3, r1
 80004f6:	b2a4      	uxth	r4, r4
 80004f8:	fbb3 f1f8 	udiv	r1, r3, r8
 80004fc:	fb08 3311 	mls	r3, r8, r1, r3
 8000500:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000504:	fb01 f307 	mul.w	r3, r1, r7
 8000508:	42a3      	cmp	r3, r4
 800050a:	d908      	bls.n	800051e <__udivmoddi4+0x276>
 800050c:	eb1c 0404 	adds.w	r4, ip, r4
 8000510:	f101 36ff 	add.w	r6, r1, #4294967295
 8000514:	d213      	bcs.n	800053e <__udivmoddi4+0x296>
 8000516:	42a3      	cmp	r3, r4
 8000518:	d911      	bls.n	800053e <__udivmoddi4+0x296>
 800051a:	3902      	subs	r1, #2
 800051c:	4464      	add	r4, ip
 800051e:	1ae4      	subs	r4, r4, r3
 8000520:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000524:	e739      	b.n	800039a <__udivmoddi4+0xf2>
 8000526:	4604      	mov	r4, r0
 8000528:	e6f0      	b.n	800030c <__udivmoddi4+0x64>
 800052a:	4608      	mov	r0, r1
 800052c:	e706      	b.n	800033c <__udivmoddi4+0x94>
 800052e:	45c8      	cmp	r8, r9
 8000530:	d2ae      	bcs.n	8000490 <__udivmoddi4+0x1e8>
 8000532:	ebb9 0e02 	subs.w	lr, r9, r2
 8000536:	eb63 0c07 	sbc.w	ip, r3, r7
 800053a:	3801      	subs	r0, #1
 800053c:	e7a8      	b.n	8000490 <__udivmoddi4+0x1e8>
 800053e:	4631      	mov	r1, r6
 8000540:	e7ed      	b.n	800051e <__udivmoddi4+0x276>
 8000542:	4603      	mov	r3, r0
 8000544:	e799      	b.n	800047a <__udivmoddi4+0x1d2>
 8000546:	4630      	mov	r0, r6
 8000548:	e7d4      	b.n	80004f4 <__udivmoddi4+0x24c>
 800054a:	46d6      	mov	lr, sl
 800054c:	e77f      	b.n	800044e <__udivmoddi4+0x1a6>
 800054e:	4463      	add	r3, ip
 8000550:	3802      	subs	r0, #2
 8000552:	e74d      	b.n	80003f0 <__udivmoddi4+0x148>
 8000554:	4606      	mov	r6, r0
 8000556:	4623      	mov	r3, r4
 8000558:	4608      	mov	r0, r1
 800055a:	e70f      	b.n	800037c <__udivmoddi4+0xd4>
 800055c:	3e02      	subs	r6, #2
 800055e:	4463      	add	r3, ip
 8000560:	e730      	b.n	80003c4 <__udivmoddi4+0x11c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <_Z12EventLoopCppv>:

//void onButtonChangedHandler(Joy* instance)
//{
//	//CDC_Transmit_FS(buffer, sizeof(buffer));
//}
void EventLoopCpp() {
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0

	// Initialize BMP280 with default parameters
	//bmp280.bmp280_init_default_params(&bmp280.params);
	bmp280.addr = BMP280_I2C_ADDRESS_0; // 0x76 (SDO low), use BMP280_I2C_ADDRESS_1 (0x77) if SDO high
 800056e:	4b59      	ldr	r3, [pc, #356]	@ (80006d4 <_Z12EventLoopCppv+0x16c>)
 8000570:	2276      	movs	r2, #118	@ 0x76
 8000572:	849a      	strh	r2, [r3, #36]	@ 0x24
	bmp280.i2c = &hi2c1;
 8000574:	4b57      	ldr	r3, [pc, #348]	@ (80006d4 <_Z12EventLoopCppv+0x16c>)
 8000576:	4a58      	ldr	r2, [pc, #352]	@ (80006d8 <_Z12EventLoopCppv+0x170>)
 8000578:	629a      	str	r2, [r3, #40]	@ 0x28

	// Attempt to initialize BMP280
	while (!bmpDevice.bmp280_init()) {
 800057a:	e003      	b.n	8000584 <_Z12EventLoopCppv+0x1c>
	  HAL_Delay(2000);
 800057c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000580:	f001 ff54 	bl	800242c <HAL_Delay>
	while (!bmpDevice.bmp280_init()) {
 8000584:	4855      	ldr	r0, [pc, #340]	@ (80006dc <_Z12EventLoopCppv+0x174>)
 8000586:	f000 ff40 	bl	800140a <_ZN6BMP28011bmp280_initEv>
 800058a:	4603      	mov	r3, r0
 800058c:	f083 0301 	eor.w	r3, r3, #1
 8000590:	b2db      	uxtb	r3, r3
 8000592:	2b00      	cmp	r3, #0
 8000594:	d1f2      	bne.n	800057c <_Z12EventLoopCppv+0x14>
	}

	// Check if BMP280 or BME280 (library supports both)
	bool bme280p = bmp280.id == BME280_CHIP_ID;
 8000596:	4b4f      	ldr	r3, [pc, #316]	@ (80006d4 <_Z12EventLoopCppv+0x16c>)
 8000598:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800059c:	2b60      	cmp	r3, #96	@ 0x60
 800059e:	bf0c      	ite	eq
 80005a0:	2301      	moveq	r3, #1
 80005a2:	2300      	movne	r3, #0
 80005a4:	71fb      	strb	r3, [r7, #7]

	nrfDevice.Init();
 80005a6:	484e      	ldr	r0, [pc, #312]	@ (80006e0 <_Z12EventLoopCppv+0x178>)
 80005a8:	f000 fa66 	bl	8000a78 <_ZN6NRF24L4InitEv>
	nrfDevice.Check();
 80005ac:	484c      	ldr	r0, [pc, #304]	@ (80006e0 <_Z12EventLoopCppv+0x178>)
 80005ae:	f000 fac7 	bl	8000b40 <_ZN6NRF24L5CheckEv>

	pump_reset_time = HAL_GetTick();
 80005b2:	f001 ff2f 	bl	8002414 <HAL_GetTick>
 80005b6:	4603      	mov	r3, r0
 80005b8:	4a4a      	ldr	r2, [pc, #296]	@ (80006e4 <_Z12EventLoopCppv+0x17c>)
 80005ba:	6013      	str	r3, [r2, #0]
#ifdef IS_TX
	uint32_t count = 0;
	NRF24L::TXResult tx_res;
	nrfDevice.InitTX();
#else
	nrfDevice.InitRX(nRF24_payload, payload_length);
 80005bc:	4b4a      	ldr	r3, [pc, #296]	@ (80006e8 <_Z12EventLoopCppv+0x180>)
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	461a      	mov	r2, r3
 80005c2:	494a      	ldr	r1, [pc, #296]	@ (80006ec <_Z12EventLoopCppv+0x184>)
 80005c4:	4846      	ldr	r0, [pc, #280]	@ (80006e0 <_Z12EventLoopCppv+0x178>)
 80005c6:	f000 fca1 	bl	8000f0c <_ZN6NRF24L6InitRXEPhh>
#endif

	HAL_Delay(100);
 80005ca:	2064      	movs	r0, #100	@ 0x64
 80005cc:	f001 ff2e 	bl	800242c <HAL_Delay>
	while (1) {
		if(HAL_GetTick() - last_bmp_read_time > 2000)
 80005d0:	f001 ff20 	bl	8002414 <HAL_GetTick>
 80005d4:	4602      	mov	r2, r0
 80005d6:	4b46      	ldr	r3, [pc, #280]	@ (80006f0 <_Z12EventLoopCppv+0x188>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	1ad3      	subs	r3, r2, r3
 80005dc:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80005e0:	bf8c      	ite	hi
 80005e2:	2301      	movhi	r3, #1
 80005e4:	2300      	movls	r3, #0
 80005e6:	b2db      	uxtb	r3, r3
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d00a      	beq.n	8000602 <_Z12EventLoopCppv+0x9a>
		{
			// Read temperature and pressure
			if (!bmpDevice.bmp280_read_float(&temperature, &pressure, &humidity)) {
 80005ec:	4b41      	ldr	r3, [pc, #260]	@ (80006f4 <_Z12EventLoopCppv+0x18c>)
 80005ee:	4a42      	ldr	r2, [pc, #264]	@ (80006f8 <_Z12EventLoopCppv+0x190>)
 80005f0:	4942      	ldr	r1, [pc, #264]	@ (80006fc <_Z12EventLoopCppv+0x194>)
 80005f2:	483a      	ldr	r0, [pc, #232]	@ (80006dc <_Z12EventLoopCppv+0x174>)
 80005f4:	f001 fbc4 	bl	8001d80 <_ZN6BMP28017bmp280_read_floatEPfS0_S0_>
				// success
			} else {
				// fail to read
			}
			last_bmp_read_time = HAL_GetTick();
 80005f8:	f001 ff0c 	bl	8002414 <HAL_GetTick>
 80005fc:	4603      	mov	r3, r0
 80005fe:	4a3c      	ldr	r2, [pc, #240]	@ (80006f0 <_Z12EventLoopCppv+0x188>)
 8000600:	6013      	str	r3, [r2, #0]
		}

		GPIO_PinState current_button_state = HAL_GPIO_ReadPin(BTN0_GPIO_Port, BTN0_Pin);
 8000602:	2101      	movs	r1, #1
 8000604:	483e      	ldr	r0, [pc, #248]	@ (8000700 <_Z12EventLoopCppv+0x198>)
 8000606:	f002 fc11 	bl	8002e2c <HAL_GPIO_ReadPin>
 800060a:	4603      	mov	r3, r0
 800060c:	71bb      	strb	r3, [r7, #6]
		if (current_button_state != last_button_state)
 800060e:	4b3d      	ldr	r3, [pc, #244]	@ (8000704 <_Z12EventLoopCppv+0x19c>)
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	79ba      	ldrb	r2, [r7, #6]
 8000614:	429a      	cmp	r2, r3
 8000616:	d004      	beq.n	8000622 <_Z12EventLoopCppv+0xba>
		{
			last_debounce_time = HAL_GetTick();
 8000618:	f001 fefc 	bl	8002414 <HAL_GetTick>
 800061c:	4603      	mov	r3, r0
 800061e:	4a3a      	ldr	r2, [pc, #232]	@ (8000708 <_Z12EventLoopCppv+0x1a0>)
 8000620:	6013      	str	r3, [r2, #0]
		}

		if (last_debounce_time != 0 && current_button_state == GPIO_PIN_RESET && (HAL_GetTick() - last_debounce_time) > debounce_delay)
 8000622:	4b39      	ldr	r3, [pc, #228]	@ (8000708 <_Z12EventLoopCppv+0x1a0>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	2b00      	cmp	r3, #0
 8000628:	d00c      	beq.n	8000644 <_Z12EventLoopCppv+0xdc>
 800062a:	79bb      	ldrb	r3, [r7, #6]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d109      	bne.n	8000644 <_Z12EventLoopCppv+0xdc>
 8000630:	f001 fef0 	bl	8002414 <HAL_GetTick>
 8000634:	4602      	mov	r2, r0
 8000636:	4b34      	ldr	r3, [pc, #208]	@ (8000708 <_Z12EventLoopCppv+0x1a0>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	1ad3      	subs	r3, r2, r3
 800063c:	2b32      	cmp	r3, #50	@ 0x32
 800063e:	d901      	bls.n	8000644 <_Z12EventLoopCppv+0xdc>
 8000640:	2301      	movs	r3, #1
 8000642:	e000      	b.n	8000646 <_Z12EventLoopCppv+0xde>
 8000644:	2300      	movs	r3, #0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d00e      	beq.n	8000668 <_Z12EventLoopCppv+0x100>
		{
			pump_running = !pump_running;
 800064a:	4b30      	ldr	r3, [pc, #192]	@ (800070c <_Z12EventLoopCppv+0x1a4>)
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	f083 0301 	eor.w	r3, r3, #1
 8000652:	b2da      	uxtb	r2, r3
 8000654:	4b2d      	ldr	r3, [pc, #180]	@ (800070c <_Z12EventLoopCppv+0x1a4>)
 8000656:	701a      	strb	r2, [r3, #0]
			last_debounce_time = 0;
 8000658:	4b2b      	ldr	r3, [pc, #172]	@ (8000708 <_Z12EventLoopCppv+0x1a0>)
 800065a:	2200      	movs	r2, #0
 800065c:	601a      	str	r2, [r3, #0]
			pump_reset_time = HAL_GetTick();
 800065e:	f001 fed9 	bl	8002414 <HAL_GetTick>
 8000662:	4603      	mov	r3, r0
 8000664:	4a1f      	ldr	r2, [pc, #124]	@ (80006e4 <_Z12EventLoopCppv+0x17c>)
 8000666:	6013      	str	r3, [r2, #0]
		}

		last_button_state = current_button_state;
 8000668:	4a26      	ldr	r2, [pc, #152]	@ (8000704 <_Z12EventLoopCppv+0x19c>)
 800066a:	79bb      	ldrb	r3, [r7, #6]
 800066c:	7013      	strb	r3, [r2, #0]

		if(pump_running)
 800066e:	4b27      	ldr	r3, [pc, #156]	@ (800070c <_Z12EventLoopCppv+0x1a4>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	2b00      	cmp	r3, #0
 8000674:	d028      	beq.n	80006c8 <_Z12EventLoopCppv+0x160>
		{
			pump_time = HAL_GetTick() - pump_reset_time;
 8000676:	f001 fecd 	bl	8002414 <HAL_GetTick>
 800067a:	4602      	mov	r2, r0
 800067c:	4b19      	ldr	r3, [pc, #100]	@ (80006e4 <_Z12EventLoopCppv+0x17c>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	1ad3      	subs	r3, r2, r3
 8000682:	4a23      	ldr	r2, [pc, #140]	@ (8000710 <_Z12EventLoopCppv+0x1a8>)
 8000684:	6013      	str	r3, [r2, #0]
			if(pump_time < pump_on_delay)
 8000686:	4b22      	ldr	r3, [pc, #136]	@ (8000710 <_Z12EventLoopCppv+0x1a8>)
 8000688:	681a      	ldr	r2, [r3, #0]
 800068a:	4b22      	ldr	r3, [pc, #136]	@ (8000714 <_Z12EventLoopCppv+0x1ac>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	429a      	cmp	r2, r3
 8000690:	d205      	bcs.n	800069e <_Z12EventLoopCppv+0x136>
			{
				HAL_GPIO_WritePin(PUMP_GPIO_Port, PUMP_Pin, GPIO_PIN_SET);
 8000692:	2201      	movs	r2, #1
 8000694:	2101      	movs	r1, #1
 8000696:	4820      	ldr	r0, [pc, #128]	@ (8000718 <_Z12EventLoopCppv+0x1b0>)
 8000698:	f002 fbe0 	bl	8002e5c <HAL_GPIO_WritePin>
 800069c:	e798      	b.n	80005d0 <_Z12EventLoopCppv+0x68>
			}
			else if(pump_time < pump_on_delay + pump_off_delay)
 800069e:	4b1d      	ldr	r3, [pc, #116]	@ (8000714 <_Z12EventLoopCppv+0x1ac>)
 80006a0:	681a      	ldr	r2, [r3, #0]
 80006a2:	4b1e      	ldr	r3, [pc, #120]	@ (800071c <_Z12EventLoopCppv+0x1b4>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	441a      	add	r2, r3
 80006a8:	4b19      	ldr	r3, [pc, #100]	@ (8000710 <_Z12EventLoopCppv+0x1a8>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	429a      	cmp	r2, r3
 80006ae:	d905      	bls.n	80006bc <_Z12EventLoopCppv+0x154>
			{
				HAL_GPIO_WritePin(PUMP_GPIO_Port, PUMP_Pin, GPIO_PIN_RESET);
 80006b0:	2200      	movs	r2, #0
 80006b2:	2101      	movs	r1, #1
 80006b4:	4818      	ldr	r0, [pc, #96]	@ (8000718 <_Z12EventLoopCppv+0x1b0>)
 80006b6:	f002 fbd1 	bl	8002e5c <HAL_GPIO_WritePin>
 80006ba:	e789      	b.n	80005d0 <_Z12EventLoopCppv+0x68>
			}
			else
			{
				pump_reset_time = HAL_GetTick();
 80006bc:	f001 feaa 	bl	8002414 <HAL_GetTick>
 80006c0:	4603      	mov	r3, r0
 80006c2:	4a08      	ldr	r2, [pc, #32]	@ (80006e4 <_Z12EventLoopCppv+0x17c>)
 80006c4:	6013      	str	r3, [r2, #0]
 80006c6:	e783      	b.n	80005d0 <_Z12EventLoopCppv+0x68>
			}
		}
		else
		{
			HAL_GPIO_WritePin(PUMP_GPIO_Port, PUMP_Pin, GPIO_PIN_RESET);
 80006c8:	2200      	movs	r2, #0
 80006ca:	2101      	movs	r1, #1
 80006cc:	4812      	ldr	r0, [pc, #72]	@ (8000718 <_Z12EventLoopCppv+0x1b0>)
 80006ce:	f002 fbc5 	bl	8002e5c <HAL_GPIO_WritePin>
	HAL_Delay(1);
#else // RX

#endif
	//HAL_Delay(50);
	}
 80006d2:	e77d      	b.n	80005d0 <_Z12EventLoopCppv+0x68>
 80006d4:	20000088 	.word	0x20000088
 80006d8:	2000016c 	.word	0x2000016c
 80006dc:	200000bc 	.word	0x200000bc
 80006e0:	200000d0 	.word	0x200000d0
 80006e4:	20000118 	.word	0x20000118
 80006e8:	20000000 	.word	0x20000000
 80006ec:	200000f4 	.word	0x200000f4
 80006f0:	200000c0 	.word	0x200000c0
 80006f4:	200000cc 	.word	0x200000cc
 80006f8:	200000c4 	.word	0x200000c4
 80006fc:	200000c8 	.word	0x200000c8
 8000700:	40020000 	.word	0x40020000
 8000704:	2000000c 	.word	0x2000000c
 8000708:	20000120 	.word	0x20000120
 800070c:	20000114 	.word	0x20000114
 8000710:	2000011c 	.word	0x2000011c
 8000714:	20000004 	.word	0x20000004
 8000718:	40020400 	.word	0x40020400
 800071c:	20000008 	.word	0x20000008

08000720 <EventLoopC>:
}

// Define all C function calls from main.c below
extern "C" {
void EventLoopC() {
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
	EventLoopCpp();
 8000724:	f7ff ff20 	bl	8000568 <_Z12EventLoopCppv>
}
 8000728:	bf00      	nop
 800072a:	bd80      	pop	{r7, pc}

0800072c <_Z41__static_initialization_and_destruction_0ii>:
}
 800072c:	b580      	push	{r7, lr}
 800072e:	b084      	sub	sp, #16
 8000730:	af02      	add	r7, sp, #8
 8000732:	6078      	str	r0, [r7, #4]
 8000734:	6039      	str	r1, [r7, #0]
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	2b01      	cmp	r3, #1
 800073a:	d114      	bne.n	8000766 <_Z41__static_initialization_and_destruction_0ii+0x3a>
 800073c:	683b      	ldr	r3, [r7, #0]
 800073e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000742:	4293      	cmp	r3, r2
 8000744:	d10f      	bne.n	8000766 <_Z41__static_initialization_and_destruction_0ii+0x3a>
BMP280 bmpDevice = BMP280(&bmp280);
 8000746:	4911      	ldr	r1, [pc, #68]	@ (800078c <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8000748:	4811      	ldr	r0, [pc, #68]	@ (8000790 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 800074a:	f000 fc8b 	bl	8001064 <_ZN6BMP280C1EPNS_20BMP280_HandleTypedefE>
NRF24L nrfDevice = NRF24L(&hspi2, NRF_CE_GPIO_Port, NRF_CE_Pin, NRF_CSN_GPIO_Port, NRF_CSN_Pin);
 800074e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000752:	9301      	str	r3, [sp, #4]
 8000754:	4b0f      	ldr	r3, [pc, #60]	@ (8000794 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8000756:	9300      	str	r3, [sp, #0]
 8000758:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800075c:	4a0d      	ldr	r2, [pc, #52]	@ (8000794 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 800075e:	490e      	ldr	r1, [pc, #56]	@ (8000798 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8000760:	480e      	ldr	r0, [pc, #56]	@ (800079c <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8000762:	f000 f82d 	bl	80007c0 <_ZN6NRF24LC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_t>
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d10a      	bne.n	8000782 <_Z41__static_initialization_and_destruction_0ii+0x56>
 800076c:	683b      	ldr	r3, [r7, #0]
 800076e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000772:	4293      	cmp	r3, r2
 8000774:	d105      	bne.n	8000782 <_Z41__static_initialization_and_destruction_0ii+0x56>
 8000776:	4809      	ldr	r0, [pc, #36]	@ (800079c <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8000778:	f000 f85a 	bl	8000830 <_ZN6NRF24LD1Ev>
BMP280 bmpDevice = BMP280(&bmp280);
 800077c:	4804      	ldr	r0, [pc, #16]	@ (8000790 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 800077e:	f000 fc81 	bl	8001084 <_ZN6BMP280D1Ev>
}
 8000782:	bf00      	nop
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	20000088 	.word	0x20000088
 8000790:	200000bc 	.word	0x200000bc
 8000794:	40020400 	.word	0x40020400
 8000798:	200001c0 	.word	0x200001c0
 800079c:	200000d0 	.word	0x200000d0

080007a0 <_GLOBAL__sub_I_bmp280>:
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
 80007a4:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80007a8:	2001      	movs	r0, #1
 80007aa:	f7ff ffbf 	bl	800072c <_Z41__static_initialization_and_destruction_0ii>
 80007ae:	bd80      	pop	{r7, pc}

080007b0 <_GLOBAL__sub_D_bmp280>:
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
 80007b4:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80007b8:	2000      	movs	r0, #0
 80007ba:	f7ff ffb7 	bl	800072c <_Z41__static_initialization_and_destruction_0ii>
 80007be:	bd80      	pop	{r7, pc}

080007c0 <_ZN6NRF24LC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_t>:

// Functions to manage the nRF24L01+ transceiver

#define nRF24_WAIT_TIMEOUT         (uint32_t)100;//0x000FFFFF

NRF24L::NRF24L(SPI_HandleTypeDef *spi, GPIO_TypeDef* CEPort, uint16_t CEPin, GPIO_TypeDef* CSNPort, uint16_t CSNPin):
 80007c0:	b480      	push	{r7}
 80007c2:	b085      	sub	sp, #20
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	60f8      	str	r0, [r7, #12]
 80007c8:	60b9      	str	r1, [r7, #8]
 80007ca:	607a      	str	r2, [r7, #4]
 80007cc:	807b      	strh	r3, [r7, #2]
				_spi(spi),
				_CEPort(CEPort),
				_CEPin(CEPin),
				_CSNPort(CSNPort),
				_CSNPin(CSNPin)
 80007ce:	4a15      	ldr	r2, [pc, #84]	@ (8000824 <_ZN6NRF24LC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_t+0x64>)
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	601a      	str	r2, [r3, #0]
				_spi(spi),
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	68ba      	ldr	r2, [r7, #8]
 80007d8:	605a      	str	r2, [r3, #4]
				_CEPort(CEPort),
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	687a      	ldr	r2, [r7, #4]
 80007de:	609a      	str	r2, [r3, #8]
				_CEPin(CEPin),
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	887a      	ldrh	r2, [r7, #2]
 80007e4:	819a      	strh	r2, [r3, #12]
				_CSNPort(CSNPort),
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	69ba      	ldr	r2, [r7, #24]
 80007ea:	611a      	str	r2, [r3, #16]
				_CSNPin(CSNPin)
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	8bba      	ldrh	r2, [r7, #28]
 80007f0:	829a      	strh	r2, [r3, #20]
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	4a0c      	ldr	r2, [pc, #48]	@ (8000828 <_ZN6NRF24LC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_t+0x68>)
 80007f6:	3316      	adds	r3, #22
 80007f8:	6810      	ldr	r0, [r2, #0]
 80007fa:	6018      	str	r0, [r3, #0]
 80007fc:	8892      	ldrh	r2, [r2, #4]
 80007fe:	809a      	strh	r2, [r3, #4]
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	4a0a      	ldr	r2, [pc, #40]	@ (800082c <_ZN6NRF24LC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_t+0x6c>)
 8000804:	331c      	adds	r3, #28
 8000806:	e892 0003 	ldmia.w	r2, {r0, r1}
 800080a:	6018      	str	r0, [r3, #0]
 800080c:	3304      	adds	r3, #4
 800080e:	8019      	strh	r1, [r3, #0]
 8000810:	3302      	adds	r3, #2
 8000812:	0c0a      	lsrs	r2, r1, #16
 8000814:	701a      	strb	r2, [r3, #0]
{}
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	4618      	mov	r0, r3
 800081a:	3714      	adds	r7, #20
 800081c:	46bd      	mov	sp, r7
 800081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000822:	4770      	bx	lr
 8000824:	08004ed8 	.word	0x08004ed8
 8000828:	08004eb4 	.word	0x08004eb4
 800082c:	08004ebc 	.word	0x08004ebc

08000830 <_ZN6NRF24LD1Ev>:

NRF24L::~NRF24L(){}
 8000830:	b480      	push	{r7}
 8000832:	b083      	sub	sp, #12
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
 8000838:	4a04      	ldr	r2, [pc, #16]	@ (800084c <_ZN6NRF24LD1Ev+0x1c>)
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	4618      	mov	r0, r3
 8000842:	370c      	adds	r7, #12
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr
 800084c:	08004ed8 	.word	0x08004ed8

08000850 <_ZN6NRF24LD0Ev>:
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
 8000858:	6878      	ldr	r0, [r7, #4]
 800085a:	f7ff ffe9 	bl	8000830 <_ZN6NRF24LD1Ev>
 800085e:	2124      	movs	r1, #36	@ 0x24
 8000860:	6878      	ldr	r0, [r7, #4]
 8000862:	f004 fa8b 	bl	8004d7c <_ZdlPvj>
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	4618      	mov	r0, r3
 800086a:	3708      	adds	r7, #8
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}

08000870 <_ZN6NRF24L10nRF24_CE_HEv>:

void NRF24L::nRF24_CE_L() {
    HAL_GPIO_WritePin(_CEPort, _CEPin, GPIO_PIN_RESET);
}

void NRF24L::nRF24_CE_H() {
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(_CEPort, _CEPin, GPIO_PIN_SET);
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	6898      	ldr	r0, [r3, #8]
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	899b      	ldrh	r3, [r3, #12]
 8000880:	2201      	movs	r2, #1
 8000882:	4619      	mov	r1, r3
 8000884:	f002 faea 	bl	8002e5c <HAL_GPIO_WritePin>
}
 8000888:	bf00      	nop
 800088a:	3708      	adds	r7, #8
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}

08000890 <_ZN6NRF24L11nRF24_CSN_LEv>:

void NRF24L::nRF24_CSN_L() {
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(_CSNPort, _CSNPin, GPIO_PIN_RESET);
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	6918      	ldr	r0, [r3, #16]
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	8a9b      	ldrh	r3, [r3, #20]
 80008a0:	2200      	movs	r2, #0
 80008a2:	4619      	mov	r1, r3
 80008a4:	f002 fada 	bl	8002e5c <HAL_GPIO_WritePin>
}
 80008a8:	bf00      	nop
 80008aa:	3708      	adds	r7, #8
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}

080008b0 <_ZN6NRF24L11nRF24_CSN_HEv>:

void NRF24L::nRF24_CSN_H() {
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(_CSNPort, _CSNPin, GPIO_PIN_SET);
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	6918      	ldr	r0, [r3, #16]
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	8a9b      	ldrh	r3, [r3, #20]
 80008c0:	2201      	movs	r2, #1
 80008c2:	4619      	mov	r1, r3
 80008c4:	f002 faca 	bl	8002e5c <HAL_GPIO_WritePin>
}
 80008c8:	bf00      	nop
 80008ca:	3708      	adds	r7, #8
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}

080008d0 <_ZN6NRF24L11nRF24_LL_RWEh>:

uint8_t NRF24L::nRF24_LL_RW(uint8_t data) {
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b086      	sub	sp, #24
 80008d4:	af02      	add	r7, sp, #8
 80008d6:	6078      	str	r0, [r7, #4]
 80008d8:	460b      	mov	r3, r1
 80008da:	70fb      	strb	r3, [r7, #3]
    // Wait until TX buffer is empty
    uint8_t result;
    if(HAL_SPI_TransmitReceive(_spi, &data, &result, 1, 2000)!=HAL_OK) {
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	6858      	ldr	r0, [r3, #4]
 80008e0:	f107 020f 	add.w	r2, r7, #15
 80008e4:	1cf9      	adds	r1, r7, #3
 80008e6:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80008ea:	9300      	str	r3, [sp, #0]
 80008ec:	2301      	movs	r3, #1
 80008ee:	f003 ffc0 	bl	8004872 <HAL_SPI_TransmitReceive>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	bf14      	ite	ne
 80008f8:	2301      	movne	r3, #1
 80008fa:	2300      	moveq	r3, #0
 80008fc:	b2db      	uxtb	r3, r3
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <_ZN6NRF24L11nRF24_LL_RWEh+0x36>
        Error_Handler();
 8000902:	f001 fc09 	bl	8002118 <Error_Handler>
    };
    return result;
 8000906:	7bfb      	ldrb	r3, [r7, #15]
}
 8000908:	4618      	mov	r0, r3
 800090a:	3710      	adds	r7, #16
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}

08000910 <_ZN6NRF24L7ReadRegEh>:

// Read a register
// input:
//   reg - number of register to read
// return: value of register
uint8_t NRF24L::ReadReg(uint8_t reg) {
 8000910:	b580      	push	{r7, lr}
 8000912:	b084      	sub	sp, #16
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
 8000918:	460b      	mov	r3, r1
 800091a:	70fb      	strb	r3, [r7, #3]
	uint8_t value;

	nRF24_CSN_L();
 800091c:	6878      	ldr	r0, [r7, #4]
 800091e:	f7ff ffb7 	bl	8000890 <_ZN6NRF24L11nRF24_CSN_LEv>
	nRF24_LL_RW(reg & nRF24_MASK_REG_MAP);
 8000922:	78fb      	ldrb	r3, [r7, #3]
 8000924:	f003 031f 	and.w	r3, r3, #31
 8000928:	b2db      	uxtb	r3, r3
 800092a:	4619      	mov	r1, r3
 800092c:	6878      	ldr	r0, [r7, #4]
 800092e:	f7ff ffcf 	bl	80008d0 <_ZN6NRF24L11nRF24_LL_RWEh>
	value = nRF24_LL_RW(nRF24_CMD_NOP);
 8000932:	21ff      	movs	r1, #255	@ 0xff
 8000934:	6878      	ldr	r0, [r7, #4]
 8000936:	f7ff ffcb 	bl	80008d0 <_ZN6NRF24L11nRF24_LL_RWEh>
 800093a:	4603      	mov	r3, r0
 800093c:	73fb      	strb	r3, [r7, #15]
	nRF24_CSN_H();
 800093e:	6878      	ldr	r0, [r7, #4]
 8000940:	f7ff ffb6 	bl	80008b0 <_ZN6NRF24L11nRF24_CSN_HEv>

	return value;
 8000944:	7bfb      	ldrb	r3, [r7, #15]
}
 8000946:	4618      	mov	r0, r3
 8000948:	3710      	adds	r7, #16
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}

0800094e <_ZN6NRF24L8WriteRegEhh>:

// Write a new value to register
// input:
//   reg - number of register to write
//   value - value to write
void NRF24L::WriteReg(uint8_t reg, uint8_t value) {
 800094e:	b580      	push	{r7, lr}
 8000950:	b082      	sub	sp, #8
 8000952:	af00      	add	r7, sp, #0
 8000954:	6078      	str	r0, [r7, #4]
 8000956:	460b      	mov	r3, r1
 8000958:	70fb      	strb	r3, [r7, #3]
 800095a:	4613      	mov	r3, r2
 800095c:	70bb      	strb	r3, [r7, #2]
	nRF24_CSN_L();
 800095e:	6878      	ldr	r0, [r7, #4]
 8000960:	f7ff ff96 	bl	8000890 <_ZN6NRF24L11nRF24_CSN_LEv>
	if (reg < nRF24_CMD_W_REGISTER) {
 8000964:	78fb      	ldrb	r3, [r7, #3]
 8000966:	2b1f      	cmp	r3, #31
 8000968:	d810      	bhi.n	800098c <_ZN6NRF24L8WriteRegEhh+0x3e>
		// This is a register access
		nRF24_LL_RW(nRF24_CMD_W_REGISTER | (reg & nRF24_MASK_REG_MAP ));
 800096a:	78fb      	ldrb	r3, [r7, #3]
 800096c:	f003 031f 	and.w	r3, r3, #31
 8000970:	b2db      	uxtb	r3, r3
 8000972:	f043 0320 	orr.w	r3, r3, #32
 8000976:	b2db      	uxtb	r3, r3
 8000978:	4619      	mov	r1, r3
 800097a:	6878      	ldr	r0, [r7, #4]
 800097c:	f7ff ffa8 	bl	80008d0 <_ZN6NRF24L11nRF24_LL_RWEh>
		nRF24_LL_RW(value);
 8000980:	78bb      	ldrb	r3, [r7, #2]
 8000982:	4619      	mov	r1, r3
 8000984:	6878      	ldr	r0, [r7, #4]
 8000986:	f7ff ffa3 	bl	80008d0 <_ZN6NRF24L11nRF24_LL_RWEh>
 800098a:	e015      	b.n	80009b8 <_ZN6NRF24L8WriteRegEhh+0x6a>
	} else {
		// This is a single byte command or future command/register
		nRF24_LL_RW(reg);
 800098c:	78fb      	ldrb	r3, [r7, #3]
 800098e:	4619      	mov	r1, r3
 8000990:	6878      	ldr	r0, [r7, #4]
 8000992:	f7ff ff9d 	bl	80008d0 <_ZN6NRF24L11nRF24_LL_RWEh>
		if ((reg != nRF24_CMD_FLUSH_TX ) && (reg != nRF24_CMD_FLUSH_RX )
 8000996:	78fb      	ldrb	r3, [r7, #3]
 8000998:	2be1      	cmp	r3, #225	@ 0xe1
 800099a:	d00d      	beq.n	80009b8 <_ZN6NRF24L8WriteRegEhh+0x6a>
 800099c:	78fb      	ldrb	r3, [r7, #3]
 800099e:	2be2      	cmp	r3, #226	@ 0xe2
 80009a0:	d00a      	beq.n	80009b8 <_ZN6NRF24L8WriteRegEhh+0x6a>
				&& (reg != nRF24_CMD_REUSE_TX_PL ) && (reg != nRF24_CMD_NOP )) {
 80009a2:	78fb      	ldrb	r3, [r7, #3]
 80009a4:	2be3      	cmp	r3, #227	@ 0xe3
 80009a6:	d007      	beq.n	80009b8 <_ZN6NRF24L8WriteRegEhh+0x6a>
 80009a8:	78fb      	ldrb	r3, [r7, #3]
 80009aa:	2bff      	cmp	r3, #255	@ 0xff
 80009ac:	d004      	beq.n	80009b8 <_ZN6NRF24L8WriteRegEhh+0x6a>
			// Send register value
			nRF24_LL_RW(value);
 80009ae:	78bb      	ldrb	r3, [r7, #2]
 80009b0:	4619      	mov	r1, r3
 80009b2:	6878      	ldr	r0, [r7, #4]
 80009b4:	f7ff ff8c 	bl	80008d0 <_ZN6NRF24L11nRF24_LL_RWEh>
		}
	}
	nRF24_CSN_H();
 80009b8:	6878      	ldr	r0, [r7, #4]
 80009ba:	f7ff ff79 	bl	80008b0 <_ZN6NRF24L11nRF24_CSN_HEv>
}
 80009be:	bf00      	nop
 80009c0:	3708      	adds	r7, #8
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}

080009c6 <_ZN6NRF24L9ReadMBRegEhPhh>:
// Read a multi-byte register
// input:
//   reg - number of register to read
//   pBuf - pointer to the buffer for register data
//   count - number of bytes to read
void NRF24L::ReadMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count) {
 80009c6:	b590      	push	{r4, r7, lr}
 80009c8:	b085      	sub	sp, #20
 80009ca:	af00      	add	r7, sp, #0
 80009cc:	60f8      	str	r0, [r7, #12]
 80009ce:	607a      	str	r2, [r7, #4]
 80009d0:	461a      	mov	r2, r3
 80009d2:	460b      	mov	r3, r1
 80009d4:	72fb      	strb	r3, [r7, #11]
 80009d6:	4613      	mov	r3, r2
 80009d8:	72bb      	strb	r3, [r7, #10]
	nRF24_CSN_L();
 80009da:	68f8      	ldr	r0, [r7, #12]
 80009dc:	f7ff ff58 	bl	8000890 <_ZN6NRF24L11nRF24_CSN_LEv>
	nRF24_LL_RW(reg);
 80009e0:	7afb      	ldrb	r3, [r7, #11]
 80009e2:	4619      	mov	r1, r3
 80009e4:	68f8      	ldr	r0, [r7, #12]
 80009e6:	f7ff ff73 	bl	80008d0 <_ZN6NRF24L11nRF24_LL_RWEh>
	while (count--) {
 80009ea:	e008      	b.n	80009fe <_ZN6NRF24L9ReadMBRegEhPhh+0x38>
		*pBuf++ = nRF24_LL_RW(nRF24_CMD_NOP);
 80009ec:	687c      	ldr	r4, [r7, #4]
 80009ee:	1c63      	adds	r3, r4, #1
 80009f0:	607b      	str	r3, [r7, #4]
 80009f2:	21ff      	movs	r1, #255	@ 0xff
 80009f4:	68f8      	ldr	r0, [r7, #12]
 80009f6:	f7ff ff6b 	bl	80008d0 <_ZN6NRF24L11nRF24_LL_RWEh>
 80009fa:	4603      	mov	r3, r0
 80009fc:	7023      	strb	r3, [r4, #0]
	while (count--) {
 80009fe:	7abb      	ldrb	r3, [r7, #10]
 8000a00:	1e5a      	subs	r2, r3, #1
 8000a02:	72ba      	strb	r2, [r7, #10]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	bf14      	ite	ne
 8000a08:	2301      	movne	r3, #1
 8000a0a:	2300      	moveq	r3, #0
 8000a0c:	b2db      	uxtb	r3, r3
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d1ec      	bne.n	80009ec <_ZN6NRF24L9ReadMBRegEhPhh+0x26>
	}
	nRF24_CSN_H();
 8000a12:	68f8      	ldr	r0, [r7, #12]
 8000a14:	f7ff ff4c 	bl	80008b0 <_ZN6NRF24L11nRF24_CSN_HEv>
}
 8000a18:	bf00      	nop
 8000a1a:	3714      	adds	r7, #20
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd90      	pop	{r4, r7, pc}

08000a20 <_ZN6NRF24L10WriteMBRegEhPhh>:
// Write a multi-byte register
// input:
//   reg - number of register to write
//   pBuf - pointer to the buffer with data to write
//   count - number of bytes to write
void NRF24L::WriteMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count) {
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b084      	sub	sp, #16
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	60f8      	str	r0, [r7, #12]
 8000a28:	607a      	str	r2, [r7, #4]
 8000a2a:	461a      	mov	r2, r3
 8000a2c:	460b      	mov	r3, r1
 8000a2e:	72fb      	strb	r3, [r7, #11]
 8000a30:	4613      	mov	r3, r2
 8000a32:	72bb      	strb	r3, [r7, #10]
	nRF24_CSN_L();
 8000a34:	68f8      	ldr	r0, [r7, #12]
 8000a36:	f7ff ff2b 	bl	8000890 <_ZN6NRF24L11nRF24_CSN_LEv>
	nRF24_LL_RW(reg);
 8000a3a:	7afb      	ldrb	r3, [r7, #11]
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	68f8      	ldr	r0, [r7, #12]
 8000a40:	f7ff ff46 	bl	80008d0 <_ZN6NRF24L11nRF24_LL_RWEh>
	while (count--) {
 8000a44:	e007      	b.n	8000a56 <_ZN6NRF24L10WriteMBRegEhPhh+0x36>
		nRF24_LL_RW(*pBuf++);
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	1c5a      	adds	r2, r3, #1
 8000a4a:	607a      	str	r2, [r7, #4]
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	4619      	mov	r1, r3
 8000a50:	68f8      	ldr	r0, [r7, #12]
 8000a52:	f7ff ff3d 	bl	80008d0 <_ZN6NRF24L11nRF24_LL_RWEh>
	while (count--) {
 8000a56:	7abb      	ldrb	r3, [r7, #10]
 8000a58:	1e5a      	subs	r2, r3, #1
 8000a5a:	72ba      	strb	r2, [r7, #10]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	bf14      	ite	ne
 8000a60:	2301      	movne	r3, #1
 8000a62:	2300      	moveq	r3, #0
 8000a64:	b2db      	uxtb	r3, r3
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d1ed      	bne.n	8000a46 <_ZN6NRF24L10WriteMBRegEhPhh+0x26>
	}
	nRF24_CSN_H();
 8000a6a:	68f8      	ldr	r0, [r7, #12]
 8000a6c:	f7ff ff20 	bl	80008b0 <_ZN6NRF24L11nRF24_CSN_HEv>
}
 8000a70:	bf00      	nop
 8000a72:	3710      	adds	r7, #16
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}

08000a78 <_ZN6NRF24L4InitEv>:

// Set transceiver to it's initial state
// note: RX/TX pipe addresses remains untouched
void NRF24L::Init(void) {
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
	// Write to registers their initial values
	WriteReg(nRF24_REG_CONFIG, 0x08);
 8000a80:	2208      	movs	r2, #8
 8000a82:	2100      	movs	r1, #0
 8000a84:	6878      	ldr	r0, [r7, #4]
 8000a86:	f7ff ff62 	bl	800094e <_ZN6NRF24L8WriteRegEhh>
	WriteReg(nRF24_REG_EN_AA, 0x3F);
 8000a8a:	223f      	movs	r2, #63	@ 0x3f
 8000a8c:	2101      	movs	r1, #1
 8000a8e:	6878      	ldr	r0, [r7, #4]
 8000a90:	f7ff ff5d 	bl	800094e <_ZN6NRF24L8WriteRegEhh>
	WriteReg(nRF24_REG_EN_RXADDR, 0x03);
 8000a94:	2203      	movs	r2, #3
 8000a96:	2102      	movs	r1, #2
 8000a98:	6878      	ldr	r0, [r7, #4]
 8000a9a:	f7ff ff58 	bl	800094e <_ZN6NRF24L8WriteRegEhh>
	WriteReg(nRF24_REG_SETUP_AW, 0x03);
 8000a9e:	2203      	movs	r2, #3
 8000aa0:	2103      	movs	r1, #3
 8000aa2:	6878      	ldr	r0, [r7, #4]
 8000aa4:	f7ff ff53 	bl	800094e <_ZN6NRF24L8WriteRegEhh>
	WriteReg(nRF24_REG_SETUP_RETR, 0x03);
 8000aa8:	2203      	movs	r2, #3
 8000aaa:	2104      	movs	r1, #4
 8000aac:	6878      	ldr	r0, [r7, #4]
 8000aae:	f7ff ff4e 	bl	800094e <_ZN6NRF24L8WriteRegEhh>
	WriteReg(nRF24_REG_RF_CH, 0x02);
 8000ab2:	2202      	movs	r2, #2
 8000ab4:	2105      	movs	r1, #5
 8000ab6:	6878      	ldr	r0, [r7, #4]
 8000ab8:	f7ff ff49 	bl	800094e <_ZN6NRF24L8WriteRegEhh>
	WriteReg(nRF24_REG_RF_SETUP, 0x0E);
 8000abc:	220e      	movs	r2, #14
 8000abe:	2106      	movs	r1, #6
 8000ac0:	6878      	ldr	r0, [r7, #4]
 8000ac2:	f7ff ff44 	bl	800094e <_ZN6NRF24L8WriteRegEhh>
	WriteReg(nRF24_REG_STATUS, 0x00);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	2107      	movs	r1, #7
 8000aca:	6878      	ldr	r0, [r7, #4]
 8000acc:	f7ff ff3f 	bl	800094e <_ZN6NRF24L8WriteRegEhh>
	WriteReg(nRF24_REG_RX_PW_P0, 0x00);
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	2111      	movs	r1, #17
 8000ad4:	6878      	ldr	r0, [r7, #4]
 8000ad6:	f7ff ff3a 	bl	800094e <_ZN6NRF24L8WriteRegEhh>
	WriteReg(nRF24_REG_RX_PW_P1, 0x00);
 8000ada:	2200      	movs	r2, #0
 8000adc:	2112      	movs	r1, #18
 8000ade:	6878      	ldr	r0, [r7, #4]
 8000ae0:	f7ff ff35 	bl	800094e <_ZN6NRF24L8WriteRegEhh>
	WriteReg(nRF24_REG_RX_PW_P2, 0x00);
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	2113      	movs	r1, #19
 8000ae8:	6878      	ldr	r0, [r7, #4]
 8000aea:	f7ff ff30 	bl	800094e <_ZN6NRF24L8WriteRegEhh>
	WriteReg(nRF24_REG_RX_PW_P3, 0x00);
 8000aee:	2200      	movs	r2, #0
 8000af0:	2114      	movs	r1, #20
 8000af2:	6878      	ldr	r0, [r7, #4]
 8000af4:	f7ff ff2b 	bl	800094e <_ZN6NRF24L8WriteRegEhh>
	WriteReg(nRF24_REG_RX_PW_P4, 0x00);
 8000af8:	2200      	movs	r2, #0
 8000afa:	2115      	movs	r1, #21
 8000afc:	6878      	ldr	r0, [r7, #4]
 8000afe:	f7ff ff26 	bl	800094e <_ZN6NRF24L8WriteRegEhh>
	WriteReg(nRF24_REG_RX_PW_P5, 0x00);
 8000b02:	2200      	movs	r2, #0
 8000b04:	2116      	movs	r1, #22
 8000b06:	6878      	ldr	r0, [r7, #4]
 8000b08:	f7ff ff21 	bl	800094e <_ZN6NRF24L8WriteRegEhh>
	WriteReg(nRF24_REG_DYNPD, 0x00);
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	211c      	movs	r1, #28
 8000b10:	6878      	ldr	r0, [r7, #4]
 8000b12:	f7ff ff1c 	bl	800094e <_ZN6NRF24L8WriteRegEhh>
	WriteReg(nRF24_REG_FEATURE, 0x00);
 8000b16:	2200      	movs	r2, #0
 8000b18:	211d      	movs	r1, #29
 8000b1a:	6878      	ldr	r0, [r7, #4]
 8000b1c:	f7ff ff17 	bl	800094e <_ZN6NRF24L8WriteRegEhh>

	// Clear the FIFO's
	FlushRX();
 8000b20:	6878      	ldr	r0, [r7, #4]
 8000b22:	f000 f9cd 	bl	8000ec0 <_ZN6NRF24L7FlushRXEv>
	FlushTX();
 8000b26:	6878      	ldr	r0, [r7, #4]
 8000b28:	f000 f9bd 	bl	8000ea6 <_ZN6NRF24L7FlushTXEv>

	// Clear any pending interrupt flags
	ClearIRQFlags();
 8000b2c:	6878      	ldr	r0, [r7, #4]
 8000b2e:	f000 f9d4 	bl	8000eda <_ZN6NRF24L13ClearIRQFlagsEv>

	// Deassert CSN pin (chip release)
	nRF24_CSN_H();
 8000b32:	6878      	ldr	r0, [r7, #4]
 8000b34:	f7ff febc 	bl	80008b0 <_ZN6NRF24L11nRF24_CSN_HEv>
}
 8000b38:	bf00      	nop
 8000b3a:	3708      	adds	r7, #8
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}

08000b40 <_ZN6NRF24L5CheckEv>:

// Check if the nRF24L01 present
// return:
//   1 - nRF24L01 is online and responding
//   0 - received sequence differs from original
uint8_t NRF24L::Check(void) {
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b086      	sub	sp, #24
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
	uint8_t rxbuf[5];
	uint8_t i;
	uint8_t *ptr = (uint8_t*) nRF24_TEST_ADDR;
 8000b48:	4b17      	ldr	r3, [pc, #92]	@ (8000ba8 <_ZN6NRF24L5CheckEv+0x68>)
 8000b4a:	613b      	str	r3, [r7, #16]

	// Write test TX address and read TX_ADDR register
	WriteMBReg(nRF24_CMD_W_REGISTER | nRF24_REG_TX_ADDR, ptr, 5);
 8000b4c:	2305      	movs	r3, #5
 8000b4e:	693a      	ldr	r2, [r7, #16]
 8000b50:	2130      	movs	r1, #48	@ 0x30
 8000b52:	6878      	ldr	r0, [r7, #4]
 8000b54:	f7ff ff64 	bl	8000a20 <_ZN6NRF24L10WriteMBRegEhPhh>
	ReadMBReg(nRF24_CMD_R_REGISTER | nRF24_REG_TX_ADDR, rxbuf, 5);
 8000b58:	f107 0208 	add.w	r2, r7, #8
 8000b5c:	2305      	movs	r3, #5
 8000b5e:	2110      	movs	r1, #16
 8000b60:	6878      	ldr	r0, [r7, #4]
 8000b62:	f7ff ff30 	bl	80009c6 <_ZN6NRF24L9ReadMBRegEhPhh>

	// Compare buffers, return error on first mismatch
	for (i = 0; i < 5; i++) {
 8000b66:	2300      	movs	r3, #0
 8000b68:	75fb      	strb	r3, [r7, #23]
 8000b6a:	e014      	b.n	8000b96 <_ZN6NRF24L5CheckEv+0x56>
		if (rxbuf[i] != *ptr++)
 8000b6c:	7dfb      	ldrb	r3, [r7, #23]
 8000b6e:	3318      	adds	r3, #24
 8000b70:	443b      	add	r3, r7
 8000b72:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8000b76:	693b      	ldr	r3, [r7, #16]
 8000b78:	1c59      	adds	r1, r3, #1
 8000b7a:	6139      	str	r1, [r7, #16]
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	429a      	cmp	r2, r3
 8000b80:	bf14      	ite	ne
 8000b82:	2301      	movne	r3, #1
 8000b84:	2300      	moveq	r3, #0
 8000b86:	b2db      	uxtb	r3, r3
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <_ZN6NRF24L5CheckEv+0x50>
			return 0;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	e006      	b.n	8000b9e <_ZN6NRF24L5CheckEv+0x5e>
	for (i = 0; i < 5; i++) {
 8000b90:	7dfb      	ldrb	r3, [r7, #23]
 8000b92:	3301      	adds	r3, #1
 8000b94:	75fb      	strb	r3, [r7, #23]
 8000b96:	7dfb      	ldrb	r3, [r7, #23]
 8000b98:	2b04      	cmp	r3, #4
 8000b9a:	d9e7      	bls.n	8000b6c <_ZN6NRF24L5CheckEv+0x2c>
	}

	return 1;
 8000b9c:	2301      	movs	r3, #1
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3718      	adds	r7, #24
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	08004ec4 	.word	0x08004ec4

08000bac <_ZN6NRF24L12SetPowerModeEh>:

// Control transceiver power mode
// input:
//   mode - new state of power mode, one of nRF24_PWR_xx values
void NRF24L::SetPowerMode(uint8_t mode) {
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b084      	sub	sp, #16
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
 8000bb4:	460b      	mov	r3, r1
 8000bb6:	70fb      	strb	r3, [r7, #3]
	uint8_t reg;

	reg = ReadReg(nRF24_REG_CONFIG);
 8000bb8:	2100      	movs	r1, #0
 8000bba:	6878      	ldr	r0, [r7, #4]
 8000bbc:	f7ff fea8 	bl	8000910 <_ZN6NRF24L7ReadRegEh>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	73fb      	strb	r3, [r7, #15]
	if (mode == nRF24_PWR_UP) {
 8000bc4:	78fb      	ldrb	r3, [r7, #3]
 8000bc6:	2b02      	cmp	r3, #2
 8000bc8:	d104      	bne.n	8000bd4 <_ZN6NRF24L12SetPowerModeEh+0x28>
		// Set the PWR_UP bit of CONFIG register to wake the transceiver
		// It goes into Stanby-I mode with consumption about 26uA
		reg |= nRF24_CONFIG_PWR_UP;
 8000bca:	7bfb      	ldrb	r3, [r7, #15]
 8000bcc:	f043 0302 	orr.w	r3, r3, #2
 8000bd0:	73fb      	strb	r3, [r7, #15]
 8000bd2:	e003      	b.n	8000bdc <_ZN6NRF24L12SetPowerModeEh+0x30>
	} else {
		// Clear the PWR_UP bit of CONFIG register to put the transceiver
		// into power down mode with consumption about 900nA
		reg &= ~nRF24_CONFIG_PWR_UP;
 8000bd4:	7bfb      	ldrb	r3, [r7, #15]
 8000bd6:	f023 0302 	bic.w	r3, r3, #2
 8000bda:	73fb      	strb	r3, [r7, #15]
	}
	WriteReg(nRF24_REG_CONFIG, reg);
 8000bdc:	7bfb      	ldrb	r3, [r7, #15]
 8000bde:	461a      	mov	r2, r3
 8000be0:	2100      	movs	r1, #0
 8000be2:	6878      	ldr	r0, [r7, #4]
 8000be4:	f7ff feb3 	bl	800094e <_ZN6NRF24L8WriteRegEhh>
}
 8000be8:	bf00      	nop
 8000bea:	3710      	adds	r7, #16
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}

08000bf0 <_ZN6NRF24L18SetOperationalModeEh>:

// Set transceiver operational mode
// input:
//   mode - operational mode, one of nRF24_MODE_xx values
void NRF24L::SetOperationalMode(uint8_t mode) {
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b084      	sub	sp, #16
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
 8000bf8:	460b      	mov	r3, r1
 8000bfa:	70fb      	strb	r3, [r7, #3]
	uint8_t reg;

	// Configure PRIM_RX bit of the CONFIG register
	reg = ReadReg(nRF24_REG_CONFIG);
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	6878      	ldr	r0, [r7, #4]
 8000c00:	f7ff fe86 	bl	8000910 <_ZN6NRF24L7ReadRegEh>
 8000c04:	4603      	mov	r3, r0
 8000c06:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_CONFIG_PRIM_RX;
 8000c08:	7bfb      	ldrb	r3, [r7, #15]
 8000c0a:	f023 0301 	bic.w	r3, r3, #1
 8000c0e:	73fb      	strb	r3, [r7, #15]
	reg |= (mode & nRF24_CONFIG_PRIM_RX );
 8000c10:	78fb      	ldrb	r3, [r7, #3]
 8000c12:	f003 0301 	and.w	r3, r3, #1
 8000c16:	b2da      	uxtb	r2, r3
 8000c18:	7bfb      	ldrb	r3, [r7, #15]
 8000c1a:	4313      	orrs	r3, r2
 8000c1c:	73fb      	strb	r3, [r7, #15]
	WriteReg(nRF24_REG_CONFIG, reg);
 8000c1e:	7bfb      	ldrb	r3, [r7, #15]
 8000c20:	461a      	mov	r2, r3
 8000c22:	2100      	movs	r1, #0
 8000c24:	6878      	ldr	r0, [r7, #4]
 8000c26:	f7ff fe92 	bl	800094e <_ZN6NRF24L8WriteRegEhh>
}
 8000c2a:	bf00      	nop
 8000c2c:	3710      	adds	r7, #16
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}

08000c32 <_ZN6NRF24L12SetCRCSchemeEh>:
// Configure transceiver CRC scheme
// input:
//   scheme - CRC scheme, one of nRF24_CRC_xx values
// note: transceiver will forcibly turn on the CRC in case if auto acknowledgment
//       enabled for at least one RX pipe
void NRF24L::SetCRCScheme(uint8_t scheme) {
 8000c32:	b580      	push	{r7, lr}
 8000c34:	b084      	sub	sp, #16
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	6078      	str	r0, [r7, #4]
 8000c3a:	460b      	mov	r3, r1
 8000c3c:	70fb      	strb	r3, [r7, #3]
	uint8_t reg;

	// Configure EN_CRC[3] and CRCO[2] bits of the CONFIG register
	reg = ReadReg(nRF24_REG_CONFIG);
 8000c3e:	2100      	movs	r1, #0
 8000c40:	6878      	ldr	r0, [r7, #4]
 8000c42:	f7ff fe65 	bl	8000910 <_ZN6NRF24L7ReadRegEh>
 8000c46:	4603      	mov	r3, r0
 8000c48:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_CRC;
 8000c4a:	7bfb      	ldrb	r3, [r7, #15]
 8000c4c:	f023 030c 	bic.w	r3, r3, #12
 8000c50:	73fb      	strb	r3, [r7, #15]
	reg |= (scheme & nRF24_MASK_CRC );
 8000c52:	78fb      	ldrb	r3, [r7, #3]
 8000c54:	f003 030c 	and.w	r3, r3, #12
 8000c58:	b2da      	uxtb	r2, r3
 8000c5a:	7bfb      	ldrb	r3, [r7, #15]
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	73fb      	strb	r3, [r7, #15]
	WriteReg(nRF24_REG_CONFIG, reg);
 8000c60:	7bfb      	ldrb	r3, [r7, #15]
 8000c62:	461a      	mov	r2, r3
 8000c64:	2100      	movs	r1, #0
 8000c66:	6878      	ldr	r0, [r7, #4]
 8000c68:	f7ff fe71 	bl	800094e <_ZN6NRF24L8WriteRegEhh>
}
 8000c6c:	bf00      	nop
 8000c6e:	3710      	adds	r7, #16
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}

08000c74 <_ZN6NRF24L12SetRFChannelEh>:
// Set frequency channel
// input:
//   channel - radio frequency channel, value from 0 to 127
// note: frequency will be (2400 + channel)MHz
// note: PLOS_CNT[7:4] bits of the OBSERVER_TX register will be reset
void NRF24L::SetRFChannel(uint8_t channel) {
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
 8000c7c:	460b      	mov	r3, r1
 8000c7e:	70fb      	strb	r3, [r7, #3]
	WriteReg(nRF24_REG_RF_CH, channel);
 8000c80:	78fb      	ldrb	r3, [r7, #3]
 8000c82:	461a      	mov	r2, r3
 8000c84:	2105      	movs	r1, #5
 8000c86:	6878      	ldr	r0, [r7, #4]
 8000c88:	f7ff fe61 	bl	800094e <_ZN6NRF24L8WriteRegEhh>
}
 8000c8c:	bf00      	nop
 8000c8e:	3708      	adds	r7, #8
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}

08000c94 <_ZN6NRF24L12SetAddrWidthEh>:

// Set of address widths
// input:
//   addr_width - RX/TX address field width, value from 3 to 5
// note: this setting is common for all pipes
void NRF24L::SetAddrWidth(uint8_t addr_width) {
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
 8000c9c:	460b      	mov	r3, r1
 8000c9e:	70fb      	strb	r3, [r7, #3]
	WriteReg(nRF24_REG_SETUP_AW, addr_width - 2);
 8000ca0:	78fb      	ldrb	r3, [r7, #3]
 8000ca2:	3b02      	subs	r3, #2
 8000ca4:	b2db      	uxtb	r3, r3
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	2103      	movs	r1, #3
 8000caa:	6878      	ldr	r0, [r7, #4]
 8000cac:	f7ff fe4f 	bl	800094e <_ZN6NRF24L8WriteRegEhh>
}
 8000cb0:	bf00      	nop
 8000cb2:	3708      	adds	r7, #8
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}

08000cb8 <_ZN6NRF24L7SetAddrEhPKh>:
// note: buffer length must be equal to current address width of transceiver
// note: for pipes[2..5] only first byte of address will be written because
//       other bytes of address equals to pipe1
// note: for pipes[2..5] only first byte of address will be written because
//       pipes 1-5 share the four most significant address bytes
void NRF24L::SetAddr(uint8_t pipe, const uint8_t *addr) {
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b086      	sub	sp, #24
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	60f8      	str	r0, [r7, #12]
 8000cc0:	460b      	mov	r3, r1
 8000cc2:	607a      	str	r2, [r7, #4]
 8000cc4:	72fb      	strb	r3, [r7, #11]
	uint8_t addr_width;

	// RX_ADDR_Px register
	switch (pipe) {
 8000cc6:	7afb      	ldrb	r3, [r7, #11]
 8000cc8:	2b06      	cmp	r3, #6
 8000cca:	d00a      	beq.n	8000ce2 <_ZN6NRF24L7SetAddrEhPKh+0x2a>
 8000ccc:	2b06      	cmp	r3, #6
 8000cce:	dc42      	bgt.n	8000d56 <_ZN6NRF24L7SetAddrEhPKh+0x9e>
 8000cd0:	2b01      	cmp	r3, #1
 8000cd2:	dc02      	bgt.n	8000cda <_ZN6NRF24L7SetAddrEhPKh+0x22>
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	da04      	bge.n	8000ce2 <_ZN6NRF24L7SetAddrEhPKh+0x2a>
		// Write address LSBbyte (only first byte from the addr buffer)
		WriteReg(NRF24L::ADDR_REGS[pipe], *addr);
		break;
	default:
		// Incorrect pipe number -> do nothing
		break;
 8000cd8:	e03d      	b.n	8000d56 <_ZN6NRF24L7SetAddrEhPKh+0x9e>
 8000cda:	3b02      	subs	r3, #2
	switch (pipe) {
 8000cdc:	2b03      	cmp	r3, #3
 8000cde:	d83a      	bhi.n	8000d56 <_ZN6NRF24L7SetAddrEhPKh+0x9e>
 8000ce0:	e02e      	b.n	8000d40 <_ZN6NRF24L7SetAddrEhPKh+0x88>
		addr_width = ReadReg(nRF24_REG_SETUP_AW) + 1;
 8000ce2:	2103      	movs	r1, #3
 8000ce4:	68f8      	ldr	r0, [r7, #12]
 8000ce6:	f7ff fe13 	bl	8000910 <_ZN6NRF24L7ReadRegEh>
 8000cea:	4603      	mov	r3, r0
 8000cec:	3301      	adds	r3, #1
 8000cee:	75fb      	strb	r3, [r7, #23]
		addr += addr_width;
 8000cf0:	7dfb      	ldrb	r3, [r7, #23]
 8000cf2:	687a      	ldr	r2, [r7, #4]
 8000cf4:	4413      	add	r3, r2
 8000cf6:	607b      	str	r3, [r7, #4]
		nRF24_CSN_L();
 8000cf8:	68f8      	ldr	r0, [r7, #12]
 8000cfa:	f7ff fdc9 	bl	8000890 <_ZN6NRF24L11nRF24_CSN_LEv>
		nRF24_LL_RW(nRF24_CMD_W_REGISTER | NRF24L::ADDR_REGS[pipe]);
 8000cfe:	7afb      	ldrb	r3, [r7, #11]
 8000d00:	68fa      	ldr	r2, [r7, #12]
 8000d02:	4413      	add	r3, r2
 8000d04:	7f1b      	ldrb	r3, [r3, #28]
 8000d06:	f043 0320 	orr.w	r3, r3, #32
 8000d0a:	b2db      	uxtb	r3, r3
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	68f8      	ldr	r0, [r7, #12]
 8000d10:	f7ff fdde 	bl	80008d0 <_ZN6NRF24L11nRF24_LL_RWEh>
			nRF24_LL_RW(*addr--);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	1e5a      	subs	r2, r3, #1
 8000d18:	607a      	str	r2, [r7, #4]
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	68f8      	ldr	r0, [r7, #12]
 8000d20:	f7ff fdd6 	bl	80008d0 <_ZN6NRF24L11nRF24_LL_RWEh>
		} while (addr_width--);
 8000d24:	7dfb      	ldrb	r3, [r7, #23]
 8000d26:	1e5a      	subs	r2, r3, #1
 8000d28:	75fa      	strb	r2, [r7, #23]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	bf14      	ite	ne
 8000d2e:	2301      	movne	r3, #1
 8000d30:	2300      	moveq	r3, #0
 8000d32:	b2db      	uxtb	r3, r3
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d1ed      	bne.n	8000d14 <_ZN6NRF24L7SetAddrEhPKh+0x5c>
		nRF24_CSN_H();
 8000d38:	68f8      	ldr	r0, [r7, #12]
 8000d3a:	f7ff fdb9 	bl	80008b0 <_ZN6NRF24L11nRF24_CSN_HEv>
		break;
 8000d3e:	e00b      	b.n	8000d58 <_ZN6NRF24L7SetAddrEhPKh+0xa0>
		WriteReg(NRF24L::ADDR_REGS[pipe], *addr);
 8000d40:	7afb      	ldrb	r3, [r7, #11]
 8000d42:	68fa      	ldr	r2, [r7, #12]
 8000d44:	4413      	add	r3, r2
 8000d46:	7f19      	ldrb	r1, [r3, #28]
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	461a      	mov	r2, r3
 8000d4e:	68f8      	ldr	r0, [r7, #12]
 8000d50:	f7ff fdfd 	bl	800094e <_ZN6NRF24L8WriteRegEhh>
		break;
 8000d54:	e000      	b.n	8000d58 <_ZN6NRF24L7SetAddrEhPKh+0xa0>
		break;
 8000d56:	bf00      	nop
	}
}
 8000d58:	bf00      	nop
 8000d5a:	3718      	adds	r7, #24
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}

08000d60 <_ZN6NRF24L11SetDataRateEh>:
}

// Configure transceiver data rate
// input:
//   data_rate - data rate, one of nRF24_DR_xx values
void NRF24L::SetDataRate(uint8_t data_rate) {
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b084      	sub	sp, #16
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
 8000d68:	460b      	mov	r3, r1
 8000d6a:	70fb      	strb	r3, [r7, #3]
	uint8_t reg;

	// Configure RF_DR_LOW[5] and RF_DR_HIGH[3] bits of the RF_SETUP register
	reg = ReadReg(nRF24_REG_RF_SETUP);
 8000d6c:	2106      	movs	r1, #6
 8000d6e:	6878      	ldr	r0, [r7, #4]
 8000d70:	f7ff fdce 	bl	8000910 <_ZN6NRF24L7ReadRegEh>
 8000d74:	4603      	mov	r3, r0
 8000d76:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_DATARATE;
 8000d78:	7bfb      	ldrb	r3, [r7, #15]
 8000d7a:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 8000d7e:	73fb      	strb	r3, [r7, #15]
	reg |= data_rate;
 8000d80:	7bfa      	ldrb	r2, [r7, #15]
 8000d82:	78fb      	ldrb	r3, [r7, #3]
 8000d84:	4313      	orrs	r3, r2
 8000d86:	73fb      	strb	r3, [r7, #15]
	WriteReg(nRF24_REG_RF_SETUP, reg);
 8000d88:	7bfb      	ldrb	r3, [r7, #15]
 8000d8a:	461a      	mov	r2, r3
 8000d8c:	2106      	movs	r1, #6
 8000d8e:	6878      	ldr	r0, [r7, #4]
 8000d90:	f7ff fddd 	bl	800094e <_ZN6NRF24L8WriteRegEhh>
}
 8000d94:	bf00      	nop
 8000d96:	3710      	adds	r7, #16
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}

08000d9c <_ZN6NRF24L9SetRXPipeEhhh>:
// Configure a specified RX pipe
// input:
//   pipe - number of the RX pipe, value from 0 to 5
//   aa_state - state of auto acknowledgment, one of nRF24_AA_xx values
//   payload_len - payload length in bytes
void NRF24L::SetRXPipe(uint8_t pipe, uint8_t aa_state, uint8_t payload_len) {
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b084      	sub	sp, #16
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
 8000da4:	4608      	mov	r0, r1
 8000da6:	4611      	mov	r1, r2
 8000da8:	461a      	mov	r2, r3
 8000daa:	4603      	mov	r3, r0
 8000dac:	70fb      	strb	r3, [r7, #3]
 8000dae:	460b      	mov	r3, r1
 8000db0:	70bb      	strb	r3, [r7, #2]
 8000db2:	4613      	mov	r3, r2
 8000db4:	707b      	strb	r3, [r7, #1]
	uint8_t reg;

	// Enable the specified pipe (EN_RXADDR register)
	reg = (ReadReg(nRF24_REG_EN_RXADDR) | (1 << pipe)) & nRF24_MASK_EN_RX;
 8000db6:	2102      	movs	r1, #2
 8000db8:	6878      	ldr	r0, [r7, #4]
 8000dba:	f7ff fda9 	bl	8000910 <_ZN6NRF24L7ReadRegEh>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	b25a      	sxtb	r2, r3
 8000dc2:	78fb      	ldrb	r3, [r7, #3]
 8000dc4:	2101      	movs	r1, #1
 8000dc6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dca:	b25b      	sxtb	r3, r3
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	b25b      	sxtb	r3, r3
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000dd6:	73fb      	strb	r3, [r7, #15]
	WriteReg(nRF24_REG_EN_RXADDR, reg);
 8000dd8:	7bfb      	ldrb	r3, [r7, #15]
 8000dda:	461a      	mov	r2, r3
 8000ddc:	2102      	movs	r1, #2
 8000dde:	6878      	ldr	r0, [r7, #4]
 8000de0:	f7ff fdb5 	bl	800094e <_ZN6NRF24L8WriteRegEhh>

	// Set RX payload length (RX_PW_Px register)
	WriteReg(NRF24L::RX_PW_PIPE[pipe], payload_len & nRF24_MASK_RX_PW);
 8000de4:	78fb      	ldrb	r3, [r7, #3]
 8000de6:	687a      	ldr	r2, [r7, #4]
 8000de8:	4413      	add	r3, r2
 8000dea:	7d99      	ldrb	r1, [r3, #22]
 8000dec:	787b      	ldrb	r3, [r7, #1]
 8000dee:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000df2:	b2db      	uxtb	r3, r3
 8000df4:	461a      	mov	r2, r3
 8000df6:	6878      	ldr	r0, [r7, #4]
 8000df8:	f7ff fda9 	bl	800094e <_ZN6NRF24L8WriteRegEhh>

	// Set auto acknowledgment for a specified pipe (EN_AA register)
	reg = ReadReg(nRF24_REG_EN_AA);
 8000dfc:	2101      	movs	r1, #1
 8000dfe:	6878      	ldr	r0, [r7, #4]
 8000e00:	f7ff fd86 	bl	8000910 <_ZN6NRF24L7ReadRegEh>
 8000e04:	4603      	mov	r3, r0
 8000e06:	73fb      	strb	r3, [r7, #15]
	if (aa_state == nRF24_AA_ON) {
 8000e08:	78bb      	ldrb	r3, [r7, #2]
 8000e0a:	2b01      	cmp	r3, #1
 8000e0c:	d10a      	bne.n	8000e24 <_ZN6NRF24L9SetRXPipeEhhh+0x88>
		reg |= (1 << pipe);
 8000e0e:	78fb      	ldrb	r3, [r7, #3]
 8000e10:	2201      	movs	r2, #1
 8000e12:	fa02 f303 	lsl.w	r3, r2, r3
 8000e16:	b25a      	sxtb	r2, r3
 8000e18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	b25b      	sxtb	r3, r3
 8000e20:	73fb      	strb	r3, [r7, #15]
 8000e22:	e00b      	b.n	8000e3c <_ZN6NRF24L9SetRXPipeEhhh+0xa0>
	} else {
		reg &= ~(1 << pipe);
 8000e24:	78fb      	ldrb	r3, [r7, #3]
 8000e26:	2201      	movs	r2, #1
 8000e28:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2c:	b25b      	sxtb	r3, r3
 8000e2e:	43db      	mvns	r3, r3
 8000e30:	b25a      	sxtb	r2, r3
 8000e32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e36:	4013      	ands	r3, r2
 8000e38:	b25b      	sxtb	r3, r3
 8000e3a:	73fb      	strb	r3, [r7, #15]
	}
	WriteReg(nRF24_REG_EN_AA, reg);
 8000e3c:	7bfb      	ldrb	r3, [r7, #15]
 8000e3e:	461a      	mov	r2, r3
 8000e40:	2101      	movs	r1, #1
 8000e42:	6878      	ldr	r0, [r7, #4]
 8000e44:	f7ff fd83 	bl	800094e <_ZN6NRF24L8WriteRegEhh>
}
 8000e48:	bf00      	nop
 8000e4a:	3710      	adds	r7, #16
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <_ZN6NRF24L9DisableAAEh>:
}

// Disable the auto retransmit (a.k.a. enhanced ShockBurst) for one or all RX pipes
// input:
//   pipe - number of the RX pipe, value from 0 to 5, any other value will disable AA for all RX pipes
void NRF24L::DisableAA(uint8_t pipe) {
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
 8000e58:	460b      	mov	r3, r1
 8000e5a:	70fb      	strb	r3, [r7, #3]
	uint8_t reg;

	if (pipe > 5) {
 8000e5c:	78fb      	ldrb	r3, [r7, #3]
 8000e5e:	2b05      	cmp	r3, #5
 8000e60:	d905      	bls.n	8000e6e <_ZN6NRF24L9DisableAAEh+0x1e>
		// Disable Auto-ACK for ALL pipes
		WriteReg(nRF24_REG_EN_AA, 0x00);
 8000e62:	2200      	movs	r2, #0
 8000e64:	2101      	movs	r1, #1
 8000e66:	6878      	ldr	r0, [r7, #4]
 8000e68:	f7ff fd71 	bl	800094e <_ZN6NRF24L8WriteRegEhh>
		// Clear bit in the EN_AA register
		reg = ReadReg(nRF24_REG_EN_AA);
		reg &= ~(1 << pipe);
		WriteReg(nRF24_REG_EN_AA, reg);
	}
}
 8000e6c:	e017      	b.n	8000e9e <_ZN6NRF24L9DisableAAEh+0x4e>
		reg = ReadReg(nRF24_REG_EN_AA);
 8000e6e:	2101      	movs	r1, #1
 8000e70:	6878      	ldr	r0, [r7, #4]
 8000e72:	f7ff fd4d 	bl	8000910 <_ZN6NRF24L7ReadRegEh>
 8000e76:	4603      	mov	r3, r0
 8000e78:	73fb      	strb	r3, [r7, #15]
		reg &= ~(1 << pipe);
 8000e7a:	78fb      	ldrb	r3, [r7, #3]
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e82:	b25b      	sxtb	r3, r3
 8000e84:	43db      	mvns	r3, r3
 8000e86:	b25a      	sxtb	r2, r3
 8000e88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	b25b      	sxtb	r3, r3
 8000e90:	73fb      	strb	r3, [r7, #15]
		WriteReg(nRF24_REG_EN_AA, reg);
 8000e92:	7bfb      	ldrb	r3, [r7, #15]
 8000e94:	461a      	mov	r2, r3
 8000e96:	2101      	movs	r1, #1
 8000e98:	6878      	ldr	r0, [r7, #4]
 8000e9a:	f7ff fd58 	bl	800094e <_ZN6NRF24L8WriteRegEhh>
}
 8000e9e:	bf00      	nop
 8000ea0:	3710      	adds	r7, #16
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}

08000ea6 <_ZN6NRF24L7FlushTXEv>:
	reg = ReadReg(nRF24_REG_RF_CH);
	WriteReg(nRF24_REG_RF_CH, reg);
}

// Flush the TX FIFO
void NRF24L::FlushTX(void) {
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	b082      	sub	sp, #8
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	6078      	str	r0, [r7, #4]
	WriteReg(nRF24_CMD_FLUSH_TX, nRF24_CMD_NOP);
 8000eae:	22ff      	movs	r2, #255	@ 0xff
 8000eb0:	21e1      	movs	r1, #225	@ 0xe1
 8000eb2:	6878      	ldr	r0, [r7, #4]
 8000eb4:	f7ff fd4b 	bl	800094e <_ZN6NRF24L8WriteRegEhh>
}
 8000eb8:	bf00      	nop
 8000eba:	3708      	adds	r7, #8
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <_ZN6NRF24L7FlushRXEv>:

// Flush the RX FIFO
void NRF24L::FlushRX(void) {
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
	WriteReg(nRF24_CMD_FLUSH_RX, nRF24_CMD_NOP);
 8000ec8:	22ff      	movs	r2, #255	@ 0xff
 8000eca:	21e2      	movs	r1, #226	@ 0xe2
 8000ecc:	6878      	ldr	r0, [r7, #4]
 8000ece:	f7ff fd3e 	bl	800094e <_ZN6NRF24L8WriteRegEhh>
}
 8000ed2:	bf00      	nop
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}

08000eda <_ZN6NRF24L13ClearIRQFlagsEv>:

// Clear any pending IRQ flags
void NRF24L::ClearIRQFlags(void) {
 8000eda:	b580      	push	{r7, lr}
 8000edc:	b084      	sub	sp, #16
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	6078      	str	r0, [r7, #4]
	uint8_t reg;

	// Clear RX_DR, TX_DS and MAX_RT bits of the STATUS register
	reg = ReadReg(nRF24_REG_STATUS);
 8000ee2:	2107      	movs	r1, #7
 8000ee4:	6878      	ldr	r0, [r7, #4]
 8000ee6:	f7ff fd13 	bl	8000910 <_ZN6NRF24L7ReadRegEh>
 8000eea:	4603      	mov	r3, r0
 8000eec:	73fb      	strb	r3, [r7, #15]
	reg |= nRF24_MASK_STATUS_IRQ;
 8000eee:	7bfb      	ldrb	r3, [r7, #15]
 8000ef0:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8000ef4:	73fb      	strb	r3, [r7, #15]
	WriteReg(nRF24_REG_STATUS, reg);
 8000ef6:	7bfb      	ldrb	r3, [r7, #15]
 8000ef8:	461a      	mov	r2, r3
 8000efa:	2107      	movs	r1, #7
 8000efc:	6878      	ldr	r0, [r7, #4]
 8000efe:	f7ff fd26 	bl	800094e <_ZN6NRF24L8WriteRegEhh>
}
 8000f02:	bf00      	nop
 8000f04:	3710      	adds	r7, #16
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
	...

08000f0c <_ZN6NRF24L6InitRXEPhh>:
	ClearIRQFlags();
	// Wake the transceiver
	SetPowerMode(nRF24_PWR_UP);
}

void NRF24L::InitRX(uint8_t *dest, uint8_t len) {
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	60f8      	str	r0, [r7, #12]
 8000f14:	60b9      	str	r1, [r7, #8]
 8000f16:	4613      	mov	r3, r2
 8000f18:	71fb      	strb	r3, [r7, #7]
	// Disable ShockBurst for all RX pipes
	DisableAA(0xFF);
 8000f1a:	21ff      	movs	r1, #255	@ 0xff
 8000f1c:	68f8      	ldr	r0, [r7, #12]
 8000f1e:	f7ff ff97 	bl	8000e50 <_ZN6NRF24L9DisableAAEh>
	// Set RF channel
	SetRFChannel(115);
 8000f22:	2173      	movs	r1, #115	@ 0x73
 8000f24:	68f8      	ldr	r0, [r7, #12]
 8000f26:	f7ff fea5 	bl	8000c74 <_ZN6NRF24L12SetRFChannelEh>
	// Set data rate
	SetDataRate(nRF24_DR_250kbps);
 8000f2a:	2120      	movs	r1, #32
 8000f2c:	68f8      	ldr	r0, [r7, #12]
 8000f2e:	f7ff ff17 	bl	8000d60 <_ZN6NRF24L11SetDataRateEh>
	// Set CRC scheme
	SetCRCScheme(nRF24_CRC_2byte);
 8000f32:	210c      	movs	r1, #12
 8000f34:	68f8      	ldr	r0, [r7, #12]
 8000f36:	f7ff fe7c 	bl	8000c32 <_ZN6NRF24L12SetCRCSchemeEh>
	// Set address width, its common for all pipes (RX and TX)
	SetAddrWidth(3);
 8000f3a:	2103      	movs	r1, #3
 8000f3c:	68f8      	ldr	r0, [r7, #12]
 8000f3e:	f7ff fea9 	bl	8000c94 <_ZN6NRF24L12SetAddrWidthEh>
	// Configure RX PIPE#1
	static const uint8_t nRF24_ADDR[] = { 0xE7, 0x1C, 0xE3 };
	SetAddr(nRF24_PIPE1, nRF24_ADDR); // program address for RX pipe #1
 8000f42:	4a0d      	ldr	r2, [pc, #52]	@ (8000f78 <_ZN6NRF24L6InitRXEPhh+0x6c>)
 8000f44:	2101      	movs	r1, #1
 8000f46:	68f8      	ldr	r0, [r7, #12]
 8000f48:	f7ff feb6 	bl	8000cb8 <_ZN6NRF24L7SetAddrEhPKh>
	SetRXPipe(nRF24_PIPE1, nRF24_AA_OFF, len); // Auto-ACK: disabled, payload length in bytes
 8000f4c:	79fb      	ldrb	r3, [r7, #7]
 8000f4e:	2200      	movs	r2, #0
 8000f50:	2101      	movs	r1, #1
 8000f52:	68f8      	ldr	r0, [r7, #12]
 8000f54:	f7ff ff22 	bl	8000d9c <_ZN6NRF24L9SetRXPipeEhhh>
	// Set operational mode (PRX == receiver)
	SetOperationalMode(nRF24_MODE_RX);
 8000f58:	2101      	movs	r1, #1
 8000f5a:	68f8      	ldr	r0, [r7, #12]
 8000f5c:	f7ff fe48 	bl	8000bf0 <_ZN6NRF24L18SetOperationalModeEh>
	// Wake the transceiver
	SetPowerMode(nRF24_PWR_UP);
 8000f60:	2102      	movs	r1, #2
 8000f62:	68f8      	ldr	r0, [r7, #12]
 8000f64:	f7ff fe22 	bl	8000bac <_ZN6NRF24L12SetPowerModeEh>
	// Put the transceiver to the RX mode
	nRF24_CE_H();
 8000f68:	68f8      	ldr	r0, [r7, #12]
 8000f6a:	f7ff fc81 	bl	8000870 <_ZN6NRF24L10nRF24_CE_HEv>
//	nRF24_SetAddrWidth(5); // address width is 5 bytes
//	nRF24_SetAddr(nRF24_PIPE1, dest); // program pipe address
//	nRF24_SetRXPipe(nRF24_PIPE1, nRF24_AA_OFF, 10); // enable RX pipe#1 with Auto-ACK: disabled, payload length: 10 bytes
//	nRF24_SetOperationalMode(nRF24_MODE_RX); // switch transceiver to the RX mode
//	nRF24_SetPowerMode(nRF24_PWR_UP); // wake-up transceiver (in case if it sleeping)
}
 8000f6e:	bf00      	nop
 8000f70:	3710      	adds	r7, #16
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	08004ecc 	.word	0x08004ecc

08000f7c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f82:	463b      	mov	r3, r7
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	605a      	str	r2, [r3, #4]
 8000f8a:	609a      	str	r2, [r3, #8]
 8000f8c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f8e:	4b21      	ldr	r3, [pc, #132]	@ (8001014 <MX_ADC1_Init+0x98>)
 8000f90:	4a21      	ldr	r2, [pc, #132]	@ (8001018 <MX_ADC1_Init+0x9c>)
 8000f92:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f94:	4b1f      	ldr	r3, [pc, #124]	@ (8001014 <MX_ADC1_Init+0x98>)
 8000f96:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000f9a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f9c:	4b1d      	ldr	r3, [pc, #116]	@ (8001014 <MX_ADC1_Init+0x98>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000fa2:	4b1c      	ldr	r3, [pc, #112]	@ (8001014 <MX_ADC1_Init+0x98>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000fa8:	4b1a      	ldr	r3, [pc, #104]	@ (8001014 <MX_ADC1_Init+0x98>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fae:	4b19      	ldr	r3, [pc, #100]	@ (8001014 <MX_ADC1_Init+0x98>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fb6:	4b17      	ldr	r3, [pc, #92]	@ (8001014 <MX_ADC1_Init+0x98>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fbc:	4b15      	ldr	r3, [pc, #84]	@ (8001014 <MX_ADC1_Init+0x98>)
 8000fbe:	4a17      	ldr	r2, [pc, #92]	@ (800101c <MX_ADC1_Init+0xa0>)
 8000fc0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fc2:	4b14      	ldr	r3, [pc, #80]	@ (8001014 <MX_ADC1_Init+0x98>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000fc8:	4b12      	ldr	r3, [pc, #72]	@ (8001014 <MX_ADC1_Init+0x98>)
 8000fca:	2201      	movs	r2, #1
 8000fcc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000fce:	4b11      	ldr	r3, [pc, #68]	@ (8001014 <MX_ADC1_Init+0x98>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fd6:	4b0f      	ldr	r3, [pc, #60]	@ (8001014 <MX_ADC1_Init+0x98>)
 8000fd8:	2201      	movs	r2, #1
 8000fda:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fdc:	480d      	ldr	r0, [pc, #52]	@ (8001014 <MX_ADC1_Init+0x98>)
 8000fde:	f001 fa49 	bl	8002474 <HAL_ADC_Init>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000fe8:	f001 f896 	bl	8002118 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VBAT;
 8000fec:	2312      	movs	r3, #18
 8000fee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ff8:	463b      	mov	r3, r7
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4805      	ldr	r0, [pc, #20]	@ (8001014 <MX_ADC1_Init+0x98>)
 8000ffe:	f001 fa7d 	bl	80024fc <HAL_ADC_ConfigChannel>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001008:	f001 f886 	bl	8002118 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800100c:	bf00      	nop
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20000124 	.word	0x20000124
 8001018:	40012000 	.word	0x40012000
 800101c:	0f000001 	.word	0x0f000001

08001020 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001020:	b480      	push	{r7}
 8001022:	b085      	sub	sp, #20
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a0b      	ldr	r2, [pc, #44]	@ (800105c <HAL_ADC_MspInit+0x3c>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d10d      	bne.n	800104e <HAL_ADC_MspInit+0x2e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001032:	2300      	movs	r3, #0
 8001034:	60fb      	str	r3, [r7, #12]
 8001036:	4b0a      	ldr	r3, [pc, #40]	@ (8001060 <HAL_ADC_MspInit+0x40>)
 8001038:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800103a:	4a09      	ldr	r2, [pc, #36]	@ (8001060 <HAL_ADC_MspInit+0x40>)
 800103c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001040:	6453      	str	r3, [r2, #68]	@ 0x44
 8001042:	4b07      	ldr	r3, [pc, #28]	@ (8001060 <HAL_ADC_MspInit+0x40>)
 8001044:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001046:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800104a:	60fb      	str	r3, [r7, #12]
 800104c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800104e:	bf00      	nop
 8001050:	3714      	adds	r7, #20
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	40012000 	.word	0x40012000
 8001060:	40023800 	.word	0x40023800

08001064 <_ZN6BMP280C1EPNS_20BMP280_HandleTypedefE>:

#define BMP280_RESET_VALUE     0xB6



BMP280::BMP280(BMP280_HandleTypedef* device) : _device(device) {
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	6039      	str	r1, [r7, #0]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	683a      	ldr	r2, [r7, #0]
 8001072:	601a      	str	r2, [r3, #0]
    bmp280_init_default_params();
 8001074:	6878      	ldr	r0, [r7, #4]
 8001076:	f000 f810 	bl	800109a <_ZN6BMP28026bmp280_init_default_paramsEv>
}
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4618      	mov	r0, r3
 800107e:	3708      	adds	r7, #8
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}

08001084 <_ZN6BMP280D1Ev>:

BMP280::~BMP280() {}
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	4618      	mov	r0, r3
 8001090:	370c      	adds	r7, #12
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr

0800109a <_ZN6BMP28026bmp280_init_default_paramsEv>:

void BMP280::bmp280_init_default_params() {
 800109a:	b480      	push	{r7}
 800109c:	b083      	sub	sp, #12
 800109e:	af00      	add	r7, sp, #0
 80010a0:	6078      	str	r0, [r7, #4]
    _device->params.mode = BMP280_MODE_NORMAL;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	2203      	movs	r2, #3
 80010a8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
	_device->params.filter = BMP280_FILTER_OFF;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	2200      	movs	r2, #0
 80010b2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
	_device->params.oversampling_pressure = BMP280_STANDARD;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	2203      	movs	r2, #3
 80010bc:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
	_device->params.oversampling_temperature = BMP280_STANDARD;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	2203      	movs	r2, #3
 80010c6:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	_device->params.oversampling_humidity = BMP280_STANDARD;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	2203      	movs	r2, #3
 80010d0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	_device->params.standby = BMP280_STANDBY_250;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	2203      	movs	r2, #3
 80010da:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
}
 80010de:	bf00      	nop
 80010e0:	370c      	adds	r7, #12
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr

080010ea <_ZN6BMP28015read_register16EhPt>:

bool BMP280::read_register16(uint8_t addr, uint16_t *value) {
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b08a      	sub	sp, #40	@ 0x28
 80010ee:	af04      	add	r7, sp, #16
 80010f0:	60f8      	str	r0, [r7, #12]
 80010f2:	460b      	mov	r3, r1
 80010f4:	607a      	str	r2, [r7, #4]
 80010f6:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (_device->addr << 1);
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80010fe:	005b      	lsls	r3, r3, #1
 8001100:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(_device->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8001108:	7afb      	ldrb	r3, [r7, #11]
 800110a:	b29a      	uxth	r2, r3
 800110c:	8af9      	ldrh	r1, [r7, #22]
 800110e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001112:	9302      	str	r3, [sp, #8]
 8001114:	2302      	movs	r3, #2
 8001116:	9301      	str	r3, [sp, #4]
 8001118:	f107 0314 	add.w	r3, r7, #20
 800111c:	9300      	str	r3, [sp, #0]
 800111e:	2301      	movs	r3, #1
 8001120:	f002 f8f4 	bl	800330c <HAL_I2C_Mem_Read>
 8001124:	4603      	mov	r3, r0
			== HAL_OK) {
 8001126:	2b00      	cmp	r3, #0
 8001128:	bf0c      	ite	eq
 800112a:	2301      	moveq	r3, #1
 800112c:	2300      	movne	r3, #0
 800112e:	b2db      	uxtb	r3, r3
	if (HAL_I2C_Mem_Read(_device->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8001130:	2b00      	cmp	r3, #0
 8001132:	d00b      	beq.n	800114c <_ZN6BMP28015read_register16EhPt+0x62>
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 8001134:	7d7b      	ldrb	r3, [r7, #21]
 8001136:	021b      	lsls	r3, r3, #8
 8001138:	b21a      	sxth	r2, r3
 800113a:	7d3b      	ldrb	r3, [r7, #20]
 800113c:	b21b      	sxth	r3, r3
 800113e:	4313      	orrs	r3, r2
 8001140:	b21b      	sxth	r3, r3
 8001142:	b29a      	uxth	r2, r3
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	801a      	strh	r2, [r3, #0]
		return true;
 8001148:	2301      	movs	r3, #1
 800114a:	e000      	b.n	800114e <_ZN6BMP28015read_register16EhPt+0x64>
	} else
		return false;
 800114c:	2300      	movs	r3, #0

}
 800114e:	4618      	mov	r0, r3
 8001150:	3718      	adds	r7, #24
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}

08001156 <_ZN6BMP2809read_dataEhPhh>:

inline int BMP280::read_data(uint8_t addr, uint8_t *value, uint8_t len) {
 8001156:	b590      	push	{r4, r7, lr}
 8001158:	b08b      	sub	sp, #44	@ 0x2c
 800115a:	af04      	add	r7, sp, #16
 800115c:	60f8      	str	r0, [r7, #12]
 800115e:	607a      	str	r2, [r7, #4]
 8001160:	461a      	mov	r2, r3
 8001162:	460b      	mov	r3, r1
 8001164:	72fb      	strb	r3, [r7, #11]
 8001166:	4613      	mov	r3, r2
 8001168:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (_device->addr << 1);
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001170:	005b      	lsls	r3, r3, #1
 8001172:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(_device->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800117a:	7afb      	ldrb	r3, [r7, #11]
 800117c:	b29a      	uxth	r2, r3
 800117e:	7abb      	ldrb	r3, [r7, #10]
 8001180:	b29b      	uxth	r3, r3
 8001182:	8af9      	ldrh	r1, [r7, #22]
 8001184:	f241 3488 	movw	r4, #5000	@ 0x1388
 8001188:	9402      	str	r4, [sp, #8]
 800118a:	9301      	str	r3, [sp, #4]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	9300      	str	r3, [sp, #0]
 8001190:	2301      	movs	r3, #1
 8001192:	f002 f8bb 	bl	800330c <HAL_I2C_Mem_Read>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	bf0c      	ite	eq
 800119c:	2301      	moveq	r3, #1
 800119e:	2300      	movne	r3, #0
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <_ZN6BMP2809read_dataEhPhh+0x54>
		return 0;
 80011a6:	2300      	movs	r3, #0
 80011a8:	e000      	b.n	80011ac <_ZN6BMP2809read_dataEhPhh+0x56>
	else
		return 1;
 80011aa:	2301      	movs	r3, #1

}
 80011ac:	4618      	mov	r0, r3
 80011ae:	371c      	adds	r7, #28
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd90      	pop	{r4, r7, pc}

080011b4 <_ZN6BMP28021read_calibration_dataEv>:

bool BMP280::read_calibration_data() {
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]

	if (read_register16( 0x88, &_device->dig_T1)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	461a      	mov	r2, r3
 80011c2:	2188      	movs	r1, #136	@ 0x88
 80011c4:	6878      	ldr	r0, [r7, #4]
 80011c6:	f7ff ff90 	bl	80010ea <_ZN6BMP28015read_register16EhPt>
 80011ca:	4603      	mov	r3, r0
			&& read_register16(0x94, (uint16_t *) &_device->dig_P4)
			&& read_register16(0x96, (uint16_t *) &_device->dig_P5)
			&& read_register16(0x98, (uint16_t *) &_device->dig_P6)
			&& read_register16(0x9a, (uint16_t *) &_device->dig_P7)
			&& read_register16(0x9c, (uint16_t *) &_device->dig_P8)
			&& read_register16(0x9e, (uint16_t *) &_device->dig_P9)) {
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d07a      	beq.n	80012c6 <_ZN6BMP28021read_calibration_dataEv+0x112>
			&& read_register16(0x8a, (uint16_t *) &_device->dig_T2)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	3302      	adds	r3, #2
 80011d6:	461a      	mov	r2, r3
 80011d8:	218a      	movs	r1, #138	@ 0x8a
 80011da:	6878      	ldr	r0, [r7, #4]
 80011dc:	f7ff ff85 	bl	80010ea <_ZN6BMP28015read_register16EhPt>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d06f      	beq.n	80012c6 <_ZN6BMP28021read_calibration_dataEv+0x112>
			&& read_register16(0x8c, (uint16_t *) &_device->dig_T3)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	3304      	adds	r3, #4
 80011ec:	461a      	mov	r2, r3
 80011ee:	218c      	movs	r1, #140	@ 0x8c
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	f7ff ff7a 	bl	80010ea <_ZN6BMP28015read_register16EhPt>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d064      	beq.n	80012c6 <_ZN6BMP28021read_calibration_dataEv+0x112>
			&& read_register16(0x8e, &_device->dig_P1)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	3306      	adds	r3, #6
 8001202:	461a      	mov	r2, r3
 8001204:	218e      	movs	r1, #142	@ 0x8e
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f7ff ff6f 	bl	80010ea <_ZN6BMP28015read_register16EhPt>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d059      	beq.n	80012c6 <_ZN6BMP28021read_calibration_dataEv+0x112>
			&& read_register16(0x90, (uint16_t *) &_device->dig_P2)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	3308      	adds	r3, #8
 8001218:	461a      	mov	r2, r3
 800121a:	2190      	movs	r1, #144	@ 0x90
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	f7ff ff64 	bl	80010ea <_ZN6BMP28015read_register16EhPt>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d04e      	beq.n	80012c6 <_ZN6BMP28021read_calibration_dataEv+0x112>
			&& read_register16(0x92, (uint16_t *) &_device->dig_P3)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	330a      	adds	r3, #10
 800122e:	461a      	mov	r2, r3
 8001230:	2192      	movs	r1, #146	@ 0x92
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	f7ff ff59 	bl	80010ea <_ZN6BMP28015read_register16EhPt>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d043      	beq.n	80012c6 <_ZN6BMP28021read_calibration_dataEv+0x112>
			&& read_register16(0x94, (uint16_t *) &_device->dig_P4)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	330c      	adds	r3, #12
 8001244:	461a      	mov	r2, r3
 8001246:	2194      	movs	r1, #148	@ 0x94
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	f7ff ff4e 	bl	80010ea <_ZN6BMP28015read_register16EhPt>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d038      	beq.n	80012c6 <_ZN6BMP28021read_calibration_dataEv+0x112>
			&& read_register16(0x96, (uint16_t *) &_device->dig_P5)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	330e      	adds	r3, #14
 800125a:	461a      	mov	r2, r3
 800125c:	2196      	movs	r1, #150	@ 0x96
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f7ff ff43 	bl	80010ea <_ZN6BMP28015read_register16EhPt>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d02d      	beq.n	80012c6 <_ZN6BMP28021read_calibration_dataEv+0x112>
			&& read_register16(0x98, (uint16_t *) &_device->dig_P6)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	3310      	adds	r3, #16
 8001270:	461a      	mov	r2, r3
 8001272:	2198      	movs	r1, #152	@ 0x98
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f7ff ff38 	bl	80010ea <_ZN6BMP28015read_register16EhPt>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d022      	beq.n	80012c6 <_ZN6BMP28021read_calibration_dataEv+0x112>
			&& read_register16(0x9a, (uint16_t *) &_device->dig_P7)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	3312      	adds	r3, #18
 8001286:	461a      	mov	r2, r3
 8001288:	219a      	movs	r1, #154	@ 0x9a
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	f7ff ff2d 	bl	80010ea <_ZN6BMP28015read_register16EhPt>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d017      	beq.n	80012c6 <_ZN6BMP28021read_calibration_dataEv+0x112>
			&& read_register16(0x9c, (uint16_t *) &_device->dig_P8)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	3314      	adds	r3, #20
 800129c:	461a      	mov	r2, r3
 800129e:	219c      	movs	r1, #156	@ 0x9c
 80012a0:	6878      	ldr	r0, [r7, #4]
 80012a2:	f7ff ff22 	bl	80010ea <_ZN6BMP28015read_register16EhPt>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d00c      	beq.n	80012c6 <_ZN6BMP28021read_calibration_dataEv+0x112>
			&& read_register16(0x9e, (uint16_t *) &_device->dig_P9)) {
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	3316      	adds	r3, #22
 80012b2:	461a      	mov	r2, r3
 80012b4:	219e      	movs	r1, #158	@ 0x9e
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f7ff ff17 	bl	80010ea <_ZN6BMP28015read_register16EhPt>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <_ZN6BMP28021read_calibration_dataEv+0x112>
 80012c2:	2301      	movs	r3, #1
 80012c4:	e000      	b.n	80012c8 <_ZN6BMP28021read_calibration_dataEv+0x114>
 80012c6:	2300      	movs	r3, #0
	if (read_register16( 0x88, &_device->dig_T1)
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <_ZN6BMP28021read_calibration_dataEv+0x11c>

		return true;
 80012cc:	2301      	movs	r3, #1
 80012ce:	e000      	b.n	80012d2 <_ZN6BMP28021read_calibration_dataEv+0x11e>
	}

	return false;
 80012d0:	2300      	movs	r3, #0
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}

080012da <_ZN6BMP28025read_hum_calibration_dataEv>:

bool BMP280::read_hum_calibration_data() {
 80012da:	b580      	push	{r7, lr}
 80012dc:	b084      	sub	sp, #16
 80012de:	af00      	add	r7, sp, #0
 80012e0:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(0xa1, &_device->dig_H1, 1)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f103 0218 	add.w	r2, r3, #24
 80012ea:	2301      	movs	r3, #1
 80012ec:	21a1      	movs	r1, #161	@ 0xa1
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f7ff ff31 	bl	8001156 <_ZN6BMP2809read_dataEhPhh>
 80012f4:	4603      	mov	r3, r0
			&& read_register16(0xe1, (uint16_t *) &_device->dig_H2)
			&& !read_data(0xe3, &_device->dig_H3, 1)
			&& read_register16(0xe4, &h4)
			&& read_register16(0xe5, &h5)
			&& !read_data(0xe7, (uint8_t *) &_device->dig_H6, 1)) {
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d138      	bne.n	800136c <_ZN6BMP28025read_hum_calibration_dataEv+0x92>
			&& read_register16(0xe1, (uint16_t *) &_device->dig_H2)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	331a      	adds	r3, #26
 8001300:	461a      	mov	r2, r3
 8001302:	21e1      	movs	r1, #225	@ 0xe1
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f7ff fef0 	bl	80010ea <_ZN6BMP28015read_register16EhPt>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d02d      	beq.n	800136c <_ZN6BMP28025read_hum_calibration_dataEv+0x92>
			&& !read_data(0xe3, &_device->dig_H3, 1)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f103 021c 	add.w	r2, r3, #28
 8001318:	2301      	movs	r3, #1
 800131a:	21e3      	movs	r1, #227	@ 0xe3
 800131c:	6878      	ldr	r0, [r7, #4]
 800131e:	f7ff ff1a 	bl	8001156 <_ZN6BMP2809read_dataEhPhh>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d121      	bne.n	800136c <_ZN6BMP28025read_hum_calibration_dataEv+0x92>
			&& read_register16(0xe4, &h4)
 8001328:	f107 030e 	add.w	r3, r7, #14
 800132c:	461a      	mov	r2, r3
 800132e:	21e4      	movs	r1, #228	@ 0xe4
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	f7ff feda 	bl	80010ea <_ZN6BMP28015read_register16EhPt>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d017      	beq.n	800136c <_ZN6BMP28025read_hum_calibration_dataEv+0x92>
			&& read_register16(0xe5, &h5)
 800133c:	f107 030c 	add.w	r3, r7, #12
 8001340:	461a      	mov	r2, r3
 8001342:	21e5      	movs	r1, #229	@ 0xe5
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	f7ff fed0 	bl	80010ea <_ZN6BMP28015read_register16EhPt>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d00d      	beq.n	800136c <_ZN6BMP28025read_hum_calibration_dataEv+0x92>
			&& !read_data(0xe7, (uint8_t *) &_device->dig_H6, 1)) {
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f103 0222 	add.w	r2, r3, #34	@ 0x22
 8001358:	2301      	movs	r3, #1
 800135a:	21e7      	movs	r1, #231	@ 0xe7
 800135c:	6878      	ldr	r0, [r7, #4]
 800135e:	f7ff fefa 	bl	8001156 <_ZN6BMP2809read_dataEhPhh>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d101      	bne.n	800136c <_ZN6BMP28025read_hum_calibration_dataEv+0x92>
 8001368:	2301      	movs	r3, #1
 800136a:	e000      	b.n	800136e <_ZN6BMP28025read_hum_calibration_dataEv+0x94>
 800136c:	2300      	movs	r3, #0
	if (!read_data(0xa1, &_device->dig_H1, 1)
 800136e:	2b00      	cmp	r3, #0
 8001370:	d01a      	beq.n	80013a8 <_ZN6BMP28025read_hum_calibration_dataEv+0xce>
		_device->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 8001372:	89fb      	ldrh	r3, [r7, #14]
 8001374:	011b      	lsls	r3, r3, #4
 8001376:	b21b      	sxth	r3, r3
 8001378:	f403 637f 	and.w	r3, r3, #4080	@ 0xff0
 800137c:	b219      	sxth	r1, r3
 800137e:	89fb      	ldrh	r3, [r7, #14]
 8001380:	0a1b      	lsrs	r3, r3, #8
 8001382:	b29b      	uxth	r3, r3
 8001384:	b21b      	sxth	r3, r3
 8001386:	f003 030f 	and.w	r3, r3, #15
 800138a:	b21a      	sxth	r2, r3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	430a      	orrs	r2, r1
 8001392:	b212      	sxth	r2, r2
 8001394:	83da      	strh	r2, [r3, #30]
		_device->dig_H5 = h5 >> 4;
 8001396:	89bb      	ldrh	r3, [r7, #12]
 8001398:	091b      	lsrs	r3, r3, #4
 800139a:	b29a      	uxth	r2, r3
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	b212      	sxth	r2, r2
 80013a2:	841a      	strh	r2, [r3, #32]

		return true;
 80013a4:	2301      	movs	r3, #1
 80013a6:	e000      	b.n	80013aa <_ZN6BMP28025read_hum_calibration_dataEv+0xd0>
	}

	return false;
 80013a8:	2300      	movs	r3, #0
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3710      	adds	r7, #16
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <_ZN6BMP28015write_register8Ehh>:

int BMP280::write_register8(uint8_t addr, uint8_t value) {
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b088      	sub	sp, #32
 80013b6:	af04      	add	r7, sp, #16
 80013b8:	6078      	str	r0, [r7, #4]
 80013ba:	460b      	mov	r3, r1
 80013bc:	70fb      	strb	r3, [r7, #3]
 80013be:	4613      	mov	r3, r2
 80013c0:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (_device->addr << 1);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80013c8:	005b      	lsls	r3, r3, #1
 80013ca:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(_device->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80013d2:	78fb      	ldrb	r3, [r7, #3]
 80013d4:	b29a      	uxth	r2, r3
 80013d6:	89f9      	ldrh	r1, [r7, #14]
 80013d8:	f242 7310 	movw	r3, #10000	@ 0x2710
 80013dc:	9302      	str	r3, [sp, #8]
 80013de:	2301      	movs	r3, #1
 80013e0:	9301      	str	r3, [sp, #4]
 80013e2:	1cbb      	adds	r3, r7, #2
 80013e4:	9300      	str	r3, [sp, #0]
 80013e6:	2301      	movs	r3, #1
 80013e8:	f001 fe96 	bl	8003118 <HAL_I2C_Mem_Write>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	bf0c      	ite	eq
 80013f2:	2301      	moveq	r3, #1
 80013f4:	2300      	movne	r3, #0
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <_ZN6BMP28015write_register8Ehh+0x4e>
		return false;
 80013fc:	2300      	movs	r3, #0
 80013fe:	e000      	b.n	8001402 <_ZN6BMP28015write_register8Ehh+0x50>
	else
		return true;
 8001400:	2301      	movs	r3, #1
}
 8001402:	4618      	mov	r0, r3
 8001404:	3710      	adds	r7, #16
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}

0800140a <_ZN6BMP28011bmp280_initEv>:

bool BMP280::bmp280_init() {
 800140a:	b580      	push	{r7, lr}
 800140c:	b084      	sub	sp, #16
 800140e:	af00      	add	r7, sp, #0
 8001410:	6078      	str	r0, [r7, #4]

	if (_device->addr != BMP280_I2C_ADDRESS_0
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001418:	2b76      	cmp	r3, #118	@ 0x76
 800141a:	d006      	beq.n	800142a <_ZN6BMP28011bmp280_initEv+0x20>
			&& _device->addr != BMP280_I2C_ADDRESS_1) {
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001422:	2b77      	cmp	r3, #119	@ 0x77
 8001424:	d001      	beq.n	800142a <_ZN6BMP28011bmp280_initEv+0x20>

		return false;
 8001426:	2300      	movs	r3, #0
 8001428:	e0d1      	b.n	80015ce <_ZN6BMP28011bmp280_initEv+0x1c4>
	}

	if (read_data(BMP280_REG_ID, &_device->id, 1)) {
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8001432:	2301      	movs	r3, #1
 8001434:	21d0      	movs	r1, #208	@ 0xd0
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f7ff fe8d 	bl	8001156 <_ZN6BMP2809read_dataEhPhh>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	bf14      	ite	ne
 8001442:	2301      	movne	r3, #1
 8001444:	2300      	moveq	r3, #0
 8001446:	b2db      	uxtb	r3, r3
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <_ZN6BMP28011bmp280_initEv+0x46>
		return false;
 800144c:	2300      	movs	r3, #0
 800144e:	e0be      	b.n	80015ce <_ZN6BMP28011bmp280_initEv+0x1c4>
	}

	if (_device->id != BMP280_CHIP_ID && _device->id != BME280_CHIP_ID) {
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001458:	2b58      	cmp	r3, #88	@ 0x58
 800145a:	d007      	beq.n	800146c <_ZN6BMP28011bmp280_initEv+0x62>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001464:	2b60      	cmp	r3, #96	@ 0x60
 8001466:	d001      	beq.n	800146c <_ZN6BMP28011bmp280_initEv+0x62>

		return false;
 8001468:	2300      	movs	r3, #0
 800146a:	e0b0      	b.n	80015ce <_ZN6BMP28011bmp280_initEv+0x1c4>
	}

	// Soft reset.
	if (write_register8(BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 800146c:	22b6      	movs	r2, #182	@ 0xb6
 800146e:	21e0      	movs	r1, #224	@ 0xe0
 8001470:	6878      	ldr	r0, [r7, #4]
 8001472:	f7ff ff9e 	bl	80013b2 <_ZN6BMP28015write_register8Ehh>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	bf14      	ite	ne
 800147c:	2301      	movne	r3, #1
 800147e:	2300      	moveq	r3, #0
 8001480:	b2db      	uxtb	r3, r3
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <_ZN6BMP28011bmp280_initEv+0x80>
		return false;
 8001486:	2300      	movs	r3, #0
 8001488:	e0a1      	b.n	80015ce <_ZN6BMP28011bmp280_initEv+0x1c4>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(BMP280_REG_STATUS, &status, 1)
 800148a:	f107 020c 	add.w	r2, r7, #12
 800148e:	2301      	movs	r3, #1
 8001490:	21f3      	movs	r1, #243	@ 0xf3
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f7ff fe5f 	bl	8001156 <_ZN6BMP2809read_dataEhPhh>
 8001498:	4603      	mov	r3, r0
				&& (status & 1) == 0)
 800149a:	2b00      	cmp	r3, #0
 800149c:	d106      	bne.n	80014ac <_ZN6BMP28011bmp280_initEv+0xa2>
 800149e:	7b3b      	ldrb	r3, [r7, #12]
 80014a0:	f003 0301 	and.w	r3, r3, #1
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d101      	bne.n	80014ac <_ZN6BMP28011bmp280_initEv+0xa2>
 80014a8:	2301      	movs	r3, #1
 80014aa:	e000      	b.n	80014ae <_ZN6BMP28011bmp280_initEv+0xa4>
 80014ac:	2300      	movs	r3, #0
		if (!read_data(BMP280_REG_STATUS, &status, 1)
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d0eb      	beq.n	800148a <_ZN6BMP28011bmp280_initEv+0x80>
			break;
	}

	if (!read_calibration_data()) {
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f7ff fe7e 	bl	80011b4 <_ZN6BMP28021read_calibration_dataEv>
 80014b8:	4603      	mov	r3, r0
 80014ba:	f083 0301 	eor.w	r3, r3, #1
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d100      	bne.n	80014c6 <_ZN6BMP28011bmp280_initEv+0xbc>
 80014c4:	e001      	b.n	80014ca <_ZN6BMP28011bmp280_initEv+0xc0>
		return false;
 80014c6:	2300      	movs	r3, #0
 80014c8:	e081      	b.n	80015ce <_ZN6BMP28011bmp280_initEv+0x1c4>
	}

	if (_device->id == BME280_CHIP_ID && !read_hum_calibration_data()) {
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80014d2:	2b60      	cmp	r3, #96	@ 0x60
 80014d4:	d10a      	bne.n	80014ec <_ZN6BMP28011bmp280_initEv+0xe2>
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	f7ff feff 	bl	80012da <_ZN6BMP28025read_hum_calibration_dataEv>
 80014dc:	4603      	mov	r3, r0
 80014de:	f083 0301 	eor.w	r3, r3, #1
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <_ZN6BMP28011bmp280_initEv+0xe2>
 80014e8:	2301      	movs	r3, #1
 80014ea:	e000      	b.n	80014ee <_ZN6BMP28011bmp280_initEv+0xe4>
 80014ec:	2300      	movs	r3, #0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <_ZN6BMP28011bmp280_initEv+0xec>
		return false;
 80014f2:	2300      	movs	r3, #0
 80014f4:	e06b      	b.n	80015ce <_ZN6BMP28011bmp280_initEv+0x1c4>
	}

	uint8_t config = (_device->params.standby << 5) | (_device->params.filter << 2);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80014fe:	015b      	lsls	r3, r3, #5
 8001500:	b25a      	sxtb	r2, r3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	b25b      	sxtb	r3, r3
 800150e:	4313      	orrs	r3, r2
 8001510:	b25b      	sxtb	r3, r3
 8001512:	73fb      	strb	r3, [r7, #15]
	if (write_register8(BMP280_REG_CONFIG, config)) {
 8001514:	7bfb      	ldrb	r3, [r7, #15]
 8001516:	461a      	mov	r2, r3
 8001518:	21f5      	movs	r1, #245	@ 0xf5
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f7ff ff49 	bl	80013b2 <_ZN6BMP28015write_register8Ehh>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	bf14      	ite	ne
 8001526:	2301      	movne	r3, #1
 8001528:	2300      	moveq	r3, #0
 800152a:	b2db      	uxtb	r3, r3
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <_ZN6BMP28011bmp280_initEv+0x12a>
		return false;
 8001530:	2300      	movs	r3, #0
 8001532:	e04c      	b.n	80015ce <_ZN6BMP28011bmp280_initEv+0x1c4>
	}

	if (_device->params.mode == BMP280_MODE_FORCED) {
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800153c:	2b01      	cmp	r3, #1
 800153e:	d104      	bne.n	800154a <_ZN6BMP28011bmp280_initEv+0x140>
		_device->params.mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	2200      	movs	r2, #0
 8001546:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
	}

	uint8_t ctrl = (_device->params.oversampling_temperature << 5)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8001552:	015b      	lsls	r3, r3, #5
			| (_device->params.oversampling_pressure << 2) | (_device->params.mode);
 8001554:	b25a      	sxtb	r2, r3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	b25b      	sxtb	r3, r3
 8001562:	4313      	orrs	r3, r2
 8001564:	b25a      	sxtb	r2, r3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800156e:	b25b      	sxtb	r3, r3
 8001570:	4313      	orrs	r3, r2
 8001572:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (_device->params.oversampling_temperature << 5)
 8001574:	73bb      	strb	r3, [r7, #14]

	if (_device->id == BME280_CHIP_ID) {
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800157e:	2b60      	cmp	r3, #96	@ 0x60
 8001580:	d114      	bne.n	80015ac <_ZN6BMP28011bmp280_initEv+0x1a2>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = _device->params.oversampling_humidity;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800158a:	737b      	strb	r3, [r7, #13]
		if (write_register8(BMP280_REG_CTRL_HUM, ctrl_hum)) {
 800158c:	7b7b      	ldrb	r3, [r7, #13]
 800158e:	461a      	mov	r2, r3
 8001590:	21f2      	movs	r1, #242	@ 0xf2
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f7ff ff0d 	bl	80013b2 <_ZN6BMP28015write_register8Ehh>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	bf14      	ite	ne
 800159e:	2301      	movne	r3, #1
 80015a0:	2300      	moveq	r3, #0
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <_ZN6BMP28011bmp280_initEv+0x1a2>
			return false;
 80015a8:	2300      	movs	r3, #0
 80015aa:	e010      	b.n	80015ce <_ZN6BMP28011bmp280_initEv+0x1c4>
		}
	}

	if (write_register8(BMP280_REG_CTRL, ctrl)) {
 80015ac:	7bbb      	ldrb	r3, [r7, #14]
 80015ae:	461a      	mov	r2, r3
 80015b0:	21f4      	movs	r1, #244	@ 0xf4
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f7ff fefd 	bl	80013b2 <_ZN6BMP28015write_register8Ehh>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	bf14      	ite	ne
 80015be:	2301      	movne	r3, #1
 80015c0:	2300      	moveq	r3, #0
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <_ZN6BMP28011bmp280_initEv+0x1c2>
		return false;
 80015c8:	2300      	movs	r3, #0
 80015ca:	e000      	b.n	80015ce <_ZN6BMP28011bmp280_initEv+0x1c4>
	}

	return true;
 80015cc:	2301      	movs	r3, #1
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3710      	adds	r7, #16
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}

080015d6 <_ZN6BMP28022compensate_temperatureElPl>:
/**
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
inline int32_t BMP280::compensate_temperature(int32_t adc_temp, int32_t *fine_temp) {
 80015d6:	b480      	push	{r7}
 80015d8:	b087      	sub	sp, #28
 80015da:	af00      	add	r7, sp, #0
 80015dc:	60f8      	str	r0, [r7, #12]
 80015de:	60b9      	str	r1, [r7, #8]
 80015e0:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) _device->dig_T1 << 1)))
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	10da      	asrs	r2, r3, #3
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	881b      	ldrh	r3, [r3, #0]
 80015ec:	005b      	lsls	r3, r3, #1
 80015ee:	1ad3      	subs	r3, r2, r3
			* (int32_t) _device->dig_T2) >> 11;
 80015f0:	68fa      	ldr	r2, [r7, #12]
 80015f2:	6812      	ldr	r2, [r2, #0]
 80015f4:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80015f8:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) _device->dig_T1 << 1)))
 80015fc:	12db      	asrs	r3, r3, #11
 80015fe:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) _device->dig_T1)
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	111b      	asrs	r3, r3, #4
 8001604:	68fa      	ldr	r2, [r7, #12]
 8001606:	6812      	ldr	r2, [r2, #0]
 8001608:	8812      	ldrh	r2, [r2, #0]
 800160a:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) _device->dig_T1)) >> 12)
 800160c:	68ba      	ldr	r2, [r7, #8]
 800160e:	1112      	asrs	r2, r2, #4
 8001610:	68f9      	ldr	r1, [r7, #12]
 8001612:	6809      	ldr	r1, [r1, #0]
 8001614:	8809      	ldrh	r1, [r1, #0]
 8001616:	1a52      	subs	r2, r2, r1
 8001618:	fb02 f303 	mul.w	r3, r2, r3
 800161c:	131b      	asrs	r3, r3, #12
			* (int32_t) _device->dig_T3) >> 14;
 800161e:	68fa      	ldr	r2, [r7, #12]
 8001620:	6812      	ldr	r2, [r2, #0]
 8001622:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8001626:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) _device->dig_T1)
 800162a:	139b      	asrs	r3, r3, #14
 800162c:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 800162e:	697a      	ldr	r2, [r7, #20]
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	441a      	add	r2, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	4613      	mov	r3, r2
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	4413      	add	r3, r2
 8001642:	3380      	adds	r3, #128	@ 0x80
 8001644:	121b      	asrs	r3, r3, #8
}
 8001646:	4618      	mov	r0, r3
 8001648:	371c      	adds	r7, #28
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr

08001652 <_ZN6BMP28019compensate_pressureEll>:
/**
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
inline uint32_t BMP280::compensate_pressure(int32_t adc_press, int32_t fine_temp) {
 8001652:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001656:	b0cc      	sub	sp, #304	@ 0x130
 8001658:	af00      	add	r7, sp, #0
 800165a:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
 800165e:	f8c7 1110 	str.w	r1, [r7, #272]	@ 0x110
 8001662:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 8001666:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800166a:	17da      	asrs	r2, r3, #31
 800166c:	461c      	mov	r4, r3
 800166e:	4615      	mov	r5, r2
 8001670:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 8001674:	f145 3bff 	adc.w	fp, r5, #4294967295
 8001678:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	@ 0x128
	var2 = var1 * var1 * (int64_t) _device->dig_P6;
 800167c:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8001680:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001684:	fb03 f102 	mul.w	r1, r3, r2
 8001688:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 800168c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001690:	fb02 f303 	mul.w	r3, r2, r3
 8001694:	18ca      	adds	r2, r1, r3
 8001696:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800169a:	fba3 8903 	umull	r8, r9, r3, r3
 800169e:	eb02 0309 	add.w	r3, r2, r9
 80016a2:	4699      	mov	r9, r3
 80016a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80016ae:	b21b      	sxth	r3, r3
 80016b0:	17da      	asrs	r2, r3, #31
 80016b2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80016b6:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80016ba:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 80016be:	4603      	mov	r3, r0
 80016c0:	fb03 f209 	mul.w	r2, r3, r9
 80016c4:	460b      	mov	r3, r1
 80016c6:	fb08 f303 	mul.w	r3, r8, r3
 80016ca:	4413      	add	r3, r2
 80016cc:	4602      	mov	r2, r0
 80016ce:	fba8 1202 	umull	r1, r2, r8, r2
 80016d2:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80016d6:	460a      	mov	r2, r1
 80016d8:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 80016dc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80016e0:	4413      	add	r3, r2
 80016e2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80016e6:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 80016ea:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
 80016ee:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var2 = var2 + ((var1 * (int64_t) _device->dig_P5) << 17);
 80016f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80016fc:	b21b      	sxth	r3, r3
 80016fe:	17da      	asrs	r2, r3, #31
 8001700:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001704:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8001708:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800170c:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 8001710:	462a      	mov	r2, r5
 8001712:	fb02 f203 	mul.w	r2, r2, r3
 8001716:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800171a:	4621      	mov	r1, r4
 800171c:	fb01 f303 	mul.w	r3, r1, r3
 8001720:	441a      	add	r2, r3
 8001722:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001726:	4621      	mov	r1, r4
 8001728:	fba3 1301 	umull	r1, r3, r3, r1
 800172c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001730:	460b      	mov	r3, r1
 8001732:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8001736:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800173a:	18d3      	adds	r3, r2, r3
 800173c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001740:	f04f 0000 	mov.w	r0, #0
 8001744:	f04f 0100 	mov.w	r1, #0
 8001748:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 800174c:	462b      	mov	r3, r5
 800174e:	0459      	lsls	r1, r3, #17
 8001750:	4623      	mov	r3, r4
 8001752:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8001756:	4623      	mov	r3, r4
 8001758:	0458      	lsls	r0, r3, #17
 800175a:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 800175e:	1814      	adds	r4, r2, r0
 8001760:	643c      	str	r4, [r7, #64]	@ 0x40
 8001762:	414b      	adcs	r3, r1
 8001764:	647b      	str	r3, [r7, #68]	@ 0x44
 8001766:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 800176a:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var2 = var2 + (((int64_t) _device->dig_P4) << 35);
 800176e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001778:	b21b      	sxth	r3, r3
 800177a:	17da      	asrs	r2, r3, #31
 800177c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001780:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001784:	f04f 0000 	mov.w	r0, #0
 8001788:	f04f 0100 	mov.w	r1, #0
 800178c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001790:	00d9      	lsls	r1, r3, #3
 8001792:	2000      	movs	r0, #0
 8001794:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001798:	1814      	adds	r4, r2, r0
 800179a:	63bc      	str	r4, [r7, #56]	@ 0x38
 800179c:	414b      	adcs	r3, r1
 800179e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80017a0:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 80017a4:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = ((var1 * var1 * (int64_t) _device->dig_P3) >> 8)
 80017a8:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 80017ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80017b0:	fb03 f102 	mul.w	r1, r3, r2
 80017b4:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 80017b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80017bc:	fb02 f303 	mul.w	r3, r2, r3
 80017c0:	18ca      	adds	r2, r1, r3
 80017c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80017c6:	fba3 1303 	umull	r1, r3, r3, r3
 80017ca:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80017ce:	460b      	mov	r3, r1
 80017d0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80017d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80017d8:	18d3      	adds	r3, r2, r3
 80017da:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80017de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80017e8:	b21b      	sxth	r3, r3
 80017ea:	17da      	asrs	r2, r3, #31
 80017ec:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80017f0:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80017f4:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 80017f8:	462b      	mov	r3, r5
 80017fa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80017fe:	4642      	mov	r2, r8
 8001800:	fb02 f203 	mul.w	r2, r2, r3
 8001804:	464b      	mov	r3, r9
 8001806:	4621      	mov	r1, r4
 8001808:	fb01 f303 	mul.w	r3, r1, r3
 800180c:	4413      	add	r3, r2
 800180e:	4622      	mov	r2, r4
 8001810:	4641      	mov	r1, r8
 8001812:	fba2 1201 	umull	r1, r2, r2, r1
 8001816:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 800181a:	460a      	mov	r2, r1
 800181c:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 8001820:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8001824:	4413      	add	r3, r2
 8001826:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800182a:	f04f 0000 	mov.w	r0, #0
 800182e:	f04f 0100 	mov.w	r1, #0
 8001832:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8001836:	4623      	mov	r3, r4
 8001838:	0a18      	lsrs	r0, r3, #8
 800183a:	462b      	mov	r3, r5
 800183c:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001840:	462b      	mov	r3, r5
 8001842:	1219      	asrs	r1, r3, #8
			+ ((var1 * (int64_t) _device->dig_P2) << 12);
 8001844:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800184e:	b21b      	sxth	r3, r3
 8001850:	17da      	asrs	r2, r3, #31
 8001852:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001856:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800185a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800185e:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 8001862:	464a      	mov	r2, r9
 8001864:	fb02 f203 	mul.w	r2, r2, r3
 8001868:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800186c:	4644      	mov	r4, r8
 800186e:	fb04 f303 	mul.w	r3, r4, r3
 8001872:	441a      	add	r2, r3
 8001874:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001878:	4644      	mov	r4, r8
 800187a:	fba3 4304 	umull	r4, r3, r3, r4
 800187e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001882:	4623      	mov	r3, r4
 8001884:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001888:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800188c:	18d3      	adds	r3, r2, r3
 800188e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001892:	f04f 0200 	mov.w	r2, #0
 8001896:	f04f 0300 	mov.w	r3, #0
 800189a:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 800189e:	464c      	mov	r4, r9
 80018a0:	0323      	lsls	r3, r4, #12
 80018a2:	4644      	mov	r4, r8
 80018a4:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 80018a8:	4644      	mov	r4, r8
 80018aa:	0322      	lsls	r2, r4, #12
	var1 = ((var1 * var1 * (int64_t) _device->dig_P3) >> 8)
 80018ac:	1884      	adds	r4, r0, r2
 80018ae:	633c      	str	r4, [r7, #48]	@ 0x30
 80018b0:	eb41 0303 	adc.w	r3, r1, r3
 80018b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80018b6:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 80018ba:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) _device->dig_P1) >> 33;
 80018be:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 80018c2:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 80018c6:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 80018ca:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 80018ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	88db      	ldrh	r3, [r3, #6]
 80018d6:	b29b      	uxth	r3, r3
 80018d8:	2200      	movs	r2, #0
 80018da:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80018de:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80018e2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80018e6:	462b      	mov	r3, r5
 80018e8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80018ec:	4642      	mov	r2, r8
 80018ee:	fb02 f203 	mul.w	r2, r2, r3
 80018f2:	464b      	mov	r3, r9
 80018f4:	4621      	mov	r1, r4
 80018f6:	fb01 f303 	mul.w	r3, r1, r3
 80018fa:	4413      	add	r3, r2
 80018fc:	4622      	mov	r2, r4
 80018fe:	4641      	mov	r1, r8
 8001900:	fba2 1201 	umull	r1, r2, r2, r1
 8001904:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8001908:	460a      	mov	r2, r1
 800190a:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 800190e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8001912:	4413      	add	r3, r2
 8001914:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001918:	f04f 0200 	mov.w	r2, #0
 800191c:	f04f 0300 	mov.w	r3, #0
 8001920:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8001924:	4629      	mov	r1, r5
 8001926:	104a      	asrs	r2, r1, #1
 8001928:	4629      	mov	r1, r5
 800192a:	17cb      	asrs	r3, r1, #31
 800192c:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128

	if (var1 == 0) {
 8001930:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8001934:	4313      	orrs	r3, r2
 8001936:	d101      	bne.n	800193c <_ZN6BMP28019compensate_pressureEll+0x2ea>
		return 0;  // avoid exception caused by division by zero
 8001938:	2300      	movs	r3, #0
 800193a:	e14b      	b.n	8001bd4 <_ZN6BMP28019compensate_pressureEll+0x582>
	}

	p = 1048576 - adc_press;
 800193c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001940:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8001944:	17da      	asrs	r2, r3, #31
 8001946:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001948:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800194a:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 800194e:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	p = (((p << 31) - var2) * 3125) / var1;
 8001952:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001956:	105b      	asrs	r3, r3, #1
 8001958:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800195c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001960:	07db      	lsls	r3, r3, #31
 8001962:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001966:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 800196a:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 800196e:	4621      	mov	r1, r4
 8001970:	1a89      	subs	r1, r1, r2
 8001972:	67b9      	str	r1, [r7, #120]	@ 0x78
 8001974:	4629      	mov	r1, r5
 8001976:	eb61 0303 	sbc.w	r3, r1, r3
 800197a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800197c:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001980:	4622      	mov	r2, r4
 8001982:	462b      	mov	r3, r5
 8001984:	1891      	adds	r1, r2, r2
 8001986:	6239      	str	r1, [r7, #32]
 8001988:	415b      	adcs	r3, r3
 800198a:	627b      	str	r3, [r7, #36]	@ 0x24
 800198c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001990:	4621      	mov	r1, r4
 8001992:	1851      	adds	r1, r2, r1
 8001994:	61b9      	str	r1, [r7, #24]
 8001996:	4629      	mov	r1, r5
 8001998:	414b      	adcs	r3, r1
 800199a:	61fb      	str	r3, [r7, #28]
 800199c:	f04f 0200 	mov.w	r2, #0
 80019a0:	f04f 0300 	mov.w	r3, #0
 80019a4:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80019a8:	4649      	mov	r1, r9
 80019aa:	018b      	lsls	r3, r1, #6
 80019ac:	4641      	mov	r1, r8
 80019ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019b2:	4641      	mov	r1, r8
 80019b4:	018a      	lsls	r2, r1, #6
 80019b6:	4641      	mov	r1, r8
 80019b8:	1889      	adds	r1, r1, r2
 80019ba:	6139      	str	r1, [r7, #16]
 80019bc:	4649      	mov	r1, r9
 80019be:	eb43 0101 	adc.w	r1, r3, r1
 80019c2:	6179      	str	r1, [r7, #20]
 80019c4:	f04f 0200 	mov.w	r2, #0
 80019c8:	f04f 0300 	mov.w	r3, #0
 80019cc:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80019d0:	4649      	mov	r1, r9
 80019d2:	008b      	lsls	r3, r1, #2
 80019d4:	4641      	mov	r1, r8
 80019d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80019da:	4641      	mov	r1, r8
 80019dc:	008a      	lsls	r2, r1, #2
 80019de:	4610      	mov	r0, r2
 80019e0:	4619      	mov	r1, r3
 80019e2:	4603      	mov	r3, r0
 80019e4:	4622      	mov	r2, r4
 80019e6:	189b      	adds	r3, r3, r2
 80019e8:	60bb      	str	r3, [r7, #8]
 80019ea:	460b      	mov	r3, r1
 80019ec:	462a      	mov	r2, r5
 80019ee:	eb42 0303 	adc.w	r3, r2, r3
 80019f2:	60fb      	str	r3, [r7, #12]
 80019f4:	f04f 0200 	mov.w	r2, #0
 80019f8:	f04f 0300 	mov.w	r3, #0
 80019fc:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001a00:	4649      	mov	r1, r9
 8001a02:	008b      	lsls	r3, r1, #2
 8001a04:	4641      	mov	r1, r8
 8001a06:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001a0a:	4641      	mov	r1, r8
 8001a0c:	008a      	lsls	r2, r1, #2
 8001a0e:	4610      	mov	r0, r2
 8001a10:	4619      	mov	r1, r3
 8001a12:	4603      	mov	r3, r0
 8001a14:	4622      	mov	r2, r4
 8001a16:	189b      	adds	r3, r3, r2
 8001a18:	673b      	str	r3, [r7, #112]	@ 0x70
 8001a1a:	462b      	mov	r3, r5
 8001a1c:	460a      	mov	r2, r1
 8001a1e:	eb42 0303 	adc.w	r3, r2, r3
 8001a22:	677b      	str	r3, [r7, #116]	@ 0x74
 8001a24:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8001a28:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001a2c:	f7fe fbd4 	bl	80001d8 <__aeabi_ldivmod>
 8001a30:	4602      	mov	r2, r0
 8001a32:	460b      	mov	r3, r1
 8001a34:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	var1 = ((int64_t) _device->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 8001a38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001a42:	b21b      	sxth	r3, r3
 8001a44:	17da      	asrs	r2, r3, #31
 8001a46:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001a48:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001a4a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001a4e:	f04f 0000 	mov.w	r0, #0
 8001a52:	f04f 0100 	mov.w	r1, #0
 8001a56:	0b50      	lsrs	r0, r2, #13
 8001a58:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001a5c:	1359      	asrs	r1, r3, #13
 8001a5e:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8001a62:	462b      	mov	r3, r5
 8001a64:	fb00 f203 	mul.w	r2, r0, r3
 8001a68:	4623      	mov	r3, r4
 8001a6a:	fb03 f301 	mul.w	r3, r3, r1
 8001a6e:	4413      	add	r3, r2
 8001a70:	4622      	mov	r2, r4
 8001a72:	fba2 1200 	umull	r1, r2, r2, r0
 8001a76:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001a7a:	460a      	mov	r2, r1
 8001a7c:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8001a80:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8001a84:	4413      	add	r3, r2
 8001a86:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8001a8a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001a8e:	f04f 0000 	mov.w	r0, #0
 8001a92:	f04f 0100 	mov.w	r1, #0
 8001a96:	0b50      	lsrs	r0, r2, #13
 8001a98:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001a9c:	1359      	asrs	r1, r3, #13
 8001a9e:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8001aa2:	462b      	mov	r3, r5
 8001aa4:	fb00 f203 	mul.w	r2, r0, r3
 8001aa8:	4623      	mov	r3, r4
 8001aaa:	fb03 f301 	mul.w	r3, r3, r1
 8001aae:	4413      	add	r3, r2
 8001ab0:	4622      	mov	r2, r4
 8001ab2:	fba2 1200 	umull	r1, r2, r2, r0
 8001ab6:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001aba:	460a      	mov	r2, r1
 8001abc:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8001ac0:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8001ac4:	4413      	add	r3, r2
 8001ac6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8001aca:	f04f 0200 	mov.w	r2, #0
 8001ace:	f04f 0300 	mov.w	r3, #0
 8001ad2:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8001ad6:	4621      	mov	r1, r4
 8001ad8:	0e4a      	lsrs	r2, r1, #25
 8001ada:	4629      	mov	r1, r5
 8001adc:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8001ae0:	4629      	mov	r1, r5
 8001ae2:	164b      	asrs	r3, r1, #25
 8001ae4:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128
	var2 = ((int64_t) _device->dig_P8 * p) >> 19;
 8001ae8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001af2:	b21b      	sxth	r3, r3
 8001af4:	17da      	asrs	r2, r3, #31
 8001af6:	663b      	str	r3, [r7, #96]	@ 0x60
 8001af8:	667a      	str	r2, [r7, #100]	@ 0x64
 8001afa:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001afe:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001b02:	462a      	mov	r2, r5
 8001b04:	fb02 f203 	mul.w	r2, r2, r3
 8001b08:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001b0c:	4621      	mov	r1, r4
 8001b0e:	fb01 f303 	mul.w	r3, r1, r3
 8001b12:	4413      	add	r3, r2
 8001b14:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001b18:	4621      	mov	r1, r4
 8001b1a:	fba2 1201 	umull	r1, r2, r2, r1
 8001b1e:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8001b22:	460a      	mov	r2, r1
 8001b24:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8001b28:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8001b2c:	4413      	add	r3, r2
 8001b2e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001b32:	f04f 0200 	mov.w	r2, #0
 8001b36:	f04f 0300 	mov.w	r3, #0
 8001b3a:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8001b3e:	4621      	mov	r1, r4
 8001b40:	0cca      	lsrs	r2, r1, #19
 8001b42:	4629      	mov	r1, r5
 8001b44:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001b48:	4629      	mov	r1, r5
 8001b4a:	14cb      	asrs	r3, r1, #19
 8001b4c:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120

	p = ((p + var1 + var2) >> 8) + ((int64_t) _device->dig_P7 << 4);
 8001b50:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 8001b54:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8001b58:	1884      	adds	r4, r0, r2
 8001b5a:	65bc      	str	r4, [r7, #88]	@ 0x58
 8001b5c:	eb41 0303 	adc.w	r3, r1, r3
 8001b60:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001b62:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001b66:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8001b6a:	4621      	mov	r1, r4
 8001b6c:	1889      	adds	r1, r1, r2
 8001b6e:	6539      	str	r1, [r7, #80]	@ 0x50
 8001b70:	4629      	mov	r1, r5
 8001b72:	eb43 0101 	adc.w	r1, r3, r1
 8001b76:	6579      	str	r1, [r7, #84]	@ 0x54
 8001b78:	f04f 0000 	mov.w	r0, #0
 8001b7c:	f04f 0100 	mov.w	r1, #0
 8001b80:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8001b84:	4623      	mov	r3, r4
 8001b86:	0a18      	lsrs	r0, r3, #8
 8001b88:	462b      	mov	r3, r5
 8001b8a:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001b8e:	462b      	mov	r3, r5
 8001b90:	1219      	asrs	r1, r3, #8
 8001b92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001b9c:	b21b      	sxth	r3, r3
 8001b9e:	17da      	asrs	r2, r3, #31
 8001ba0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001ba2:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001ba4:	f04f 0200 	mov.w	r2, #0
 8001ba8:	f04f 0300 	mov.w	r3, #0
 8001bac:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 8001bb0:	464c      	mov	r4, r9
 8001bb2:	0123      	lsls	r3, r4, #4
 8001bb4:	4644      	mov	r4, r8
 8001bb6:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001bba:	4644      	mov	r4, r8
 8001bbc:	0122      	lsls	r2, r4, #4
 8001bbe:	1884      	adds	r4, r0, r2
 8001bc0:	603c      	str	r4, [r7, #0]
 8001bc2:	eb41 0303 	adc.w	r3, r1, r3
 8001bc6:	607b      	str	r3, [r7, #4]
 8001bc8:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001bcc:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	return p;
 8001bd0:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001be0 <_ZN6BMP28019compensate_humidityEll>:
/**
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
inline uint32_t BMP280::compensate_humidity(int32_t adc_hum, int32_t fine_temp) {
 8001be0:	b480      	push	{r7}
 8001be2:	b087      	sub	sp, #28
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	60f8      	str	r0, [r7, #12]
 8001be8:	60b9      	str	r1, [r7, #8]
 8001bea:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 8001bf2:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) _device->dig_H4 << 20)
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	039a      	lsls	r2, r3, #14
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001c00:	051b      	lsls	r3, r3, #20
 8001c02:	1ad2      	subs	r2, r2, r3
			- ((int32_t) _device->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	fb01 f303 	mul.w	r3, r1, r3
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001c1a:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) _device->dig_H6) >> 10)
 8001c1c:	68fa      	ldr	r2, [r7, #12]
 8001c1e:	6812      	ldr	r2, [r2, #0]
 8001c20:	f992 2022 	ldrsb.w	r2, [r2, #34]	@ 0x22
 8001c24:	4611      	mov	r1, r2
 8001c26:	697a      	ldr	r2, [r7, #20]
 8001c28:	fb01 f202 	mul.w	r2, r1, r2
 8001c2c:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) _device->dig_H3) >> 11)
 8001c2e:	68f9      	ldr	r1, [r7, #12]
 8001c30:	6809      	ldr	r1, [r1, #0]
 8001c32:	7f09      	ldrb	r1, [r1, #28]
 8001c34:	4608      	mov	r0, r1
 8001c36:	6979      	ldr	r1, [r7, #20]
 8001c38:	fb00 f101 	mul.w	r1, r0, r1
 8001c3c:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001c3e:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
					* (((v_x1_u32r * (int32_t) _device->dig_H3) >> 11)
 8001c42:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001c46:	1292      	asrs	r2, r2, #10
 8001c48:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
					* (int32_t) _device->dig_H2 + 8192) >> 14);
 8001c4c:	68f9      	ldr	r1, [r7, #12]
 8001c4e:	6809      	ldr	r1, [r1, #0]
 8001c50:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 8001c54:	fb01 f202 	mul.w	r2, r1, r2
 8001c58:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8001c5c:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) _device->dig_H4 << 20)
 8001c5e:	fb02 f303 	mul.w	r3, r2, r3
 8001c62:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	13db      	asrs	r3, r3, #15
 8001c68:	697a      	ldr	r2, [r7, #20]
 8001c6a:	13d2      	asrs	r2, r2, #15
 8001c6c:	fb02 f303 	mul.w	r3, r2, r3
 8001c70:	11db      	asrs	r3, r3, #7
					* (int32_t) _device->dig_H1) >> 4);
 8001c72:	68fa      	ldr	r2, [r7, #12]
 8001c74:	6812      	ldr	r2, [r2, #0]
 8001c76:	7e12      	ldrb	r2, [r2, #24]
 8001c78:	fb02 f303 	mul.w	r3, r2, r3
 8001c7c:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 8001c7e:	697a      	ldr	r2, [r7, #20]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001c8a:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 8001c92:	bfa8      	it	ge
 8001c94:	f04f 53c8 	movge.w	r3, #419430400	@ 0x19000000
 8001c98:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	131b      	asrs	r3, r3, #12
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	371c      	adds	r7, #28
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr

08001caa <_ZN6BMP28017bmp280_read_fixedEPlPmS1_>:

bool BMP280::bmp280_read_fixed(int32_t *temperature, uint32_t *pressure, uint32_t *humidity) {
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b08c      	sub	sp, #48	@ 0x30
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	60f8      	str	r0, [r7, #12]
 8001cb2:	60b9      	str	r1, [r7, #8]
 8001cb4:	607a      	str	r2, [r7, #4]
 8001cb6:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (_device->id != BME280_CHIP_ID) {
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001cc0:	2b60      	cmp	r3, #96	@ 0x60
 8001cc2:	d007      	beq.n	8001cd4 <_ZN6BMP28017bmp280_read_fixedEPlPmS1_+0x2a>
		if (humidity)
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d002      	beq.n	8001cd0 <_ZN6BMP28017bmp280_read_fixedEPlPmS1_+0x26>
			*humidity = 0;
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <_ZN6BMP28017bmp280_read_fixedEPlPmS1_+0x34>
 8001cda:	2308      	movs	r3, #8
 8001cdc:	e000      	b.n	8001ce0 <_ZN6BMP28017bmp280_read_fixedEPlPmS1_+0x36>
 8001cde:	2306      	movs	r3, #6
 8001ce0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (read_data(0xf7, data, size)) {
 8001ce2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	f107 0218 	add.w	r2, r7, #24
 8001cea:	21f7      	movs	r1, #247	@ 0xf7
 8001cec:	68f8      	ldr	r0, [r7, #12]
 8001cee:	f7ff fa32 	bl	8001156 <_ZN6BMP2809read_dataEhPhh>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	bf14      	ite	ne
 8001cf8:	2301      	movne	r3, #1
 8001cfa:	2300      	moveq	r3, #0
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <_ZN6BMP28017bmp280_read_fixedEPlPmS1_+0x5c>
		return false;
 8001d02:	2300      	movs	r3, #0
 8001d04:	e038      	b.n	8001d78 <_ZN6BMP28017bmp280_read_fixedEPlPmS1_+0xce>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8001d06:	7e3b      	ldrb	r3, [r7, #24]
 8001d08:	031a      	lsls	r2, r3, #12
 8001d0a:	7e7b      	ldrb	r3, [r7, #25]
 8001d0c:	011b      	lsls	r3, r3, #4
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	7eba      	ldrb	r2, [r7, #26]
 8001d12:	0912      	lsrs	r2, r2, #4
 8001d14:	b2d2      	uxtb	r2, r2
 8001d16:	4313      	orrs	r3, r2
 8001d18:	62bb      	str	r3, [r7, #40]	@ 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 8001d1a:	7efb      	ldrb	r3, [r7, #27]
 8001d1c:	031a      	lsls	r2, r3, #12
 8001d1e:	7f3b      	ldrb	r3, [r7, #28]
 8001d20:	011b      	lsls	r3, r3, #4
 8001d22:	4313      	orrs	r3, r2
 8001d24:	7f7a      	ldrb	r2, [r7, #29]
 8001d26:	0912      	lsrs	r2, r2, #4
 8001d28:	b2d2      	uxtb	r2, r2
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	627b      	str	r3, [r7, #36]	@ 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(adc_temp, &fine_temp);
 8001d2e:	f107 0314 	add.w	r3, r7, #20
 8001d32:	461a      	mov	r2, r3
 8001d34:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001d36:	68f8      	ldr	r0, [r7, #12]
 8001d38:	f7ff fc4d 	bl	80015d6 <_ZN6BMP28022compensate_temperatureElPl>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(adc_pressure, fine_temp);
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	461a      	mov	r2, r3
 8001d46:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001d48:	68f8      	ldr	r0, [r7, #12]
 8001d4a:	f7ff fc82 	bl	8001652 <_ZN6BMP28019compensate_pressureEll>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	601a      	str	r2, [r3, #0]

	if (humidity) {
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d00d      	beq.n	8001d76 <_ZN6BMP28017bmp280_read_fixedEPlPmS1_+0xcc>
		int32_t adc_humidity = data[6] << 8 | data[7];
 8001d5a:	7fbb      	ldrb	r3, [r7, #30]
 8001d5c:	021b      	lsls	r3, r3, #8
 8001d5e:	7ffa      	ldrb	r2, [r7, #31]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(adc_humidity, fine_temp);
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	461a      	mov	r2, r3
 8001d68:	6a39      	ldr	r1, [r7, #32]
 8001d6a:	68f8      	ldr	r0, [r7, #12]
 8001d6c:	f7ff ff38 	bl	8001be0 <_ZN6BMP28019compensate_humidityEll>
 8001d70:	4602      	mov	r2, r0
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	601a      	str	r2, [r3, #0]
	}

	return true;
 8001d76:	2301      	movs	r3, #1
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3730      	adds	r7, #48	@ 0x30
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}

08001d80 <_ZN6BMP28017bmp280_read_floatEPfS0_S0_>:

bool BMP280::bmp280_read_float(float *temperature, float *pressure, float *humidity) {
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b088      	sub	sp, #32
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	60f8      	str	r0, [r7, #12]
 8001d88:	60b9      	str	r1, [r7, #8]
 8001d8a:	607a      	str	r2, [r7, #4]
 8001d8c:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(&fixed_temperature, &fixed_pressure,
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d002      	beq.n	8001d9a <_ZN6BMP28017bmp280_read_floatEPfS0_S0_+0x1a>
 8001d94:	f107 0314 	add.w	r3, r7, #20
 8001d98:	e000      	b.n	8001d9c <_ZN6BMP28017bmp280_read_floatEPfS0_S0_+0x1c>
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	f107 0218 	add.w	r2, r7, #24
 8001da0:	f107 011c 	add.w	r1, r7, #28
 8001da4:	68f8      	ldr	r0, [r7, #12]
 8001da6:	f7ff ff80 	bl	8001caa <_ZN6BMP28017bmp280_read_fixedEPlPmS1_>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d028      	beq.n	8001e02 <_ZN6BMP28017bmp280_read_floatEPfS0_S0_+0x82>
			humidity ? &fixed_humidity : NULL)) {
		*temperature = (float) fixed_temperature / 100;
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	ee07 3a90 	vmov	s15, r3
 8001db6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001dba:	eddf 6a14 	vldr	s13, [pc, #80]	@ 8001e0c <_ZN6BMP28017bmp280_read_floatEPfS0_S0_+0x8c>
 8001dbe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	edc3 7a00 	vstr	s15, [r3]
		*pressure = (float) fixed_pressure / 256;
 8001dc8:	69bb      	ldr	r3, [r7, #24]
 8001dca:	ee07 3a90 	vmov	s15, r3
 8001dce:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001dd2:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8001e10 <_ZN6BMP28017bmp280_read_floatEPfS0_S0_+0x90>
 8001dd6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	edc3 7a00 	vstr	s15, [r3]
		if (humidity)
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d00b      	beq.n	8001dfe <_ZN6BMP28017bmp280_read_floatEPfS0_S0_+0x7e>
			*humidity = (float) fixed_humidity / 1024;
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	ee07 3a90 	vmov	s15, r3
 8001dec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001df0:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8001e14 <_ZN6BMP28017bmp280_read_floatEPfS0_S0_+0x94>
 8001df4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	edc3 7a00 	vstr	s15, [r3]
		return true;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e000      	b.n	8001e04 <_ZN6BMP28017bmp280_read_floatEPfS0_S0_+0x84>
	}

	return false;
 8001e02:	2300      	movs	r3, #0
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3720      	adds	r7, #32
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	42c80000 	.word	0x42c80000
 8001e10:	43800000 	.word	0x43800000
 8001e14:	44800000 	.word	0x44800000

08001e18 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b08a      	sub	sp, #40	@ 0x28
 8001e1c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e1e:	f107 0314 	add.w	r3, r7, #20
 8001e22:	2200      	movs	r2, #0
 8001e24:	601a      	str	r2, [r3, #0]
 8001e26:	605a      	str	r2, [r3, #4]
 8001e28:	609a      	str	r2, [r3, #8]
 8001e2a:	60da      	str	r2, [r3, #12]
 8001e2c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e2e:	2300      	movs	r3, #0
 8001e30:	613b      	str	r3, [r7, #16]
 8001e32:	4b3d      	ldr	r3, [pc, #244]	@ (8001f28 <MX_GPIO_Init+0x110>)
 8001e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e36:	4a3c      	ldr	r2, [pc, #240]	@ (8001f28 <MX_GPIO_Init+0x110>)
 8001e38:	f043 0304 	orr.w	r3, r3, #4
 8001e3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e3e:	4b3a      	ldr	r3, [pc, #232]	@ (8001f28 <MX_GPIO_Init+0x110>)
 8001e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e42:	f003 0304 	and.w	r3, r3, #4
 8001e46:	613b      	str	r3, [r7, #16]
 8001e48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	60fb      	str	r3, [r7, #12]
 8001e4e:	4b36      	ldr	r3, [pc, #216]	@ (8001f28 <MX_GPIO_Init+0x110>)
 8001e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e52:	4a35      	ldr	r2, [pc, #212]	@ (8001f28 <MX_GPIO_Init+0x110>)
 8001e54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e58:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e5a:	4b33      	ldr	r3, [pc, #204]	@ (8001f28 <MX_GPIO_Init+0x110>)
 8001e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e62:	60fb      	str	r3, [r7, #12]
 8001e64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e66:	2300      	movs	r3, #0
 8001e68:	60bb      	str	r3, [r7, #8]
 8001e6a:	4b2f      	ldr	r3, [pc, #188]	@ (8001f28 <MX_GPIO_Init+0x110>)
 8001e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e6e:	4a2e      	ldr	r2, [pc, #184]	@ (8001f28 <MX_GPIO_Init+0x110>)
 8001e70:	f043 0301 	orr.w	r3, r3, #1
 8001e74:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e76:	4b2c      	ldr	r3, [pc, #176]	@ (8001f28 <MX_GPIO_Init+0x110>)
 8001e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e7a:	f003 0301 	and.w	r3, r3, #1
 8001e7e:	60bb      	str	r3, [r7, #8]
 8001e80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e82:	2300      	movs	r3, #0
 8001e84:	607b      	str	r3, [r7, #4]
 8001e86:	4b28      	ldr	r3, [pc, #160]	@ (8001f28 <MX_GPIO_Init+0x110>)
 8001e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e8a:	4a27      	ldr	r2, [pc, #156]	@ (8001f28 <MX_GPIO_Init+0x110>)
 8001e8c:	f043 0302 	orr.w	r3, r3, #2
 8001e90:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e92:	4b25      	ldr	r3, [pc, #148]	@ (8001f28 <MX_GPIO_Init+0x110>)
 8001e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e96:	f003 0302 	and.w	r3, r3, #2
 8001e9a:	607b      	str	r3, [r7, #4]
 8001e9c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001ea4:	4821      	ldr	r0, [pc, #132]	@ (8001f2c <MX_GPIO_Init+0x114>)
 8001ea6:	f000 ffd9 	bl	8002e5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PUMP_Pin|VALVE_Pin, GPIO_PIN_RESET);
 8001eaa:	2200      	movs	r2, #0
 8001eac:	2103      	movs	r1, #3
 8001eae:	4820      	ldr	r0, [pc, #128]	@ (8001f30 <MX_GPIO_Init+0x118>)
 8001eb0:	f000 ffd4 	bl	8002e5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8001eb4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001eb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8001ec6:	f107 0314 	add.w	r3, r7, #20
 8001eca:	4619      	mov	r1, r3
 8001ecc:	4817      	ldr	r0, [pc, #92]	@ (8001f2c <MX_GPIO_Init+0x114>)
 8001ece:	f000 fe29 	bl	8002b24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN0_Pin;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001eda:	2301      	movs	r3, #1
 8001edc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN0_GPIO_Port, &GPIO_InitStruct);
 8001ede:	f107 0314 	add.w	r3, r7, #20
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	4813      	ldr	r0, [pc, #76]	@ (8001f34 <MX_GPIO_Init+0x11c>)
 8001ee6:	f000 fe1d 	bl	8002b24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = PUMP_Pin|VALVE_Pin;
 8001eea:	2303      	movs	r3, #3
 8001eec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001efa:	f107 0314 	add.w	r3, r7, #20
 8001efe:	4619      	mov	r1, r3
 8001f00:	480b      	ldr	r0, [pc, #44]	@ (8001f30 <MX_GPIO_Init+0x118>)
 8001f02:	f000 fe0f 	bl	8002b24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = NRF_CE_Pin|NRF_CSN_Pin;
 8001f06:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001f0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f10:	2300      	movs	r3, #0
 8001f12:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f14:	f107 0314 	add.w	r3, r7, #20
 8001f18:	4619      	mov	r1, r3
 8001f1a:	4805      	ldr	r0, [pc, #20]	@ (8001f30 <MX_GPIO_Init+0x118>)
 8001f1c:	f000 fe02 	bl	8002b24 <HAL_GPIO_Init>

}
 8001f20:	bf00      	nop
 8001f22:	3728      	adds	r7, #40	@ 0x28
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	40023800 	.word	0x40023800
 8001f2c:	40020800 	.word	0x40020800
 8001f30:	40020400 	.word	0x40020400
 8001f34:	40020000 	.word	0x40020000

08001f38 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001f3c:	4b12      	ldr	r3, [pc, #72]	@ (8001f88 <MX_I2C1_Init+0x50>)
 8001f3e:	4a13      	ldr	r2, [pc, #76]	@ (8001f8c <MX_I2C1_Init+0x54>)
 8001f40:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001f42:	4b11      	ldr	r3, [pc, #68]	@ (8001f88 <MX_I2C1_Init+0x50>)
 8001f44:	4a12      	ldr	r2, [pc, #72]	@ (8001f90 <MX_I2C1_Init+0x58>)
 8001f46:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f48:	4b0f      	ldr	r3, [pc, #60]	@ (8001f88 <MX_I2C1_Init+0x50>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001f4e:	4b0e      	ldr	r3, [pc, #56]	@ (8001f88 <MX_I2C1_Init+0x50>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f54:	4b0c      	ldr	r3, [pc, #48]	@ (8001f88 <MX_I2C1_Init+0x50>)
 8001f56:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001f5a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f5c:	4b0a      	ldr	r3, [pc, #40]	@ (8001f88 <MX_I2C1_Init+0x50>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001f62:	4b09      	ldr	r3, [pc, #36]	@ (8001f88 <MX_I2C1_Init+0x50>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f68:	4b07      	ldr	r3, [pc, #28]	@ (8001f88 <MX_I2C1_Init+0x50>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f6e:	4b06      	ldr	r3, [pc, #24]	@ (8001f88 <MX_I2C1_Init+0x50>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f74:	4804      	ldr	r0, [pc, #16]	@ (8001f88 <MX_I2C1_Init+0x50>)
 8001f76:	f000 ff8b 	bl	8002e90 <HAL_I2C_Init>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d001      	beq.n	8001f84 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001f80:	f000 f8ca 	bl	8002118 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f84:	bf00      	nop
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	2000016c 	.word	0x2000016c
 8001f8c:	40005400 	.word	0x40005400
 8001f90:	000186a0 	.word	0x000186a0

08001f94 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b08a      	sub	sp, #40	@ 0x28
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f9c:	f107 0314 	add.w	r3, r7, #20
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	601a      	str	r2, [r3, #0]
 8001fa4:	605a      	str	r2, [r3, #4]
 8001fa6:	609a      	str	r2, [r3, #8]
 8001fa8:	60da      	str	r2, [r3, #12]
 8001faa:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a19      	ldr	r2, [pc, #100]	@ (8002018 <HAL_I2C_MspInit+0x84>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d12b      	bne.n	800200e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	613b      	str	r3, [r7, #16]
 8001fba:	4b18      	ldr	r3, [pc, #96]	@ (800201c <HAL_I2C_MspInit+0x88>)
 8001fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fbe:	4a17      	ldr	r2, [pc, #92]	@ (800201c <HAL_I2C_MspInit+0x88>)
 8001fc0:	f043 0302 	orr.w	r3, r3, #2
 8001fc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fc6:	4b15      	ldr	r3, [pc, #84]	@ (800201c <HAL_I2C_MspInit+0x88>)
 8001fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fca:	f003 0302 	and.w	r3, r3, #2
 8001fce:	613b      	str	r3, [r7, #16]
 8001fd0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001fd2:	23c0      	movs	r3, #192	@ 0xc0
 8001fd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fd6:	2312      	movs	r3, #18
 8001fd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001fe2:	2304      	movs	r3, #4
 8001fe4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fe6:	f107 0314 	add.w	r3, r7, #20
 8001fea:	4619      	mov	r1, r3
 8001fec:	480c      	ldr	r0, [pc, #48]	@ (8002020 <HAL_I2C_MspInit+0x8c>)
 8001fee:	f000 fd99 	bl	8002b24 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	60fb      	str	r3, [r7, #12]
 8001ff6:	4b09      	ldr	r3, [pc, #36]	@ (800201c <HAL_I2C_MspInit+0x88>)
 8001ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ffa:	4a08      	ldr	r2, [pc, #32]	@ (800201c <HAL_I2C_MspInit+0x88>)
 8001ffc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002000:	6413      	str	r3, [r2, #64]	@ 0x40
 8002002:	4b06      	ldr	r3, [pc, #24]	@ (800201c <HAL_I2C_MspInit+0x88>)
 8002004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002006:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800200a:	60fb      	str	r3, [r7, #12]
 800200c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800200e:	bf00      	nop
 8002010:	3728      	adds	r7, #40	@ 0x28
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	40005400 	.word	0x40005400
 800201c:	40023800 	.word	0x40023800
 8002020:	40020400 	.word	0x40020400

08002024 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002028:	f000 f98e 	bl	8002348 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800202c:	f000 f80c 	bl	8002048 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002030:	f7ff fef2 	bl	8001e18 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002034:	f7ff ff80 	bl	8001f38 <MX_I2C1_Init>
  MX_SPI2_Init();
 8002038:	f000 f874 	bl	8002124 <MX_SPI2_Init>
  MX_ADC1_Init();
 800203c:	f7fe ff9e 	bl	8000f7c <MX_ADC1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  EventLoopC();
 8002040:	f7fe fb6e 	bl	8000720 <EventLoopC>

  while (1)
 8002044:	bf00      	nop
 8002046:	e7fd      	b.n	8002044 <main+0x20>

08002048 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b094      	sub	sp, #80	@ 0x50
 800204c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800204e:	f107 0320 	add.w	r3, r7, #32
 8002052:	2230      	movs	r2, #48	@ 0x30
 8002054:	2100      	movs	r1, #0
 8002056:	4618      	mov	r0, r3
 8002058:	f002 fea8 	bl	8004dac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800205c:	f107 030c 	add.w	r3, r7, #12
 8002060:	2200      	movs	r2, #0
 8002062:	601a      	str	r2, [r3, #0]
 8002064:	605a      	str	r2, [r3, #4]
 8002066:	609a      	str	r2, [r3, #8]
 8002068:	60da      	str	r2, [r3, #12]
 800206a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800206c:	2300      	movs	r3, #0
 800206e:	60bb      	str	r3, [r7, #8]
 8002070:	4b27      	ldr	r3, [pc, #156]	@ (8002110 <SystemClock_Config+0xc8>)
 8002072:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002074:	4a26      	ldr	r2, [pc, #152]	@ (8002110 <SystemClock_Config+0xc8>)
 8002076:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800207a:	6413      	str	r3, [r2, #64]	@ 0x40
 800207c:	4b24      	ldr	r3, [pc, #144]	@ (8002110 <SystemClock_Config+0xc8>)
 800207e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002080:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002084:	60bb      	str	r3, [r7, #8]
 8002086:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002088:	2300      	movs	r3, #0
 800208a:	607b      	str	r3, [r7, #4]
 800208c:	4b21      	ldr	r3, [pc, #132]	@ (8002114 <SystemClock_Config+0xcc>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a20      	ldr	r2, [pc, #128]	@ (8002114 <SystemClock_Config+0xcc>)
 8002092:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002096:	6013      	str	r3, [r2, #0]
 8002098:	4b1e      	ldr	r3, [pc, #120]	@ (8002114 <SystemClock_Config+0xcc>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80020a0:	607b      	str	r3, [r7, #4]
 80020a2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80020a4:	2301      	movs	r3, #1
 80020a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80020a8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80020ac:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020ae:	2302      	movs	r3, #2
 80020b0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80020b2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80020b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80020b8:	230c      	movs	r3, #12
 80020ba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 80020bc:	2360      	movs	r3, #96	@ 0x60
 80020be:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80020c0:	2302      	movs	r3, #2
 80020c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80020c4:	2304      	movs	r3, #4
 80020c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020c8:	f107 0320 	add.w	r3, r7, #32
 80020cc:	4618      	mov	r0, r3
 80020ce:	f001 ff03 	bl	8003ed8 <HAL_RCC_OscConfig>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d001      	beq.n	80020dc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80020d8:	f000 f81e 	bl	8002118 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020dc:	230f      	movs	r3, #15
 80020de:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80020e0:	2302      	movs	r3, #2
 80020e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020e4:	2300      	movs	r3, #0
 80020e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80020e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80020ee:	2300      	movs	r3, #0
 80020f0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80020f2:	f107 030c 	add.w	r3, r7, #12
 80020f6:	2103      	movs	r1, #3
 80020f8:	4618      	mov	r0, r3
 80020fa:	f002 f965 	bl	80043c8 <HAL_RCC_ClockConfig>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d001      	beq.n	8002108 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002104:	f000 f808 	bl	8002118 <Error_Handler>
  }
}
 8002108:	bf00      	nop
 800210a:	3750      	adds	r7, #80	@ 0x50
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	40023800 	.word	0x40023800
 8002114:	40007000 	.word	0x40007000

08002118 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800211c:	b672      	cpsid	i
}
 800211e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002120:	bf00      	nop
 8002122:	e7fd      	b.n	8002120 <Error_Handler+0x8>

08002124 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002128:	4b17      	ldr	r3, [pc, #92]	@ (8002188 <MX_SPI2_Init+0x64>)
 800212a:	4a18      	ldr	r2, [pc, #96]	@ (800218c <MX_SPI2_Init+0x68>)
 800212c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800212e:	4b16      	ldr	r3, [pc, #88]	@ (8002188 <MX_SPI2_Init+0x64>)
 8002130:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002134:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002136:	4b14      	ldr	r3, [pc, #80]	@ (8002188 <MX_SPI2_Init+0x64>)
 8002138:	2200      	movs	r2, #0
 800213a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800213c:	4b12      	ldr	r3, [pc, #72]	@ (8002188 <MX_SPI2_Init+0x64>)
 800213e:	2200      	movs	r2, #0
 8002140:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002142:	4b11      	ldr	r3, [pc, #68]	@ (8002188 <MX_SPI2_Init+0x64>)
 8002144:	2200      	movs	r2, #0
 8002146:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002148:	4b0f      	ldr	r3, [pc, #60]	@ (8002188 <MX_SPI2_Init+0x64>)
 800214a:	2200      	movs	r2, #0
 800214c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800214e:	4b0e      	ldr	r3, [pc, #56]	@ (8002188 <MX_SPI2_Init+0x64>)
 8002150:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002154:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002156:	4b0c      	ldr	r3, [pc, #48]	@ (8002188 <MX_SPI2_Init+0x64>)
 8002158:	2200      	movs	r2, #0
 800215a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800215c:	4b0a      	ldr	r3, [pc, #40]	@ (8002188 <MX_SPI2_Init+0x64>)
 800215e:	2200      	movs	r2, #0
 8002160:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002162:	4b09      	ldr	r3, [pc, #36]	@ (8002188 <MX_SPI2_Init+0x64>)
 8002164:	2200      	movs	r2, #0
 8002166:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002168:	4b07      	ldr	r3, [pc, #28]	@ (8002188 <MX_SPI2_Init+0x64>)
 800216a:	2200      	movs	r2, #0
 800216c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 800216e:	4b06      	ldr	r3, [pc, #24]	@ (8002188 <MX_SPI2_Init+0x64>)
 8002170:	220a      	movs	r2, #10
 8002172:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002174:	4804      	ldr	r0, [pc, #16]	@ (8002188 <MX_SPI2_Init+0x64>)
 8002176:	f002 faf3 	bl	8004760 <HAL_SPI_Init>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d001      	beq.n	8002184 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002180:	f7ff ffca 	bl	8002118 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002184:	bf00      	nop
 8002186:	bd80      	pop	{r7, pc}
 8002188:	200001c0 	.word	0x200001c0
 800218c:	40003800 	.word	0x40003800

08002190 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b08a      	sub	sp, #40	@ 0x28
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002198:	f107 0314 	add.w	r3, r7, #20
 800219c:	2200      	movs	r2, #0
 800219e:	601a      	str	r2, [r3, #0]
 80021a0:	605a      	str	r2, [r3, #4]
 80021a2:	609a      	str	r2, [r3, #8]
 80021a4:	60da      	str	r2, [r3, #12]
 80021a6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a19      	ldr	r2, [pc, #100]	@ (8002214 <HAL_SPI_MspInit+0x84>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d12c      	bne.n	800220c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80021b2:	2300      	movs	r3, #0
 80021b4:	613b      	str	r3, [r7, #16]
 80021b6:	4b18      	ldr	r3, [pc, #96]	@ (8002218 <HAL_SPI_MspInit+0x88>)
 80021b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ba:	4a17      	ldr	r2, [pc, #92]	@ (8002218 <HAL_SPI_MspInit+0x88>)
 80021bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80021c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80021c2:	4b15      	ldr	r3, [pc, #84]	@ (8002218 <HAL_SPI_MspInit+0x88>)
 80021c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021ca:	613b      	str	r3, [r7, #16]
 80021cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021ce:	2300      	movs	r3, #0
 80021d0:	60fb      	str	r3, [r7, #12]
 80021d2:	4b11      	ldr	r3, [pc, #68]	@ (8002218 <HAL_SPI_MspInit+0x88>)
 80021d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021d6:	4a10      	ldr	r2, [pc, #64]	@ (8002218 <HAL_SPI_MspInit+0x88>)
 80021d8:	f043 0302 	orr.w	r3, r3, #2
 80021dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80021de:	4b0e      	ldr	r3, [pc, #56]	@ (8002218 <HAL_SPI_MspInit+0x88>)
 80021e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021e2:	f003 0302 	and.w	r3, r3, #2
 80021e6:	60fb      	str	r3, [r7, #12]
 80021e8:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = NRF_SCK_Pin|NRF_MISO_Pin|NRF_MOSI_Pin;
 80021ea:	f44f 4344 	mov.w	r3, #50176	@ 0xc400
 80021ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f0:	2302      	movs	r3, #2
 80021f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f4:	2300      	movs	r3, #0
 80021f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021f8:	2303      	movs	r3, #3
 80021fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80021fc:	2305      	movs	r3, #5
 80021fe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002200:	f107 0314 	add.w	r3, r7, #20
 8002204:	4619      	mov	r1, r3
 8002206:	4805      	ldr	r0, [pc, #20]	@ (800221c <HAL_SPI_MspInit+0x8c>)
 8002208:	f000 fc8c 	bl	8002b24 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800220c:	bf00      	nop
 800220e:	3728      	adds	r7, #40	@ 0x28
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}
 8002214:	40003800 	.word	0x40003800
 8002218:	40023800 	.word	0x40023800
 800221c:	40020400 	.word	0x40020400

08002220 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002226:	2300      	movs	r3, #0
 8002228:	607b      	str	r3, [r7, #4]
 800222a:	4b10      	ldr	r3, [pc, #64]	@ (800226c <HAL_MspInit+0x4c>)
 800222c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800222e:	4a0f      	ldr	r2, [pc, #60]	@ (800226c <HAL_MspInit+0x4c>)
 8002230:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002234:	6453      	str	r3, [r2, #68]	@ 0x44
 8002236:	4b0d      	ldr	r3, [pc, #52]	@ (800226c <HAL_MspInit+0x4c>)
 8002238:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800223a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800223e:	607b      	str	r3, [r7, #4]
 8002240:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002242:	2300      	movs	r3, #0
 8002244:	603b      	str	r3, [r7, #0]
 8002246:	4b09      	ldr	r3, [pc, #36]	@ (800226c <HAL_MspInit+0x4c>)
 8002248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800224a:	4a08      	ldr	r2, [pc, #32]	@ (800226c <HAL_MspInit+0x4c>)
 800224c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002250:	6413      	str	r3, [r2, #64]	@ 0x40
 8002252:	4b06      	ldr	r3, [pc, #24]	@ (800226c <HAL_MspInit+0x4c>)
 8002254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002256:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800225a:	603b      	str	r3, [r7, #0]
 800225c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800225e:	bf00      	nop
 8002260:	370c      	adds	r7, #12
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	40023800 	.word	0x40023800

08002270 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002274:	bf00      	nop
 8002276:	e7fd      	b.n	8002274 <NMI_Handler+0x4>

08002278 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800227c:	bf00      	nop
 800227e:	e7fd      	b.n	800227c <HardFault_Handler+0x4>

08002280 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002284:	bf00      	nop
 8002286:	e7fd      	b.n	8002284 <MemManage_Handler+0x4>

08002288 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800228c:	bf00      	nop
 800228e:	e7fd      	b.n	800228c <BusFault_Handler+0x4>

08002290 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002290:	b480      	push	{r7}
 8002292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002294:	bf00      	nop
 8002296:	e7fd      	b.n	8002294 <UsageFault_Handler+0x4>

08002298 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800229c:	bf00      	nop
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr

080022a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022a6:	b480      	push	{r7}
 80022a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022aa:	bf00      	nop
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr

080022b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022b8:	bf00      	nop
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr

080022c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022c2:	b580      	push	{r7, lr}
 80022c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022c6:	f000 f891 	bl	80023ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022ca:	bf00      	nop
 80022cc:	bd80      	pop	{r7, pc}
	...

080022d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022d4:	4b06      	ldr	r3, [pc, #24]	@ (80022f0 <SystemInit+0x20>)
 80022d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022da:	4a05      	ldr	r2, [pc, #20]	@ (80022f0 <SystemInit+0x20>)
 80022dc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80022e0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022e4:	bf00      	nop
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop
 80022f0:	e000ed00 	.word	0xe000ed00

080022f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80022f4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800232c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80022f8:	f7ff ffea 	bl	80022d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80022fc:	480c      	ldr	r0, [pc, #48]	@ (8002330 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80022fe:	490d      	ldr	r1, [pc, #52]	@ (8002334 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002300:	4a0d      	ldr	r2, [pc, #52]	@ (8002338 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002302:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002304:	e002      	b.n	800230c <LoopCopyDataInit>

08002306 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002306:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002308:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800230a:	3304      	adds	r3, #4

0800230c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800230c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800230e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002310:	d3f9      	bcc.n	8002306 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002312:	4a0a      	ldr	r2, [pc, #40]	@ (800233c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002314:	4c0a      	ldr	r4, [pc, #40]	@ (8002340 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002316:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002318:	e001      	b.n	800231e <LoopFillZerobss>

0800231a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800231a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800231c:	3204      	adds	r2, #4

0800231e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800231e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002320:	d3fb      	bcc.n	800231a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002322:	f002 fd4b 	bl	8004dbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002326:	f7ff fe7d 	bl	8002024 <main>
  bx  lr    
 800232a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800232c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002330:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002334:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8002338:	08004f10 	.word	0x08004f10
  ldr r2, =_sbss
 800233c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8002340:	2000035c 	.word	0x2000035c

08002344 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002344:	e7fe      	b.n	8002344 <ADC_IRQHandler>
	...

08002348 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800234c:	4b0e      	ldr	r3, [pc, #56]	@ (8002388 <HAL_Init+0x40>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a0d      	ldr	r2, [pc, #52]	@ (8002388 <HAL_Init+0x40>)
 8002352:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002356:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002358:	4b0b      	ldr	r3, [pc, #44]	@ (8002388 <HAL_Init+0x40>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a0a      	ldr	r2, [pc, #40]	@ (8002388 <HAL_Init+0x40>)
 800235e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002362:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002364:	4b08      	ldr	r3, [pc, #32]	@ (8002388 <HAL_Init+0x40>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a07      	ldr	r2, [pc, #28]	@ (8002388 <HAL_Init+0x40>)
 800236a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800236e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002370:	2003      	movs	r0, #3
 8002372:	f000 fba3 	bl	8002abc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002376:	200f      	movs	r0, #15
 8002378:	f000 f808 	bl	800238c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800237c:	f7ff ff50 	bl	8002220 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002380:	2300      	movs	r3, #0
}
 8002382:	4618      	mov	r0, r3
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	40023c00 	.word	0x40023c00

0800238c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002394:	4b12      	ldr	r3, [pc, #72]	@ (80023e0 <HAL_InitTick+0x54>)
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	4b12      	ldr	r3, [pc, #72]	@ (80023e4 <HAL_InitTick+0x58>)
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	4619      	mov	r1, r3
 800239e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80023a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80023aa:	4618      	mov	r0, r3
 80023ac:	f000 fbad 	bl	8002b0a <HAL_SYSTICK_Config>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d001      	beq.n	80023ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e00e      	b.n	80023d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2b0f      	cmp	r3, #15
 80023be:	d80a      	bhi.n	80023d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023c0:	2200      	movs	r2, #0
 80023c2:	6879      	ldr	r1, [r7, #4]
 80023c4:	f04f 30ff 	mov.w	r0, #4294967295
 80023c8:	f000 fb83 	bl	8002ad2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023cc:	4a06      	ldr	r2, [pc, #24]	@ (80023e8 <HAL_InitTick+0x5c>)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023d2:	2300      	movs	r3, #0
 80023d4:	e000      	b.n	80023d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3708      	adds	r7, #8
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	20000010 	.word	0x20000010
 80023e4:	20000018 	.word	0x20000018
 80023e8:	20000014 	.word	0x20000014

080023ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023f0:	4b06      	ldr	r3, [pc, #24]	@ (800240c <HAL_IncTick+0x20>)
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	461a      	mov	r2, r3
 80023f6:	4b06      	ldr	r3, [pc, #24]	@ (8002410 <HAL_IncTick+0x24>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4413      	add	r3, r2
 80023fc:	4a04      	ldr	r2, [pc, #16]	@ (8002410 <HAL_IncTick+0x24>)
 80023fe:	6013      	str	r3, [r2, #0]
}
 8002400:	bf00      	nop
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	20000018 	.word	0x20000018
 8002410:	20000218 	.word	0x20000218

08002414 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0
  return uwTick;
 8002418:	4b03      	ldr	r3, [pc, #12]	@ (8002428 <HAL_GetTick+0x14>)
 800241a:	681b      	ldr	r3, [r3, #0]
}
 800241c:	4618      	mov	r0, r3
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop
 8002428:	20000218 	.word	0x20000218

0800242c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002434:	f7ff ffee 	bl	8002414 <HAL_GetTick>
 8002438:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002444:	d005      	beq.n	8002452 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002446:	4b0a      	ldr	r3, [pc, #40]	@ (8002470 <HAL_Delay+0x44>)
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	461a      	mov	r2, r3
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	4413      	add	r3, r2
 8002450:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002452:	bf00      	nop
 8002454:	f7ff ffde 	bl	8002414 <HAL_GetTick>
 8002458:	4602      	mov	r2, r0
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	68fa      	ldr	r2, [r7, #12]
 8002460:	429a      	cmp	r2, r3
 8002462:	d8f7      	bhi.n	8002454 <HAL_Delay+0x28>
  {
  }
}
 8002464:	bf00      	nop
 8002466:	bf00      	nop
 8002468:	3710      	adds	r7, #16
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	20000018 	.word	0x20000018

08002474 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800247c:	2300      	movs	r3, #0
 800247e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d101      	bne.n	800248a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e033      	b.n	80024f2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800248e:	2b00      	cmp	r3, #0
 8002490:	d109      	bne.n	80024a6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f7fe fdc4 	bl	8001020 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2200      	movs	r2, #0
 800249c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2200      	movs	r2, #0
 80024a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024aa:	f003 0310 	and.w	r3, r3, #16
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d118      	bne.n	80024e4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024b6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80024ba:	f023 0302 	bic.w	r3, r3, #2
 80024be:	f043 0202 	orr.w	r2, r3, #2
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f000 f94a 	bl	8002760 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2200      	movs	r2, #0
 80024d0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024d6:	f023 0303 	bic.w	r3, r3, #3
 80024da:	f043 0201 	orr.w	r2, r3, #1
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	641a      	str	r2, [r3, #64]	@ 0x40
 80024e2:	e001      	b.n	80024e8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2200      	movs	r2, #0
 80024ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80024f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3710      	adds	r7, #16
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
	...

080024fc <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b085      	sub	sp, #20
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002506:	2300      	movs	r3, #0
 8002508:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002510:	2b01      	cmp	r3, #1
 8002512:	d101      	bne.n	8002518 <HAL_ADC_ConfigChannel+0x1c>
 8002514:	2302      	movs	r3, #2
 8002516:	e113      	b.n	8002740 <HAL_ADC_ConfigChannel+0x244>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2201      	movs	r2, #1
 800251c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	2b09      	cmp	r3, #9
 8002526:	d925      	bls.n	8002574 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	68d9      	ldr	r1, [r3, #12]
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	b29b      	uxth	r3, r3
 8002534:	461a      	mov	r2, r3
 8002536:	4613      	mov	r3, r2
 8002538:	005b      	lsls	r3, r3, #1
 800253a:	4413      	add	r3, r2
 800253c:	3b1e      	subs	r3, #30
 800253e:	2207      	movs	r2, #7
 8002540:	fa02 f303 	lsl.w	r3, r2, r3
 8002544:	43da      	mvns	r2, r3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	400a      	ands	r2, r1
 800254c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	68d9      	ldr	r1, [r3, #12]
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	689a      	ldr	r2, [r3, #8]
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	b29b      	uxth	r3, r3
 800255e:	4618      	mov	r0, r3
 8002560:	4603      	mov	r3, r0
 8002562:	005b      	lsls	r3, r3, #1
 8002564:	4403      	add	r3, r0
 8002566:	3b1e      	subs	r3, #30
 8002568:	409a      	lsls	r2, r3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	430a      	orrs	r2, r1
 8002570:	60da      	str	r2, [r3, #12]
 8002572:	e022      	b.n	80025ba <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	6919      	ldr	r1, [r3, #16]
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	b29b      	uxth	r3, r3
 8002580:	461a      	mov	r2, r3
 8002582:	4613      	mov	r3, r2
 8002584:	005b      	lsls	r3, r3, #1
 8002586:	4413      	add	r3, r2
 8002588:	2207      	movs	r2, #7
 800258a:	fa02 f303 	lsl.w	r3, r2, r3
 800258e:	43da      	mvns	r2, r3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	400a      	ands	r2, r1
 8002596:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	6919      	ldr	r1, [r3, #16]
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	689a      	ldr	r2, [r3, #8]
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	4618      	mov	r0, r3
 80025aa:	4603      	mov	r3, r0
 80025ac:	005b      	lsls	r3, r3, #1
 80025ae:	4403      	add	r3, r0
 80025b0:	409a      	lsls	r2, r3
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	430a      	orrs	r2, r1
 80025b8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	2b06      	cmp	r3, #6
 80025c0:	d824      	bhi.n	800260c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	685a      	ldr	r2, [r3, #4]
 80025cc:	4613      	mov	r3, r2
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	4413      	add	r3, r2
 80025d2:	3b05      	subs	r3, #5
 80025d4:	221f      	movs	r2, #31
 80025d6:	fa02 f303 	lsl.w	r3, r2, r3
 80025da:	43da      	mvns	r2, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	400a      	ands	r2, r1
 80025e2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	4618      	mov	r0, r3
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	685a      	ldr	r2, [r3, #4]
 80025f6:	4613      	mov	r3, r2
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	4413      	add	r3, r2
 80025fc:	3b05      	subs	r3, #5
 80025fe:	fa00 f203 	lsl.w	r2, r0, r3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	430a      	orrs	r2, r1
 8002608:	635a      	str	r2, [r3, #52]	@ 0x34
 800260a:	e04c      	b.n	80026a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	2b0c      	cmp	r3, #12
 8002612:	d824      	bhi.n	800265e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	685a      	ldr	r2, [r3, #4]
 800261e:	4613      	mov	r3, r2
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	4413      	add	r3, r2
 8002624:	3b23      	subs	r3, #35	@ 0x23
 8002626:	221f      	movs	r2, #31
 8002628:	fa02 f303 	lsl.w	r3, r2, r3
 800262c:	43da      	mvns	r2, r3
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	400a      	ands	r2, r1
 8002634:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	b29b      	uxth	r3, r3
 8002642:	4618      	mov	r0, r3
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	685a      	ldr	r2, [r3, #4]
 8002648:	4613      	mov	r3, r2
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	4413      	add	r3, r2
 800264e:	3b23      	subs	r3, #35	@ 0x23
 8002650:	fa00 f203 	lsl.w	r2, r0, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	430a      	orrs	r2, r1
 800265a:	631a      	str	r2, [r3, #48]	@ 0x30
 800265c:	e023      	b.n	80026a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	685a      	ldr	r2, [r3, #4]
 8002668:	4613      	mov	r3, r2
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	4413      	add	r3, r2
 800266e:	3b41      	subs	r3, #65	@ 0x41
 8002670:	221f      	movs	r2, #31
 8002672:	fa02 f303 	lsl.w	r3, r2, r3
 8002676:	43da      	mvns	r2, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	400a      	ands	r2, r1
 800267e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	b29b      	uxth	r3, r3
 800268c:	4618      	mov	r0, r3
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	685a      	ldr	r2, [r3, #4]
 8002692:	4613      	mov	r3, r2
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	4413      	add	r3, r2
 8002698:	3b41      	subs	r3, #65	@ 0x41
 800269a:	fa00 f203 	lsl.w	r2, r0, r3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	430a      	orrs	r2, r1
 80026a4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026a6:	4b29      	ldr	r3, [pc, #164]	@ (800274c <HAL_ADC_ConfigChannel+0x250>)
 80026a8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a28      	ldr	r2, [pc, #160]	@ (8002750 <HAL_ADC_ConfigChannel+0x254>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d10f      	bne.n	80026d4 <HAL_ADC_ConfigChannel+0x1d8>
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	2b12      	cmp	r3, #18
 80026ba:	d10b      	bne.n	80026d4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a1d      	ldr	r2, [pc, #116]	@ (8002750 <HAL_ADC_ConfigChannel+0x254>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d12b      	bne.n	8002736 <HAL_ADC_ConfigChannel+0x23a>
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a1c      	ldr	r2, [pc, #112]	@ (8002754 <HAL_ADC_ConfigChannel+0x258>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d003      	beq.n	80026f0 <HAL_ADC_ConfigChannel+0x1f4>
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	2b11      	cmp	r3, #17
 80026ee:	d122      	bne.n	8002736 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a11      	ldr	r2, [pc, #68]	@ (8002754 <HAL_ADC_ConfigChannel+0x258>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d111      	bne.n	8002736 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002712:	4b11      	ldr	r3, [pc, #68]	@ (8002758 <HAL_ADC_ConfigChannel+0x25c>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a11      	ldr	r2, [pc, #68]	@ (800275c <HAL_ADC_ConfigChannel+0x260>)
 8002718:	fba2 2303 	umull	r2, r3, r2, r3
 800271c:	0c9a      	lsrs	r2, r3, #18
 800271e:	4613      	mov	r3, r2
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	4413      	add	r3, r2
 8002724:	005b      	lsls	r3, r3, #1
 8002726:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002728:	e002      	b.n	8002730 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	3b01      	subs	r3, #1
 800272e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d1f9      	bne.n	800272a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2200      	movs	r2, #0
 800273a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800273e:	2300      	movs	r3, #0
}
 8002740:	4618      	mov	r0, r3
 8002742:	3714      	adds	r7, #20
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr
 800274c:	40012300 	.word	0x40012300
 8002750:	40012000 	.word	0x40012000
 8002754:	10000012 	.word	0x10000012
 8002758:	20000010 	.word	0x20000010
 800275c:	431bde83 	.word	0x431bde83

08002760 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002760:	b480      	push	{r7}
 8002762:	b085      	sub	sp, #20
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002768:	4b79      	ldr	r3, [pc, #484]	@ (8002950 <ADC_Init+0x1f0>)
 800276a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	685a      	ldr	r2, [r3, #4]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	431a      	orrs	r2, r3
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	685a      	ldr	r2, [r3, #4]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002794:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	6859      	ldr	r1, [r3, #4]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	691b      	ldr	r3, [r3, #16]
 80027a0:	021a      	lsls	r2, r3, #8
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	430a      	orrs	r2, r1
 80027a8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	685a      	ldr	r2, [r3, #4]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80027b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	6859      	ldr	r1, [r3, #4]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	689a      	ldr	r2, [r3, #8]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	430a      	orrs	r2, r1
 80027ca:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	689a      	ldr	r2, [r3, #8]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80027da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	6899      	ldr	r1, [r3, #8]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	68da      	ldr	r2, [r3, #12]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	430a      	orrs	r2, r1
 80027ec:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027f2:	4a58      	ldr	r2, [pc, #352]	@ (8002954 <ADC_Init+0x1f4>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d022      	beq.n	800283e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	689a      	ldr	r2, [r3, #8]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002806:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	6899      	ldr	r1, [r3, #8]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	430a      	orrs	r2, r1
 8002818:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	689a      	ldr	r2, [r3, #8]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002828:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	6899      	ldr	r1, [r3, #8]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	430a      	orrs	r2, r1
 800283a:	609a      	str	r2, [r3, #8]
 800283c:	e00f      	b.n	800285e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	689a      	ldr	r2, [r3, #8]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800284c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	689a      	ldr	r2, [r3, #8]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800285c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	689a      	ldr	r2, [r3, #8]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f022 0202 	bic.w	r2, r2, #2
 800286c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	6899      	ldr	r1, [r3, #8]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	7e1b      	ldrb	r3, [r3, #24]
 8002878:	005a      	lsls	r2, r3, #1
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	430a      	orrs	r2, r1
 8002880:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d01b      	beq.n	80028c4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	685a      	ldr	r2, [r3, #4]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800289a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	685a      	ldr	r2, [r3, #4]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80028aa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	6859      	ldr	r1, [r3, #4]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028b6:	3b01      	subs	r3, #1
 80028b8:	035a      	lsls	r2, r3, #13
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	430a      	orrs	r2, r1
 80028c0:	605a      	str	r2, [r3, #4]
 80028c2:	e007      	b.n	80028d4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	685a      	ldr	r2, [r3, #4]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80028d2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80028e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	69db      	ldr	r3, [r3, #28]
 80028ee:	3b01      	subs	r3, #1
 80028f0:	051a      	lsls	r2, r3, #20
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	430a      	orrs	r2, r1
 80028f8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	689a      	ldr	r2, [r3, #8]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002908:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	6899      	ldr	r1, [r3, #8]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002916:	025a      	lsls	r2, r3, #9
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	430a      	orrs	r2, r1
 800291e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	689a      	ldr	r2, [r3, #8]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800292e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	6899      	ldr	r1, [r3, #8]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	695b      	ldr	r3, [r3, #20]
 800293a:	029a      	lsls	r2, r3, #10
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	430a      	orrs	r2, r1
 8002942:	609a      	str	r2, [r3, #8]
}
 8002944:	bf00      	nop
 8002946:	3714      	adds	r7, #20
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr
 8002950:	40012300 	.word	0x40012300
 8002954:	0f000001 	.word	0x0f000001

08002958 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002958:	b480      	push	{r7}
 800295a:	b085      	sub	sp, #20
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	f003 0307 	and.w	r3, r3, #7
 8002966:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002968:	4b0c      	ldr	r3, [pc, #48]	@ (800299c <__NVIC_SetPriorityGrouping+0x44>)
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800296e:	68ba      	ldr	r2, [r7, #8]
 8002970:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002974:	4013      	ands	r3, r2
 8002976:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002980:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002984:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002988:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800298a:	4a04      	ldr	r2, [pc, #16]	@ (800299c <__NVIC_SetPriorityGrouping+0x44>)
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	60d3      	str	r3, [r2, #12]
}
 8002990:	bf00      	nop
 8002992:	3714      	adds	r7, #20
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr
 800299c:	e000ed00 	.word	0xe000ed00

080029a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029a0:	b480      	push	{r7}
 80029a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029a4:	4b04      	ldr	r3, [pc, #16]	@ (80029b8 <__NVIC_GetPriorityGrouping+0x18>)
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	0a1b      	lsrs	r3, r3, #8
 80029aa:	f003 0307 	and.w	r3, r3, #7
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr
 80029b8:	e000ed00 	.word	0xe000ed00

080029bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	4603      	mov	r3, r0
 80029c4:	6039      	str	r1, [r7, #0]
 80029c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	db0a      	blt.n	80029e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	b2da      	uxtb	r2, r3
 80029d4:	490c      	ldr	r1, [pc, #48]	@ (8002a08 <__NVIC_SetPriority+0x4c>)
 80029d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029da:	0112      	lsls	r2, r2, #4
 80029dc:	b2d2      	uxtb	r2, r2
 80029de:	440b      	add	r3, r1
 80029e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029e4:	e00a      	b.n	80029fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	b2da      	uxtb	r2, r3
 80029ea:	4908      	ldr	r1, [pc, #32]	@ (8002a0c <__NVIC_SetPriority+0x50>)
 80029ec:	79fb      	ldrb	r3, [r7, #7]
 80029ee:	f003 030f 	and.w	r3, r3, #15
 80029f2:	3b04      	subs	r3, #4
 80029f4:	0112      	lsls	r2, r2, #4
 80029f6:	b2d2      	uxtb	r2, r2
 80029f8:	440b      	add	r3, r1
 80029fa:	761a      	strb	r2, [r3, #24]
}
 80029fc:	bf00      	nop
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr
 8002a08:	e000e100 	.word	0xe000e100
 8002a0c:	e000ed00 	.word	0xe000ed00

08002a10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b089      	sub	sp, #36	@ 0x24
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	60b9      	str	r1, [r7, #8]
 8002a1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f003 0307 	and.w	r3, r3, #7
 8002a22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	f1c3 0307 	rsb	r3, r3, #7
 8002a2a:	2b04      	cmp	r3, #4
 8002a2c:	bf28      	it	cs
 8002a2e:	2304      	movcs	r3, #4
 8002a30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	3304      	adds	r3, #4
 8002a36:	2b06      	cmp	r3, #6
 8002a38:	d902      	bls.n	8002a40 <NVIC_EncodePriority+0x30>
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	3b03      	subs	r3, #3
 8002a3e:	e000      	b.n	8002a42 <NVIC_EncodePriority+0x32>
 8002a40:	2300      	movs	r3, #0
 8002a42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a44:	f04f 32ff 	mov.w	r2, #4294967295
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4e:	43da      	mvns	r2, r3
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	401a      	ands	r2, r3
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a58:	f04f 31ff 	mov.w	r1, #4294967295
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a62:	43d9      	mvns	r1, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a68:	4313      	orrs	r3, r2
         );
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3724      	adds	r7, #36	@ 0x24
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr
	...

08002a78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	3b01      	subs	r3, #1
 8002a84:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a88:	d301      	bcc.n	8002a8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e00f      	b.n	8002aae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a8e:	4a0a      	ldr	r2, [pc, #40]	@ (8002ab8 <SysTick_Config+0x40>)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	3b01      	subs	r3, #1
 8002a94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a96:	210f      	movs	r1, #15
 8002a98:	f04f 30ff 	mov.w	r0, #4294967295
 8002a9c:	f7ff ff8e 	bl	80029bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002aa0:	4b05      	ldr	r3, [pc, #20]	@ (8002ab8 <SysTick_Config+0x40>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002aa6:	4b04      	ldr	r3, [pc, #16]	@ (8002ab8 <SysTick_Config+0x40>)
 8002aa8:	2207      	movs	r2, #7
 8002aaa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3708      	adds	r7, #8
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	e000e010 	.word	0xe000e010

08002abc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	f7ff ff47 	bl	8002958 <__NVIC_SetPriorityGrouping>
}
 8002aca:	bf00      	nop
 8002acc:	3708      	adds	r7, #8
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}

08002ad2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ad2:	b580      	push	{r7, lr}
 8002ad4:	b086      	sub	sp, #24
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	4603      	mov	r3, r0
 8002ada:	60b9      	str	r1, [r7, #8]
 8002adc:	607a      	str	r2, [r7, #4]
 8002ade:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ae4:	f7ff ff5c 	bl	80029a0 <__NVIC_GetPriorityGrouping>
 8002ae8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	68b9      	ldr	r1, [r7, #8]
 8002aee:	6978      	ldr	r0, [r7, #20]
 8002af0:	f7ff ff8e 	bl	8002a10 <NVIC_EncodePriority>
 8002af4:	4602      	mov	r2, r0
 8002af6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002afa:	4611      	mov	r1, r2
 8002afc:	4618      	mov	r0, r3
 8002afe:	f7ff ff5d 	bl	80029bc <__NVIC_SetPriority>
}
 8002b02:	bf00      	nop
 8002b04:	3718      	adds	r7, #24
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}

08002b0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b0a:	b580      	push	{r7, lr}
 8002b0c:	b082      	sub	sp, #8
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f7ff ffb0 	bl	8002a78 <SysTick_Config>
 8002b18:	4603      	mov	r3, r0
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3708      	adds	r7, #8
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
	...

08002b24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b089      	sub	sp, #36	@ 0x24
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b32:	2300      	movs	r3, #0
 8002b34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b36:	2300      	movs	r3, #0
 8002b38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	61fb      	str	r3, [r7, #28]
 8002b3e:	e159      	b.n	8002df4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b40:	2201      	movs	r2, #1
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	fa02 f303 	lsl.w	r3, r2, r3
 8002b48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	697a      	ldr	r2, [r7, #20]
 8002b50:	4013      	ands	r3, r2
 8002b52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b54:	693a      	ldr	r2, [r7, #16]
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	f040 8148 	bne.w	8002dee <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	f003 0303 	and.w	r3, r3, #3
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d005      	beq.n	8002b76 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d130      	bne.n	8002bd8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	005b      	lsls	r3, r3, #1
 8002b80:	2203      	movs	r2, #3
 8002b82:	fa02 f303 	lsl.w	r3, r2, r3
 8002b86:	43db      	mvns	r3, r3
 8002b88:	69ba      	ldr	r2, [r7, #24]
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	68da      	ldr	r2, [r3, #12]
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	005b      	lsls	r3, r3, #1
 8002b96:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9a:	69ba      	ldr	r2, [r7, #24]
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	69ba      	ldr	r2, [r7, #24]
 8002ba4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002bac:	2201      	movs	r2, #1
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb4:	43db      	mvns	r3, r3
 8002bb6:	69ba      	ldr	r2, [r7, #24]
 8002bb8:	4013      	ands	r3, r2
 8002bba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	091b      	lsrs	r3, r3, #4
 8002bc2:	f003 0201 	and.w	r2, r3, #1
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bcc:	69ba      	ldr	r2, [r7, #24]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	69ba      	ldr	r2, [r7, #24]
 8002bd6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f003 0303 	and.w	r3, r3, #3
 8002be0:	2b03      	cmp	r3, #3
 8002be2:	d017      	beq.n	8002c14 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	005b      	lsls	r3, r3, #1
 8002bee:	2203      	movs	r2, #3
 8002bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf4:	43db      	mvns	r3, r3
 8002bf6:	69ba      	ldr	r2, [r7, #24]
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	689a      	ldr	r2, [r3, #8]
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	005b      	lsls	r3, r3, #1
 8002c04:	fa02 f303 	lsl.w	r3, r2, r3
 8002c08:	69ba      	ldr	r2, [r7, #24]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	69ba      	ldr	r2, [r7, #24]
 8002c12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f003 0303 	and.w	r3, r3, #3
 8002c1c:	2b02      	cmp	r3, #2
 8002c1e:	d123      	bne.n	8002c68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	08da      	lsrs	r2, r3, #3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	3208      	adds	r2, #8
 8002c28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	f003 0307 	and.w	r3, r3, #7
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	220f      	movs	r2, #15
 8002c38:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3c:	43db      	mvns	r3, r3
 8002c3e:	69ba      	ldr	r2, [r7, #24]
 8002c40:	4013      	ands	r3, r2
 8002c42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	691a      	ldr	r2, [r3, #16]
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	f003 0307 	and.w	r3, r3, #7
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	fa02 f303 	lsl.w	r3, r2, r3
 8002c54:	69ba      	ldr	r2, [r7, #24]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	08da      	lsrs	r2, r3, #3
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	3208      	adds	r2, #8
 8002c62:	69b9      	ldr	r1, [r7, #24]
 8002c64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	005b      	lsls	r3, r3, #1
 8002c72:	2203      	movs	r2, #3
 8002c74:	fa02 f303 	lsl.w	r3, r2, r3
 8002c78:	43db      	mvns	r3, r3
 8002c7a:	69ba      	ldr	r2, [r7, #24]
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f003 0203 	and.w	r2, r3, #3
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	005b      	lsls	r3, r3, #1
 8002c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c90:	69ba      	ldr	r2, [r7, #24]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	69ba      	ldr	r2, [r7, #24]
 8002c9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	f000 80a2 	beq.w	8002dee <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002caa:	2300      	movs	r3, #0
 8002cac:	60fb      	str	r3, [r7, #12]
 8002cae:	4b57      	ldr	r3, [pc, #348]	@ (8002e0c <HAL_GPIO_Init+0x2e8>)
 8002cb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cb2:	4a56      	ldr	r2, [pc, #344]	@ (8002e0c <HAL_GPIO_Init+0x2e8>)
 8002cb4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002cb8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002cba:	4b54      	ldr	r3, [pc, #336]	@ (8002e0c <HAL_GPIO_Init+0x2e8>)
 8002cbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cbe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002cc2:	60fb      	str	r3, [r7, #12]
 8002cc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002cc6:	4a52      	ldr	r2, [pc, #328]	@ (8002e10 <HAL_GPIO_Init+0x2ec>)
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	089b      	lsrs	r3, r3, #2
 8002ccc:	3302      	adds	r3, #2
 8002cce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	f003 0303 	and.w	r3, r3, #3
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	220f      	movs	r2, #15
 8002cde:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce2:	43db      	mvns	r3, r3
 8002ce4:	69ba      	ldr	r2, [r7, #24]
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a49      	ldr	r2, [pc, #292]	@ (8002e14 <HAL_GPIO_Init+0x2f0>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d019      	beq.n	8002d26 <HAL_GPIO_Init+0x202>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4a48      	ldr	r2, [pc, #288]	@ (8002e18 <HAL_GPIO_Init+0x2f4>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d013      	beq.n	8002d22 <HAL_GPIO_Init+0x1fe>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a47      	ldr	r2, [pc, #284]	@ (8002e1c <HAL_GPIO_Init+0x2f8>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d00d      	beq.n	8002d1e <HAL_GPIO_Init+0x1fa>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4a46      	ldr	r2, [pc, #280]	@ (8002e20 <HAL_GPIO_Init+0x2fc>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d007      	beq.n	8002d1a <HAL_GPIO_Init+0x1f6>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4a45      	ldr	r2, [pc, #276]	@ (8002e24 <HAL_GPIO_Init+0x300>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d101      	bne.n	8002d16 <HAL_GPIO_Init+0x1f2>
 8002d12:	2304      	movs	r3, #4
 8002d14:	e008      	b.n	8002d28 <HAL_GPIO_Init+0x204>
 8002d16:	2307      	movs	r3, #7
 8002d18:	e006      	b.n	8002d28 <HAL_GPIO_Init+0x204>
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e004      	b.n	8002d28 <HAL_GPIO_Init+0x204>
 8002d1e:	2302      	movs	r3, #2
 8002d20:	e002      	b.n	8002d28 <HAL_GPIO_Init+0x204>
 8002d22:	2301      	movs	r3, #1
 8002d24:	e000      	b.n	8002d28 <HAL_GPIO_Init+0x204>
 8002d26:	2300      	movs	r3, #0
 8002d28:	69fa      	ldr	r2, [r7, #28]
 8002d2a:	f002 0203 	and.w	r2, r2, #3
 8002d2e:	0092      	lsls	r2, r2, #2
 8002d30:	4093      	lsls	r3, r2
 8002d32:	69ba      	ldr	r2, [r7, #24]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d38:	4935      	ldr	r1, [pc, #212]	@ (8002e10 <HAL_GPIO_Init+0x2ec>)
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	089b      	lsrs	r3, r3, #2
 8002d3e:	3302      	adds	r3, #2
 8002d40:	69ba      	ldr	r2, [r7, #24]
 8002d42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d46:	4b38      	ldr	r3, [pc, #224]	@ (8002e28 <HAL_GPIO_Init+0x304>)
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	43db      	mvns	r3, r3
 8002d50:	69ba      	ldr	r2, [r7, #24]
 8002d52:	4013      	ands	r3, r2
 8002d54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d003      	beq.n	8002d6a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002d62:	69ba      	ldr	r2, [r7, #24]
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d6a:	4a2f      	ldr	r2, [pc, #188]	@ (8002e28 <HAL_GPIO_Init+0x304>)
 8002d6c:	69bb      	ldr	r3, [r7, #24]
 8002d6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d70:	4b2d      	ldr	r3, [pc, #180]	@ (8002e28 <HAL_GPIO_Init+0x304>)
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	43db      	mvns	r3, r3
 8002d7a:	69ba      	ldr	r2, [r7, #24]
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d003      	beq.n	8002d94 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002d8c:	69ba      	ldr	r2, [r7, #24]
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d94:	4a24      	ldr	r2, [pc, #144]	@ (8002e28 <HAL_GPIO_Init+0x304>)
 8002d96:	69bb      	ldr	r3, [r7, #24]
 8002d98:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d9a:	4b23      	ldr	r3, [pc, #140]	@ (8002e28 <HAL_GPIO_Init+0x304>)
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	43db      	mvns	r3, r3
 8002da4:	69ba      	ldr	r2, [r7, #24]
 8002da6:	4013      	ands	r3, r2
 8002da8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d003      	beq.n	8002dbe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002db6:	69ba      	ldr	r2, [r7, #24]
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002dbe:	4a1a      	ldr	r2, [pc, #104]	@ (8002e28 <HAL_GPIO_Init+0x304>)
 8002dc0:	69bb      	ldr	r3, [r7, #24]
 8002dc2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002dc4:	4b18      	ldr	r3, [pc, #96]	@ (8002e28 <HAL_GPIO_Init+0x304>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	43db      	mvns	r3, r3
 8002dce:	69ba      	ldr	r2, [r7, #24]
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d003      	beq.n	8002de8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002de0:	69ba      	ldr	r2, [r7, #24]
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	4313      	orrs	r3, r2
 8002de6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002de8:	4a0f      	ldr	r2, [pc, #60]	@ (8002e28 <HAL_GPIO_Init+0x304>)
 8002dea:	69bb      	ldr	r3, [r7, #24]
 8002dec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	3301      	adds	r3, #1
 8002df2:	61fb      	str	r3, [r7, #28]
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	2b0f      	cmp	r3, #15
 8002df8:	f67f aea2 	bls.w	8002b40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002dfc:	bf00      	nop
 8002dfe:	bf00      	nop
 8002e00:	3724      	adds	r7, #36	@ 0x24
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr
 8002e0a:	bf00      	nop
 8002e0c:	40023800 	.word	0x40023800
 8002e10:	40013800 	.word	0x40013800
 8002e14:	40020000 	.word	0x40020000
 8002e18:	40020400 	.word	0x40020400
 8002e1c:	40020800 	.word	0x40020800
 8002e20:	40020c00 	.word	0x40020c00
 8002e24:	40021000 	.word	0x40021000
 8002e28:	40013c00 	.word	0x40013c00

08002e2c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b085      	sub	sp, #20
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	460b      	mov	r3, r1
 8002e36:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	691a      	ldr	r2, [r3, #16]
 8002e3c:	887b      	ldrh	r3, [r7, #2]
 8002e3e:	4013      	ands	r3, r2
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d002      	beq.n	8002e4a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e44:	2301      	movs	r3, #1
 8002e46:	73fb      	strb	r3, [r7, #15]
 8002e48:	e001      	b.n	8002e4e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3714      	adds	r7, #20
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr

08002e5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	460b      	mov	r3, r1
 8002e66:	807b      	strh	r3, [r7, #2]
 8002e68:	4613      	mov	r3, r2
 8002e6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e6c:	787b      	ldrb	r3, [r7, #1]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d003      	beq.n	8002e7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e72:	887a      	ldrh	r2, [r7, #2]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e78:	e003      	b.n	8002e82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e7a:	887b      	ldrh	r3, [r7, #2]
 8002e7c:	041a      	lsls	r2, r3, #16
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	619a      	str	r2, [r3, #24]
}
 8002e82:	bf00      	nop
 8002e84:	370c      	adds	r7, #12
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
	...

08002e90 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b084      	sub	sp, #16
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d101      	bne.n	8002ea2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e12b      	b.n	80030fa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d106      	bne.n	8002ebc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f7ff f86c 	bl	8001f94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2224      	movs	r2, #36	@ 0x24
 8002ec0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f022 0201 	bic.w	r2, r2, #1
 8002ed2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002ee2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002ef2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ef4:	f001 fc20 	bl	8004738 <HAL_RCC_GetPCLK1Freq>
 8002ef8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	4a81      	ldr	r2, [pc, #516]	@ (8003104 <HAL_I2C_Init+0x274>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d807      	bhi.n	8002f14 <HAL_I2C_Init+0x84>
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	4a80      	ldr	r2, [pc, #512]	@ (8003108 <HAL_I2C_Init+0x278>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	bf94      	ite	ls
 8002f0c:	2301      	movls	r3, #1
 8002f0e:	2300      	movhi	r3, #0
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	e006      	b.n	8002f22 <HAL_I2C_Init+0x92>
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	4a7d      	ldr	r2, [pc, #500]	@ (800310c <HAL_I2C_Init+0x27c>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	bf94      	ite	ls
 8002f1c:	2301      	movls	r3, #1
 8002f1e:	2300      	movhi	r3, #0
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d001      	beq.n	8002f2a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e0e7      	b.n	80030fa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	4a78      	ldr	r2, [pc, #480]	@ (8003110 <HAL_I2C_Init+0x280>)
 8002f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f32:	0c9b      	lsrs	r3, r3, #18
 8002f34:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	68ba      	ldr	r2, [r7, #8]
 8002f46:	430a      	orrs	r2, r1
 8002f48:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	6a1b      	ldr	r3, [r3, #32]
 8002f50:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	4a6a      	ldr	r2, [pc, #424]	@ (8003104 <HAL_I2C_Init+0x274>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d802      	bhi.n	8002f64 <HAL_I2C_Init+0xd4>
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	3301      	adds	r3, #1
 8002f62:	e009      	b.n	8002f78 <HAL_I2C_Init+0xe8>
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002f6a:	fb02 f303 	mul.w	r3, r2, r3
 8002f6e:	4a69      	ldr	r2, [pc, #420]	@ (8003114 <HAL_I2C_Init+0x284>)
 8002f70:	fba2 2303 	umull	r2, r3, r2, r3
 8002f74:	099b      	lsrs	r3, r3, #6
 8002f76:	3301      	adds	r3, #1
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	6812      	ldr	r2, [r2, #0]
 8002f7c:	430b      	orrs	r3, r1
 8002f7e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	69db      	ldr	r3, [r3, #28]
 8002f86:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002f8a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	495c      	ldr	r1, [pc, #368]	@ (8003104 <HAL_I2C_Init+0x274>)
 8002f94:	428b      	cmp	r3, r1
 8002f96:	d819      	bhi.n	8002fcc <HAL_I2C_Init+0x13c>
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	1e59      	subs	r1, r3, #1
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	005b      	lsls	r3, r3, #1
 8002fa2:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fa6:	1c59      	adds	r1, r3, #1
 8002fa8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002fac:	400b      	ands	r3, r1
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d00a      	beq.n	8002fc8 <HAL_I2C_Init+0x138>
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	1e59      	subs	r1, r3, #1
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	005b      	lsls	r3, r3, #1
 8002fbc:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fc0:	3301      	adds	r3, #1
 8002fc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fc6:	e051      	b.n	800306c <HAL_I2C_Init+0x1dc>
 8002fc8:	2304      	movs	r3, #4
 8002fca:	e04f      	b.n	800306c <HAL_I2C_Init+0x1dc>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d111      	bne.n	8002ff8 <HAL_I2C_Init+0x168>
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	1e58      	subs	r0, r3, #1
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6859      	ldr	r1, [r3, #4]
 8002fdc:	460b      	mov	r3, r1
 8002fde:	005b      	lsls	r3, r3, #1
 8002fe0:	440b      	add	r3, r1
 8002fe2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fe6:	3301      	adds	r3, #1
 8002fe8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	bf0c      	ite	eq
 8002ff0:	2301      	moveq	r3, #1
 8002ff2:	2300      	movne	r3, #0
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	e012      	b.n	800301e <HAL_I2C_Init+0x18e>
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	1e58      	subs	r0, r3, #1
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6859      	ldr	r1, [r3, #4]
 8003000:	460b      	mov	r3, r1
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	440b      	add	r3, r1
 8003006:	0099      	lsls	r1, r3, #2
 8003008:	440b      	add	r3, r1
 800300a:	fbb0 f3f3 	udiv	r3, r0, r3
 800300e:	3301      	adds	r3, #1
 8003010:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003014:	2b00      	cmp	r3, #0
 8003016:	bf0c      	ite	eq
 8003018:	2301      	moveq	r3, #1
 800301a:	2300      	movne	r3, #0
 800301c:	b2db      	uxtb	r3, r3
 800301e:	2b00      	cmp	r3, #0
 8003020:	d001      	beq.n	8003026 <HAL_I2C_Init+0x196>
 8003022:	2301      	movs	r3, #1
 8003024:	e022      	b.n	800306c <HAL_I2C_Init+0x1dc>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d10e      	bne.n	800304c <HAL_I2C_Init+0x1bc>
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	1e58      	subs	r0, r3, #1
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6859      	ldr	r1, [r3, #4]
 8003036:	460b      	mov	r3, r1
 8003038:	005b      	lsls	r3, r3, #1
 800303a:	440b      	add	r3, r1
 800303c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003040:	3301      	adds	r3, #1
 8003042:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003046:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800304a:	e00f      	b.n	800306c <HAL_I2C_Init+0x1dc>
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	1e58      	subs	r0, r3, #1
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6859      	ldr	r1, [r3, #4]
 8003054:	460b      	mov	r3, r1
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	440b      	add	r3, r1
 800305a:	0099      	lsls	r1, r3, #2
 800305c:	440b      	add	r3, r1
 800305e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003062:	3301      	adds	r3, #1
 8003064:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003068:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800306c:	6879      	ldr	r1, [r7, #4]
 800306e:	6809      	ldr	r1, [r1, #0]
 8003070:	4313      	orrs	r3, r2
 8003072:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	69da      	ldr	r2, [r3, #28]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6a1b      	ldr	r3, [r3, #32]
 8003086:	431a      	orrs	r2, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	430a      	orrs	r2, r1
 800308e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800309a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	6911      	ldr	r1, [r2, #16]
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	68d2      	ldr	r2, [r2, #12]
 80030a6:	4311      	orrs	r1, r2
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	6812      	ldr	r2, [r2, #0]
 80030ac:	430b      	orrs	r3, r1
 80030ae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	68db      	ldr	r3, [r3, #12]
 80030b6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	695a      	ldr	r2, [r3, #20]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	699b      	ldr	r3, [r3, #24]
 80030c2:	431a      	orrs	r2, r3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	430a      	orrs	r2, r1
 80030ca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f042 0201 	orr.w	r2, r2, #1
 80030da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2200      	movs	r2, #0
 80030e0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2220      	movs	r2, #32
 80030e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2200      	movs	r2, #0
 80030f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80030f8:	2300      	movs	r3, #0
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3710      	adds	r7, #16
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	000186a0 	.word	0x000186a0
 8003108:	001e847f 	.word	0x001e847f
 800310c:	003d08ff 	.word	0x003d08ff
 8003110:	431bde83 	.word	0x431bde83
 8003114:	10624dd3 	.word	0x10624dd3

08003118 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b088      	sub	sp, #32
 800311c:	af02      	add	r7, sp, #8
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	4608      	mov	r0, r1
 8003122:	4611      	mov	r1, r2
 8003124:	461a      	mov	r2, r3
 8003126:	4603      	mov	r3, r0
 8003128:	817b      	strh	r3, [r7, #10]
 800312a:	460b      	mov	r3, r1
 800312c:	813b      	strh	r3, [r7, #8]
 800312e:	4613      	mov	r3, r2
 8003130:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003132:	f7ff f96f 	bl	8002414 <HAL_GetTick>
 8003136:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800313e:	b2db      	uxtb	r3, r3
 8003140:	2b20      	cmp	r3, #32
 8003142:	f040 80d9 	bne.w	80032f8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	9300      	str	r3, [sp, #0]
 800314a:	2319      	movs	r3, #25
 800314c:	2201      	movs	r2, #1
 800314e:	496d      	ldr	r1, [pc, #436]	@ (8003304 <HAL_I2C_Mem_Write+0x1ec>)
 8003150:	68f8      	ldr	r0, [r7, #12]
 8003152:	f000 fc8b 	bl	8003a6c <I2C_WaitOnFlagUntilTimeout>
 8003156:	4603      	mov	r3, r0
 8003158:	2b00      	cmp	r3, #0
 800315a:	d001      	beq.n	8003160 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800315c:	2302      	movs	r3, #2
 800315e:	e0cc      	b.n	80032fa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003166:	2b01      	cmp	r3, #1
 8003168:	d101      	bne.n	800316e <HAL_I2C_Mem_Write+0x56>
 800316a:	2302      	movs	r3, #2
 800316c:	e0c5      	b.n	80032fa <HAL_I2C_Mem_Write+0x1e2>
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2201      	movs	r2, #1
 8003172:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 0301 	and.w	r3, r3, #1
 8003180:	2b01      	cmp	r3, #1
 8003182:	d007      	beq.n	8003194 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f042 0201 	orr.w	r2, r2, #1
 8003192:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80031a2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2221      	movs	r2, #33	@ 0x21
 80031a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2240      	movs	r2, #64	@ 0x40
 80031b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2200      	movs	r2, #0
 80031b8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	6a3a      	ldr	r2, [r7, #32]
 80031be:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80031c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031ca:	b29a      	uxth	r2, r3
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	4a4d      	ldr	r2, [pc, #308]	@ (8003308 <HAL_I2C_Mem_Write+0x1f0>)
 80031d4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80031d6:	88f8      	ldrh	r0, [r7, #6]
 80031d8:	893a      	ldrh	r2, [r7, #8]
 80031da:	8979      	ldrh	r1, [r7, #10]
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	9301      	str	r3, [sp, #4]
 80031e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031e2:	9300      	str	r3, [sp, #0]
 80031e4:	4603      	mov	r3, r0
 80031e6:	68f8      	ldr	r0, [r7, #12]
 80031e8:	f000 fac2 	bl	8003770 <I2C_RequestMemoryWrite>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d052      	beq.n	8003298 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e081      	b.n	80032fa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031f6:	697a      	ldr	r2, [r7, #20]
 80031f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80031fa:	68f8      	ldr	r0, [r7, #12]
 80031fc:	f000 fd50 	bl	8003ca0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d00d      	beq.n	8003222 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800320a:	2b04      	cmp	r3, #4
 800320c:	d107      	bne.n	800321e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800321c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e06b      	b.n	80032fa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003226:	781a      	ldrb	r2, [r3, #0]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003232:	1c5a      	adds	r2, r3, #1
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800323c:	3b01      	subs	r3, #1
 800323e:	b29a      	uxth	r2, r3
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003248:	b29b      	uxth	r3, r3
 800324a:	3b01      	subs	r3, #1
 800324c:	b29a      	uxth	r2, r3
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	695b      	ldr	r3, [r3, #20]
 8003258:	f003 0304 	and.w	r3, r3, #4
 800325c:	2b04      	cmp	r3, #4
 800325e:	d11b      	bne.n	8003298 <HAL_I2C_Mem_Write+0x180>
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003264:	2b00      	cmp	r3, #0
 8003266:	d017      	beq.n	8003298 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800326c:	781a      	ldrb	r2, [r3, #0]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003278:	1c5a      	adds	r2, r3, #1
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003282:	3b01      	subs	r3, #1
 8003284:	b29a      	uxth	r2, r3
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800328e:	b29b      	uxth	r3, r3
 8003290:	3b01      	subs	r3, #1
 8003292:	b29a      	uxth	r2, r3
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800329c:	2b00      	cmp	r3, #0
 800329e:	d1aa      	bne.n	80031f6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032a0:	697a      	ldr	r2, [r7, #20]
 80032a2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80032a4:	68f8      	ldr	r0, [r7, #12]
 80032a6:	f000 fd43 	bl	8003d30 <I2C_WaitOnBTFFlagUntilTimeout>
 80032aa:	4603      	mov	r3, r0
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d00d      	beq.n	80032cc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032b4:	2b04      	cmp	r3, #4
 80032b6:	d107      	bne.n	80032c8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032c6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e016      	b.n	80032fa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2220      	movs	r2, #32
 80032e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2200      	movs	r2, #0
 80032e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2200      	movs	r2, #0
 80032f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80032f4:	2300      	movs	r3, #0
 80032f6:	e000      	b.n	80032fa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80032f8:	2302      	movs	r3, #2
  }
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3718      	adds	r7, #24
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	00100002 	.word	0x00100002
 8003308:	ffff0000 	.word	0xffff0000

0800330c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b08c      	sub	sp, #48	@ 0x30
 8003310:	af02      	add	r7, sp, #8
 8003312:	60f8      	str	r0, [r7, #12]
 8003314:	4608      	mov	r0, r1
 8003316:	4611      	mov	r1, r2
 8003318:	461a      	mov	r2, r3
 800331a:	4603      	mov	r3, r0
 800331c:	817b      	strh	r3, [r7, #10]
 800331e:	460b      	mov	r3, r1
 8003320:	813b      	strh	r3, [r7, #8]
 8003322:	4613      	mov	r3, r2
 8003324:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003326:	f7ff f875 	bl	8002414 <HAL_GetTick>
 800332a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003332:	b2db      	uxtb	r3, r3
 8003334:	2b20      	cmp	r3, #32
 8003336:	f040 8214 	bne.w	8003762 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800333a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800333c:	9300      	str	r3, [sp, #0]
 800333e:	2319      	movs	r3, #25
 8003340:	2201      	movs	r2, #1
 8003342:	497b      	ldr	r1, [pc, #492]	@ (8003530 <HAL_I2C_Mem_Read+0x224>)
 8003344:	68f8      	ldr	r0, [r7, #12]
 8003346:	f000 fb91 	bl	8003a6c <I2C_WaitOnFlagUntilTimeout>
 800334a:	4603      	mov	r3, r0
 800334c:	2b00      	cmp	r3, #0
 800334e:	d001      	beq.n	8003354 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003350:	2302      	movs	r3, #2
 8003352:	e207      	b.n	8003764 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800335a:	2b01      	cmp	r3, #1
 800335c:	d101      	bne.n	8003362 <HAL_I2C_Mem_Read+0x56>
 800335e:	2302      	movs	r3, #2
 8003360:	e200      	b.n	8003764 <HAL_I2C_Mem_Read+0x458>
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2201      	movs	r2, #1
 8003366:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0301 	and.w	r3, r3, #1
 8003374:	2b01      	cmp	r3, #1
 8003376:	d007      	beq.n	8003388 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f042 0201 	orr.w	r2, r2, #1
 8003386:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003396:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2222      	movs	r2, #34	@ 0x22
 800339c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2240      	movs	r2, #64	@ 0x40
 80033a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2200      	movs	r2, #0
 80033ac:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80033b2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80033b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033be:	b29a      	uxth	r2, r3
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	4a5b      	ldr	r2, [pc, #364]	@ (8003534 <HAL_I2C_Mem_Read+0x228>)
 80033c8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80033ca:	88f8      	ldrh	r0, [r7, #6]
 80033cc:	893a      	ldrh	r2, [r7, #8]
 80033ce:	8979      	ldrh	r1, [r7, #10]
 80033d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033d2:	9301      	str	r3, [sp, #4]
 80033d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033d6:	9300      	str	r3, [sp, #0]
 80033d8:	4603      	mov	r3, r0
 80033da:	68f8      	ldr	r0, [r7, #12]
 80033dc:	f000 fa5e 	bl	800389c <I2C_RequestMemoryRead>
 80033e0:	4603      	mov	r3, r0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d001      	beq.n	80033ea <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e1bc      	b.n	8003764 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d113      	bne.n	800341a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033f2:	2300      	movs	r3, #0
 80033f4:	623b      	str	r3, [r7, #32]
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	695b      	ldr	r3, [r3, #20]
 80033fc:	623b      	str	r3, [r7, #32]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	699b      	ldr	r3, [r3, #24]
 8003404:	623b      	str	r3, [r7, #32]
 8003406:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003416:	601a      	str	r2, [r3, #0]
 8003418:	e190      	b.n	800373c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800341e:	2b01      	cmp	r3, #1
 8003420:	d11b      	bne.n	800345a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003430:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003432:	2300      	movs	r3, #0
 8003434:	61fb      	str	r3, [r7, #28]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	695b      	ldr	r3, [r3, #20]
 800343c:	61fb      	str	r3, [r7, #28]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	699b      	ldr	r3, [r3, #24]
 8003444:	61fb      	str	r3, [r7, #28]
 8003446:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003456:	601a      	str	r2, [r3, #0]
 8003458:	e170      	b.n	800373c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800345e:	2b02      	cmp	r3, #2
 8003460:	d11b      	bne.n	800349a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003470:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003480:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003482:	2300      	movs	r3, #0
 8003484:	61bb      	str	r3, [r7, #24]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	695b      	ldr	r3, [r3, #20]
 800348c:	61bb      	str	r3, [r7, #24]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	699b      	ldr	r3, [r3, #24]
 8003494:	61bb      	str	r3, [r7, #24]
 8003496:	69bb      	ldr	r3, [r7, #24]
 8003498:	e150      	b.n	800373c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800349a:	2300      	movs	r3, #0
 800349c:	617b      	str	r3, [r7, #20]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	695b      	ldr	r3, [r3, #20]
 80034a4:	617b      	str	r3, [r7, #20]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	699b      	ldr	r3, [r3, #24]
 80034ac:	617b      	str	r3, [r7, #20]
 80034ae:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80034b0:	e144      	b.n	800373c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034b6:	2b03      	cmp	r3, #3
 80034b8:	f200 80f1 	bhi.w	800369e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d123      	bne.n	800350c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034c6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80034c8:	68f8      	ldr	r0, [r7, #12]
 80034ca:	f000 fc79 	bl	8003dc0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d001      	beq.n	80034d8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e145      	b.n	8003764 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	691a      	ldr	r2, [r3, #16]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034e2:	b2d2      	uxtb	r2, r2
 80034e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ea:	1c5a      	adds	r2, r3, #1
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034f4:	3b01      	subs	r3, #1
 80034f6:	b29a      	uxth	r2, r3
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003500:	b29b      	uxth	r3, r3
 8003502:	3b01      	subs	r3, #1
 8003504:	b29a      	uxth	r2, r3
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800350a:	e117      	b.n	800373c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003510:	2b02      	cmp	r3, #2
 8003512:	d14e      	bne.n	80035b2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003516:	9300      	str	r3, [sp, #0]
 8003518:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800351a:	2200      	movs	r2, #0
 800351c:	4906      	ldr	r1, [pc, #24]	@ (8003538 <HAL_I2C_Mem_Read+0x22c>)
 800351e:	68f8      	ldr	r0, [r7, #12]
 8003520:	f000 faa4 	bl	8003a6c <I2C_WaitOnFlagUntilTimeout>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d008      	beq.n	800353c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e11a      	b.n	8003764 <HAL_I2C_Mem_Read+0x458>
 800352e:	bf00      	nop
 8003530:	00100002 	.word	0x00100002
 8003534:	ffff0000 	.word	0xffff0000
 8003538:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800354a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	691a      	ldr	r2, [r3, #16]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003556:	b2d2      	uxtb	r2, r2
 8003558:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800355e:	1c5a      	adds	r2, r3, #1
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003568:	3b01      	subs	r3, #1
 800356a:	b29a      	uxth	r2, r3
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003574:	b29b      	uxth	r3, r3
 8003576:	3b01      	subs	r3, #1
 8003578:	b29a      	uxth	r2, r3
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	691a      	ldr	r2, [r3, #16]
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003588:	b2d2      	uxtb	r2, r2
 800358a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003590:	1c5a      	adds	r2, r3, #1
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800359a:	3b01      	subs	r3, #1
 800359c:	b29a      	uxth	r2, r3
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035a6:	b29b      	uxth	r3, r3
 80035a8:	3b01      	subs	r3, #1
 80035aa:	b29a      	uxth	r2, r3
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80035b0:	e0c4      	b.n	800373c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80035b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035b4:	9300      	str	r3, [sp, #0]
 80035b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035b8:	2200      	movs	r2, #0
 80035ba:	496c      	ldr	r1, [pc, #432]	@ (800376c <HAL_I2C_Mem_Read+0x460>)
 80035bc:	68f8      	ldr	r0, [r7, #12]
 80035be:	f000 fa55 	bl	8003a6c <I2C_WaitOnFlagUntilTimeout>
 80035c2:	4603      	mov	r3, r0
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d001      	beq.n	80035cc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e0cb      	b.n	8003764 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	691a      	ldr	r2, [r3, #16]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035e6:	b2d2      	uxtb	r2, r2
 80035e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ee:	1c5a      	adds	r2, r3, #1
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035f8:	3b01      	subs	r3, #1
 80035fa:	b29a      	uxth	r2, r3
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003604:	b29b      	uxth	r3, r3
 8003606:	3b01      	subs	r3, #1
 8003608:	b29a      	uxth	r2, r3
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800360e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003610:	9300      	str	r3, [sp, #0]
 8003612:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003614:	2200      	movs	r2, #0
 8003616:	4955      	ldr	r1, [pc, #340]	@ (800376c <HAL_I2C_Mem_Read+0x460>)
 8003618:	68f8      	ldr	r0, [r7, #12]
 800361a:	f000 fa27 	bl	8003a6c <I2C_WaitOnFlagUntilTimeout>
 800361e:	4603      	mov	r3, r0
 8003620:	2b00      	cmp	r3, #0
 8003622:	d001      	beq.n	8003628 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e09d      	b.n	8003764 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003636:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	691a      	ldr	r2, [r3, #16]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003642:	b2d2      	uxtb	r2, r2
 8003644:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800364a:	1c5a      	adds	r2, r3, #1
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003654:	3b01      	subs	r3, #1
 8003656:	b29a      	uxth	r2, r3
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003660:	b29b      	uxth	r3, r3
 8003662:	3b01      	subs	r3, #1
 8003664:	b29a      	uxth	r2, r3
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	691a      	ldr	r2, [r3, #16]
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003674:	b2d2      	uxtb	r2, r2
 8003676:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800367c:	1c5a      	adds	r2, r3, #1
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003686:	3b01      	subs	r3, #1
 8003688:	b29a      	uxth	r2, r3
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003692:	b29b      	uxth	r3, r3
 8003694:	3b01      	subs	r3, #1
 8003696:	b29a      	uxth	r2, r3
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800369c:	e04e      	b.n	800373c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800369e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036a0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80036a2:	68f8      	ldr	r0, [r7, #12]
 80036a4:	f000 fb8c 	bl	8003dc0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d001      	beq.n	80036b2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e058      	b.n	8003764 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	691a      	ldr	r2, [r3, #16]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036bc:	b2d2      	uxtb	r2, r2
 80036be:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036c4:	1c5a      	adds	r2, r3, #1
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036ce:	3b01      	subs	r3, #1
 80036d0:	b29a      	uxth	r2, r3
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036da:	b29b      	uxth	r3, r3
 80036dc:	3b01      	subs	r3, #1
 80036de:	b29a      	uxth	r2, r3
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	695b      	ldr	r3, [r3, #20]
 80036ea:	f003 0304 	and.w	r3, r3, #4
 80036ee:	2b04      	cmp	r3, #4
 80036f0:	d124      	bne.n	800373c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036f6:	2b03      	cmp	r3, #3
 80036f8:	d107      	bne.n	800370a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003708:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	691a      	ldr	r2, [r3, #16]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003714:	b2d2      	uxtb	r2, r2
 8003716:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800371c:	1c5a      	adds	r2, r3, #1
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003726:	3b01      	subs	r3, #1
 8003728:	b29a      	uxth	r2, r3
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003732:	b29b      	uxth	r3, r3
 8003734:	3b01      	subs	r3, #1
 8003736:	b29a      	uxth	r2, r3
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003740:	2b00      	cmp	r3, #0
 8003742:	f47f aeb6 	bne.w	80034b2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2220      	movs	r2, #32
 800374a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2200      	movs	r2, #0
 8003752:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2200      	movs	r2, #0
 800375a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800375e:	2300      	movs	r3, #0
 8003760:	e000      	b.n	8003764 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003762:	2302      	movs	r3, #2
  }
}
 8003764:	4618      	mov	r0, r3
 8003766:	3728      	adds	r7, #40	@ 0x28
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}
 800376c:	00010004 	.word	0x00010004

08003770 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b088      	sub	sp, #32
 8003774:	af02      	add	r7, sp, #8
 8003776:	60f8      	str	r0, [r7, #12]
 8003778:	4608      	mov	r0, r1
 800377a:	4611      	mov	r1, r2
 800377c:	461a      	mov	r2, r3
 800377e:	4603      	mov	r3, r0
 8003780:	817b      	strh	r3, [r7, #10]
 8003782:	460b      	mov	r3, r1
 8003784:	813b      	strh	r3, [r7, #8]
 8003786:	4613      	mov	r3, r2
 8003788:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003798:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800379a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800379c:	9300      	str	r3, [sp, #0]
 800379e:	6a3b      	ldr	r3, [r7, #32]
 80037a0:	2200      	movs	r2, #0
 80037a2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80037a6:	68f8      	ldr	r0, [r7, #12]
 80037a8:	f000 f960 	bl	8003a6c <I2C_WaitOnFlagUntilTimeout>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d00d      	beq.n	80037ce <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80037c0:	d103      	bne.n	80037ca <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80037c8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80037ca:	2303      	movs	r3, #3
 80037cc:	e05f      	b.n	800388e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80037ce:	897b      	ldrh	r3, [r7, #10]
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	461a      	mov	r2, r3
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80037dc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80037de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037e0:	6a3a      	ldr	r2, [r7, #32]
 80037e2:	492d      	ldr	r1, [pc, #180]	@ (8003898 <I2C_RequestMemoryWrite+0x128>)
 80037e4:	68f8      	ldr	r0, [r7, #12]
 80037e6:	f000 f9bb 	bl	8003b60 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037ea:	4603      	mov	r3, r0
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d001      	beq.n	80037f4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e04c      	b.n	800388e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037f4:	2300      	movs	r3, #0
 80037f6:	617b      	str	r3, [r7, #20]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	695b      	ldr	r3, [r3, #20]
 80037fe:	617b      	str	r3, [r7, #20]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	699b      	ldr	r3, [r3, #24]
 8003806:	617b      	str	r3, [r7, #20]
 8003808:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800380a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800380c:	6a39      	ldr	r1, [r7, #32]
 800380e:	68f8      	ldr	r0, [r7, #12]
 8003810:	f000 fa46 	bl	8003ca0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003814:	4603      	mov	r3, r0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d00d      	beq.n	8003836 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800381e:	2b04      	cmp	r3, #4
 8003820:	d107      	bne.n	8003832 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003830:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e02b      	b.n	800388e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003836:	88fb      	ldrh	r3, [r7, #6]
 8003838:	2b01      	cmp	r3, #1
 800383a:	d105      	bne.n	8003848 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800383c:	893b      	ldrh	r3, [r7, #8]
 800383e:	b2da      	uxtb	r2, r3
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	611a      	str	r2, [r3, #16]
 8003846:	e021      	b.n	800388c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003848:	893b      	ldrh	r3, [r7, #8]
 800384a:	0a1b      	lsrs	r3, r3, #8
 800384c:	b29b      	uxth	r3, r3
 800384e:	b2da      	uxtb	r2, r3
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003856:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003858:	6a39      	ldr	r1, [r7, #32]
 800385a:	68f8      	ldr	r0, [r7, #12]
 800385c:	f000 fa20 	bl	8003ca0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003860:	4603      	mov	r3, r0
 8003862:	2b00      	cmp	r3, #0
 8003864:	d00d      	beq.n	8003882 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800386a:	2b04      	cmp	r3, #4
 800386c:	d107      	bne.n	800387e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800387c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e005      	b.n	800388e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003882:	893b      	ldrh	r3, [r7, #8]
 8003884:	b2da      	uxtb	r2, r3
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800388c:	2300      	movs	r3, #0
}
 800388e:	4618      	mov	r0, r3
 8003890:	3718      	adds	r7, #24
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop
 8003898:	00010002 	.word	0x00010002

0800389c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b088      	sub	sp, #32
 80038a0:	af02      	add	r7, sp, #8
 80038a2:	60f8      	str	r0, [r7, #12]
 80038a4:	4608      	mov	r0, r1
 80038a6:	4611      	mov	r1, r2
 80038a8:	461a      	mov	r2, r3
 80038aa:	4603      	mov	r3, r0
 80038ac:	817b      	strh	r3, [r7, #10]
 80038ae:	460b      	mov	r3, r1
 80038b0:	813b      	strh	r3, [r7, #8]
 80038b2:	4613      	mov	r3, r2
 80038b4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80038c4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80038d4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80038d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038d8:	9300      	str	r3, [sp, #0]
 80038da:	6a3b      	ldr	r3, [r7, #32]
 80038dc:	2200      	movs	r2, #0
 80038de:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80038e2:	68f8      	ldr	r0, [r7, #12]
 80038e4:	f000 f8c2 	bl	8003a6c <I2C_WaitOnFlagUntilTimeout>
 80038e8:	4603      	mov	r3, r0
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d00d      	beq.n	800390a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80038fc:	d103      	bne.n	8003906 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003904:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003906:	2303      	movs	r3, #3
 8003908:	e0aa      	b.n	8003a60 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800390a:	897b      	ldrh	r3, [r7, #10]
 800390c:	b2db      	uxtb	r3, r3
 800390e:	461a      	mov	r2, r3
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003918:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800391a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800391c:	6a3a      	ldr	r2, [r7, #32]
 800391e:	4952      	ldr	r1, [pc, #328]	@ (8003a68 <I2C_RequestMemoryRead+0x1cc>)
 8003920:	68f8      	ldr	r0, [r7, #12]
 8003922:	f000 f91d 	bl	8003b60 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003926:	4603      	mov	r3, r0
 8003928:	2b00      	cmp	r3, #0
 800392a:	d001      	beq.n	8003930 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	e097      	b.n	8003a60 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003930:	2300      	movs	r3, #0
 8003932:	617b      	str	r3, [r7, #20]
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	695b      	ldr	r3, [r3, #20]
 800393a:	617b      	str	r3, [r7, #20]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	699b      	ldr	r3, [r3, #24]
 8003942:	617b      	str	r3, [r7, #20]
 8003944:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003946:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003948:	6a39      	ldr	r1, [r7, #32]
 800394a:	68f8      	ldr	r0, [r7, #12]
 800394c:	f000 f9a8 	bl	8003ca0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003950:	4603      	mov	r3, r0
 8003952:	2b00      	cmp	r3, #0
 8003954:	d00d      	beq.n	8003972 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800395a:	2b04      	cmp	r3, #4
 800395c:	d107      	bne.n	800396e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800396c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e076      	b.n	8003a60 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003972:	88fb      	ldrh	r3, [r7, #6]
 8003974:	2b01      	cmp	r3, #1
 8003976:	d105      	bne.n	8003984 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003978:	893b      	ldrh	r3, [r7, #8]
 800397a:	b2da      	uxtb	r2, r3
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	611a      	str	r2, [r3, #16]
 8003982:	e021      	b.n	80039c8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003984:	893b      	ldrh	r3, [r7, #8]
 8003986:	0a1b      	lsrs	r3, r3, #8
 8003988:	b29b      	uxth	r3, r3
 800398a:	b2da      	uxtb	r2, r3
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003992:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003994:	6a39      	ldr	r1, [r7, #32]
 8003996:	68f8      	ldr	r0, [r7, #12]
 8003998:	f000 f982 	bl	8003ca0 <I2C_WaitOnTXEFlagUntilTimeout>
 800399c:	4603      	mov	r3, r0
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d00d      	beq.n	80039be <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039a6:	2b04      	cmp	r3, #4
 80039a8:	d107      	bne.n	80039ba <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039b8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e050      	b.n	8003a60 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80039be:	893b      	ldrh	r3, [r7, #8]
 80039c0:	b2da      	uxtb	r2, r3
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039ca:	6a39      	ldr	r1, [r7, #32]
 80039cc:	68f8      	ldr	r0, [r7, #12]
 80039ce:	f000 f967 	bl	8003ca0 <I2C_WaitOnTXEFlagUntilTimeout>
 80039d2:	4603      	mov	r3, r0
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d00d      	beq.n	80039f4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039dc:	2b04      	cmp	r3, #4
 80039de:	d107      	bne.n	80039f0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039ee:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e035      	b.n	8003a60 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a02:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a06:	9300      	str	r3, [sp, #0]
 8003a08:	6a3b      	ldr	r3, [r7, #32]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003a10:	68f8      	ldr	r0, [r7, #12]
 8003a12:	f000 f82b 	bl	8003a6c <I2C_WaitOnFlagUntilTimeout>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d00d      	beq.n	8003a38 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a2a:	d103      	bne.n	8003a34 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a32:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003a34:	2303      	movs	r3, #3
 8003a36:	e013      	b.n	8003a60 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003a38:	897b      	ldrh	r3, [r7, #10]
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	f043 0301 	orr.w	r3, r3, #1
 8003a40:	b2da      	uxtb	r2, r3
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a4a:	6a3a      	ldr	r2, [r7, #32]
 8003a4c:	4906      	ldr	r1, [pc, #24]	@ (8003a68 <I2C_RequestMemoryRead+0x1cc>)
 8003a4e:	68f8      	ldr	r0, [r7, #12]
 8003a50:	f000 f886 	bl	8003b60 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d001      	beq.n	8003a5e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e000      	b.n	8003a60 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003a5e:	2300      	movs	r3, #0
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3718      	adds	r7, #24
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}
 8003a68:	00010002 	.word	0x00010002

08003a6c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b084      	sub	sp, #16
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	60f8      	str	r0, [r7, #12]
 8003a74:	60b9      	str	r1, [r7, #8]
 8003a76:	603b      	str	r3, [r7, #0]
 8003a78:	4613      	mov	r3, r2
 8003a7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a7c:	e048      	b.n	8003b10 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a84:	d044      	beq.n	8003b10 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a86:	f7fe fcc5 	bl	8002414 <HAL_GetTick>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	69bb      	ldr	r3, [r7, #24]
 8003a8e:	1ad3      	subs	r3, r2, r3
 8003a90:	683a      	ldr	r2, [r7, #0]
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d302      	bcc.n	8003a9c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d139      	bne.n	8003b10 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	0c1b      	lsrs	r3, r3, #16
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d10d      	bne.n	8003ac2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	695b      	ldr	r3, [r3, #20]
 8003aac:	43da      	mvns	r2, r3
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	bf0c      	ite	eq
 8003ab8:	2301      	moveq	r3, #1
 8003aba:	2300      	movne	r3, #0
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	461a      	mov	r2, r3
 8003ac0:	e00c      	b.n	8003adc <I2C_WaitOnFlagUntilTimeout+0x70>
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	699b      	ldr	r3, [r3, #24]
 8003ac8:	43da      	mvns	r2, r3
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	4013      	ands	r3, r2
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	bf0c      	ite	eq
 8003ad4:	2301      	moveq	r3, #1
 8003ad6:	2300      	movne	r3, #0
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	461a      	mov	r2, r3
 8003adc:	79fb      	ldrb	r3, [r7, #7]
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d116      	bne.n	8003b10 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2220      	movs	r2, #32
 8003aec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2200      	movs	r2, #0
 8003af4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003afc:	f043 0220 	orr.w	r2, r3, #32
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2200      	movs	r2, #0
 8003b08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e023      	b.n	8003b58 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	0c1b      	lsrs	r3, r3, #16
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d10d      	bne.n	8003b36 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	695b      	ldr	r3, [r3, #20]
 8003b20:	43da      	mvns	r2, r3
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	4013      	ands	r3, r2
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	bf0c      	ite	eq
 8003b2c:	2301      	moveq	r3, #1
 8003b2e:	2300      	movne	r3, #0
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	461a      	mov	r2, r3
 8003b34:	e00c      	b.n	8003b50 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	699b      	ldr	r3, [r3, #24]
 8003b3c:	43da      	mvns	r2, r3
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	4013      	ands	r3, r2
 8003b42:	b29b      	uxth	r3, r3
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	bf0c      	ite	eq
 8003b48:	2301      	moveq	r3, #1
 8003b4a:	2300      	movne	r3, #0
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	461a      	mov	r2, r3
 8003b50:	79fb      	ldrb	r3, [r7, #7]
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d093      	beq.n	8003a7e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b56:	2300      	movs	r3, #0
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3710      	adds	r7, #16
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}

08003b60 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b084      	sub	sp, #16
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	60f8      	str	r0, [r7, #12]
 8003b68:	60b9      	str	r1, [r7, #8]
 8003b6a:	607a      	str	r2, [r7, #4]
 8003b6c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003b6e:	e071      	b.n	8003c54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	695b      	ldr	r3, [r3, #20]
 8003b76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b7e:	d123      	bne.n	8003bc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b8e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003b98:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2220      	movs	r2, #32
 8003ba4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2200      	movs	r2, #0
 8003bac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bb4:	f043 0204 	orr.w	r2, r3, #4
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e067      	b.n	8003c98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bce:	d041      	beq.n	8003c54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bd0:	f7fe fc20 	bl	8002414 <HAL_GetTick>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d302      	bcc.n	8003be6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d136      	bne.n	8003c54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	0c1b      	lsrs	r3, r3, #16
 8003bea:	b2db      	uxtb	r3, r3
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d10c      	bne.n	8003c0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	695b      	ldr	r3, [r3, #20]
 8003bf6:	43da      	mvns	r2, r3
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	bf14      	ite	ne
 8003c02:	2301      	movne	r3, #1
 8003c04:	2300      	moveq	r3, #0
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	e00b      	b.n	8003c22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	699b      	ldr	r3, [r3, #24]
 8003c10:	43da      	mvns	r2, r3
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	4013      	ands	r3, r2
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	bf14      	ite	ne
 8003c1c:	2301      	movne	r3, #1
 8003c1e:	2300      	moveq	r3, #0
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d016      	beq.n	8003c54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2220      	movs	r2, #32
 8003c30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2200      	movs	r2, #0
 8003c38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c40:	f043 0220 	orr.w	r2, r3, #32
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e021      	b.n	8003c98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	0c1b      	lsrs	r3, r3, #16
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d10c      	bne.n	8003c78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	695b      	ldr	r3, [r3, #20]
 8003c64:	43da      	mvns	r2, r3
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	4013      	ands	r3, r2
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	bf14      	ite	ne
 8003c70:	2301      	movne	r3, #1
 8003c72:	2300      	moveq	r3, #0
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	e00b      	b.n	8003c90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	699b      	ldr	r3, [r3, #24]
 8003c7e:	43da      	mvns	r2, r3
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	4013      	ands	r3, r2
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	bf14      	ite	ne
 8003c8a:	2301      	movne	r3, #1
 8003c8c:	2300      	moveq	r3, #0
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	f47f af6d 	bne.w	8003b70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003c96:	2300      	movs	r3, #0
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3710      	adds	r7, #16
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b084      	sub	sp, #16
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	60f8      	str	r0, [r7, #12]
 8003ca8:	60b9      	str	r1, [r7, #8]
 8003caa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003cac:	e034      	b.n	8003d18 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003cae:	68f8      	ldr	r0, [r7, #12]
 8003cb0:	f000 f8e3 	bl	8003e7a <I2C_IsAcknowledgeFailed>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d001      	beq.n	8003cbe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e034      	b.n	8003d28 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cc4:	d028      	beq.n	8003d18 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cc6:	f7fe fba5 	bl	8002414 <HAL_GetTick>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	68ba      	ldr	r2, [r7, #8]
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d302      	bcc.n	8003cdc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d11d      	bne.n	8003d18 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	695b      	ldr	r3, [r3, #20]
 8003ce2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ce6:	2b80      	cmp	r3, #128	@ 0x80
 8003ce8:	d016      	beq.n	8003d18 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2200      	movs	r2, #0
 8003cee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2220      	movs	r2, #32
 8003cf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d04:	f043 0220 	orr.w	r2, r3, #32
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	e007      	b.n	8003d28 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	695b      	ldr	r3, [r3, #20]
 8003d1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d22:	2b80      	cmp	r3, #128	@ 0x80
 8003d24:	d1c3      	bne.n	8003cae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003d26:	2300      	movs	r3, #0
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3710      	adds	r7, #16
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}

08003d30 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b084      	sub	sp, #16
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	60f8      	str	r0, [r7, #12]
 8003d38:	60b9      	str	r1, [r7, #8]
 8003d3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d3c:	e034      	b.n	8003da8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d3e:	68f8      	ldr	r0, [r7, #12]
 8003d40:	f000 f89b 	bl	8003e7a <I2C_IsAcknowledgeFailed>
 8003d44:	4603      	mov	r3, r0
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d001      	beq.n	8003d4e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e034      	b.n	8003db8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d54:	d028      	beq.n	8003da8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d56:	f7fe fb5d 	bl	8002414 <HAL_GetTick>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	1ad3      	subs	r3, r2, r3
 8003d60:	68ba      	ldr	r2, [r7, #8]
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d302      	bcc.n	8003d6c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d11d      	bne.n	8003da8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	695b      	ldr	r3, [r3, #20]
 8003d72:	f003 0304 	and.w	r3, r3, #4
 8003d76:	2b04      	cmp	r3, #4
 8003d78:	d016      	beq.n	8003da8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2220      	movs	r2, #32
 8003d84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d94:	f043 0220 	orr.w	r2, r3, #32
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	e007      	b.n	8003db8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	695b      	ldr	r3, [r3, #20]
 8003dae:	f003 0304 	and.w	r3, r3, #4
 8003db2:	2b04      	cmp	r3, #4
 8003db4:	d1c3      	bne.n	8003d3e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003db6:	2300      	movs	r3, #0
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3710      	adds	r7, #16
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}

08003dc0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b084      	sub	sp, #16
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	60f8      	str	r0, [r7, #12]
 8003dc8:	60b9      	str	r1, [r7, #8]
 8003dca:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003dcc:	e049      	b.n	8003e62 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	695b      	ldr	r3, [r3, #20]
 8003dd4:	f003 0310 	and.w	r3, r3, #16
 8003dd8:	2b10      	cmp	r3, #16
 8003dda:	d119      	bne.n	8003e10 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f06f 0210 	mvn.w	r2, #16
 8003de4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2200      	movs	r2, #0
 8003dea:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2220      	movs	r2, #32
 8003df0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2200      	movs	r2, #0
 8003df8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2200      	movs	r2, #0
 8003e08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e030      	b.n	8003e72 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e10:	f7fe fb00 	bl	8002414 <HAL_GetTick>
 8003e14:	4602      	mov	r2, r0
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	68ba      	ldr	r2, [r7, #8]
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d302      	bcc.n	8003e26 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d11d      	bne.n	8003e62 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	695b      	ldr	r3, [r3, #20]
 8003e2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e30:	2b40      	cmp	r3, #64	@ 0x40
 8003e32:	d016      	beq.n	8003e62 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2200      	movs	r2, #0
 8003e38:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2220      	movs	r2, #32
 8003e3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2200      	movs	r2, #0
 8003e46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e4e:	f043 0220 	orr.w	r2, r3, #32
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e007      	b.n	8003e72 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	695b      	ldr	r3, [r3, #20]
 8003e68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e6c:	2b40      	cmp	r3, #64	@ 0x40
 8003e6e:	d1ae      	bne.n	8003dce <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003e70:	2300      	movs	r3, #0
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3710      	adds	r7, #16
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}

08003e7a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003e7a:	b480      	push	{r7}
 8003e7c:	b083      	sub	sp, #12
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	695b      	ldr	r3, [r3, #20]
 8003e88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e8c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e90:	d11b      	bne.n	8003eca <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003e9a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2220      	movs	r2, #32
 8003ea6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2200      	movs	r2, #0
 8003eae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eb6:	f043 0204 	orr.w	r2, r3, #4
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e000      	b.n	8003ecc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003eca:	2300      	movs	r3, #0
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	370c      	adds	r7, #12
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr

08003ed8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b086      	sub	sp, #24
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d101      	bne.n	8003eea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e267      	b.n	80043ba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0301 	and.w	r3, r3, #1
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d075      	beq.n	8003fe2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003ef6:	4b88      	ldr	r3, [pc, #544]	@ (8004118 <HAL_RCC_OscConfig+0x240>)
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	f003 030c 	and.w	r3, r3, #12
 8003efe:	2b04      	cmp	r3, #4
 8003f00:	d00c      	beq.n	8003f1c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f02:	4b85      	ldr	r3, [pc, #532]	@ (8004118 <HAL_RCC_OscConfig+0x240>)
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003f0a:	2b08      	cmp	r3, #8
 8003f0c:	d112      	bne.n	8003f34 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f0e:	4b82      	ldr	r3, [pc, #520]	@ (8004118 <HAL_RCC_OscConfig+0x240>)
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f16:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003f1a:	d10b      	bne.n	8003f34 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f1c:	4b7e      	ldr	r3, [pc, #504]	@ (8004118 <HAL_RCC_OscConfig+0x240>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d05b      	beq.n	8003fe0 <HAL_RCC_OscConfig+0x108>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d157      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	e242      	b.n	80043ba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f3c:	d106      	bne.n	8003f4c <HAL_RCC_OscConfig+0x74>
 8003f3e:	4b76      	ldr	r3, [pc, #472]	@ (8004118 <HAL_RCC_OscConfig+0x240>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a75      	ldr	r2, [pc, #468]	@ (8004118 <HAL_RCC_OscConfig+0x240>)
 8003f44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f48:	6013      	str	r3, [r2, #0]
 8003f4a:	e01d      	b.n	8003f88 <HAL_RCC_OscConfig+0xb0>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003f54:	d10c      	bne.n	8003f70 <HAL_RCC_OscConfig+0x98>
 8003f56:	4b70      	ldr	r3, [pc, #448]	@ (8004118 <HAL_RCC_OscConfig+0x240>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a6f      	ldr	r2, [pc, #444]	@ (8004118 <HAL_RCC_OscConfig+0x240>)
 8003f5c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f60:	6013      	str	r3, [r2, #0]
 8003f62:	4b6d      	ldr	r3, [pc, #436]	@ (8004118 <HAL_RCC_OscConfig+0x240>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a6c      	ldr	r2, [pc, #432]	@ (8004118 <HAL_RCC_OscConfig+0x240>)
 8003f68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f6c:	6013      	str	r3, [r2, #0]
 8003f6e:	e00b      	b.n	8003f88 <HAL_RCC_OscConfig+0xb0>
 8003f70:	4b69      	ldr	r3, [pc, #420]	@ (8004118 <HAL_RCC_OscConfig+0x240>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a68      	ldr	r2, [pc, #416]	@ (8004118 <HAL_RCC_OscConfig+0x240>)
 8003f76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f7a:	6013      	str	r3, [r2, #0]
 8003f7c:	4b66      	ldr	r3, [pc, #408]	@ (8004118 <HAL_RCC_OscConfig+0x240>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a65      	ldr	r2, [pc, #404]	@ (8004118 <HAL_RCC_OscConfig+0x240>)
 8003f82:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003f86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d013      	beq.n	8003fb8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f90:	f7fe fa40 	bl	8002414 <HAL_GetTick>
 8003f94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f96:	e008      	b.n	8003faa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f98:	f7fe fa3c 	bl	8002414 <HAL_GetTick>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	1ad3      	subs	r3, r2, r3
 8003fa2:	2b64      	cmp	r3, #100	@ 0x64
 8003fa4:	d901      	bls.n	8003faa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003fa6:	2303      	movs	r3, #3
 8003fa8:	e207      	b.n	80043ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003faa:	4b5b      	ldr	r3, [pc, #364]	@ (8004118 <HAL_RCC_OscConfig+0x240>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d0f0      	beq.n	8003f98 <HAL_RCC_OscConfig+0xc0>
 8003fb6:	e014      	b.n	8003fe2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fb8:	f7fe fa2c 	bl	8002414 <HAL_GetTick>
 8003fbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fbe:	e008      	b.n	8003fd2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fc0:	f7fe fa28 	bl	8002414 <HAL_GetTick>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	2b64      	cmp	r3, #100	@ 0x64
 8003fcc:	d901      	bls.n	8003fd2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003fce:	2303      	movs	r3, #3
 8003fd0:	e1f3      	b.n	80043ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fd2:	4b51      	ldr	r3, [pc, #324]	@ (8004118 <HAL_RCC_OscConfig+0x240>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d1f0      	bne.n	8003fc0 <HAL_RCC_OscConfig+0xe8>
 8003fde:	e000      	b.n	8003fe2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fe0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 0302 	and.w	r3, r3, #2
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d063      	beq.n	80040b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003fee:	4b4a      	ldr	r3, [pc, #296]	@ (8004118 <HAL_RCC_OscConfig+0x240>)
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	f003 030c 	and.w	r3, r3, #12
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d00b      	beq.n	8004012 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ffa:	4b47      	ldr	r3, [pc, #284]	@ (8004118 <HAL_RCC_OscConfig+0x240>)
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004002:	2b08      	cmp	r3, #8
 8004004:	d11c      	bne.n	8004040 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004006:	4b44      	ldr	r3, [pc, #272]	@ (8004118 <HAL_RCC_OscConfig+0x240>)
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800400e:	2b00      	cmp	r3, #0
 8004010:	d116      	bne.n	8004040 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004012:	4b41      	ldr	r3, [pc, #260]	@ (8004118 <HAL_RCC_OscConfig+0x240>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0302 	and.w	r3, r3, #2
 800401a:	2b00      	cmp	r3, #0
 800401c:	d005      	beq.n	800402a <HAL_RCC_OscConfig+0x152>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	68db      	ldr	r3, [r3, #12]
 8004022:	2b01      	cmp	r3, #1
 8004024:	d001      	beq.n	800402a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e1c7      	b.n	80043ba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800402a:	4b3b      	ldr	r3, [pc, #236]	@ (8004118 <HAL_RCC_OscConfig+0x240>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	691b      	ldr	r3, [r3, #16]
 8004036:	00db      	lsls	r3, r3, #3
 8004038:	4937      	ldr	r1, [pc, #220]	@ (8004118 <HAL_RCC_OscConfig+0x240>)
 800403a:	4313      	orrs	r3, r2
 800403c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800403e:	e03a      	b.n	80040b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d020      	beq.n	800408a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004048:	4b34      	ldr	r3, [pc, #208]	@ (800411c <HAL_RCC_OscConfig+0x244>)
 800404a:	2201      	movs	r2, #1
 800404c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800404e:	f7fe f9e1 	bl	8002414 <HAL_GetTick>
 8004052:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004054:	e008      	b.n	8004068 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004056:	f7fe f9dd 	bl	8002414 <HAL_GetTick>
 800405a:	4602      	mov	r2, r0
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	1ad3      	subs	r3, r2, r3
 8004060:	2b02      	cmp	r3, #2
 8004062:	d901      	bls.n	8004068 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004064:	2303      	movs	r3, #3
 8004066:	e1a8      	b.n	80043ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004068:	4b2b      	ldr	r3, [pc, #172]	@ (8004118 <HAL_RCC_OscConfig+0x240>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 0302 	and.w	r3, r3, #2
 8004070:	2b00      	cmp	r3, #0
 8004072:	d0f0      	beq.n	8004056 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004074:	4b28      	ldr	r3, [pc, #160]	@ (8004118 <HAL_RCC_OscConfig+0x240>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	691b      	ldr	r3, [r3, #16]
 8004080:	00db      	lsls	r3, r3, #3
 8004082:	4925      	ldr	r1, [pc, #148]	@ (8004118 <HAL_RCC_OscConfig+0x240>)
 8004084:	4313      	orrs	r3, r2
 8004086:	600b      	str	r3, [r1, #0]
 8004088:	e015      	b.n	80040b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800408a:	4b24      	ldr	r3, [pc, #144]	@ (800411c <HAL_RCC_OscConfig+0x244>)
 800408c:	2200      	movs	r2, #0
 800408e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004090:	f7fe f9c0 	bl	8002414 <HAL_GetTick>
 8004094:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004096:	e008      	b.n	80040aa <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004098:	f7fe f9bc 	bl	8002414 <HAL_GetTick>
 800409c:	4602      	mov	r2, r0
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	1ad3      	subs	r3, r2, r3
 80040a2:	2b02      	cmp	r3, #2
 80040a4:	d901      	bls.n	80040aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80040a6:	2303      	movs	r3, #3
 80040a8:	e187      	b.n	80043ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040aa:	4b1b      	ldr	r3, [pc, #108]	@ (8004118 <HAL_RCC_OscConfig+0x240>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 0302 	and.w	r3, r3, #2
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d1f0      	bne.n	8004098 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 0308 	and.w	r3, r3, #8
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d036      	beq.n	8004130 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	695b      	ldr	r3, [r3, #20]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d016      	beq.n	80040f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040ca:	4b15      	ldr	r3, [pc, #84]	@ (8004120 <HAL_RCC_OscConfig+0x248>)
 80040cc:	2201      	movs	r2, #1
 80040ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040d0:	f7fe f9a0 	bl	8002414 <HAL_GetTick>
 80040d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040d6:	e008      	b.n	80040ea <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040d8:	f7fe f99c 	bl	8002414 <HAL_GetTick>
 80040dc:	4602      	mov	r2, r0
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	2b02      	cmp	r3, #2
 80040e4:	d901      	bls.n	80040ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80040e6:	2303      	movs	r3, #3
 80040e8:	e167      	b.n	80043ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040ea:	4b0b      	ldr	r3, [pc, #44]	@ (8004118 <HAL_RCC_OscConfig+0x240>)
 80040ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040ee:	f003 0302 	and.w	r3, r3, #2
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d0f0      	beq.n	80040d8 <HAL_RCC_OscConfig+0x200>
 80040f6:	e01b      	b.n	8004130 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040f8:	4b09      	ldr	r3, [pc, #36]	@ (8004120 <HAL_RCC_OscConfig+0x248>)
 80040fa:	2200      	movs	r2, #0
 80040fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040fe:	f7fe f989 	bl	8002414 <HAL_GetTick>
 8004102:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004104:	e00e      	b.n	8004124 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004106:	f7fe f985 	bl	8002414 <HAL_GetTick>
 800410a:	4602      	mov	r2, r0
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	1ad3      	subs	r3, r2, r3
 8004110:	2b02      	cmp	r3, #2
 8004112:	d907      	bls.n	8004124 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004114:	2303      	movs	r3, #3
 8004116:	e150      	b.n	80043ba <HAL_RCC_OscConfig+0x4e2>
 8004118:	40023800 	.word	0x40023800
 800411c:	42470000 	.word	0x42470000
 8004120:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004124:	4b88      	ldr	r3, [pc, #544]	@ (8004348 <HAL_RCC_OscConfig+0x470>)
 8004126:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004128:	f003 0302 	and.w	r3, r3, #2
 800412c:	2b00      	cmp	r3, #0
 800412e:	d1ea      	bne.n	8004106 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 0304 	and.w	r3, r3, #4
 8004138:	2b00      	cmp	r3, #0
 800413a:	f000 8097 	beq.w	800426c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800413e:	2300      	movs	r3, #0
 8004140:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004142:	4b81      	ldr	r3, [pc, #516]	@ (8004348 <HAL_RCC_OscConfig+0x470>)
 8004144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004146:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800414a:	2b00      	cmp	r3, #0
 800414c:	d10f      	bne.n	800416e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800414e:	2300      	movs	r3, #0
 8004150:	60bb      	str	r3, [r7, #8]
 8004152:	4b7d      	ldr	r3, [pc, #500]	@ (8004348 <HAL_RCC_OscConfig+0x470>)
 8004154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004156:	4a7c      	ldr	r2, [pc, #496]	@ (8004348 <HAL_RCC_OscConfig+0x470>)
 8004158:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800415c:	6413      	str	r3, [r2, #64]	@ 0x40
 800415e:	4b7a      	ldr	r3, [pc, #488]	@ (8004348 <HAL_RCC_OscConfig+0x470>)
 8004160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004162:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004166:	60bb      	str	r3, [r7, #8]
 8004168:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800416a:	2301      	movs	r3, #1
 800416c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800416e:	4b77      	ldr	r3, [pc, #476]	@ (800434c <HAL_RCC_OscConfig+0x474>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004176:	2b00      	cmp	r3, #0
 8004178:	d118      	bne.n	80041ac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800417a:	4b74      	ldr	r3, [pc, #464]	@ (800434c <HAL_RCC_OscConfig+0x474>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a73      	ldr	r2, [pc, #460]	@ (800434c <HAL_RCC_OscConfig+0x474>)
 8004180:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004184:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004186:	f7fe f945 	bl	8002414 <HAL_GetTick>
 800418a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800418c:	e008      	b.n	80041a0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800418e:	f7fe f941 	bl	8002414 <HAL_GetTick>
 8004192:	4602      	mov	r2, r0
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	1ad3      	subs	r3, r2, r3
 8004198:	2b02      	cmp	r3, #2
 800419a:	d901      	bls.n	80041a0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800419c:	2303      	movs	r3, #3
 800419e:	e10c      	b.n	80043ba <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041a0:	4b6a      	ldr	r3, [pc, #424]	@ (800434c <HAL_RCC_OscConfig+0x474>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d0f0      	beq.n	800418e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d106      	bne.n	80041c2 <HAL_RCC_OscConfig+0x2ea>
 80041b4:	4b64      	ldr	r3, [pc, #400]	@ (8004348 <HAL_RCC_OscConfig+0x470>)
 80041b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041b8:	4a63      	ldr	r2, [pc, #396]	@ (8004348 <HAL_RCC_OscConfig+0x470>)
 80041ba:	f043 0301 	orr.w	r3, r3, #1
 80041be:	6713      	str	r3, [r2, #112]	@ 0x70
 80041c0:	e01c      	b.n	80041fc <HAL_RCC_OscConfig+0x324>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	2b05      	cmp	r3, #5
 80041c8:	d10c      	bne.n	80041e4 <HAL_RCC_OscConfig+0x30c>
 80041ca:	4b5f      	ldr	r3, [pc, #380]	@ (8004348 <HAL_RCC_OscConfig+0x470>)
 80041cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041ce:	4a5e      	ldr	r2, [pc, #376]	@ (8004348 <HAL_RCC_OscConfig+0x470>)
 80041d0:	f043 0304 	orr.w	r3, r3, #4
 80041d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80041d6:	4b5c      	ldr	r3, [pc, #368]	@ (8004348 <HAL_RCC_OscConfig+0x470>)
 80041d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041da:	4a5b      	ldr	r2, [pc, #364]	@ (8004348 <HAL_RCC_OscConfig+0x470>)
 80041dc:	f043 0301 	orr.w	r3, r3, #1
 80041e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80041e2:	e00b      	b.n	80041fc <HAL_RCC_OscConfig+0x324>
 80041e4:	4b58      	ldr	r3, [pc, #352]	@ (8004348 <HAL_RCC_OscConfig+0x470>)
 80041e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041e8:	4a57      	ldr	r2, [pc, #348]	@ (8004348 <HAL_RCC_OscConfig+0x470>)
 80041ea:	f023 0301 	bic.w	r3, r3, #1
 80041ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80041f0:	4b55      	ldr	r3, [pc, #340]	@ (8004348 <HAL_RCC_OscConfig+0x470>)
 80041f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041f4:	4a54      	ldr	r2, [pc, #336]	@ (8004348 <HAL_RCC_OscConfig+0x470>)
 80041f6:	f023 0304 	bic.w	r3, r3, #4
 80041fa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d015      	beq.n	8004230 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004204:	f7fe f906 	bl	8002414 <HAL_GetTick>
 8004208:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800420a:	e00a      	b.n	8004222 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800420c:	f7fe f902 	bl	8002414 <HAL_GetTick>
 8004210:	4602      	mov	r2, r0
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	1ad3      	subs	r3, r2, r3
 8004216:	f241 3288 	movw	r2, #5000	@ 0x1388
 800421a:	4293      	cmp	r3, r2
 800421c:	d901      	bls.n	8004222 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800421e:	2303      	movs	r3, #3
 8004220:	e0cb      	b.n	80043ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004222:	4b49      	ldr	r3, [pc, #292]	@ (8004348 <HAL_RCC_OscConfig+0x470>)
 8004224:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004226:	f003 0302 	and.w	r3, r3, #2
 800422a:	2b00      	cmp	r3, #0
 800422c:	d0ee      	beq.n	800420c <HAL_RCC_OscConfig+0x334>
 800422e:	e014      	b.n	800425a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004230:	f7fe f8f0 	bl	8002414 <HAL_GetTick>
 8004234:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004236:	e00a      	b.n	800424e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004238:	f7fe f8ec 	bl	8002414 <HAL_GetTick>
 800423c:	4602      	mov	r2, r0
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004246:	4293      	cmp	r3, r2
 8004248:	d901      	bls.n	800424e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800424a:	2303      	movs	r3, #3
 800424c:	e0b5      	b.n	80043ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800424e:	4b3e      	ldr	r3, [pc, #248]	@ (8004348 <HAL_RCC_OscConfig+0x470>)
 8004250:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004252:	f003 0302 	and.w	r3, r3, #2
 8004256:	2b00      	cmp	r3, #0
 8004258:	d1ee      	bne.n	8004238 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800425a:	7dfb      	ldrb	r3, [r7, #23]
 800425c:	2b01      	cmp	r3, #1
 800425e:	d105      	bne.n	800426c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004260:	4b39      	ldr	r3, [pc, #228]	@ (8004348 <HAL_RCC_OscConfig+0x470>)
 8004262:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004264:	4a38      	ldr	r2, [pc, #224]	@ (8004348 <HAL_RCC_OscConfig+0x470>)
 8004266:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800426a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	699b      	ldr	r3, [r3, #24]
 8004270:	2b00      	cmp	r3, #0
 8004272:	f000 80a1 	beq.w	80043b8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004276:	4b34      	ldr	r3, [pc, #208]	@ (8004348 <HAL_RCC_OscConfig+0x470>)
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	f003 030c 	and.w	r3, r3, #12
 800427e:	2b08      	cmp	r3, #8
 8004280:	d05c      	beq.n	800433c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	699b      	ldr	r3, [r3, #24]
 8004286:	2b02      	cmp	r3, #2
 8004288:	d141      	bne.n	800430e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800428a:	4b31      	ldr	r3, [pc, #196]	@ (8004350 <HAL_RCC_OscConfig+0x478>)
 800428c:	2200      	movs	r2, #0
 800428e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004290:	f7fe f8c0 	bl	8002414 <HAL_GetTick>
 8004294:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004296:	e008      	b.n	80042aa <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004298:	f7fe f8bc 	bl	8002414 <HAL_GetTick>
 800429c:	4602      	mov	r2, r0
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	1ad3      	subs	r3, r2, r3
 80042a2:	2b02      	cmp	r3, #2
 80042a4:	d901      	bls.n	80042aa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80042a6:	2303      	movs	r3, #3
 80042a8:	e087      	b.n	80043ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042aa:	4b27      	ldr	r3, [pc, #156]	@ (8004348 <HAL_RCC_OscConfig+0x470>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d1f0      	bne.n	8004298 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	69da      	ldr	r2, [r3, #28]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6a1b      	ldr	r3, [r3, #32]
 80042be:	431a      	orrs	r2, r3
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042c4:	019b      	lsls	r3, r3, #6
 80042c6:	431a      	orrs	r2, r3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042cc:	085b      	lsrs	r3, r3, #1
 80042ce:	3b01      	subs	r3, #1
 80042d0:	041b      	lsls	r3, r3, #16
 80042d2:	431a      	orrs	r2, r3
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042d8:	061b      	lsls	r3, r3, #24
 80042da:	491b      	ldr	r1, [pc, #108]	@ (8004348 <HAL_RCC_OscConfig+0x470>)
 80042dc:	4313      	orrs	r3, r2
 80042de:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042e0:	4b1b      	ldr	r3, [pc, #108]	@ (8004350 <HAL_RCC_OscConfig+0x478>)
 80042e2:	2201      	movs	r2, #1
 80042e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042e6:	f7fe f895 	bl	8002414 <HAL_GetTick>
 80042ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042ec:	e008      	b.n	8004300 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042ee:	f7fe f891 	bl	8002414 <HAL_GetTick>
 80042f2:	4602      	mov	r2, r0
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	1ad3      	subs	r3, r2, r3
 80042f8:	2b02      	cmp	r3, #2
 80042fa:	d901      	bls.n	8004300 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80042fc:	2303      	movs	r3, #3
 80042fe:	e05c      	b.n	80043ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004300:	4b11      	ldr	r3, [pc, #68]	@ (8004348 <HAL_RCC_OscConfig+0x470>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004308:	2b00      	cmp	r3, #0
 800430a:	d0f0      	beq.n	80042ee <HAL_RCC_OscConfig+0x416>
 800430c:	e054      	b.n	80043b8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800430e:	4b10      	ldr	r3, [pc, #64]	@ (8004350 <HAL_RCC_OscConfig+0x478>)
 8004310:	2200      	movs	r2, #0
 8004312:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004314:	f7fe f87e 	bl	8002414 <HAL_GetTick>
 8004318:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800431a:	e008      	b.n	800432e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800431c:	f7fe f87a 	bl	8002414 <HAL_GetTick>
 8004320:	4602      	mov	r2, r0
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	2b02      	cmp	r3, #2
 8004328:	d901      	bls.n	800432e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800432a:	2303      	movs	r3, #3
 800432c:	e045      	b.n	80043ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800432e:	4b06      	ldr	r3, [pc, #24]	@ (8004348 <HAL_RCC_OscConfig+0x470>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004336:	2b00      	cmp	r3, #0
 8004338:	d1f0      	bne.n	800431c <HAL_RCC_OscConfig+0x444>
 800433a:	e03d      	b.n	80043b8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	699b      	ldr	r3, [r3, #24]
 8004340:	2b01      	cmp	r3, #1
 8004342:	d107      	bne.n	8004354 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	e038      	b.n	80043ba <HAL_RCC_OscConfig+0x4e2>
 8004348:	40023800 	.word	0x40023800
 800434c:	40007000 	.word	0x40007000
 8004350:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004354:	4b1b      	ldr	r3, [pc, #108]	@ (80043c4 <HAL_RCC_OscConfig+0x4ec>)
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	699b      	ldr	r3, [r3, #24]
 800435e:	2b01      	cmp	r3, #1
 8004360:	d028      	beq.n	80043b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800436c:	429a      	cmp	r2, r3
 800436e:	d121      	bne.n	80043b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800437a:	429a      	cmp	r2, r3
 800437c:	d11a      	bne.n	80043b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800437e:	68fa      	ldr	r2, [r7, #12]
 8004380:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004384:	4013      	ands	r3, r2
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800438a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800438c:	4293      	cmp	r3, r2
 800438e:	d111      	bne.n	80043b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800439a:	085b      	lsrs	r3, r3, #1
 800439c:	3b01      	subs	r3, #1
 800439e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d107      	bne.n	80043b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d001      	beq.n	80043b8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	e000      	b.n	80043ba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80043b8:	2300      	movs	r3, #0
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3718      	adds	r7, #24
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	bf00      	nop
 80043c4:	40023800 	.word	0x40023800

080043c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b084      	sub	sp, #16
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
 80043d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d101      	bne.n	80043dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	e0cc      	b.n	8004576 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80043dc:	4b68      	ldr	r3, [pc, #416]	@ (8004580 <HAL_RCC_ClockConfig+0x1b8>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 0307 	and.w	r3, r3, #7
 80043e4:	683a      	ldr	r2, [r7, #0]
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d90c      	bls.n	8004404 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043ea:	4b65      	ldr	r3, [pc, #404]	@ (8004580 <HAL_RCC_ClockConfig+0x1b8>)
 80043ec:	683a      	ldr	r2, [r7, #0]
 80043ee:	b2d2      	uxtb	r2, r2
 80043f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043f2:	4b63      	ldr	r3, [pc, #396]	@ (8004580 <HAL_RCC_ClockConfig+0x1b8>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 0307 	and.w	r3, r3, #7
 80043fa:	683a      	ldr	r2, [r7, #0]
 80043fc:	429a      	cmp	r2, r3
 80043fe:	d001      	beq.n	8004404 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	e0b8      	b.n	8004576 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f003 0302 	and.w	r3, r3, #2
 800440c:	2b00      	cmp	r3, #0
 800440e:	d020      	beq.n	8004452 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f003 0304 	and.w	r3, r3, #4
 8004418:	2b00      	cmp	r3, #0
 800441a:	d005      	beq.n	8004428 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800441c:	4b59      	ldr	r3, [pc, #356]	@ (8004584 <HAL_RCC_ClockConfig+0x1bc>)
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	4a58      	ldr	r2, [pc, #352]	@ (8004584 <HAL_RCC_ClockConfig+0x1bc>)
 8004422:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004426:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 0308 	and.w	r3, r3, #8
 8004430:	2b00      	cmp	r3, #0
 8004432:	d005      	beq.n	8004440 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004434:	4b53      	ldr	r3, [pc, #332]	@ (8004584 <HAL_RCC_ClockConfig+0x1bc>)
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	4a52      	ldr	r2, [pc, #328]	@ (8004584 <HAL_RCC_ClockConfig+0x1bc>)
 800443a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800443e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004440:	4b50      	ldr	r3, [pc, #320]	@ (8004584 <HAL_RCC_ClockConfig+0x1bc>)
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	494d      	ldr	r1, [pc, #308]	@ (8004584 <HAL_RCC_ClockConfig+0x1bc>)
 800444e:	4313      	orrs	r3, r2
 8004450:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 0301 	and.w	r3, r3, #1
 800445a:	2b00      	cmp	r3, #0
 800445c:	d044      	beq.n	80044e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	2b01      	cmp	r3, #1
 8004464:	d107      	bne.n	8004476 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004466:	4b47      	ldr	r3, [pc, #284]	@ (8004584 <HAL_RCC_ClockConfig+0x1bc>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800446e:	2b00      	cmp	r3, #0
 8004470:	d119      	bne.n	80044a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e07f      	b.n	8004576 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	2b02      	cmp	r3, #2
 800447c:	d003      	beq.n	8004486 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004482:	2b03      	cmp	r3, #3
 8004484:	d107      	bne.n	8004496 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004486:	4b3f      	ldr	r3, [pc, #252]	@ (8004584 <HAL_RCC_ClockConfig+0x1bc>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800448e:	2b00      	cmp	r3, #0
 8004490:	d109      	bne.n	80044a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e06f      	b.n	8004576 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004496:	4b3b      	ldr	r3, [pc, #236]	@ (8004584 <HAL_RCC_ClockConfig+0x1bc>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 0302 	and.w	r3, r3, #2
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d101      	bne.n	80044a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e067      	b.n	8004576 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044a6:	4b37      	ldr	r3, [pc, #220]	@ (8004584 <HAL_RCC_ClockConfig+0x1bc>)
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	f023 0203 	bic.w	r2, r3, #3
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	4934      	ldr	r1, [pc, #208]	@ (8004584 <HAL_RCC_ClockConfig+0x1bc>)
 80044b4:	4313      	orrs	r3, r2
 80044b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80044b8:	f7fd ffac 	bl	8002414 <HAL_GetTick>
 80044bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044be:	e00a      	b.n	80044d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044c0:	f7fd ffa8 	bl	8002414 <HAL_GetTick>
 80044c4:	4602      	mov	r2, r0
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	1ad3      	subs	r3, r2, r3
 80044ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d901      	bls.n	80044d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80044d2:	2303      	movs	r3, #3
 80044d4:	e04f      	b.n	8004576 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044d6:	4b2b      	ldr	r3, [pc, #172]	@ (8004584 <HAL_RCC_ClockConfig+0x1bc>)
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	f003 020c 	and.w	r2, r3, #12
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d1eb      	bne.n	80044c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80044e8:	4b25      	ldr	r3, [pc, #148]	@ (8004580 <HAL_RCC_ClockConfig+0x1b8>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 0307 	and.w	r3, r3, #7
 80044f0:	683a      	ldr	r2, [r7, #0]
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d20c      	bcs.n	8004510 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044f6:	4b22      	ldr	r3, [pc, #136]	@ (8004580 <HAL_RCC_ClockConfig+0x1b8>)
 80044f8:	683a      	ldr	r2, [r7, #0]
 80044fa:	b2d2      	uxtb	r2, r2
 80044fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044fe:	4b20      	ldr	r3, [pc, #128]	@ (8004580 <HAL_RCC_ClockConfig+0x1b8>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 0307 	and.w	r3, r3, #7
 8004506:	683a      	ldr	r2, [r7, #0]
 8004508:	429a      	cmp	r2, r3
 800450a:	d001      	beq.n	8004510 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	e032      	b.n	8004576 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f003 0304 	and.w	r3, r3, #4
 8004518:	2b00      	cmp	r3, #0
 800451a:	d008      	beq.n	800452e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800451c:	4b19      	ldr	r3, [pc, #100]	@ (8004584 <HAL_RCC_ClockConfig+0x1bc>)
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	68db      	ldr	r3, [r3, #12]
 8004528:	4916      	ldr	r1, [pc, #88]	@ (8004584 <HAL_RCC_ClockConfig+0x1bc>)
 800452a:	4313      	orrs	r3, r2
 800452c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 0308 	and.w	r3, r3, #8
 8004536:	2b00      	cmp	r3, #0
 8004538:	d009      	beq.n	800454e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800453a:	4b12      	ldr	r3, [pc, #72]	@ (8004584 <HAL_RCC_ClockConfig+0x1bc>)
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	691b      	ldr	r3, [r3, #16]
 8004546:	00db      	lsls	r3, r3, #3
 8004548:	490e      	ldr	r1, [pc, #56]	@ (8004584 <HAL_RCC_ClockConfig+0x1bc>)
 800454a:	4313      	orrs	r3, r2
 800454c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800454e:	f000 f821 	bl	8004594 <HAL_RCC_GetSysClockFreq>
 8004552:	4602      	mov	r2, r0
 8004554:	4b0b      	ldr	r3, [pc, #44]	@ (8004584 <HAL_RCC_ClockConfig+0x1bc>)
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	091b      	lsrs	r3, r3, #4
 800455a:	f003 030f 	and.w	r3, r3, #15
 800455e:	490a      	ldr	r1, [pc, #40]	@ (8004588 <HAL_RCC_ClockConfig+0x1c0>)
 8004560:	5ccb      	ldrb	r3, [r1, r3]
 8004562:	fa22 f303 	lsr.w	r3, r2, r3
 8004566:	4a09      	ldr	r2, [pc, #36]	@ (800458c <HAL_RCC_ClockConfig+0x1c4>)
 8004568:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800456a:	4b09      	ldr	r3, [pc, #36]	@ (8004590 <HAL_RCC_ClockConfig+0x1c8>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4618      	mov	r0, r3
 8004570:	f7fd ff0c 	bl	800238c <HAL_InitTick>

  return HAL_OK;
 8004574:	2300      	movs	r3, #0
}
 8004576:	4618      	mov	r0, r3
 8004578:	3710      	adds	r7, #16
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}
 800457e:	bf00      	nop
 8004580:	40023c00 	.word	0x40023c00
 8004584:	40023800 	.word	0x40023800
 8004588:	08004ee0 	.word	0x08004ee0
 800458c:	20000010 	.word	0x20000010
 8004590:	20000014 	.word	0x20000014

08004594 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004594:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004598:	b090      	sub	sp, #64	@ 0x40
 800459a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800459c:	2300      	movs	r3, #0
 800459e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80045a0:	2300      	movs	r3, #0
 80045a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80045a4:	2300      	movs	r3, #0
 80045a6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80045a8:	2300      	movs	r3, #0
 80045aa:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80045ac:	4b59      	ldr	r3, [pc, #356]	@ (8004714 <HAL_RCC_GetSysClockFreq+0x180>)
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	f003 030c 	and.w	r3, r3, #12
 80045b4:	2b08      	cmp	r3, #8
 80045b6:	d00d      	beq.n	80045d4 <HAL_RCC_GetSysClockFreq+0x40>
 80045b8:	2b08      	cmp	r3, #8
 80045ba:	f200 80a1 	bhi.w	8004700 <HAL_RCC_GetSysClockFreq+0x16c>
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d002      	beq.n	80045c8 <HAL_RCC_GetSysClockFreq+0x34>
 80045c2:	2b04      	cmp	r3, #4
 80045c4:	d003      	beq.n	80045ce <HAL_RCC_GetSysClockFreq+0x3a>
 80045c6:	e09b      	b.n	8004700 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80045c8:	4b53      	ldr	r3, [pc, #332]	@ (8004718 <HAL_RCC_GetSysClockFreq+0x184>)
 80045ca:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80045cc:	e09b      	b.n	8004706 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80045ce:	4b53      	ldr	r3, [pc, #332]	@ (800471c <HAL_RCC_GetSysClockFreq+0x188>)
 80045d0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80045d2:	e098      	b.n	8004706 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80045d4:	4b4f      	ldr	r3, [pc, #316]	@ (8004714 <HAL_RCC_GetSysClockFreq+0x180>)
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80045dc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80045de:	4b4d      	ldr	r3, [pc, #308]	@ (8004714 <HAL_RCC_GetSysClockFreq+0x180>)
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d028      	beq.n	800463c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045ea:	4b4a      	ldr	r3, [pc, #296]	@ (8004714 <HAL_RCC_GetSysClockFreq+0x180>)
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	099b      	lsrs	r3, r3, #6
 80045f0:	2200      	movs	r2, #0
 80045f2:	623b      	str	r3, [r7, #32]
 80045f4:	627a      	str	r2, [r7, #36]	@ 0x24
 80045f6:	6a3b      	ldr	r3, [r7, #32]
 80045f8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80045fc:	2100      	movs	r1, #0
 80045fe:	4b47      	ldr	r3, [pc, #284]	@ (800471c <HAL_RCC_GetSysClockFreq+0x188>)
 8004600:	fb03 f201 	mul.w	r2, r3, r1
 8004604:	2300      	movs	r3, #0
 8004606:	fb00 f303 	mul.w	r3, r0, r3
 800460a:	4413      	add	r3, r2
 800460c:	4a43      	ldr	r2, [pc, #268]	@ (800471c <HAL_RCC_GetSysClockFreq+0x188>)
 800460e:	fba0 1202 	umull	r1, r2, r0, r2
 8004612:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004614:	460a      	mov	r2, r1
 8004616:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004618:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800461a:	4413      	add	r3, r2
 800461c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800461e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004620:	2200      	movs	r2, #0
 8004622:	61bb      	str	r3, [r7, #24]
 8004624:	61fa      	str	r2, [r7, #28]
 8004626:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800462a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800462e:	f7fb fe23 	bl	8000278 <__aeabi_uldivmod>
 8004632:	4602      	mov	r2, r0
 8004634:	460b      	mov	r3, r1
 8004636:	4613      	mov	r3, r2
 8004638:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800463a:	e053      	b.n	80046e4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800463c:	4b35      	ldr	r3, [pc, #212]	@ (8004714 <HAL_RCC_GetSysClockFreq+0x180>)
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	099b      	lsrs	r3, r3, #6
 8004642:	2200      	movs	r2, #0
 8004644:	613b      	str	r3, [r7, #16]
 8004646:	617a      	str	r2, [r7, #20]
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800464e:	f04f 0b00 	mov.w	fp, #0
 8004652:	4652      	mov	r2, sl
 8004654:	465b      	mov	r3, fp
 8004656:	f04f 0000 	mov.w	r0, #0
 800465a:	f04f 0100 	mov.w	r1, #0
 800465e:	0159      	lsls	r1, r3, #5
 8004660:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004664:	0150      	lsls	r0, r2, #5
 8004666:	4602      	mov	r2, r0
 8004668:	460b      	mov	r3, r1
 800466a:	ebb2 080a 	subs.w	r8, r2, sl
 800466e:	eb63 090b 	sbc.w	r9, r3, fp
 8004672:	f04f 0200 	mov.w	r2, #0
 8004676:	f04f 0300 	mov.w	r3, #0
 800467a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800467e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004682:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004686:	ebb2 0408 	subs.w	r4, r2, r8
 800468a:	eb63 0509 	sbc.w	r5, r3, r9
 800468e:	f04f 0200 	mov.w	r2, #0
 8004692:	f04f 0300 	mov.w	r3, #0
 8004696:	00eb      	lsls	r3, r5, #3
 8004698:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800469c:	00e2      	lsls	r2, r4, #3
 800469e:	4614      	mov	r4, r2
 80046a0:	461d      	mov	r5, r3
 80046a2:	eb14 030a 	adds.w	r3, r4, sl
 80046a6:	603b      	str	r3, [r7, #0]
 80046a8:	eb45 030b 	adc.w	r3, r5, fp
 80046ac:	607b      	str	r3, [r7, #4]
 80046ae:	f04f 0200 	mov.w	r2, #0
 80046b2:	f04f 0300 	mov.w	r3, #0
 80046b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80046ba:	4629      	mov	r1, r5
 80046bc:	028b      	lsls	r3, r1, #10
 80046be:	4621      	mov	r1, r4
 80046c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80046c4:	4621      	mov	r1, r4
 80046c6:	028a      	lsls	r2, r1, #10
 80046c8:	4610      	mov	r0, r2
 80046ca:	4619      	mov	r1, r3
 80046cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046ce:	2200      	movs	r2, #0
 80046d0:	60bb      	str	r3, [r7, #8]
 80046d2:	60fa      	str	r2, [r7, #12]
 80046d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80046d8:	f7fb fdce 	bl	8000278 <__aeabi_uldivmod>
 80046dc:	4602      	mov	r2, r0
 80046de:	460b      	mov	r3, r1
 80046e0:	4613      	mov	r3, r2
 80046e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80046e4:	4b0b      	ldr	r3, [pc, #44]	@ (8004714 <HAL_RCC_GetSysClockFreq+0x180>)
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	0c1b      	lsrs	r3, r3, #16
 80046ea:	f003 0303 	and.w	r3, r3, #3
 80046ee:	3301      	adds	r3, #1
 80046f0:	005b      	lsls	r3, r3, #1
 80046f2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80046f4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80046f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80046fc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80046fe:	e002      	b.n	8004706 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004700:	4b05      	ldr	r3, [pc, #20]	@ (8004718 <HAL_RCC_GetSysClockFreq+0x184>)
 8004702:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004704:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004706:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004708:	4618      	mov	r0, r3
 800470a:	3740      	adds	r7, #64	@ 0x40
 800470c:	46bd      	mov	sp, r7
 800470e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004712:	bf00      	nop
 8004714:	40023800 	.word	0x40023800
 8004718:	00f42400 	.word	0x00f42400
 800471c:	017d7840 	.word	0x017d7840

08004720 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004720:	b480      	push	{r7}
 8004722:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004724:	4b03      	ldr	r3, [pc, #12]	@ (8004734 <HAL_RCC_GetHCLKFreq+0x14>)
 8004726:	681b      	ldr	r3, [r3, #0]
}
 8004728:	4618      	mov	r0, r3
 800472a:	46bd      	mov	sp, r7
 800472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004730:	4770      	bx	lr
 8004732:	bf00      	nop
 8004734:	20000010 	.word	0x20000010

08004738 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800473c:	f7ff fff0 	bl	8004720 <HAL_RCC_GetHCLKFreq>
 8004740:	4602      	mov	r2, r0
 8004742:	4b05      	ldr	r3, [pc, #20]	@ (8004758 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	0a9b      	lsrs	r3, r3, #10
 8004748:	f003 0307 	and.w	r3, r3, #7
 800474c:	4903      	ldr	r1, [pc, #12]	@ (800475c <HAL_RCC_GetPCLK1Freq+0x24>)
 800474e:	5ccb      	ldrb	r3, [r1, r3]
 8004750:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004754:	4618      	mov	r0, r3
 8004756:	bd80      	pop	{r7, pc}
 8004758:	40023800 	.word	0x40023800
 800475c:	08004ef0 	.word	0x08004ef0

08004760 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b082      	sub	sp, #8
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d101      	bne.n	8004772 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	e07b      	b.n	800486a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004776:	2b00      	cmp	r3, #0
 8004778:	d108      	bne.n	800478c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004782:	d009      	beq.n	8004798 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2200      	movs	r2, #0
 8004788:	61da      	str	r2, [r3, #28]
 800478a:	e005      	b.n	8004798 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2200      	movs	r2, #0
 8004790:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2200      	movs	r2, #0
 8004796:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2200      	movs	r2, #0
 800479c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d106      	bne.n	80047b8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2200      	movs	r2, #0
 80047ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f7fd fcec 	bl	8002190 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2202      	movs	r2, #2
 80047bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80047ce:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80047e0:	431a      	orrs	r2, r3
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80047ea:	431a      	orrs	r2, r3
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	691b      	ldr	r3, [r3, #16]
 80047f0:	f003 0302 	and.w	r3, r3, #2
 80047f4:	431a      	orrs	r2, r3
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	695b      	ldr	r3, [r3, #20]
 80047fa:	f003 0301 	and.w	r3, r3, #1
 80047fe:	431a      	orrs	r2, r3
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	699b      	ldr	r3, [r3, #24]
 8004804:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004808:	431a      	orrs	r2, r3
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	69db      	ldr	r3, [r3, #28]
 800480e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004812:	431a      	orrs	r2, r3
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6a1b      	ldr	r3, [r3, #32]
 8004818:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800481c:	ea42 0103 	orr.w	r1, r2, r3
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004824:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	430a      	orrs	r2, r1
 800482e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	699b      	ldr	r3, [r3, #24]
 8004834:	0c1b      	lsrs	r3, r3, #16
 8004836:	f003 0104 	and.w	r1, r3, #4
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800483e:	f003 0210 	and.w	r2, r3, #16
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	430a      	orrs	r2, r1
 8004848:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	69da      	ldr	r2, [r3, #28]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004858:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2200      	movs	r2, #0
 800485e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2201      	movs	r2, #1
 8004864:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004868:	2300      	movs	r3, #0
}
 800486a:	4618      	mov	r0, r3
 800486c:	3708      	adds	r7, #8
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}

08004872 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004872:	b580      	push	{r7, lr}
 8004874:	b08a      	sub	sp, #40	@ 0x28
 8004876:	af00      	add	r7, sp, #0
 8004878:	60f8      	str	r0, [r7, #12]
 800487a:	60b9      	str	r1, [r7, #8]
 800487c:	607a      	str	r2, [r7, #4]
 800487e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004880:	2301      	movs	r3, #1
 8004882:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004884:	f7fd fdc6 	bl	8002414 <HAL_GetTick>
 8004888:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004890:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004898:	887b      	ldrh	r3, [r7, #2]
 800489a:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800489c:	7ffb      	ldrb	r3, [r7, #31]
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d00c      	beq.n	80048bc <HAL_SPI_TransmitReceive+0x4a>
 80048a2:	69bb      	ldr	r3, [r7, #24]
 80048a4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80048a8:	d106      	bne.n	80048b8 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d102      	bne.n	80048b8 <HAL_SPI_TransmitReceive+0x46>
 80048b2:	7ffb      	ldrb	r3, [r7, #31]
 80048b4:	2b04      	cmp	r3, #4
 80048b6:	d001      	beq.n	80048bc <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80048b8:	2302      	movs	r3, #2
 80048ba:	e17f      	b.n	8004bbc <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d005      	beq.n	80048ce <HAL_SPI_TransmitReceive+0x5c>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d002      	beq.n	80048ce <HAL_SPI_TransmitReceive+0x5c>
 80048c8:	887b      	ldrh	r3, [r7, #2]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d101      	bne.n	80048d2 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e174      	b.n	8004bbc <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d101      	bne.n	80048e0 <HAL_SPI_TransmitReceive+0x6e>
 80048dc:	2302      	movs	r3, #2
 80048de:	e16d      	b.n	8004bbc <HAL_SPI_TransmitReceive+0x34a>
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2201      	movs	r2, #1
 80048e4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80048ee:	b2db      	uxtb	r3, r3
 80048f0:	2b04      	cmp	r3, #4
 80048f2:	d003      	beq.n	80048fc <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2205      	movs	r2, #5
 80048f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2200      	movs	r2, #0
 8004900:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	687a      	ldr	r2, [r7, #4]
 8004906:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	887a      	ldrh	r2, [r7, #2]
 800490c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	887a      	ldrh	r2, [r7, #2]
 8004912:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	68ba      	ldr	r2, [r7, #8]
 8004918:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	887a      	ldrh	r2, [r7, #2]
 800491e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	887a      	ldrh	r2, [r7, #2]
 8004924:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2200      	movs	r2, #0
 800492a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2200      	movs	r2, #0
 8004930:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800493c:	2b40      	cmp	r3, #64	@ 0x40
 800493e:	d007      	beq.n	8004950 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800494e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	68db      	ldr	r3, [r3, #12]
 8004954:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004958:	d17e      	bne.n	8004a58 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d002      	beq.n	8004968 <HAL_SPI_TransmitReceive+0xf6>
 8004962:	8afb      	ldrh	r3, [r7, #22]
 8004964:	2b01      	cmp	r3, #1
 8004966:	d16c      	bne.n	8004a42 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800496c:	881a      	ldrh	r2, [r3, #0]
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004978:	1c9a      	adds	r2, r3, #2
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004982:	b29b      	uxth	r3, r3
 8004984:	3b01      	subs	r3, #1
 8004986:	b29a      	uxth	r2, r3
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800498c:	e059      	b.n	8004a42 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	f003 0302 	and.w	r3, r3, #2
 8004998:	2b02      	cmp	r3, #2
 800499a:	d11b      	bne.n	80049d4 <HAL_SPI_TransmitReceive+0x162>
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80049a0:	b29b      	uxth	r3, r3
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d016      	beq.n	80049d4 <HAL_SPI_TransmitReceive+0x162>
 80049a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d113      	bne.n	80049d4 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049b0:	881a      	ldrh	r2, [r3, #0]
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049bc:	1c9a      	adds	r2, r3, #2
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	3b01      	subs	r3, #1
 80049ca:	b29a      	uxth	r2, r3
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80049d0:	2300      	movs	r3, #0
 80049d2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	f003 0301 	and.w	r3, r3, #1
 80049de:	2b01      	cmp	r3, #1
 80049e0:	d119      	bne.n	8004a16 <HAL_SPI_TransmitReceive+0x1a4>
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d014      	beq.n	8004a16 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	68da      	ldr	r2, [r3, #12]
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049f6:	b292      	uxth	r2, r2
 80049f8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049fe:	1c9a      	adds	r2, r3, #2
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	3b01      	subs	r3, #1
 8004a0c:	b29a      	uxth	r2, r3
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004a12:	2301      	movs	r3, #1
 8004a14:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004a16:	f7fd fcfd 	bl	8002414 <HAL_GetTick>
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	6a3b      	ldr	r3, [r7, #32]
 8004a1e:	1ad3      	subs	r3, r2, r3
 8004a20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d80d      	bhi.n	8004a42 <HAL_SPI_TransmitReceive+0x1d0>
 8004a26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a2c:	d009      	beq.n	8004a42 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2201      	movs	r2, #1
 8004a32:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004a3e:	2303      	movs	r3, #3
 8004a40:	e0bc      	b.n	8004bbc <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d1a0      	bne.n	800498e <HAL_SPI_TransmitReceive+0x11c>
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d19b      	bne.n	800498e <HAL_SPI_TransmitReceive+0x11c>
 8004a56:	e082      	b.n	8004b5e <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d002      	beq.n	8004a66 <HAL_SPI_TransmitReceive+0x1f4>
 8004a60:	8afb      	ldrh	r3, [r7, #22]
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	d171      	bne.n	8004b4a <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	330c      	adds	r3, #12
 8004a70:	7812      	ldrb	r2, [r2, #0]
 8004a72:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a78:	1c5a      	adds	r2, r3, #1
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a82:	b29b      	uxth	r3, r3
 8004a84:	3b01      	subs	r3, #1
 8004a86:	b29a      	uxth	r2, r3
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a8c:	e05d      	b.n	8004b4a <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	f003 0302 	and.w	r3, r3, #2
 8004a98:	2b02      	cmp	r3, #2
 8004a9a:	d11c      	bne.n	8004ad6 <HAL_SPI_TransmitReceive+0x264>
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004aa0:	b29b      	uxth	r3, r3
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d017      	beq.n	8004ad6 <HAL_SPI_TransmitReceive+0x264>
 8004aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d114      	bne.n	8004ad6 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	330c      	adds	r3, #12
 8004ab6:	7812      	ldrb	r2, [r2, #0]
 8004ab8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004abe:	1c5a      	adds	r2, r3, #1
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ac8:	b29b      	uxth	r3, r3
 8004aca:	3b01      	subs	r3, #1
 8004acc:	b29a      	uxth	r2, r3
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	f003 0301 	and.w	r3, r3, #1
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d119      	bne.n	8004b18 <HAL_SPI_TransmitReceive+0x2a6>
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ae8:	b29b      	uxth	r3, r3
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d014      	beq.n	8004b18 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	68da      	ldr	r2, [r3, #12]
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004af8:	b2d2      	uxtb	r2, r2
 8004afa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b00:	1c5a      	adds	r2, r3, #1
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	3b01      	subs	r3, #1
 8004b0e:	b29a      	uxth	r2, r3
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004b14:	2301      	movs	r3, #1
 8004b16:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004b18:	f7fd fc7c 	bl	8002414 <HAL_GetTick>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	6a3b      	ldr	r3, [r7, #32]
 8004b20:	1ad3      	subs	r3, r2, r3
 8004b22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d803      	bhi.n	8004b30 <HAL_SPI_TransmitReceive+0x2be>
 8004b28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b2e:	d102      	bne.n	8004b36 <HAL_SPI_TransmitReceive+0x2c4>
 8004b30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d109      	bne.n	8004b4a <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2201      	movs	r2, #1
 8004b3a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2200      	movs	r2, #0
 8004b42:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004b46:	2303      	movs	r3, #3
 8004b48:	e038      	b.n	8004bbc <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004b4e:	b29b      	uxth	r3, r3
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d19c      	bne.n	8004a8e <HAL_SPI_TransmitReceive+0x21c>
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b58:	b29b      	uxth	r3, r3
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d197      	bne.n	8004a8e <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b5e:	6a3a      	ldr	r2, [r7, #32]
 8004b60:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004b62:	68f8      	ldr	r0, [r7, #12]
 8004b64:	f000 f8b6 	bl	8004cd4 <SPI_EndRxTxTransaction>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d008      	beq.n	8004b80 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2220      	movs	r2, #32
 8004b72:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2200      	movs	r2, #0
 8004b78:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	e01d      	b.n	8004bbc <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d10a      	bne.n	8004b9e <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b88:	2300      	movs	r3, #0
 8004b8a:	613b      	str	r3, [r7, #16]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	68db      	ldr	r3, [r3, #12]
 8004b92:	613b      	str	r3, [r7, #16]
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	613b      	str	r3, [r7, #16]
 8004b9c:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d001      	beq.n	8004bba <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e000      	b.n	8004bbc <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8004bba:	2300      	movs	r3, #0
  }
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3728      	adds	r7, #40	@ 0x28
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}

08004bc4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b088      	sub	sp, #32
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	60f8      	str	r0, [r7, #12]
 8004bcc:	60b9      	str	r1, [r7, #8]
 8004bce:	603b      	str	r3, [r7, #0]
 8004bd0:	4613      	mov	r3, r2
 8004bd2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004bd4:	f7fd fc1e 	bl	8002414 <HAL_GetTick>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bdc:	1a9b      	subs	r3, r3, r2
 8004bde:	683a      	ldr	r2, [r7, #0]
 8004be0:	4413      	add	r3, r2
 8004be2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004be4:	f7fd fc16 	bl	8002414 <HAL_GetTick>
 8004be8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004bea:	4b39      	ldr	r3, [pc, #228]	@ (8004cd0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	015b      	lsls	r3, r3, #5
 8004bf0:	0d1b      	lsrs	r3, r3, #20
 8004bf2:	69fa      	ldr	r2, [r7, #28]
 8004bf4:	fb02 f303 	mul.w	r3, r2, r3
 8004bf8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004bfa:	e055      	b.n	8004ca8 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c02:	d051      	beq.n	8004ca8 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004c04:	f7fd fc06 	bl	8002414 <HAL_GetTick>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	69bb      	ldr	r3, [r7, #24]
 8004c0c:	1ad3      	subs	r3, r2, r3
 8004c0e:	69fa      	ldr	r2, [r7, #28]
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d902      	bls.n	8004c1a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004c14:	69fb      	ldr	r3, [r7, #28]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d13d      	bne.n	8004c96 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	685a      	ldr	r2, [r3, #4]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004c28:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004c32:	d111      	bne.n	8004c58 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c3c:	d004      	beq.n	8004c48 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c46:	d107      	bne.n	8004c58 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	681a      	ldr	r2, [r3, #0]
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c56:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c5c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c60:	d10f      	bne.n	8004c82 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004c70:	601a      	str	r2, [r3, #0]
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004c80:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2201      	movs	r2, #1
 8004c86:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004c92:	2303      	movs	r3, #3
 8004c94:	e018      	b.n	8004cc8 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d102      	bne.n	8004ca2 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	61fb      	str	r3, [r7, #28]
 8004ca0:	e002      	b.n	8004ca8 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	3b01      	subs	r3, #1
 8004ca6:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	689a      	ldr	r2, [r3, #8]
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	4013      	ands	r3, r2
 8004cb2:	68ba      	ldr	r2, [r7, #8]
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	bf0c      	ite	eq
 8004cb8:	2301      	moveq	r3, #1
 8004cba:	2300      	movne	r3, #0
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	461a      	mov	r2, r3
 8004cc0:	79fb      	ldrb	r3, [r7, #7]
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	d19a      	bne.n	8004bfc <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8004cc6:	2300      	movs	r3, #0
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3720      	adds	r7, #32
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}
 8004cd0:	20000010 	.word	0x20000010

08004cd4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b088      	sub	sp, #32
 8004cd8:	af02      	add	r7, sp, #8
 8004cda:	60f8      	str	r0, [r7, #12]
 8004cdc:	60b9      	str	r1, [r7, #8]
 8004cde:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	9300      	str	r3, [sp, #0]
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	2102      	movs	r1, #2
 8004cea:	68f8      	ldr	r0, [r7, #12]
 8004cec:	f7ff ff6a 	bl	8004bc4 <SPI_WaitFlagStateUntilTimeout>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d007      	beq.n	8004d06 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cfa:	f043 0220 	orr.w	r2, r3, #32
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004d02:	2303      	movs	r3, #3
 8004d04:	e032      	b.n	8004d6c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004d06:	4b1b      	ldr	r3, [pc, #108]	@ (8004d74 <SPI_EndRxTxTransaction+0xa0>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a1b      	ldr	r2, [pc, #108]	@ (8004d78 <SPI_EndRxTxTransaction+0xa4>)
 8004d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d10:	0d5b      	lsrs	r3, r3, #21
 8004d12:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004d16:	fb02 f303 	mul.w	r3, r2, r3
 8004d1a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004d24:	d112      	bne.n	8004d4c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	9300      	str	r3, [sp, #0]
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	2180      	movs	r1, #128	@ 0x80
 8004d30:	68f8      	ldr	r0, [r7, #12]
 8004d32:	f7ff ff47 	bl	8004bc4 <SPI_WaitFlagStateUntilTimeout>
 8004d36:	4603      	mov	r3, r0
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d016      	beq.n	8004d6a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d40:	f043 0220 	orr.w	r2, r3, #32
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004d48:	2303      	movs	r3, #3
 8004d4a:	e00f      	b.n	8004d6c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d00a      	beq.n	8004d68 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	3b01      	subs	r3, #1
 8004d56:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d62:	2b80      	cmp	r3, #128	@ 0x80
 8004d64:	d0f2      	beq.n	8004d4c <SPI_EndRxTxTransaction+0x78>
 8004d66:	e000      	b.n	8004d6a <SPI_EndRxTxTransaction+0x96>
        break;
 8004d68:	bf00      	nop
  }

  return HAL_OK;
 8004d6a:	2300      	movs	r3, #0
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	3718      	adds	r7, #24
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}
 8004d74:	20000010 	.word	0x20000010
 8004d78:	165e9f81 	.word	0x165e9f81

08004d7c <_ZdlPvj>:
 8004d7c:	f000 b800 	b.w	8004d80 <_ZdlPv>

08004d80 <_ZdlPv>:
 8004d80:	f000 b800 	b.w	8004d84 <free>

08004d84 <free>:
 8004d84:	4b02      	ldr	r3, [pc, #8]	@ (8004d90 <free+0xc>)
 8004d86:	4601      	mov	r1, r0
 8004d88:	6818      	ldr	r0, [r3, #0]
 8004d8a:	f000 b83d 	b.w	8004e08 <_free_r>
 8004d8e:	bf00      	nop
 8004d90:	2000001c 	.word	0x2000001c

08004d94 <__malloc_lock>:
 8004d94:	4801      	ldr	r0, [pc, #4]	@ (8004d9c <__malloc_lock+0x8>)
 8004d96:	f000 b835 	b.w	8004e04 <__retarget_lock_acquire_recursive>
 8004d9a:	bf00      	nop
 8004d9c:	20000358 	.word	0x20000358

08004da0 <__malloc_unlock>:
 8004da0:	4801      	ldr	r0, [pc, #4]	@ (8004da8 <__malloc_unlock+0x8>)
 8004da2:	f000 b830 	b.w	8004e06 <__retarget_lock_release_recursive>
 8004da6:	bf00      	nop
 8004da8:	20000358 	.word	0x20000358

08004dac <memset>:
 8004dac:	4402      	add	r2, r0
 8004dae:	4603      	mov	r3, r0
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d100      	bne.n	8004db6 <memset+0xa>
 8004db4:	4770      	bx	lr
 8004db6:	f803 1b01 	strb.w	r1, [r3], #1
 8004dba:	e7f9      	b.n	8004db0 <memset+0x4>

08004dbc <__libc_init_array>:
 8004dbc:	b570      	push	{r4, r5, r6, lr}
 8004dbe:	4d0d      	ldr	r5, [pc, #52]	@ (8004df4 <__libc_init_array+0x38>)
 8004dc0:	4c0d      	ldr	r4, [pc, #52]	@ (8004df8 <__libc_init_array+0x3c>)
 8004dc2:	1b64      	subs	r4, r4, r5
 8004dc4:	10a4      	asrs	r4, r4, #2
 8004dc6:	2600      	movs	r6, #0
 8004dc8:	42a6      	cmp	r6, r4
 8004dca:	d109      	bne.n	8004de0 <__libc_init_array+0x24>
 8004dcc:	4d0b      	ldr	r5, [pc, #44]	@ (8004dfc <__libc_init_array+0x40>)
 8004dce:	4c0c      	ldr	r4, [pc, #48]	@ (8004e00 <__libc_init_array+0x44>)
 8004dd0:	f000 f864 	bl	8004e9c <_init>
 8004dd4:	1b64      	subs	r4, r4, r5
 8004dd6:	10a4      	asrs	r4, r4, #2
 8004dd8:	2600      	movs	r6, #0
 8004dda:	42a6      	cmp	r6, r4
 8004ddc:	d105      	bne.n	8004dea <__libc_init_array+0x2e>
 8004dde:	bd70      	pop	{r4, r5, r6, pc}
 8004de0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004de4:	4798      	blx	r3
 8004de6:	3601      	adds	r6, #1
 8004de8:	e7ee      	b.n	8004dc8 <__libc_init_array+0xc>
 8004dea:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dee:	4798      	blx	r3
 8004df0:	3601      	adds	r6, #1
 8004df2:	e7f2      	b.n	8004dda <__libc_init_array+0x1e>
 8004df4:	08004f00 	.word	0x08004f00
 8004df8:	08004f00 	.word	0x08004f00
 8004dfc:	08004f00 	.word	0x08004f00
 8004e00:	08004f08 	.word	0x08004f08

08004e04 <__retarget_lock_acquire_recursive>:
 8004e04:	4770      	bx	lr

08004e06 <__retarget_lock_release_recursive>:
 8004e06:	4770      	bx	lr

08004e08 <_free_r>:
 8004e08:	b538      	push	{r3, r4, r5, lr}
 8004e0a:	4605      	mov	r5, r0
 8004e0c:	2900      	cmp	r1, #0
 8004e0e:	d041      	beq.n	8004e94 <_free_r+0x8c>
 8004e10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e14:	1f0c      	subs	r4, r1, #4
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	bfb8      	it	lt
 8004e1a:	18e4      	addlt	r4, r4, r3
 8004e1c:	f7ff ffba 	bl	8004d94 <__malloc_lock>
 8004e20:	4a1d      	ldr	r2, [pc, #116]	@ (8004e98 <_free_r+0x90>)
 8004e22:	6813      	ldr	r3, [r2, #0]
 8004e24:	b933      	cbnz	r3, 8004e34 <_free_r+0x2c>
 8004e26:	6063      	str	r3, [r4, #4]
 8004e28:	6014      	str	r4, [r2, #0]
 8004e2a:	4628      	mov	r0, r5
 8004e2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e30:	f7ff bfb6 	b.w	8004da0 <__malloc_unlock>
 8004e34:	42a3      	cmp	r3, r4
 8004e36:	d908      	bls.n	8004e4a <_free_r+0x42>
 8004e38:	6820      	ldr	r0, [r4, #0]
 8004e3a:	1821      	adds	r1, r4, r0
 8004e3c:	428b      	cmp	r3, r1
 8004e3e:	bf01      	itttt	eq
 8004e40:	6819      	ldreq	r1, [r3, #0]
 8004e42:	685b      	ldreq	r3, [r3, #4]
 8004e44:	1809      	addeq	r1, r1, r0
 8004e46:	6021      	streq	r1, [r4, #0]
 8004e48:	e7ed      	b.n	8004e26 <_free_r+0x1e>
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	b10b      	cbz	r3, 8004e54 <_free_r+0x4c>
 8004e50:	42a3      	cmp	r3, r4
 8004e52:	d9fa      	bls.n	8004e4a <_free_r+0x42>
 8004e54:	6811      	ldr	r1, [r2, #0]
 8004e56:	1850      	adds	r0, r2, r1
 8004e58:	42a0      	cmp	r0, r4
 8004e5a:	d10b      	bne.n	8004e74 <_free_r+0x6c>
 8004e5c:	6820      	ldr	r0, [r4, #0]
 8004e5e:	4401      	add	r1, r0
 8004e60:	1850      	adds	r0, r2, r1
 8004e62:	4283      	cmp	r3, r0
 8004e64:	6011      	str	r1, [r2, #0]
 8004e66:	d1e0      	bne.n	8004e2a <_free_r+0x22>
 8004e68:	6818      	ldr	r0, [r3, #0]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	6053      	str	r3, [r2, #4]
 8004e6e:	4408      	add	r0, r1
 8004e70:	6010      	str	r0, [r2, #0]
 8004e72:	e7da      	b.n	8004e2a <_free_r+0x22>
 8004e74:	d902      	bls.n	8004e7c <_free_r+0x74>
 8004e76:	230c      	movs	r3, #12
 8004e78:	602b      	str	r3, [r5, #0]
 8004e7a:	e7d6      	b.n	8004e2a <_free_r+0x22>
 8004e7c:	6820      	ldr	r0, [r4, #0]
 8004e7e:	1821      	adds	r1, r4, r0
 8004e80:	428b      	cmp	r3, r1
 8004e82:	bf04      	itt	eq
 8004e84:	6819      	ldreq	r1, [r3, #0]
 8004e86:	685b      	ldreq	r3, [r3, #4]
 8004e88:	6063      	str	r3, [r4, #4]
 8004e8a:	bf04      	itt	eq
 8004e8c:	1809      	addeq	r1, r1, r0
 8004e8e:	6021      	streq	r1, [r4, #0]
 8004e90:	6054      	str	r4, [r2, #4]
 8004e92:	e7ca      	b.n	8004e2a <_free_r+0x22>
 8004e94:	bd38      	pop	{r3, r4, r5, pc}
 8004e96:	bf00      	nop
 8004e98:	2000021c 	.word	0x2000021c

08004e9c <_init>:
 8004e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e9e:	bf00      	nop
 8004ea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ea2:	bc08      	pop	{r3}
 8004ea4:	469e      	mov	lr, r3
 8004ea6:	4770      	bx	lr

08004ea8 <_fini>:
 8004ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eaa:	bf00      	nop
 8004eac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004eae:	bc08      	pop	{r3}
 8004eb0:	469e      	mov	lr, r3
 8004eb2:	4770      	bx	lr
