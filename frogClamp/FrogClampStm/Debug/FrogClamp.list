
FrogClamp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003330  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080034c8  080034c8  000044c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080034e0  080034e0  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  080034e0  080034e0  000044e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080034e8  080034e8  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080034e8  080034e8  000044e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080034ec  080034ec  000044ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080034f0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  2000000c  080034fc  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c0  080034fc  000050c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000076aa  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000014d0  00000000  00000000  0000c6e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000750  00000000  00000000  0000dbb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000059b  00000000  00000000  0000e308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014bb1  00000000  00000000  0000e8a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009801  00000000  00000000  00023454  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000825e4  00000000  00000000  0002cc55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000af239  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001de4  00000000  00000000  000af27c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  000b1060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080034b0 	.word	0x080034b0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	080034b0 	.word	0x080034b0

080001d8 <__aeabi_ldivmod>:
 80001d8:	b97b      	cbnz	r3, 80001fa <__aeabi_ldivmod+0x22>
 80001da:	b972      	cbnz	r2, 80001fa <__aeabi_ldivmod+0x22>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bfbe      	ittt	lt
 80001e0:	2000      	movlt	r0, #0
 80001e2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80001e6:	e006      	blt.n	80001f6 <__aeabi_ldivmod+0x1e>
 80001e8:	bf08      	it	eq
 80001ea:	2800      	cmpeq	r0, #0
 80001ec:	bf1c      	itt	ne
 80001ee:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 80001f2:	f04f 30ff 	movne.w	r0, #4294967295
 80001f6:	f000 b9b5 	b.w	8000564 <__aeabi_idiv0>
 80001fa:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fe:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000202:	2900      	cmp	r1, #0
 8000204:	db09      	blt.n	800021a <__aeabi_ldivmod+0x42>
 8000206:	2b00      	cmp	r3, #0
 8000208:	db1a      	blt.n	8000240 <__aeabi_ldivmod+0x68>
 800020a:	f000 f84d 	bl	80002a8 <__udivmoddi4>
 800020e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000212:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000216:	b004      	add	sp, #16
 8000218:	4770      	bx	lr
 800021a:	4240      	negs	r0, r0
 800021c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000220:	2b00      	cmp	r3, #0
 8000222:	db1b      	blt.n	800025c <__aeabi_ldivmod+0x84>
 8000224:	f000 f840 	bl	80002a8 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4240      	negs	r0, r0
 8000234:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000238:	4252      	negs	r2, r2
 800023a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800023e:	4770      	bx	lr
 8000240:	4252      	negs	r2, r2
 8000242:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000246:	f000 f82f 	bl	80002a8 <__udivmoddi4>
 800024a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800024e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000252:	b004      	add	sp, #16
 8000254:	4240      	negs	r0, r0
 8000256:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025a:	4770      	bx	lr
 800025c:	4252      	negs	r2, r2
 800025e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000262:	f000 f821 	bl	80002a8 <__udivmoddi4>
 8000266:	f8dd e004 	ldr.w	lr, [sp, #4]
 800026a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026e:	b004      	add	sp, #16
 8000270:	4252      	negs	r2, r2
 8000272:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000276:	4770      	bx	lr

08000278 <__aeabi_uldivmod>:
 8000278:	b953      	cbnz	r3, 8000290 <__aeabi_uldivmod+0x18>
 800027a:	b94a      	cbnz	r2, 8000290 <__aeabi_uldivmod+0x18>
 800027c:	2900      	cmp	r1, #0
 800027e:	bf08      	it	eq
 8000280:	2800      	cmpeq	r0, #0
 8000282:	bf1c      	itt	ne
 8000284:	f04f 31ff 	movne.w	r1, #4294967295
 8000288:	f04f 30ff 	movne.w	r0, #4294967295
 800028c:	f000 b96a 	b.w	8000564 <__aeabi_idiv0>
 8000290:	f1ad 0c08 	sub.w	ip, sp, #8
 8000294:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000298:	f000 f806 	bl	80002a8 <__udivmoddi4>
 800029c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a4:	b004      	add	sp, #16
 80002a6:	4770      	bx	lr

080002a8 <__udivmoddi4>:
 80002a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002ac:	9d08      	ldr	r5, [sp, #32]
 80002ae:	460c      	mov	r4, r1
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d14e      	bne.n	8000352 <__udivmoddi4+0xaa>
 80002b4:	4694      	mov	ip, r2
 80002b6:	458c      	cmp	ip, r1
 80002b8:	4686      	mov	lr, r0
 80002ba:	fab2 f282 	clz	r2, r2
 80002be:	d962      	bls.n	8000386 <__udivmoddi4+0xde>
 80002c0:	b14a      	cbz	r2, 80002d6 <__udivmoddi4+0x2e>
 80002c2:	f1c2 0320 	rsb	r3, r2, #32
 80002c6:	4091      	lsls	r1, r2
 80002c8:	fa20 f303 	lsr.w	r3, r0, r3
 80002cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d0:	4319      	orrs	r1, r3
 80002d2:	fa00 fe02 	lsl.w	lr, r0, r2
 80002d6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002da:	fa1f f68c 	uxth.w	r6, ip
 80002de:	fbb1 f4f7 	udiv	r4, r1, r7
 80002e2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002e6:	fb07 1114 	mls	r1, r7, r4, r1
 80002ea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ee:	fb04 f106 	mul.w	r1, r4, r6
 80002f2:	4299      	cmp	r1, r3
 80002f4:	d90a      	bls.n	800030c <__udivmoddi4+0x64>
 80002f6:	eb1c 0303 	adds.w	r3, ip, r3
 80002fa:	f104 30ff 	add.w	r0, r4, #4294967295
 80002fe:	f080 8112 	bcs.w	8000526 <__udivmoddi4+0x27e>
 8000302:	4299      	cmp	r1, r3
 8000304:	f240 810f 	bls.w	8000526 <__udivmoddi4+0x27e>
 8000308:	3c02      	subs	r4, #2
 800030a:	4463      	add	r3, ip
 800030c:	1a59      	subs	r1, r3, r1
 800030e:	fa1f f38e 	uxth.w	r3, lr
 8000312:	fbb1 f0f7 	udiv	r0, r1, r7
 8000316:	fb07 1110 	mls	r1, r7, r0, r1
 800031a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031e:	fb00 f606 	mul.w	r6, r0, r6
 8000322:	429e      	cmp	r6, r3
 8000324:	d90a      	bls.n	800033c <__udivmoddi4+0x94>
 8000326:	eb1c 0303 	adds.w	r3, ip, r3
 800032a:	f100 31ff 	add.w	r1, r0, #4294967295
 800032e:	f080 80fc 	bcs.w	800052a <__udivmoddi4+0x282>
 8000332:	429e      	cmp	r6, r3
 8000334:	f240 80f9 	bls.w	800052a <__udivmoddi4+0x282>
 8000338:	4463      	add	r3, ip
 800033a:	3802      	subs	r0, #2
 800033c:	1b9b      	subs	r3, r3, r6
 800033e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000342:	2100      	movs	r1, #0
 8000344:	b11d      	cbz	r5, 800034e <__udivmoddi4+0xa6>
 8000346:	40d3      	lsrs	r3, r2
 8000348:	2200      	movs	r2, #0
 800034a:	e9c5 3200 	strd	r3, r2, [r5]
 800034e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000352:	428b      	cmp	r3, r1
 8000354:	d905      	bls.n	8000362 <__udivmoddi4+0xba>
 8000356:	b10d      	cbz	r5, 800035c <__udivmoddi4+0xb4>
 8000358:	e9c5 0100 	strd	r0, r1, [r5]
 800035c:	2100      	movs	r1, #0
 800035e:	4608      	mov	r0, r1
 8000360:	e7f5      	b.n	800034e <__udivmoddi4+0xa6>
 8000362:	fab3 f183 	clz	r1, r3
 8000366:	2900      	cmp	r1, #0
 8000368:	d146      	bne.n	80003f8 <__udivmoddi4+0x150>
 800036a:	42a3      	cmp	r3, r4
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xcc>
 800036e:	4290      	cmp	r0, r2
 8000370:	f0c0 80f0 	bcc.w	8000554 <__udivmoddi4+0x2ac>
 8000374:	1a86      	subs	r6, r0, r2
 8000376:	eb64 0303 	sbc.w	r3, r4, r3
 800037a:	2001      	movs	r0, #1
 800037c:	2d00      	cmp	r5, #0
 800037e:	d0e6      	beq.n	800034e <__udivmoddi4+0xa6>
 8000380:	e9c5 6300 	strd	r6, r3, [r5]
 8000384:	e7e3      	b.n	800034e <__udivmoddi4+0xa6>
 8000386:	2a00      	cmp	r2, #0
 8000388:	f040 8090 	bne.w	80004ac <__udivmoddi4+0x204>
 800038c:	eba1 040c 	sub.w	r4, r1, ip
 8000390:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000394:	fa1f f78c 	uxth.w	r7, ip
 8000398:	2101      	movs	r1, #1
 800039a:	fbb4 f6f8 	udiv	r6, r4, r8
 800039e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003a2:	fb08 4416 	mls	r4, r8, r6, r4
 80003a6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003aa:	fb07 f006 	mul.w	r0, r7, r6
 80003ae:	4298      	cmp	r0, r3
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x11c>
 80003b2:	eb1c 0303 	adds.w	r3, ip, r3
 80003b6:	f106 34ff 	add.w	r4, r6, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x11a>
 80003bc:	4298      	cmp	r0, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2b4>
 80003c2:	4626      	mov	r6, r4
 80003c4:	1a1c      	subs	r4, r3, r0
 80003c6:	fa1f f38e 	uxth.w	r3, lr
 80003ca:	fbb4 f0f8 	udiv	r0, r4, r8
 80003ce:	fb08 4410 	mls	r4, r8, r0, r4
 80003d2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d6:	fb00 f707 	mul.w	r7, r0, r7
 80003da:	429f      	cmp	r7, r3
 80003dc:	d908      	bls.n	80003f0 <__udivmoddi4+0x148>
 80003de:	eb1c 0303 	adds.w	r3, ip, r3
 80003e2:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e6:	d202      	bcs.n	80003ee <__udivmoddi4+0x146>
 80003e8:	429f      	cmp	r7, r3
 80003ea:	f200 80b0 	bhi.w	800054e <__udivmoddi4+0x2a6>
 80003ee:	4620      	mov	r0, r4
 80003f0:	1bdb      	subs	r3, r3, r7
 80003f2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003f6:	e7a5      	b.n	8000344 <__udivmoddi4+0x9c>
 80003f8:	f1c1 0620 	rsb	r6, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 f706 	lsr.w	r7, r2, r6
 8000402:	431f      	orrs	r7, r3
 8000404:	fa20 fc06 	lsr.w	ip, r0, r6
 8000408:	fa04 f301 	lsl.w	r3, r4, r1
 800040c:	ea43 030c 	orr.w	r3, r3, ip
 8000410:	40f4      	lsrs	r4, r6
 8000412:	fa00 f801 	lsl.w	r8, r0, r1
 8000416:	0c38      	lsrs	r0, r7, #16
 8000418:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800041c:	fbb4 fef0 	udiv	lr, r4, r0
 8000420:	fa1f fc87 	uxth.w	ip, r7
 8000424:	fb00 441e 	mls	r4, r0, lr, r4
 8000428:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800042c:	fb0e f90c 	mul.w	r9, lr, ip
 8000430:	45a1      	cmp	r9, r4
 8000432:	fa02 f201 	lsl.w	r2, r2, r1
 8000436:	d90a      	bls.n	800044e <__udivmoddi4+0x1a6>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800043e:	f080 8084 	bcs.w	800054a <__udivmoddi4+0x2a2>
 8000442:	45a1      	cmp	r9, r4
 8000444:	f240 8081 	bls.w	800054a <__udivmoddi4+0x2a2>
 8000448:	f1ae 0e02 	sub.w	lr, lr, #2
 800044c:	443c      	add	r4, r7
 800044e:	eba4 0409 	sub.w	r4, r4, r9
 8000452:	fa1f f983 	uxth.w	r9, r3
 8000456:	fbb4 f3f0 	udiv	r3, r4, r0
 800045a:	fb00 4413 	mls	r4, r0, r3, r4
 800045e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000462:	fb03 fc0c 	mul.w	ip, r3, ip
 8000466:	45a4      	cmp	ip, r4
 8000468:	d907      	bls.n	800047a <__udivmoddi4+0x1d2>
 800046a:	193c      	adds	r4, r7, r4
 800046c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000470:	d267      	bcs.n	8000542 <__udivmoddi4+0x29a>
 8000472:	45a4      	cmp	ip, r4
 8000474:	d965      	bls.n	8000542 <__udivmoddi4+0x29a>
 8000476:	3b02      	subs	r3, #2
 8000478:	443c      	add	r4, r7
 800047a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800047e:	fba0 9302 	umull	r9, r3, r0, r2
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	429c      	cmp	r4, r3
 8000488:	46ce      	mov	lr, r9
 800048a:	469c      	mov	ip, r3
 800048c:	d351      	bcc.n	8000532 <__udivmoddi4+0x28a>
 800048e:	d04e      	beq.n	800052e <__udivmoddi4+0x286>
 8000490:	b155      	cbz	r5, 80004a8 <__udivmoddi4+0x200>
 8000492:	ebb8 030e 	subs.w	r3, r8, lr
 8000496:	eb64 040c 	sbc.w	r4, r4, ip
 800049a:	fa04 f606 	lsl.w	r6, r4, r6
 800049e:	40cb      	lsrs	r3, r1
 80004a0:	431e      	orrs	r6, r3
 80004a2:	40cc      	lsrs	r4, r1
 80004a4:	e9c5 6400 	strd	r6, r4, [r5]
 80004a8:	2100      	movs	r1, #0
 80004aa:	e750      	b.n	800034e <__udivmoddi4+0xa6>
 80004ac:	f1c2 0320 	rsb	r3, r2, #32
 80004b0:	fa20 f103 	lsr.w	r1, r0, r3
 80004b4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b8:	fa24 f303 	lsr.w	r3, r4, r3
 80004bc:	4094      	lsls	r4, r2
 80004be:	430c      	orrs	r4, r1
 80004c0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004c4:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c8:	fa1f f78c 	uxth.w	r7, ip
 80004cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d0:	fb08 3110 	mls	r1, r8, r0, r3
 80004d4:	0c23      	lsrs	r3, r4, #16
 80004d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004da:	fb00 f107 	mul.w	r1, r0, r7
 80004de:	4299      	cmp	r1, r3
 80004e0:	d908      	bls.n	80004f4 <__udivmoddi4+0x24c>
 80004e2:	eb1c 0303 	adds.w	r3, ip, r3
 80004e6:	f100 36ff 	add.w	r6, r0, #4294967295
 80004ea:	d22c      	bcs.n	8000546 <__udivmoddi4+0x29e>
 80004ec:	4299      	cmp	r1, r3
 80004ee:	d92a      	bls.n	8000546 <__udivmoddi4+0x29e>
 80004f0:	3802      	subs	r0, #2
 80004f2:	4463      	add	r3, ip
 80004f4:	1a5b      	subs	r3, r3, r1
 80004f6:	b2a4      	uxth	r4, r4
 80004f8:	fbb3 f1f8 	udiv	r1, r3, r8
 80004fc:	fb08 3311 	mls	r3, r8, r1, r3
 8000500:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000504:	fb01 f307 	mul.w	r3, r1, r7
 8000508:	42a3      	cmp	r3, r4
 800050a:	d908      	bls.n	800051e <__udivmoddi4+0x276>
 800050c:	eb1c 0404 	adds.w	r4, ip, r4
 8000510:	f101 36ff 	add.w	r6, r1, #4294967295
 8000514:	d213      	bcs.n	800053e <__udivmoddi4+0x296>
 8000516:	42a3      	cmp	r3, r4
 8000518:	d911      	bls.n	800053e <__udivmoddi4+0x296>
 800051a:	3902      	subs	r1, #2
 800051c:	4464      	add	r4, ip
 800051e:	1ae4      	subs	r4, r4, r3
 8000520:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000524:	e739      	b.n	800039a <__udivmoddi4+0xf2>
 8000526:	4604      	mov	r4, r0
 8000528:	e6f0      	b.n	800030c <__udivmoddi4+0x64>
 800052a:	4608      	mov	r0, r1
 800052c:	e706      	b.n	800033c <__udivmoddi4+0x94>
 800052e:	45c8      	cmp	r8, r9
 8000530:	d2ae      	bcs.n	8000490 <__udivmoddi4+0x1e8>
 8000532:	ebb9 0e02 	subs.w	lr, r9, r2
 8000536:	eb63 0c07 	sbc.w	ip, r3, r7
 800053a:	3801      	subs	r0, #1
 800053c:	e7a8      	b.n	8000490 <__udivmoddi4+0x1e8>
 800053e:	4631      	mov	r1, r6
 8000540:	e7ed      	b.n	800051e <__udivmoddi4+0x276>
 8000542:	4603      	mov	r3, r0
 8000544:	e799      	b.n	800047a <__udivmoddi4+0x1d2>
 8000546:	4630      	mov	r0, r6
 8000548:	e7d4      	b.n	80004f4 <__udivmoddi4+0x24c>
 800054a:	46d6      	mov	lr, sl
 800054c:	e77f      	b.n	800044e <__udivmoddi4+0x1a6>
 800054e:	4463      	add	r3, ip
 8000550:	3802      	subs	r0, #2
 8000552:	e74d      	b.n	80003f0 <__udivmoddi4+0x148>
 8000554:	4606      	mov	r6, r0
 8000556:	4623      	mov	r3, r4
 8000558:	4608      	mov	r0, r1
 800055a:	e70f      	b.n	800037c <__udivmoddi4+0xd4>
 800055c:	3e02      	subs	r6, #2
 800055e:	4463      	add	r3, ip
 8000560:	e730      	b.n	80003c4 <__udivmoddi4+0x11c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <bmp280_init_default_params>:

#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params) {
 8000568:	b480      	push	{r7}
 800056a:	b083      	sub	sp, #12
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	2203      	movs	r2, #3
 8000574:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	2200      	movs	r2, #0
 800057a:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	2203      	movs	r2, #3
 8000580:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	2203      	movs	r2, #3
 8000586:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	2203      	movs	r2, #3
 800058c:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	2203      	movs	r2, #3
 8000592:	715a      	strb	r2, [r3, #5]
}
 8000594:	bf00      	nop
 8000596:	370c      	adds	r7, #12
 8000598:	46bd      	mov	sp, r7
 800059a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059e:	4770      	bx	lr

080005a0 <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b08a      	sub	sp, #40	@ 0x28
 80005a4:	af04      	add	r7, sp, #16
 80005a6:	60f8      	str	r0, [r7, #12]
 80005a8:	460b      	mov	r3, r1
 80005aa:	607a      	str	r2, [r7, #4]
 80005ac:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80005b2:	005b      	lsls	r3, r3, #1
 80005b4:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80005ba:	7afb      	ldrb	r3, [r7, #11]
 80005bc:	b29a      	uxth	r2, r3
 80005be:	8af9      	ldrh	r1, [r7, #22]
 80005c0:	f241 3388 	movw	r3, #5000	@ 0x1388
 80005c4:	9302      	str	r3, [sp, #8]
 80005c6:	2302      	movs	r3, #2
 80005c8:	9301      	str	r3, [sp, #4]
 80005ca:	f107 0314 	add.w	r3, r7, #20
 80005ce:	9300      	str	r3, [sp, #0]
 80005d0:	2301      	movs	r3, #1
 80005d2:	f001 fd17 	bl	8002004 <HAL_I2C_Mem_Read>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d10b      	bne.n	80005f4 <read_register16+0x54>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 80005dc:	7d7b      	ldrb	r3, [r7, #21]
 80005de:	021b      	lsls	r3, r3, #8
 80005e0:	b21a      	sxth	r2, r3
 80005e2:	7d3b      	ldrb	r3, [r7, #20]
 80005e4:	b21b      	sxth	r3, r3
 80005e6:	4313      	orrs	r3, r2
 80005e8:	b21b      	sxth	r3, r3
 80005ea:	b29a      	uxth	r2, r3
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	801a      	strh	r2, [r3, #0]
		return true;
 80005f0:	2301      	movs	r3, #1
 80005f2:	e000      	b.n	80005f6 <read_register16+0x56>
	} else
		return false;
 80005f4:	2300      	movs	r3, #0

}
 80005f6:	4618      	mov	r0, r3
 80005f8:	3718      	adds	r7, #24
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}

080005fe <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 80005fe:	b590      	push	{r4, r7, lr}
 8000600:	b08b      	sub	sp, #44	@ 0x2c
 8000602:	af04      	add	r7, sp, #16
 8000604:	60f8      	str	r0, [r7, #12]
 8000606:	607a      	str	r2, [r7, #4]
 8000608:	461a      	mov	r2, r3
 800060a:	460b      	mov	r3, r1
 800060c:	72fb      	strb	r3, [r7, #11]
 800060e:	4613      	mov	r3, r2
 8000610:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000616:	005b      	lsls	r3, r3, #1
 8000618:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800061e:	7afb      	ldrb	r3, [r7, #11]
 8000620:	b29a      	uxth	r2, r3
 8000622:	7abb      	ldrb	r3, [r7, #10]
 8000624:	b29b      	uxth	r3, r3
 8000626:	8af9      	ldrh	r1, [r7, #22]
 8000628:	f241 3488 	movw	r4, #5000	@ 0x1388
 800062c:	9402      	str	r4, [sp, #8]
 800062e:	9301      	str	r3, [sp, #4]
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	9300      	str	r3, [sp, #0]
 8000634:	2301      	movs	r3, #1
 8000636:	f001 fce5 	bl	8002004 <HAL_I2C_Mem_Read>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d101      	bne.n	8000644 <read_data+0x46>
		return 0;
 8000640:	2300      	movs	r3, #0
 8000642:	e000      	b.n	8000646 <read_data+0x48>
	else
		return 1;
 8000644:	2301      	movs	r3, #1

}
 8000646:	4618      	mov	r0, r3
 8000648:	371c      	adds	r7, #28
 800064a:	46bd      	mov	sp, r7
 800064c:	bd90      	pop	{r4, r7, pc}

0800064e <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 800064e:	b580      	push	{r7, lr}
 8000650:	b082      	sub	sp, #8
 8000652:	af00      	add	r7, sp, #0
 8000654:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	461a      	mov	r2, r3
 800065a:	2188      	movs	r1, #136	@ 0x88
 800065c:	6878      	ldr	r0, [r7, #4]
 800065e:	f7ff ff9f 	bl	80005a0 <read_register16>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d06f      	beq.n	8000748 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	3302      	adds	r3, #2
 800066c:	461a      	mov	r2, r3
 800066e:	218a      	movs	r1, #138	@ 0x8a
 8000670:	6878      	ldr	r0, [r7, #4]
 8000672:	f7ff ff95 	bl	80005a0 <read_register16>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d065      	beq.n	8000748 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	3304      	adds	r3, #4
 8000680:	461a      	mov	r2, r3
 8000682:	218c      	movs	r1, #140	@ 0x8c
 8000684:	6878      	ldr	r0, [r7, #4]
 8000686:	f7ff ff8b 	bl	80005a0 <read_register16>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d05b      	beq.n	8000748 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	3306      	adds	r3, #6
 8000694:	461a      	mov	r2, r3
 8000696:	218e      	movs	r1, #142	@ 0x8e
 8000698:	6878      	ldr	r0, [r7, #4]
 800069a:	f7ff ff81 	bl	80005a0 <read_register16>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d051      	beq.n	8000748 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	3308      	adds	r3, #8
 80006a8:	461a      	mov	r2, r3
 80006aa:	2190      	movs	r1, #144	@ 0x90
 80006ac:	6878      	ldr	r0, [r7, #4]
 80006ae:	f7ff ff77 	bl	80005a0 <read_register16>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d047      	beq.n	8000748 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	330a      	adds	r3, #10
 80006bc:	461a      	mov	r2, r3
 80006be:	2192      	movs	r1, #146	@ 0x92
 80006c0:	6878      	ldr	r0, [r7, #4]
 80006c2:	f7ff ff6d 	bl	80005a0 <read_register16>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d03d      	beq.n	8000748 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	330c      	adds	r3, #12
 80006d0:	461a      	mov	r2, r3
 80006d2:	2194      	movs	r1, #148	@ 0x94
 80006d4:	6878      	ldr	r0, [r7, #4]
 80006d6:	f7ff ff63 	bl	80005a0 <read_register16>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d033      	beq.n	8000748 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	330e      	adds	r3, #14
 80006e4:	461a      	mov	r2, r3
 80006e6:	2196      	movs	r1, #150	@ 0x96
 80006e8:	6878      	ldr	r0, [r7, #4]
 80006ea:	f7ff ff59 	bl	80005a0 <read_register16>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d029      	beq.n	8000748 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	3310      	adds	r3, #16
 80006f8:	461a      	mov	r2, r3
 80006fa:	2198      	movs	r1, #152	@ 0x98
 80006fc:	6878      	ldr	r0, [r7, #4]
 80006fe:	f7ff ff4f 	bl	80005a0 <read_register16>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d01f      	beq.n	8000748 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	3312      	adds	r3, #18
 800070c:	461a      	mov	r2, r3
 800070e:	219a      	movs	r1, #154	@ 0x9a
 8000710:	6878      	ldr	r0, [r7, #4]
 8000712:	f7ff ff45 	bl	80005a0 <read_register16>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d015      	beq.n	8000748 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	3314      	adds	r3, #20
 8000720:	461a      	mov	r2, r3
 8000722:	219c      	movs	r1, #156	@ 0x9c
 8000724:	6878      	ldr	r0, [r7, #4]
 8000726:	f7ff ff3b 	bl	80005a0 <read_register16>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d00b      	beq.n	8000748 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 8000734:	461a      	mov	r2, r3
 8000736:	219e      	movs	r1, #158	@ 0x9e
 8000738:	6878      	ldr	r0, [r7, #4]
 800073a:	f7ff ff31 	bl	80005a0 <read_register16>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <read_calibration_data+0xfa>

		return true;
 8000744:	2301      	movs	r3, #1
 8000746:	e000      	b.n	800074a <read_calibration_data+0xfc>
	}

	return false;
 8000748:	2300      	movs	r3, #0
}
 800074a:	4618      	mov	r0, r3
 800074c:	3708      	adds	r7, #8
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}

08000752 <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 8000752:	b580      	push	{r7, lr}
 8000754:	b084      	sub	sp, #16
 8000756:	af00      	add	r7, sp, #0
 8000758:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	f103 0218 	add.w	r2, r3, #24
 8000760:	2301      	movs	r3, #1
 8000762:	21a1      	movs	r1, #161	@ 0xa1
 8000764:	6878      	ldr	r0, [r7, #4]
 8000766:	f7ff ff4a 	bl	80005fe <read_data>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d14b      	bne.n	8000808 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	331a      	adds	r3, #26
 8000774:	461a      	mov	r2, r3
 8000776:	21e1      	movs	r1, #225	@ 0xe1
 8000778:	6878      	ldr	r0, [r7, #4]
 800077a:	f7ff ff11 	bl	80005a0 <read_register16>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d041      	beq.n	8000808 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	f103 021c 	add.w	r2, r3, #28
 800078a:	2301      	movs	r3, #1
 800078c:	21e3      	movs	r1, #227	@ 0xe3
 800078e:	6878      	ldr	r0, [r7, #4]
 8000790:	f7ff ff35 	bl	80005fe <read_data>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d136      	bne.n	8000808 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe4, &h4)
 800079a:	f107 030e 	add.w	r3, r7, #14
 800079e:	461a      	mov	r2, r3
 80007a0:	21e4      	movs	r1, #228	@ 0xe4
 80007a2:	6878      	ldr	r0, [r7, #4]
 80007a4:	f7ff fefc 	bl	80005a0 <read_register16>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d02c      	beq.n	8000808 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe5, &h5)
 80007ae:	f107 030c 	add.w	r3, r7, #12
 80007b2:	461a      	mov	r2, r3
 80007b4:	21e5      	movs	r1, #229	@ 0xe5
 80007b6:	6878      	ldr	r0, [r7, #4]
 80007b8:	f7ff fef2 	bl	80005a0 <read_register16>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d022      	beq.n	8000808 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	f103 0222 	add.w	r2, r3, #34	@ 0x22
 80007c8:	2301      	movs	r3, #1
 80007ca:	21e7      	movs	r1, #231	@ 0xe7
 80007cc:	6878      	ldr	r0, [r7, #4]
 80007ce:	f7ff ff16 	bl	80005fe <read_data>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d117      	bne.n	8000808 <read_hum_calibration_data+0xb6>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 80007d8:	89fb      	ldrh	r3, [r7, #14]
 80007da:	011b      	lsls	r3, r3, #4
 80007dc:	b21b      	sxth	r3, r3
 80007de:	f403 637f 	and.w	r3, r3, #4080	@ 0xff0
 80007e2:	b21a      	sxth	r2, r3
 80007e4:	89fb      	ldrh	r3, [r7, #14]
 80007e6:	121b      	asrs	r3, r3, #8
 80007e8:	b21b      	sxth	r3, r3
 80007ea:	f003 030f 	and.w	r3, r3, #15
 80007ee:	b21b      	sxth	r3, r3
 80007f0:	4313      	orrs	r3, r2
 80007f2:	b21a      	sxth	r2, r3
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 80007f8:	89bb      	ldrh	r3, [r7, #12]
 80007fa:	091b      	lsrs	r3, r3, #4
 80007fc:	b29b      	uxth	r3, r3
 80007fe:	b21a      	sxth	r2, r3
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	841a      	strh	r2, [r3, #32]

		return true;
 8000804:	2301      	movs	r3, #1
 8000806:	e000      	b.n	800080a <read_hum_calibration_data+0xb8>
	}

	return false;
 8000808:	2300      	movs	r3, #0
}
 800080a:	4618      	mov	r0, r3
 800080c:	3710      	adds	r7, #16
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}

08000812 <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 8000812:	b580      	push	{r7, lr}
 8000814:	b088      	sub	sp, #32
 8000816:	af04      	add	r7, sp, #16
 8000818:	6078      	str	r0, [r7, #4]
 800081a:	460b      	mov	r3, r1
 800081c:	70fb      	strb	r3, [r7, #3]
 800081e:	4613      	mov	r3, r2
 8000820:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000826:	005b      	lsls	r3, r3, #1
 8000828:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800082e:	78fb      	ldrb	r3, [r7, #3]
 8000830:	b29a      	uxth	r2, r3
 8000832:	89f9      	ldrh	r1, [r7, #14]
 8000834:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000838:	9302      	str	r3, [sp, #8]
 800083a:	2301      	movs	r3, #1
 800083c:	9301      	str	r3, [sp, #4]
 800083e:	1cbb      	adds	r3, r7, #2
 8000840:	9300      	str	r3, [sp, #0]
 8000842:	2301      	movs	r3, #1
 8000844:	f001 fae4 	bl	8001e10 <HAL_I2C_Mem_Write>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d101      	bne.n	8000852 <write_register8+0x40>
		return false;
 800084e:	2300      	movs	r3, #0
 8000850:	e000      	b.n	8000854 <write_register8+0x42>
	else
		return true;
 8000852:	2301      	movs	r3, #1
}
 8000854:	4618      	mov	r0, r3
 8000856:	3710      	adds	r7, #16
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}

0800085c <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 800085c:	b580      	push	{r7, lr}
 800085e:	b084      	sub	sp, #16
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
 8000864:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800086a:	2b76      	cmp	r3, #118	@ 0x76
 800086c:	d005      	beq.n	800087a <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000872:	2b77      	cmp	r3, #119	@ 0x77
 8000874:	d001      	beq.n	800087a <bmp280_init+0x1e>

		return false;
 8000876:	2300      	movs	r3, #0
 8000878:	e099      	b.n	80009ae <bmp280_init+0x152>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8000880:	2301      	movs	r3, #1
 8000882:	21d0      	movs	r1, #208	@ 0xd0
 8000884:	6878      	ldr	r0, [r7, #4]
 8000886:	f7ff feba 	bl	80005fe <read_data>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <bmp280_init+0x38>
		return false;
 8000890:	2300      	movs	r3, #0
 8000892:	e08c      	b.n	80009ae <bmp280_init+0x152>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800089a:	2b58      	cmp	r3, #88	@ 0x58
 800089c:	d006      	beq.n	80008ac <bmp280_init+0x50>
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80008a4:	2b60      	cmp	r3, #96	@ 0x60
 80008a6:	d001      	beq.n	80008ac <bmp280_init+0x50>

		return false;
 80008a8:	2300      	movs	r3, #0
 80008aa:	e080      	b.n	80009ae <bmp280_init+0x152>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 80008ac:	22b6      	movs	r2, #182	@ 0xb6
 80008ae:	21e0      	movs	r1, #224	@ 0xe0
 80008b0:	6878      	ldr	r0, [r7, #4]
 80008b2:	f7ff ffae 	bl	8000812 <write_register8>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <bmp280_init+0x64>
		return false;
 80008bc:	2300      	movs	r3, #0
 80008be:	e076      	b.n	80009ae <bmp280_init+0x152>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 80008c0:	f107 020c 	add.w	r2, r7, #12
 80008c4:	2301      	movs	r3, #1
 80008c6:	21f3      	movs	r1, #243	@ 0xf3
 80008c8:	6878      	ldr	r0, [r7, #4]
 80008ca:	f7ff fe98 	bl	80005fe <read_data>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d1f5      	bne.n	80008c0 <bmp280_init+0x64>
				&& (status & 1) == 0)
 80008d4:	7b3b      	ldrb	r3, [r7, #12]
 80008d6:	f003 0301 	and.w	r3, r3, #1
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d1f0      	bne.n	80008c0 <bmp280_init+0x64>
			break;
	}

	if (!read_calibration_data(dev)) {
 80008de:	6878      	ldr	r0, [r7, #4]
 80008e0:	f7ff feb5 	bl	800064e <read_calibration_data>
 80008e4:	4603      	mov	r3, r0
 80008e6:	f083 0301 	eor.w	r3, r3, #1
 80008ea:	b2db      	uxtb	r3, r3
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d100      	bne.n	80008f2 <bmp280_init+0x96>
 80008f0:	e001      	b.n	80008f6 <bmp280_init+0x9a>
		return false;
 80008f2:	2300      	movs	r3, #0
 80008f4:	e05b      	b.n	80009ae <bmp280_init+0x152>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80008fc:	2b60      	cmp	r3, #96	@ 0x60
 80008fe:	d10a      	bne.n	8000916 <bmp280_init+0xba>
 8000900:	6878      	ldr	r0, [r7, #4]
 8000902:	f7ff ff26 	bl	8000752 <read_hum_calibration_data>
 8000906:	4603      	mov	r3, r0
 8000908:	f083 0301 	eor.w	r3, r3, #1
 800090c:	b2db      	uxtb	r3, r3
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <bmp280_init+0xba>
		return false;
 8000912:	2300      	movs	r3, #0
 8000914:	e04b      	b.n	80009ae <bmp280_init+0x152>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	795b      	ldrb	r3, [r3, #5]
 800091a:	015b      	lsls	r3, r3, #5
 800091c:	b25a      	sxtb	r2, r3
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	785b      	ldrb	r3, [r3, #1]
 8000922:	009b      	lsls	r3, r3, #2
 8000924:	b25b      	sxtb	r3, r3
 8000926:	4313      	orrs	r3, r2
 8000928:	b25b      	sxtb	r3, r3
 800092a:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 800092c:	7bfb      	ldrb	r3, [r7, #15]
 800092e:	461a      	mov	r2, r3
 8000930:	21f5      	movs	r1, #245	@ 0xf5
 8000932:	6878      	ldr	r0, [r7, #4]
 8000934:	f7ff ff6d 	bl	8000812 <write_register8>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <bmp280_init+0xe6>
		return false;
 800093e:	2300      	movs	r3, #0
 8000940:	e035      	b.n	80009ae <bmp280_init+0x152>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	2b01      	cmp	r3, #1
 8000948:	d102      	bne.n	8000950 <bmp280_init+0xf4>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	2200      	movs	r2, #0
 800094e:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	78db      	ldrb	r3, [r3, #3]
 8000954:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 8000956:	b25a      	sxtb	r2, r3
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	789b      	ldrb	r3, [r3, #2]
 800095c:	009b      	lsls	r3, r3, #2
 800095e:	b25b      	sxtb	r3, r3
 8000960:	4313      	orrs	r3, r2
 8000962:	b25a      	sxtb	r2, r3
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	b25b      	sxtb	r3, r3
 800096a:	4313      	orrs	r3, r2
 800096c:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 800096e:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8000976:	2b60      	cmp	r3, #96	@ 0x60
 8000978:	d10d      	bne.n	8000996 <bmp280_init+0x13a>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	791b      	ldrb	r3, [r3, #4]
 800097e:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 8000980:	7b7b      	ldrb	r3, [r7, #13]
 8000982:	461a      	mov	r2, r3
 8000984:	21f2      	movs	r1, #242	@ 0xf2
 8000986:	6878      	ldr	r0, [r7, #4]
 8000988:	f7ff ff43 	bl	8000812 <write_register8>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <bmp280_init+0x13a>
			return false;
 8000992:	2300      	movs	r3, #0
 8000994:	e00b      	b.n	80009ae <bmp280_init+0x152>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 8000996:	7bbb      	ldrb	r3, [r7, #14]
 8000998:	461a      	mov	r2, r3
 800099a:	21f4      	movs	r1, #244	@ 0xf4
 800099c:	6878      	ldr	r0, [r7, #4]
 800099e:	f7ff ff38 	bl	8000812 <write_register8>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <bmp280_init+0x150>
		return false;
 80009a8:	2300      	movs	r3, #0
 80009aa:	e000      	b.n	80009ae <bmp280_init+0x152>
	}

	return true;
 80009ac:	2301      	movs	r3, #1
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	3710      	adds	r7, #16
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}

080009b6 <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 80009b6:	b480      	push	{r7}
 80009b8:	b087      	sub	sp, #28
 80009ba:	af00      	add	r7, sp, #0
 80009bc:	60f8      	str	r0, [r7, #12]
 80009be:	60b9      	str	r1, [r7, #8]
 80009c0:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 80009c2:	68bb      	ldr	r3, [r7, #8]
 80009c4:	10da      	asrs	r2, r3, #3
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	881b      	ldrh	r3, [r3, #0]
 80009ca:	005b      	lsls	r3, r3, #1
 80009cc:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 80009ce:	68fa      	ldr	r2, [r7, #12]
 80009d0:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80009d4:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 80009d8:	12db      	asrs	r3, r3, #11
 80009da:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 80009dc:	68bb      	ldr	r3, [r7, #8]
 80009de:	111b      	asrs	r3, r3, #4
 80009e0:	68fa      	ldr	r2, [r7, #12]
 80009e2:	8812      	ldrh	r2, [r2, #0]
 80009e4:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 80009e6:	68ba      	ldr	r2, [r7, #8]
 80009e8:	1112      	asrs	r2, r2, #4
 80009ea:	68f9      	ldr	r1, [r7, #12]
 80009ec:	8809      	ldrh	r1, [r1, #0]
 80009ee:	1a52      	subs	r2, r2, r1
 80009f0:	fb02 f303 	mul.w	r3, r2, r3
 80009f4:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 80009f6:	68fa      	ldr	r2, [r7, #12]
 80009f8:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80009fc:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8000a00:	139b      	asrs	r3, r3, #14
 8000a02:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 8000a04:	697a      	ldr	r2, [r7, #20]
 8000a06:	693b      	ldr	r3, [r7, #16]
 8000a08:	441a      	add	r2, r3
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681a      	ldr	r2, [r3, #0]
 8000a12:	4613      	mov	r3, r2
 8000a14:	009b      	lsls	r3, r3, #2
 8000a16:	4413      	add	r3, r2
 8000a18:	3380      	adds	r3, #128	@ 0x80
 8000a1a:	121b      	asrs	r3, r3, #8
}
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	371c      	adds	r7, #28
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr

08000a28 <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 8000a28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000a2c:	b0cc      	sub	sp, #304	@ 0x130
 8000a2e:	af00      	add	r7, sp, #0
 8000a30:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
 8000a34:	f8c7 1110 	str.w	r1, [r7, #272]	@ 0x110
 8000a38:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 8000a3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000a40:	17da      	asrs	r2, r3, #31
 8000a42:	461c      	mov	r4, r3
 8000a44:	4615      	mov	r5, r2
 8000a46:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 8000a4a:	f145 3bff 	adc.w	fp, r5, #4294967295
 8000a4e:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	@ 0x128
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 8000a52:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8000a56:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000a5a:	fb03 f102 	mul.w	r1, r3, r2
 8000a5e:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8000a62:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000a66:	fb02 f303 	mul.w	r3, r2, r3
 8000a6a:	18ca      	adds	r2, r1, r3
 8000a6c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000a70:	fba3 8903 	umull	r8, r9, r3, r3
 8000a74:	eb02 0309 	add.w	r3, r2, r9
 8000a78:	4699      	mov	r9, r3
 8000a7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000a7e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000a82:	b21b      	sxth	r3, r3
 8000a84:	17da      	asrs	r2, r3, #31
 8000a86:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8000a8a:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8000a8e:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8000a92:	4603      	mov	r3, r0
 8000a94:	fb03 f209 	mul.w	r2, r3, r9
 8000a98:	460b      	mov	r3, r1
 8000a9a:	fb08 f303 	mul.w	r3, r8, r3
 8000a9e:	4413      	add	r3, r2
 8000aa0:	4602      	mov	r2, r0
 8000aa2:	fba8 1202 	umull	r1, r2, r8, r2
 8000aa6:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8000aaa:	460a      	mov	r2, r1
 8000aac:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 8000ab0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8000ab4:	4413      	add	r3, r2
 8000ab6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8000aba:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 8000abe:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
 8000ac2:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 8000ac6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000aca:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000ace:	b21b      	sxth	r3, r3
 8000ad0:	17da      	asrs	r2, r3, #31
 8000ad2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8000ad6:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8000ada:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000ade:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 8000ae2:	462a      	mov	r2, r5
 8000ae4:	fb02 f203 	mul.w	r2, r2, r3
 8000ae8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000aec:	4621      	mov	r1, r4
 8000aee:	fb01 f303 	mul.w	r3, r1, r3
 8000af2:	441a      	add	r2, r3
 8000af4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000af8:	4621      	mov	r1, r4
 8000afa:	fba3 1301 	umull	r1, r3, r3, r1
 8000afe:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8000b02:	460b      	mov	r3, r1
 8000b04:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8000b08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8000b0c:	18d3      	adds	r3, r2, r3
 8000b0e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8000b12:	f04f 0000 	mov.w	r0, #0
 8000b16:	f04f 0100 	mov.w	r1, #0
 8000b1a:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8000b1e:	462b      	mov	r3, r5
 8000b20:	0459      	lsls	r1, r3, #17
 8000b22:	4623      	mov	r3, r4
 8000b24:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8000b28:	4623      	mov	r3, r4
 8000b2a:	0458      	lsls	r0, r3, #17
 8000b2c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000b30:	1814      	adds	r4, r2, r0
 8000b32:	643c      	str	r4, [r7, #64]	@ 0x40
 8000b34:	414b      	adcs	r3, r1
 8000b36:	647b      	str	r3, [r7, #68]	@ 0x44
 8000b38:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8000b3c:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 8000b40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000b44:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000b48:	b21b      	sxth	r3, r3
 8000b4a:	17da      	asrs	r2, r3, #31
 8000b4c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8000b50:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	f04f 0100 	mov.w	r1, #0
 8000b5c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000b60:	00d9      	lsls	r1, r3, #3
 8000b62:	2000      	movs	r0, #0
 8000b64:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000b68:	1814      	adds	r4, r2, r0
 8000b6a:	63bc      	str	r4, [r7, #56]	@ 0x38
 8000b6c:	414b      	adcs	r3, r1
 8000b6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000b70:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8000b74:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8000b78:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8000b7c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000b80:	fb03 f102 	mul.w	r1, r3, r2
 8000b84:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8000b88:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000b8c:	fb02 f303 	mul.w	r3, r2, r3
 8000b90:	18ca      	adds	r2, r1, r3
 8000b92:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000b96:	fba3 1303 	umull	r1, r3, r3, r3
 8000b9a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8000b9e:	460b      	mov	r3, r1
 8000ba0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8000ba4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8000ba8:	18d3      	adds	r3, r2, r3
 8000baa:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8000bae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000bb2:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000bb6:	b21b      	sxth	r3, r3
 8000bb8:	17da      	asrs	r2, r3, #31
 8000bba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8000bbe:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8000bc2:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 8000bc6:	462b      	mov	r3, r5
 8000bc8:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8000bcc:	4642      	mov	r2, r8
 8000bce:	fb02 f203 	mul.w	r2, r2, r3
 8000bd2:	464b      	mov	r3, r9
 8000bd4:	4621      	mov	r1, r4
 8000bd6:	fb01 f303 	mul.w	r3, r1, r3
 8000bda:	4413      	add	r3, r2
 8000bdc:	4622      	mov	r2, r4
 8000bde:	4641      	mov	r1, r8
 8000be0:	fba2 1201 	umull	r1, r2, r2, r1
 8000be4:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8000be8:	460a      	mov	r2, r1
 8000bea:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 8000bee:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8000bf2:	4413      	add	r3, r2
 8000bf4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	f04f 0100 	mov.w	r1, #0
 8000c00:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8000c04:	4623      	mov	r3, r4
 8000c06:	0a18      	lsrs	r0, r3, #8
 8000c08:	462b      	mov	r3, r5
 8000c0a:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000c0e:	462b      	mov	r3, r5
 8000c10:	1219      	asrs	r1, r3, #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 8000c12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000c16:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000c1a:	b21b      	sxth	r3, r3
 8000c1c:	17da      	asrs	r2, r3, #31
 8000c1e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8000c22:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8000c26:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000c2a:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 8000c2e:	464a      	mov	r2, r9
 8000c30:	fb02 f203 	mul.w	r2, r2, r3
 8000c34:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000c38:	4644      	mov	r4, r8
 8000c3a:	fb04 f303 	mul.w	r3, r4, r3
 8000c3e:	441a      	add	r2, r3
 8000c40:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000c44:	4644      	mov	r4, r8
 8000c46:	fba3 4304 	umull	r4, r3, r3, r4
 8000c4a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8000c4e:	4623      	mov	r3, r4
 8000c50:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8000c54:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8000c58:	18d3      	adds	r3, r2, r3
 8000c5a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8000c5e:	f04f 0200 	mov.w	r2, #0
 8000c62:	f04f 0300 	mov.w	r3, #0
 8000c66:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8000c6a:	464c      	mov	r4, r9
 8000c6c:	0323      	lsls	r3, r4, #12
 8000c6e:	4644      	mov	r4, r8
 8000c70:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8000c74:	4644      	mov	r4, r8
 8000c76:	0322      	lsls	r2, r4, #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8000c78:	1884      	adds	r4, r0, r2
 8000c7a:	633c      	str	r4, [r7, #48]	@ 0x30
 8000c7c:	eb41 0303 	adc.w	r3, r1, r3
 8000c80:	637b      	str	r3, [r7, #52]	@ 0x34
 8000c82:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8000c86:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 8000c8a:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8000c8e:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8000c92:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 8000c96:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8000c9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000c9e:	88db      	ldrh	r3, [r3, #6]
 8000ca0:	b29b      	uxth	r3, r3
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8000ca8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8000cac:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8000cb0:	462b      	mov	r3, r5
 8000cb2:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8000cb6:	4642      	mov	r2, r8
 8000cb8:	fb02 f203 	mul.w	r2, r2, r3
 8000cbc:	464b      	mov	r3, r9
 8000cbe:	4621      	mov	r1, r4
 8000cc0:	fb01 f303 	mul.w	r3, r1, r3
 8000cc4:	4413      	add	r3, r2
 8000cc6:	4622      	mov	r2, r4
 8000cc8:	4641      	mov	r1, r8
 8000cca:	fba2 1201 	umull	r1, r2, r2, r1
 8000cce:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8000cd2:	460a      	mov	r2, r1
 8000cd4:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8000cd8:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8000cdc:	4413      	add	r3, r2
 8000cde:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8000ce2:	f04f 0200 	mov.w	r2, #0
 8000ce6:	f04f 0300 	mov.w	r3, #0
 8000cea:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8000cee:	4629      	mov	r1, r5
 8000cf0:	104a      	asrs	r2, r1, #1
 8000cf2:	4629      	mov	r1, r5
 8000cf4:	17cb      	asrs	r3, r1, #31
 8000cf6:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128

	if (var1 == 0) {
 8000cfa:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	d101      	bne.n	8000d06 <compensate_pressure+0x2de>
		return 0;  // avoid exception caused by division by zero
 8000d02:	2300      	movs	r3, #0
 8000d04:	e148      	b.n	8000f98 <compensate_pressure+0x570>
	}

	p = 1048576 - adc_press;
 8000d06:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000d0a:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8000d0e:	17da      	asrs	r2, r3, #31
 8000d10:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000d12:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8000d14:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8000d18:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	p = (((p << 31) - var2) * 3125) / var1;
 8000d1c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8000d20:	105b      	asrs	r3, r3, #1
 8000d22:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8000d26:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8000d2a:	07db      	lsls	r3, r3, #31
 8000d2c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8000d30:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000d34:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8000d38:	4621      	mov	r1, r4
 8000d3a:	1a89      	subs	r1, r1, r2
 8000d3c:	67b9      	str	r1, [r7, #120]	@ 0x78
 8000d3e:	4629      	mov	r1, r5
 8000d40:	eb61 0303 	sbc.w	r3, r1, r3
 8000d44:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8000d46:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8000d4a:	4622      	mov	r2, r4
 8000d4c:	462b      	mov	r3, r5
 8000d4e:	1891      	adds	r1, r2, r2
 8000d50:	6239      	str	r1, [r7, #32]
 8000d52:	415b      	adcs	r3, r3
 8000d54:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d56:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000d5a:	4621      	mov	r1, r4
 8000d5c:	1851      	adds	r1, r2, r1
 8000d5e:	61b9      	str	r1, [r7, #24]
 8000d60:	4629      	mov	r1, r5
 8000d62:	414b      	adcs	r3, r1
 8000d64:	61fb      	str	r3, [r7, #28]
 8000d66:	f04f 0200 	mov.w	r2, #0
 8000d6a:	f04f 0300 	mov.w	r3, #0
 8000d6e:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8000d72:	4649      	mov	r1, r9
 8000d74:	018b      	lsls	r3, r1, #6
 8000d76:	4641      	mov	r1, r8
 8000d78:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8000d7c:	4641      	mov	r1, r8
 8000d7e:	018a      	lsls	r2, r1, #6
 8000d80:	4641      	mov	r1, r8
 8000d82:	1889      	adds	r1, r1, r2
 8000d84:	6139      	str	r1, [r7, #16]
 8000d86:	4649      	mov	r1, r9
 8000d88:	eb43 0101 	adc.w	r1, r3, r1
 8000d8c:	6179      	str	r1, [r7, #20]
 8000d8e:	f04f 0200 	mov.w	r2, #0
 8000d92:	f04f 0300 	mov.w	r3, #0
 8000d96:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8000d9a:	4649      	mov	r1, r9
 8000d9c:	008b      	lsls	r3, r1, #2
 8000d9e:	4641      	mov	r1, r8
 8000da0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8000da4:	4641      	mov	r1, r8
 8000da6:	008a      	lsls	r2, r1, #2
 8000da8:	4610      	mov	r0, r2
 8000daa:	4619      	mov	r1, r3
 8000dac:	4603      	mov	r3, r0
 8000dae:	4622      	mov	r2, r4
 8000db0:	189b      	adds	r3, r3, r2
 8000db2:	60bb      	str	r3, [r7, #8]
 8000db4:	460b      	mov	r3, r1
 8000db6:	462a      	mov	r2, r5
 8000db8:	eb42 0303 	adc.w	r3, r2, r3
 8000dbc:	60fb      	str	r3, [r7, #12]
 8000dbe:	f04f 0200 	mov.w	r2, #0
 8000dc2:	f04f 0300 	mov.w	r3, #0
 8000dc6:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8000dca:	4649      	mov	r1, r9
 8000dcc:	008b      	lsls	r3, r1, #2
 8000dce:	4641      	mov	r1, r8
 8000dd0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8000dd4:	4641      	mov	r1, r8
 8000dd6:	008a      	lsls	r2, r1, #2
 8000dd8:	4610      	mov	r0, r2
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4603      	mov	r3, r0
 8000dde:	4622      	mov	r2, r4
 8000de0:	189b      	adds	r3, r3, r2
 8000de2:	673b      	str	r3, [r7, #112]	@ 0x70
 8000de4:	462b      	mov	r3, r5
 8000de6:	460a      	mov	r2, r1
 8000de8:	eb42 0303 	adc.w	r3, r2, r3
 8000dec:	677b      	str	r3, [r7, #116]	@ 0x74
 8000dee:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8000df2:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8000df6:	f7ff f9ef 	bl	80001d8 <__aeabi_ldivmod>
 8000dfa:	4602      	mov	r2, r0
 8000dfc:	460b      	mov	r3, r1
 8000dfe:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 8000e02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000e06:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8000e0a:	b21b      	sxth	r3, r3
 8000e0c:	17da      	asrs	r2, r3, #31
 8000e0e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8000e10:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8000e12:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000e16:	f04f 0000 	mov.w	r0, #0
 8000e1a:	f04f 0100 	mov.w	r1, #0
 8000e1e:	0b50      	lsrs	r0, r2, #13
 8000e20:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8000e24:	1359      	asrs	r1, r3, #13
 8000e26:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8000e2a:	462b      	mov	r3, r5
 8000e2c:	fb00 f203 	mul.w	r2, r0, r3
 8000e30:	4623      	mov	r3, r4
 8000e32:	fb03 f301 	mul.w	r3, r3, r1
 8000e36:	4413      	add	r3, r2
 8000e38:	4622      	mov	r2, r4
 8000e3a:	fba2 1200 	umull	r1, r2, r2, r0
 8000e3e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8000e42:	460a      	mov	r2, r1
 8000e44:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8000e48:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8000e4c:	4413      	add	r3, r2
 8000e4e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8000e52:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000e56:	f04f 0000 	mov.w	r0, #0
 8000e5a:	f04f 0100 	mov.w	r1, #0
 8000e5e:	0b50      	lsrs	r0, r2, #13
 8000e60:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8000e64:	1359      	asrs	r1, r3, #13
 8000e66:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8000e6a:	462b      	mov	r3, r5
 8000e6c:	fb00 f203 	mul.w	r2, r0, r3
 8000e70:	4623      	mov	r3, r4
 8000e72:	fb03 f301 	mul.w	r3, r3, r1
 8000e76:	4413      	add	r3, r2
 8000e78:	4622      	mov	r2, r4
 8000e7a:	fba2 1200 	umull	r1, r2, r2, r0
 8000e7e:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8000e82:	460a      	mov	r2, r1
 8000e84:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8000e88:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8000e8c:	4413      	add	r3, r2
 8000e8e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8000e92:	f04f 0200 	mov.w	r2, #0
 8000e96:	f04f 0300 	mov.w	r3, #0
 8000e9a:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8000e9e:	4621      	mov	r1, r4
 8000ea0:	0e4a      	lsrs	r2, r1, #25
 8000ea2:	4629      	mov	r1, r5
 8000ea4:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8000ea8:	4629      	mov	r1, r5
 8000eaa:	164b      	asrs	r3, r1, #25
 8000eac:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 8000eb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000eb4:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8000eb8:	b21b      	sxth	r3, r3
 8000eba:	17da      	asrs	r2, r3, #31
 8000ebc:	663b      	str	r3, [r7, #96]	@ 0x60
 8000ebe:	667a      	str	r2, [r7, #100]	@ 0x64
 8000ec0:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8000ec4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8000ec8:	462a      	mov	r2, r5
 8000eca:	fb02 f203 	mul.w	r2, r2, r3
 8000ece:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8000ed2:	4621      	mov	r1, r4
 8000ed4:	fb01 f303 	mul.w	r3, r1, r3
 8000ed8:	4413      	add	r3, r2
 8000eda:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8000ede:	4621      	mov	r1, r4
 8000ee0:	fba2 1201 	umull	r1, r2, r2, r1
 8000ee4:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8000ee8:	460a      	mov	r2, r1
 8000eea:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8000eee:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8000ef2:	4413      	add	r3, r2
 8000ef4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8000ef8:	f04f 0200 	mov.w	r2, #0
 8000efc:	f04f 0300 	mov.w	r3, #0
 8000f00:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8000f04:	4621      	mov	r1, r4
 8000f06:	0cca      	lsrs	r2, r1, #19
 8000f08:	4629      	mov	r1, r5
 8000f0a:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8000f0e:	4629      	mov	r1, r5
 8000f10:	14cb      	asrs	r3, r1, #19
 8000f12:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 8000f16:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 8000f1a:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8000f1e:	1884      	adds	r4, r0, r2
 8000f20:	65bc      	str	r4, [r7, #88]	@ 0x58
 8000f22:	eb41 0303 	adc.w	r3, r1, r3
 8000f26:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000f28:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000f2c:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8000f30:	4621      	mov	r1, r4
 8000f32:	1889      	adds	r1, r1, r2
 8000f34:	6539      	str	r1, [r7, #80]	@ 0x50
 8000f36:	4629      	mov	r1, r5
 8000f38:	eb43 0101 	adc.w	r1, r3, r1
 8000f3c:	6579      	str	r1, [r7, #84]	@ 0x54
 8000f3e:	f04f 0000 	mov.w	r0, #0
 8000f42:	f04f 0100 	mov.w	r1, #0
 8000f46:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8000f4a:	4623      	mov	r3, r4
 8000f4c:	0a18      	lsrs	r0, r3, #8
 8000f4e:	462b      	mov	r3, r5
 8000f50:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000f54:	462b      	mov	r3, r5
 8000f56:	1219      	asrs	r1, r3, #8
 8000f58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000f5c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8000f60:	b21b      	sxth	r3, r3
 8000f62:	17da      	asrs	r2, r3, #31
 8000f64:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000f66:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8000f68:	f04f 0200 	mov.w	r2, #0
 8000f6c:	f04f 0300 	mov.w	r3, #0
 8000f70:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 8000f74:	464c      	mov	r4, r9
 8000f76:	0123      	lsls	r3, r4, #4
 8000f78:	4644      	mov	r4, r8
 8000f7a:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8000f7e:	4644      	mov	r4, r8
 8000f80:	0122      	lsls	r2, r4, #4
 8000f82:	1884      	adds	r4, r0, r2
 8000f84:	603c      	str	r4, [r7, #0]
 8000f86:	eb41 0303 	adc.w	r3, r1, r3
 8000f8a:	607b      	str	r3, [r7, #4]
 8000f8c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8000f90:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	return p;
 8000f94:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08000fa4 <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 8000fa4:	b480      	push	{r7}
 8000fa6:	b087      	sub	sp, #28
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	60f8      	str	r0, [r7, #12]
 8000fac:	60b9      	str	r1, [r7, #8]
 8000fae:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 8000fb6:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	039a      	lsls	r2, r3, #14
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8000fc2:	051b      	lsls	r3, r3, #20
 8000fc4:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8000fcc:	4619      	mov	r1, r3
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	fb01 f303 	mul.w	r3, r1, r3
 8000fd4:	1ad3      	subs	r3, r2, r3
 8000fd6:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8000fda:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 8000fdc:	68fa      	ldr	r2, [r7, #12]
 8000fde:	f992 2022 	ldrsb.w	r2, [r2, #34]	@ 0x22
 8000fe2:	4611      	mov	r1, r2
 8000fe4:	697a      	ldr	r2, [r7, #20]
 8000fe6:	fb01 f202 	mul.w	r2, r1, r2
 8000fea:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8000fec:	68f9      	ldr	r1, [r7, #12]
 8000fee:	7f09      	ldrb	r1, [r1, #28]
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	6979      	ldr	r1, [r7, #20]
 8000ff4:	fb00 f101 	mul.w	r1, r0, r1
 8000ff8:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8000ffa:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8000ffe:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001002:	1292      	asrs	r2, r2, #10
 8001004:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 8001008:	68f9      	ldr	r1, [r7, #12]
 800100a:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 800100e:	fb01 f202 	mul.w	r2, r1, r2
 8001012:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8001016:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8001018:	fb02 f303 	mul.w	r3, r2, r3
 800101c:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	13db      	asrs	r3, r3, #15
 8001022:	697a      	ldr	r2, [r7, #20]
 8001024:	13d2      	asrs	r2, r2, #15
 8001026:	fb02 f303 	mul.w	r3, r2, r3
 800102a:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 800102c:	68fa      	ldr	r2, [r7, #12]
 800102e:	7e12      	ldrb	r2, [r2, #24]
 8001030:	fb02 f303 	mul.w	r3, r2, r3
 8001034:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 8001036:	697a      	ldr	r2, [r7, #20]
 8001038:	1ad3      	subs	r3, r2, r3
 800103a:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001042:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 800104a:	bfa8      	it	ge
 800104c:	f04f 53c8 	movge.w	r3, #419430400	@ 0x19000000
 8001050:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	131b      	asrs	r3, r3, #12
}
 8001056:	4618      	mov	r0, r3
 8001058:	371c      	adds	r7, #28
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr

08001062 <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 8001062:	b580      	push	{r7, lr}
 8001064:	b08c      	sub	sp, #48	@ 0x30
 8001066:	af00      	add	r7, sp, #0
 8001068:	60f8      	str	r0, [r7, #12]
 800106a:	60b9      	str	r1, [r7, #8]
 800106c:	607a      	str	r2, [r7, #4]
 800106e:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001076:	2b60      	cmp	r3, #96	@ 0x60
 8001078:	d007      	beq.n	800108a <bmp280_read_fixed+0x28>
		if (humidity)
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d002      	beq.n	8001086 <bmp280_read_fixed+0x24>
			*humidity = 0;
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	2200      	movs	r2, #0
 8001084:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 8001086:	2300      	movs	r3, #0
 8001088:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <bmp280_read_fixed+0x32>
 8001090:	2308      	movs	r3, #8
 8001092:	e000      	b.n	8001096 <bmp280_read_fixed+0x34>
 8001094:	2306      	movs	r3, #6
 8001096:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 8001098:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800109a:	b2db      	uxtb	r3, r3
 800109c:	f107 0218 	add.w	r2, r7, #24
 80010a0:	21f7      	movs	r1, #247	@ 0xf7
 80010a2:	68f8      	ldr	r0, [r7, #12]
 80010a4:	f7ff faab 	bl	80005fe <read_data>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <bmp280_read_fixed+0x50>
		return false;
 80010ae:	2300      	movs	r3, #0
 80010b0:	e038      	b.n	8001124 <bmp280_read_fixed+0xc2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 80010b2:	7e3b      	ldrb	r3, [r7, #24]
 80010b4:	031a      	lsls	r2, r3, #12
 80010b6:	7e7b      	ldrb	r3, [r7, #25]
 80010b8:	011b      	lsls	r3, r3, #4
 80010ba:	4313      	orrs	r3, r2
 80010bc:	7eba      	ldrb	r2, [r7, #26]
 80010be:	0912      	lsrs	r2, r2, #4
 80010c0:	b2d2      	uxtb	r2, r2
 80010c2:	4313      	orrs	r3, r2
 80010c4:	62bb      	str	r3, [r7, #40]	@ 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 80010c6:	7efb      	ldrb	r3, [r7, #27]
 80010c8:	031a      	lsls	r2, r3, #12
 80010ca:	7f3b      	ldrb	r3, [r7, #28]
 80010cc:	011b      	lsls	r3, r3, #4
 80010ce:	4313      	orrs	r3, r2
 80010d0:	7f7a      	ldrb	r2, [r7, #29]
 80010d2:	0912      	lsrs	r2, r2, #4
 80010d4:	b2d2      	uxtb	r2, r2
 80010d6:	4313      	orrs	r3, r2
 80010d8:	627b      	str	r3, [r7, #36]	@ 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 80010da:	f107 0314 	add.w	r3, r7, #20
 80010de:	461a      	mov	r2, r3
 80010e0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80010e2:	68f8      	ldr	r0, [r7, #12]
 80010e4:	f7ff fc67 	bl	80009b6 <compensate_temperature>
 80010e8:	4602      	mov	r2, r0
 80010ea:	68bb      	ldr	r3, [r7, #8]
 80010ec:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	461a      	mov	r2, r3
 80010f2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80010f4:	68f8      	ldr	r0, [r7, #12]
 80010f6:	f7ff fc97 	bl	8000a28 <compensate_pressure>
 80010fa:	4602      	mov	r2, r0
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	601a      	str	r2, [r3, #0]

	if (humidity) {
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d00d      	beq.n	8001122 <bmp280_read_fixed+0xc0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 8001106:	7fbb      	ldrb	r3, [r7, #30]
 8001108:	021b      	lsls	r3, r3, #8
 800110a:	7ffa      	ldrb	r2, [r7, #31]
 800110c:	4313      	orrs	r3, r2
 800110e:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	461a      	mov	r2, r3
 8001114:	6a39      	ldr	r1, [r7, #32]
 8001116:	68f8      	ldr	r0, [r7, #12]
 8001118:	f7ff ff44 	bl	8000fa4 <compensate_humidity>
 800111c:	4602      	mov	r2, r0
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	601a      	str	r2, [r3, #0]
	}

	return true;
 8001122:	2301      	movs	r3, #1
}
 8001124:	4618      	mov	r0, r3
 8001126:	3730      	adds	r7, #48	@ 0x30
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}

0800112c <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 800112c:	b580      	push	{r7, lr}
 800112e:	b088      	sub	sp, #32
 8001130:	af00      	add	r7, sp, #0
 8001132:	60f8      	str	r0, [r7, #12]
 8001134:	60b9      	str	r1, [r7, #8]
 8001136:	607a      	str	r2, [r7, #4]
 8001138:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d002      	beq.n	8001146 <bmp280_read_float+0x1a>
 8001140:	f107 0314 	add.w	r3, r7, #20
 8001144:	e000      	b.n	8001148 <bmp280_read_float+0x1c>
 8001146:	2300      	movs	r3, #0
 8001148:	f107 0218 	add.w	r2, r7, #24
 800114c:	f107 011c 	add.w	r1, r7, #28
 8001150:	68f8      	ldr	r0, [r7, #12]
 8001152:	f7ff ff86 	bl	8001062 <bmp280_read_fixed>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d028      	beq.n	80011ae <bmp280_read_float+0x82>
			humidity ? &fixed_humidity : NULL)) {
		*temperature = (float) fixed_temperature / 100;
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	ee07 3a90 	vmov	s15, r3
 8001162:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001166:	eddf 6a14 	vldr	s13, [pc, #80]	@ 80011b8 <bmp280_read_float+0x8c>
 800116a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	edc3 7a00 	vstr	s15, [r3]
		*pressure = (float) fixed_pressure / 256;
 8001174:	69bb      	ldr	r3, [r7, #24]
 8001176:	ee07 3a90 	vmov	s15, r3
 800117a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800117e:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 80011bc <bmp280_read_float+0x90>
 8001182:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	edc3 7a00 	vstr	s15, [r3]
		if (humidity)
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d00b      	beq.n	80011aa <bmp280_read_float+0x7e>
			*humidity = (float) fixed_humidity / 1024;
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	ee07 3a90 	vmov	s15, r3
 8001198:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800119c:	eddf 6a08 	vldr	s13, [pc, #32]	@ 80011c0 <bmp280_read_float+0x94>
 80011a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	edc3 7a00 	vstr	s15, [r3]
		return true;
 80011aa:	2301      	movs	r3, #1
 80011ac:	e000      	b.n	80011b0 <bmp280_read_float+0x84>
	}

	return false;
 80011ae:	2300      	movs	r3, #0
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3720      	adds	r7, #32
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	42c80000 	.word	0x42c80000
 80011bc:	43800000 	.word	0x43800000
 80011c0:	44800000 	.word	0x44800000

080011c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011ca:	f000 f9dd 	bl	8001588 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011ce:	f000 f83b 	bl	8001248 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011d2:	f000 f8cf 	bl	8001374 <MX_GPIO_Init>
  MX_I2C1_Init();
 80011d6:	f000 f89f 	bl	8001318 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  // Initialize BMP280 with default parameters
  bmp280_init_default_params(&bmp280.params);
 80011da:	4815      	ldr	r0, [pc, #84]	@ (8001230 <main+0x6c>)
 80011dc:	f7ff f9c4 	bl	8000568 <bmp280_init_default_params>
  bmp280.addr = BMP280_I2C_ADDRESS_0; // 0x76 (SDO low), use BMP280_I2C_ADDRESS_1 (0x77) if SDO high
 80011e0:	4b14      	ldr	r3, [pc, #80]	@ (8001234 <main+0x70>)
 80011e2:	2276      	movs	r2, #118	@ 0x76
 80011e4:	849a      	strh	r2, [r3, #36]	@ 0x24
  bmp280.i2c = &hi2c1;
 80011e6:	4b13      	ldr	r3, [pc, #76]	@ (8001234 <main+0x70>)
 80011e8:	4a13      	ldr	r2, [pc, #76]	@ (8001238 <main+0x74>)
 80011ea:	629a      	str	r2, [r3, #40]	@ 0x28


  // Attempt to initialize BMP280
  while (!bmp280_init(&bmp280, &bmp280.params)) {
 80011ec:	e003      	b.n	80011f6 <main+0x32>
    HAL_Delay(2000);
 80011ee:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80011f2:	f000 fa3b 	bl	800166c <HAL_Delay>
  while (!bmp280_init(&bmp280, &bmp280.params)) {
 80011f6:	490e      	ldr	r1, [pc, #56]	@ (8001230 <main+0x6c>)
 80011f8:	480e      	ldr	r0, [pc, #56]	@ (8001234 <main+0x70>)
 80011fa:	f7ff fb2f 	bl	800085c <bmp280_init>
 80011fe:	4603      	mov	r3, r0
 8001200:	f083 0301 	eor.w	r3, r3, #1
 8001204:	b2db      	uxtb	r3, r3
 8001206:	2b00      	cmp	r3, #0
 8001208:	d1f1      	bne.n	80011ee <main+0x2a>
  }

  // Check if BMP280 or BME280 (library supports both)
  bool bme280p = bmp280.id == BME280_CHIP_ID;
 800120a:	4b0a      	ldr	r3, [pc, #40]	@ (8001234 <main+0x70>)
 800120c:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001210:	2b60      	cmp	r3, #96	@ 0x60
 8001212:	bf0c      	ite	eq
 8001214:	2301      	moveq	r3, #1
 8001216:	2300      	movne	r3, #0
 8001218:	71fb      	strb	r3, [r7, #7]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // Read temperature and pressure
	    if (!bmp280_read_float(&bmp280, &temperature, &pressure, &humidity)) {
 800121a:	4b08      	ldr	r3, [pc, #32]	@ (800123c <main+0x78>)
 800121c:	4a08      	ldr	r2, [pc, #32]	@ (8001240 <main+0x7c>)
 800121e:	4909      	ldr	r1, [pc, #36]	@ (8001244 <main+0x80>)
 8001220:	4804      	ldr	r0, [pc, #16]	@ (8001234 <main+0x70>)
 8001222:	f7ff ff83 	bl	800112c <bmp280_read_float>
	    	// success
	    } else {
	    	// fail to read
	    }

	    HAL_Delay(2000); // Read every 2 seconds
 8001226:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800122a:	f000 fa1f 	bl	800166c <HAL_Delay>
	    if (!bmp280_read_float(&bmp280, &temperature, &pressure, &humidity)) {
 800122e:	e7f4      	b.n	800121a <main+0x56>
 8001230:	200000a8 	.word	0x200000a8
 8001234:	2000007c 	.word	0x2000007c
 8001238:	20000028 	.word	0x20000028
 800123c:	200000b8 	.word	0x200000b8
 8001240:	200000b0 	.word	0x200000b0
 8001244:	200000b4 	.word	0x200000b4

08001248 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b094      	sub	sp, #80	@ 0x50
 800124c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800124e:	f107 0320 	add.w	r3, r7, #32
 8001252:	2230      	movs	r2, #48	@ 0x30
 8001254:	2100      	movs	r1, #0
 8001256:	4618      	mov	r0, r3
 8001258:	f002 f8fe 	bl	8003458 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800125c:	f107 030c 	add.w	r3, r7, #12
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	605a      	str	r2, [r3, #4]
 8001266:	609a      	str	r2, [r3, #8]
 8001268:	60da      	str	r2, [r3, #12]
 800126a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800126c:	2300      	movs	r3, #0
 800126e:	60bb      	str	r3, [r7, #8]
 8001270:	4b27      	ldr	r3, [pc, #156]	@ (8001310 <SystemClock_Config+0xc8>)
 8001272:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001274:	4a26      	ldr	r2, [pc, #152]	@ (8001310 <SystemClock_Config+0xc8>)
 8001276:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800127a:	6413      	str	r3, [r2, #64]	@ 0x40
 800127c:	4b24      	ldr	r3, [pc, #144]	@ (8001310 <SystemClock_Config+0xc8>)
 800127e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001280:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001284:	60bb      	str	r3, [r7, #8]
 8001286:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001288:	2300      	movs	r3, #0
 800128a:	607b      	str	r3, [r7, #4]
 800128c:	4b21      	ldr	r3, [pc, #132]	@ (8001314 <SystemClock_Config+0xcc>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a20      	ldr	r2, [pc, #128]	@ (8001314 <SystemClock_Config+0xcc>)
 8001292:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001296:	6013      	str	r3, [r2, #0]
 8001298:	4b1e      	ldr	r3, [pc, #120]	@ (8001314 <SystemClock_Config+0xcc>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80012a0:	607b      	str	r3, [r7, #4]
 80012a2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012a4:	2301      	movs	r3, #1
 80012a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012a8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80012ac:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012ae:	2302      	movs	r3, #2
 80012b0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012b2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80012b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80012b8:	230c      	movs	r3, #12
 80012ba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 80012bc:	2360      	movs	r3, #96	@ 0x60
 80012be:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012c0:	2302      	movs	r3, #2
 80012c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80012c4:	2304      	movs	r3, #4
 80012c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012c8:	f107 0320 	add.w	r3, r7, #32
 80012cc:	4618      	mov	r0, r3
 80012ce:	f001 fc7f 	bl	8002bd0 <HAL_RCC_OscConfig>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80012d8:	f000 f874 	bl	80013c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012dc:	230f      	movs	r3, #15
 80012de:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012e0:	2302      	movs	r3, #2
 80012e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012e4:	2300      	movs	r3, #0
 80012e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012ee:	2300      	movs	r3, #0
 80012f0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80012f2:	f107 030c 	add.w	r3, r7, #12
 80012f6:	2103      	movs	r1, #3
 80012f8:	4618      	mov	r0, r3
 80012fa:	f001 fee1 	bl	80030c0 <HAL_RCC_ClockConfig>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001304:	f000 f85e 	bl	80013c4 <Error_Handler>
  }
}
 8001308:	bf00      	nop
 800130a:	3750      	adds	r7, #80	@ 0x50
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	40023800 	.word	0x40023800
 8001314:	40007000 	.word	0x40007000

08001318 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800131c:	4b12      	ldr	r3, [pc, #72]	@ (8001368 <MX_I2C1_Init+0x50>)
 800131e:	4a13      	ldr	r2, [pc, #76]	@ (800136c <MX_I2C1_Init+0x54>)
 8001320:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001322:	4b11      	ldr	r3, [pc, #68]	@ (8001368 <MX_I2C1_Init+0x50>)
 8001324:	4a12      	ldr	r2, [pc, #72]	@ (8001370 <MX_I2C1_Init+0x58>)
 8001326:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001328:	4b0f      	ldr	r3, [pc, #60]	@ (8001368 <MX_I2C1_Init+0x50>)
 800132a:	2200      	movs	r2, #0
 800132c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800132e:	4b0e      	ldr	r3, [pc, #56]	@ (8001368 <MX_I2C1_Init+0x50>)
 8001330:	2200      	movs	r2, #0
 8001332:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001334:	4b0c      	ldr	r3, [pc, #48]	@ (8001368 <MX_I2C1_Init+0x50>)
 8001336:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800133a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800133c:	4b0a      	ldr	r3, [pc, #40]	@ (8001368 <MX_I2C1_Init+0x50>)
 800133e:	2200      	movs	r2, #0
 8001340:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001342:	4b09      	ldr	r3, [pc, #36]	@ (8001368 <MX_I2C1_Init+0x50>)
 8001344:	2200      	movs	r2, #0
 8001346:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001348:	4b07      	ldr	r3, [pc, #28]	@ (8001368 <MX_I2C1_Init+0x50>)
 800134a:	2200      	movs	r2, #0
 800134c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800134e:	4b06      	ldr	r3, [pc, #24]	@ (8001368 <MX_I2C1_Init+0x50>)
 8001350:	2200      	movs	r2, #0
 8001352:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001354:	4804      	ldr	r0, [pc, #16]	@ (8001368 <MX_I2C1_Init+0x50>)
 8001356:	f000 fc17 	bl	8001b88 <HAL_I2C_Init>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001360:	f000 f830 	bl	80013c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001364:	bf00      	nop
 8001366:	bd80      	pop	{r7, pc}
 8001368:	20000028 	.word	0x20000028
 800136c:	40005400 	.word	0x40005400
 8001370:	000186a0 	.word	0x000186a0

08001374 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	607b      	str	r3, [r7, #4]
 800137e:	4b10      	ldr	r3, [pc, #64]	@ (80013c0 <MX_GPIO_Init+0x4c>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001382:	4a0f      	ldr	r2, [pc, #60]	@ (80013c0 <MX_GPIO_Init+0x4c>)
 8001384:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001388:	6313      	str	r3, [r2, #48]	@ 0x30
 800138a:	4b0d      	ldr	r3, [pc, #52]	@ (80013c0 <MX_GPIO_Init+0x4c>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800138e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001392:	607b      	str	r3, [r7, #4]
 8001394:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001396:	2300      	movs	r3, #0
 8001398:	603b      	str	r3, [r7, #0]
 800139a:	4b09      	ldr	r3, [pc, #36]	@ (80013c0 <MX_GPIO_Init+0x4c>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800139e:	4a08      	ldr	r2, [pc, #32]	@ (80013c0 <MX_GPIO_Init+0x4c>)
 80013a0:	f043 0302 	orr.w	r3, r3, #2
 80013a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013a6:	4b06      	ldr	r3, [pc, #24]	@ (80013c0 <MX_GPIO_Init+0x4c>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013aa:	f003 0302 	and.w	r3, r3, #2
 80013ae:	603b      	str	r3, [r7, #0]
 80013b0:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013b2:	bf00      	nop
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	40023800 	.word	0x40023800

080013c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013c8:	b672      	cpsid	i
}
 80013ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013cc:	bf00      	nop
 80013ce:	e7fd      	b.n	80013cc <Error_Handler+0x8>

080013d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013d6:	2300      	movs	r3, #0
 80013d8:	607b      	str	r3, [r7, #4]
 80013da:	4b10      	ldr	r3, [pc, #64]	@ (800141c <HAL_MspInit+0x4c>)
 80013dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013de:	4a0f      	ldr	r2, [pc, #60]	@ (800141c <HAL_MspInit+0x4c>)
 80013e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80013e6:	4b0d      	ldr	r3, [pc, #52]	@ (800141c <HAL_MspInit+0x4c>)
 80013e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013ee:	607b      	str	r3, [r7, #4]
 80013f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	603b      	str	r3, [r7, #0]
 80013f6:	4b09      	ldr	r3, [pc, #36]	@ (800141c <HAL_MspInit+0x4c>)
 80013f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013fa:	4a08      	ldr	r2, [pc, #32]	@ (800141c <HAL_MspInit+0x4c>)
 80013fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001400:	6413      	str	r3, [r2, #64]	@ 0x40
 8001402:	4b06      	ldr	r3, [pc, #24]	@ (800141c <HAL_MspInit+0x4c>)
 8001404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001406:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800140a:	603b      	str	r3, [r7, #0]
 800140c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800140e:	bf00      	nop
 8001410:	370c      	adds	r7, #12
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	40023800 	.word	0x40023800

08001420 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b08a      	sub	sp, #40	@ 0x28
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001428:	f107 0314 	add.w	r3, r7, #20
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	605a      	str	r2, [r3, #4]
 8001432:	609a      	str	r2, [r3, #8]
 8001434:	60da      	str	r2, [r3, #12]
 8001436:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a19      	ldr	r2, [pc, #100]	@ (80014a4 <HAL_I2C_MspInit+0x84>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d12b      	bne.n	800149a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	613b      	str	r3, [r7, #16]
 8001446:	4b18      	ldr	r3, [pc, #96]	@ (80014a8 <HAL_I2C_MspInit+0x88>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800144a:	4a17      	ldr	r2, [pc, #92]	@ (80014a8 <HAL_I2C_MspInit+0x88>)
 800144c:	f043 0302 	orr.w	r3, r3, #2
 8001450:	6313      	str	r3, [r2, #48]	@ 0x30
 8001452:	4b15      	ldr	r3, [pc, #84]	@ (80014a8 <HAL_I2C_MspInit+0x88>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001456:	f003 0302 	and.w	r3, r3, #2
 800145a:	613b      	str	r3, [r7, #16]
 800145c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800145e:	23c0      	movs	r3, #192	@ 0xc0
 8001460:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001462:	2312      	movs	r3, #18
 8001464:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001466:	2300      	movs	r3, #0
 8001468:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800146a:	2303      	movs	r3, #3
 800146c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800146e:	2304      	movs	r3, #4
 8001470:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001472:	f107 0314 	add.w	r3, r7, #20
 8001476:	4619      	mov	r1, r3
 8001478:	480c      	ldr	r0, [pc, #48]	@ (80014ac <HAL_I2C_MspInit+0x8c>)
 800147a:	f000 fa01 	bl	8001880 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	60fb      	str	r3, [r7, #12]
 8001482:	4b09      	ldr	r3, [pc, #36]	@ (80014a8 <HAL_I2C_MspInit+0x88>)
 8001484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001486:	4a08      	ldr	r2, [pc, #32]	@ (80014a8 <HAL_I2C_MspInit+0x88>)
 8001488:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800148c:	6413      	str	r3, [r2, #64]	@ 0x40
 800148e:	4b06      	ldr	r3, [pc, #24]	@ (80014a8 <HAL_I2C_MspInit+0x88>)
 8001490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001492:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001496:	60fb      	str	r3, [r7, #12]
 8001498:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800149a:	bf00      	nop
 800149c:	3728      	adds	r7, #40	@ 0x28
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	40005400 	.word	0x40005400
 80014a8:	40023800 	.word	0x40023800
 80014ac:	40020400 	.word	0x40020400

080014b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014b4:	bf00      	nop
 80014b6:	e7fd      	b.n	80014b4 <NMI_Handler+0x4>

080014b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014bc:	bf00      	nop
 80014be:	e7fd      	b.n	80014bc <HardFault_Handler+0x4>

080014c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014c4:	bf00      	nop
 80014c6:	e7fd      	b.n	80014c4 <MemManage_Handler+0x4>

080014c8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014cc:	bf00      	nop
 80014ce:	e7fd      	b.n	80014cc <BusFault_Handler+0x4>

080014d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014d4:	bf00      	nop
 80014d6:	e7fd      	b.n	80014d4 <UsageFault_Handler+0x4>

080014d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014dc:	bf00      	nop
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr

080014e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014e6:	b480      	push	{r7}
 80014e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014ea:	bf00      	nop
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr

080014f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014f8:	bf00      	nop
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr

08001502 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001502:	b580      	push	{r7, lr}
 8001504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001506:	f000 f891 	bl	800162c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800150a:	bf00      	nop
 800150c:	bd80      	pop	{r7, pc}
	...

08001510 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001514:	4b06      	ldr	r3, [pc, #24]	@ (8001530 <SystemInit+0x20>)
 8001516:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800151a:	4a05      	ldr	r2, [pc, #20]	@ (8001530 <SystemInit+0x20>)
 800151c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001520:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001524:	bf00      	nop
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	e000ed00 	.word	0xe000ed00

08001534 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001534:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800156c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001538:	f7ff ffea 	bl	8001510 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800153c:	480c      	ldr	r0, [pc, #48]	@ (8001570 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800153e:	490d      	ldr	r1, [pc, #52]	@ (8001574 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001540:	4a0d      	ldr	r2, [pc, #52]	@ (8001578 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001542:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001544:	e002      	b.n	800154c <LoopCopyDataInit>

08001546 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001546:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001548:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800154a:	3304      	adds	r3, #4

0800154c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800154c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800154e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001550:	d3f9      	bcc.n	8001546 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001552:	4a0a      	ldr	r2, [pc, #40]	@ (800157c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001554:	4c0a      	ldr	r4, [pc, #40]	@ (8001580 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001556:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001558:	e001      	b.n	800155e <LoopFillZerobss>

0800155a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800155a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800155c:	3204      	adds	r2, #4

0800155e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800155e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001560:	d3fb      	bcc.n	800155a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001562:	f001 ff81 	bl	8003468 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001566:	f7ff fe2d 	bl	80011c4 <main>
  bx  lr    
 800156a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800156c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001570:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001574:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001578:	080034f0 	.word	0x080034f0
  ldr r2, =_sbss
 800157c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001580:	200000c0 	.word	0x200000c0

08001584 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001584:	e7fe      	b.n	8001584 <ADC_IRQHandler>
	...

08001588 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800158c:	4b0e      	ldr	r3, [pc, #56]	@ (80015c8 <HAL_Init+0x40>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a0d      	ldr	r2, [pc, #52]	@ (80015c8 <HAL_Init+0x40>)
 8001592:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001596:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001598:	4b0b      	ldr	r3, [pc, #44]	@ (80015c8 <HAL_Init+0x40>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a0a      	ldr	r2, [pc, #40]	@ (80015c8 <HAL_Init+0x40>)
 800159e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80015a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015a4:	4b08      	ldr	r3, [pc, #32]	@ (80015c8 <HAL_Init+0x40>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a07      	ldr	r2, [pc, #28]	@ (80015c8 <HAL_Init+0x40>)
 80015aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015b0:	2003      	movs	r0, #3
 80015b2:	f000 f931 	bl	8001818 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015b6:	200f      	movs	r0, #15
 80015b8:	f000 f808 	bl	80015cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015bc:	f7ff ff08 	bl	80013d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015c0:	2300      	movs	r3, #0
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	40023c00 	.word	0x40023c00

080015cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015d4:	4b12      	ldr	r3, [pc, #72]	@ (8001620 <HAL_InitTick+0x54>)
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	4b12      	ldr	r3, [pc, #72]	@ (8001624 <HAL_InitTick+0x58>)
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	4619      	mov	r1, r3
 80015de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80015e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ea:	4618      	mov	r0, r3
 80015ec:	f000 f93b 	bl	8001866 <HAL_SYSTICK_Config>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e00e      	b.n	8001618 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2b0f      	cmp	r3, #15
 80015fe:	d80a      	bhi.n	8001616 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001600:	2200      	movs	r2, #0
 8001602:	6879      	ldr	r1, [r7, #4]
 8001604:	f04f 30ff 	mov.w	r0, #4294967295
 8001608:	f000 f911 	bl	800182e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800160c:	4a06      	ldr	r2, [pc, #24]	@ (8001628 <HAL_InitTick+0x5c>)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001612:	2300      	movs	r3, #0
 8001614:	e000      	b.n	8001618 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
}
 8001618:	4618      	mov	r0, r3
 800161a:	3708      	adds	r7, #8
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	20000000 	.word	0x20000000
 8001624:	20000008 	.word	0x20000008
 8001628:	20000004 	.word	0x20000004

0800162c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001630:	4b06      	ldr	r3, [pc, #24]	@ (800164c <HAL_IncTick+0x20>)
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	461a      	mov	r2, r3
 8001636:	4b06      	ldr	r3, [pc, #24]	@ (8001650 <HAL_IncTick+0x24>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4413      	add	r3, r2
 800163c:	4a04      	ldr	r2, [pc, #16]	@ (8001650 <HAL_IncTick+0x24>)
 800163e:	6013      	str	r3, [r2, #0]
}
 8001640:	bf00      	nop
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	20000008 	.word	0x20000008
 8001650:	200000bc 	.word	0x200000bc

08001654 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  return uwTick;
 8001658:	4b03      	ldr	r3, [pc, #12]	@ (8001668 <HAL_GetTick+0x14>)
 800165a:	681b      	ldr	r3, [r3, #0]
}
 800165c:	4618      	mov	r0, r3
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	200000bc 	.word	0x200000bc

0800166c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001674:	f7ff ffee 	bl	8001654 <HAL_GetTick>
 8001678:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001684:	d005      	beq.n	8001692 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001686:	4b0a      	ldr	r3, [pc, #40]	@ (80016b0 <HAL_Delay+0x44>)
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	461a      	mov	r2, r3
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	4413      	add	r3, r2
 8001690:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001692:	bf00      	nop
 8001694:	f7ff ffde 	bl	8001654 <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	68fa      	ldr	r2, [r7, #12]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d8f7      	bhi.n	8001694 <HAL_Delay+0x28>
  {
  }
}
 80016a4:	bf00      	nop
 80016a6:	bf00      	nop
 80016a8:	3710      	adds	r7, #16
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	20000008 	.word	0x20000008

080016b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b085      	sub	sp, #20
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	f003 0307 	and.w	r3, r3, #7
 80016c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016c4:	4b0c      	ldr	r3, [pc, #48]	@ (80016f8 <__NVIC_SetPriorityGrouping+0x44>)
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016ca:	68ba      	ldr	r2, [r7, #8]
 80016cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016d0:	4013      	ands	r3, r2
 80016d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80016e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016e6:	4a04      	ldr	r2, [pc, #16]	@ (80016f8 <__NVIC_SetPriorityGrouping+0x44>)
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	60d3      	str	r3, [r2, #12]
}
 80016ec:	bf00      	nop
 80016ee:	3714      	adds	r7, #20
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr
 80016f8:	e000ed00 	.word	0xe000ed00

080016fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001700:	4b04      	ldr	r3, [pc, #16]	@ (8001714 <__NVIC_GetPriorityGrouping+0x18>)
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	0a1b      	lsrs	r3, r3, #8
 8001706:	f003 0307 	and.w	r3, r3, #7
}
 800170a:	4618      	mov	r0, r3
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr
 8001714:	e000ed00 	.word	0xe000ed00

08001718 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	4603      	mov	r3, r0
 8001720:	6039      	str	r1, [r7, #0]
 8001722:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001724:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001728:	2b00      	cmp	r3, #0
 800172a:	db0a      	blt.n	8001742 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	b2da      	uxtb	r2, r3
 8001730:	490c      	ldr	r1, [pc, #48]	@ (8001764 <__NVIC_SetPriority+0x4c>)
 8001732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001736:	0112      	lsls	r2, r2, #4
 8001738:	b2d2      	uxtb	r2, r2
 800173a:	440b      	add	r3, r1
 800173c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001740:	e00a      	b.n	8001758 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	b2da      	uxtb	r2, r3
 8001746:	4908      	ldr	r1, [pc, #32]	@ (8001768 <__NVIC_SetPriority+0x50>)
 8001748:	79fb      	ldrb	r3, [r7, #7]
 800174a:	f003 030f 	and.w	r3, r3, #15
 800174e:	3b04      	subs	r3, #4
 8001750:	0112      	lsls	r2, r2, #4
 8001752:	b2d2      	uxtb	r2, r2
 8001754:	440b      	add	r3, r1
 8001756:	761a      	strb	r2, [r3, #24]
}
 8001758:	bf00      	nop
 800175a:	370c      	adds	r7, #12
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr
 8001764:	e000e100 	.word	0xe000e100
 8001768:	e000ed00 	.word	0xe000ed00

0800176c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800176c:	b480      	push	{r7}
 800176e:	b089      	sub	sp, #36	@ 0x24
 8001770:	af00      	add	r7, sp, #0
 8001772:	60f8      	str	r0, [r7, #12]
 8001774:	60b9      	str	r1, [r7, #8]
 8001776:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	f003 0307 	and.w	r3, r3, #7
 800177e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001780:	69fb      	ldr	r3, [r7, #28]
 8001782:	f1c3 0307 	rsb	r3, r3, #7
 8001786:	2b04      	cmp	r3, #4
 8001788:	bf28      	it	cs
 800178a:	2304      	movcs	r3, #4
 800178c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	3304      	adds	r3, #4
 8001792:	2b06      	cmp	r3, #6
 8001794:	d902      	bls.n	800179c <NVIC_EncodePriority+0x30>
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	3b03      	subs	r3, #3
 800179a:	e000      	b.n	800179e <NVIC_EncodePriority+0x32>
 800179c:	2300      	movs	r3, #0
 800179e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017a0:	f04f 32ff 	mov.w	r2, #4294967295
 80017a4:	69bb      	ldr	r3, [r7, #24]
 80017a6:	fa02 f303 	lsl.w	r3, r2, r3
 80017aa:	43da      	mvns	r2, r3
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	401a      	ands	r2, r3
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017b4:	f04f 31ff 	mov.w	r1, #4294967295
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	fa01 f303 	lsl.w	r3, r1, r3
 80017be:	43d9      	mvns	r1, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c4:	4313      	orrs	r3, r2
         );
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3724      	adds	r7, #36	@ 0x24
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
	...

080017d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	3b01      	subs	r3, #1
 80017e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80017e4:	d301      	bcc.n	80017ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017e6:	2301      	movs	r3, #1
 80017e8:	e00f      	b.n	800180a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001814 <SysTick_Config+0x40>)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	3b01      	subs	r3, #1
 80017f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017f2:	210f      	movs	r1, #15
 80017f4:	f04f 30ff 	mov.w	r0, #4294967295
 80017f8:	f7ff ff8e 	bl	8001718 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017fc:	4b05      	ldr	r3, [pc, #20]	@ (8001814 <SysTick_Config+0x40>)
 80017fe:	2200      	movs	r2, #0
 8001800:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001802:	4b04      	ldr	r3, [pc, #16]	@ (8001814 <SysTick_Config+0x40>)
 8001804:	2207      	movs	r2, #7
 8001806:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001808:	2300      	movs	r3, #0
}
 800180a:	4618      	mov	r0, r3
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	e000e010 	.word	0xe000e010

08001818 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	f7ff ff47 	bl	80016b4 <__NVIC_SetPriorityGrouping>
}
 8001826:	bf00      	nop
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}

0800182e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800182e:	b580      	push	{r7, lr}
 8001830:	b086      	sub	sp, #24
 8001832:	af00      	add	r7, sp, #0
 8001834:	4603      	mov	r3, r0
 8001836:	60b9      	str	r1, [r7, #8]
 8001838:	607a      	str	r2, [r7, #4]
 800183a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800183c:	2300      	movs	r3, #0
 800183e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001840:	f7ff ff5c 	bl	80016fc <__NVIC_GetPriorityGrouping>
 8001844:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	68b9      	ldr	r1, [r7, #8]
 800184a:	6978      	ldr	r0, [r7, #20]
 800184c:	f7ff ff8e 	bl	800176c <NVIC_EncodePriority>
 8001850:	4602      	mov	r2, r0
 8001852:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001856:	4611      	mov	r1, r2
 8001858:	4618      	mov	r0, r3
 800185a:	f7ff ff5d 	bl	8001718 <__NVIC_SetPriority>
}
 800185e:	bf00      	nop
 8001860:	3718      	adds	r7, #24
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}

08001866 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001866:	b580      	push	{r7, lr}
 8001868:	b082      	sub	sp, #8
 800186a:	af00      	add	r7, sp, #0
 800186c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f7ff ffb0 	bl	80017d4 <SysTick_Config>
 8001874:	4603      	mov	r3, r0
}
 8001876:	4618      	mov	r0, r3
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
	...

08001880 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001880:	b480      	push	{r7}
 8001882:	b089      	sub	sp, #36	@ 0x24
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800188a:	2300      	movs	r3, #0
 800188c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800188e:	2300      	movs	r3, #0
 8001890:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001892:	2300      	movs	r3, #0
 8001894:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001896:	2300      	movs	r3, #0
 8001898:	61fb      	str	r3, [r7, #28]
 800189a:	e159      	b.n	8001b50 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800189c:	2201      	movs	r2, #1
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	fa02 f303 	lsl.w	r3, r2, r3
 80018a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	697a      	ldr	r2, [r7, #20]
 80018ac:	4013      	ands	r3, r2
 80018ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018b0:	693a      	ldr	r2, [r7, #16]
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	f040 8148 	bne.w	8001b4a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f003 0303 	and.w	r3, r3, #3
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d005      	beq.n	80018d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d130      	bne.n	8001934 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	005b      	lsls	r3, r3, #1
 80018dc:	2203      	movs	r2, #3
 80018de:	fa02 f303 	lsl.w	r3, r2, r3
 80018e2:	43db      	mvns	r3, r3
 80018e4:	69ba      	ldr	r2, [r7, #24]
 80018e6:	4013      	ands	r3, r2
 80018e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	68da      	ldr	r2, [r3, #12]
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	005b      	lsls	r3, r3, #1
 80018f2:	fa02 f303 	lsl.w	r3, r2, r3
 80018f6:	69ba      	ldr	r2, [r7, #24]
 80018f8:	4313      	orrs	r3, r2
 80018fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	69ba      	ldr	r2, [r7, #24]
 8001900:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001908:	2201      	movs	r2, #1
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	fa02 f303 	lsl.w	r3, r2, r3
 8001910:	43db      	mvns	r3, r3
 8001912:	69ba      	ldr	r2, [r7, #24]
 8001914:	4013      	ands	r3, r2
 8001916:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	091b      	lsrs	r3, r3, #4
 800191e:	f003 0201 	and.w	r2, r3, #1
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	fa02 f303 	lsl.w	r3, r2, r3
 8001928:	69ba      	ldr	r2, [r7, #24]
 800192a:	4313      	orrs	r3, r2
 800192c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	69ba      	ldr	r2, [r7, #24]
 8001932:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f003 0303 	and.w	r3, r3, #3
 800193c:	2b03      	cmp	r3, #3
 800193e:	d017      	beq.n	8001970 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	005b      	lsls	r3, r3, #1
 800194a:	2203      	movs	r2, #3
 800194c:	fa02 f303 	lsl.w	r3, r2, r3
 8001950:	43db      	mvns	r3, r3
 8001952:	69ba      	ldr	r2, [r7, #24]
 8001954:	4013      	ands	r3, r2
 8001956:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	689a      	ldr	r2, [r3, #8]
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	005b      	lsls	r3, r3, #1
 8001960:	fa02 f303 	lsl.w	r3, r2, r3
 8001964:	69ba      	ldr	r2, [r7, #24]
 8001966:	4313      	orrs	r3, r2
 8001968:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	69ba      	ldr	r2, [r7, #24]
 800196e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f003 0303 	and.w	r3, r3, #3
 8001978:	2b02      	cmp	r3, #2
 800197a:	d123      	bne.n	80019c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	08da      	lsrs	r2, r3, #3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	3208      	adds	r2, #8
 8001984:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001988:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	f003 0307 	and.w	r3, r3, #7
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	220f      	movs	r2, #15
 8001994:	fa02 f303 	lsl.w	r3, r2, r3
 8001998:	43db      	mvns	r3, r3
 800199a:	69ba      	ldr	r2, [r7, #24]
 800199c:	4013      	ands	r3, r2
 800199e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	691a      	ldr	r2, [r3, #16]
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	f003 0307 	and.w	r3, r3, #7
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	fa02 f303 	lsl.w	r3, r2, r3
 80019b0:	69ba      	ldr	r2, [r7, #24]
 80019b2:	4313      	orrs	r3, r2
 80019b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	08da      	lsrs	r2, r3, #3
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	3208      	adds	r2, #8
 80019be:	69b9      	ldr	r1, [r7, #24]
 80019c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	005b      	lsls	r3, r3, #1
 80019ce:	2203      	movs	r2, #3
 80019d0:	fa02 f303 	lsl.w	r3, r2, r3
 80019d4:	43db      	mvns	r3, r3
 80019d6:	69ba      	ldr	r2, [r7, #24]
 80019d8:	4013      	ands	r3, r2
 80019da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f003 0203 	and.w	r2, r3, #3
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	005b      	lsls	r3, r3, #1
 80019e8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ec:	69ba      	ldr	r2, [r7, #24]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	f000 80a2 	beq.w	8001b4a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a06:	2300      	movs	r3, #0
 8001a08:	60fb      	str	r3, [r7, #12]
 8001a0a:	4b57      	ldr	r3, [pc, #348]	@ (8001b68 <HAL_GPIO_Init+0x2e8>)
 8001a0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a0e:	4a56      	ldr	r2, [pc, #344]	@ (8001b68 <HAL_GPIO_Init+0x2e8>)
 8001a10:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a14:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a16:	4b54      	ldr	r3, [pc, #336]	@ (8001b68 <HAL_GPIO_Init+0x2e8>)
 8001a18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a1e:	60fb      	str	r3, [r7, #12]
 8001a20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a22:	4a52      	ldr	r2, [pc, #328]	@ (8001b6c <HAL_GPIO_Init+0x2ec>)
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	089b      	lsrs	r3, r3, #2
 8001a28:	3302      	adds	r3, #2
 8001a2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	f003 0303 	and.w	r3, r3, #3
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	220f      	movs	r2, #15
 8001a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3e:	43db      	mvns	r3, r3
 8001a40:	69ba      	ldr	r2, [r7, #24]
 8001a42:	4013      	ands	r3, r2
 8001a44:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4a49      	ldr	r2, [pc, #292]	@ (8001b70 <HAL_GPIO_Init+0x2f0>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d019      	beq.n	8001a82 <HAL_GPIO_Init+0x202>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4a48      	ldr	r2, [pc, #288]	@ (8001b74 <HAL_GPIO_Init+0x2f4>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d013      	beq.n	8001a7e <HAL_GPIO_Init+0x1fe>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4a47      	ldr	r2, [pc, #284]	@ (8001b78 <HAL_GPIO_Init+0x2f8>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d00d      	beq.n	8001a7a <HAL_GPIO_Init+0x1fa>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4a46      	ldr	r2, [pc, #280]	@ (8001b7c <HAL_GPIO_Init+0x2fc>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d007      	beq.n	8001a76 <HAL_GPIO_Init+0x1f6>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4a45      	ldr	r2, [pc, #276]	@ (8001b80 <HAL_GPIO_Init+0x300>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d101      	bne.n	8001a72 <HAL_GPIO_Init+0x1f2>
 8001a6e:	2304      	movs	r3, #4
 8001a70:	e008      	b.n	8001a84 <HAL_GPIO_Init+0x204>
 8001a72:	2307      	movs	r3, #7
 8001a74:	e006      	b.n	8001a84 <HAL_GPIO_Init+0x204>
 8001a76:	2303      	movs	r3, #3
 8001a78:	e004      	b.n	8001a84 <HAL_GPIO_Init+0x204>
 8001a7a:	2302      	movs	r3, #2
 8001a7c:	e002      	b.n	8001a84 <HAL_GPIO_Init+0x204>
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e000      	b.n	8001a84 <HAL_GPIO_Init+0x204>
 8001a82:	2300      	movs	r3, #0
 8001a84:	69fa      	ldr	r2, [r7, #28]
 8001a86:	f002 0203 	and.w	r2, r2, #3
 8001a8a:	0092      	lsls	r2, r2, #2
 8001a8c:	4093      	lsls	r3, r2
 8001a8e:	69ba      	ldr	r2, [r7, #24]
 8001a90:	4313      	orrs	r3, r2
 8001a92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a94:	4935      	ldr	r1, [pc, #212]	@ (8001b6c <HAL_GPIO_Init+0x2ec>)
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	089b      	lsrs	r3, r3, #2
 8001a9a:	3302      	adds	r3, #2
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001aa2:	4b38      	ldr	r3, [pc, #224]	@ (8001b84 <HAL_GPIO_Init+0x304>)
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	43db      	mvns	r3, r3
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	4013      	ands	r3, r2
 8001ab0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d003      	beq.n	8001ac6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001abe:	69ba      	ldr	r2, [r7, #24]
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ac6:	4a2f      	ldr	r2, [pc, #188]	@ (8001b84 <HAL_GPIO_Init+0x304>)
 8001ac8:	69bb      	ldr	r3, [r7, #24]
 8001aca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001acc:	4b2d      	ldr	r3, [pc, #180]	@ (8001b84 <HAL_GPIO_Init+0x304>)
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	43db      	mvns	r3, r3
 8001ad6:	69ba      	ldr	r2, [r7, #24]
 8001ad8:	4013      	ands	r3, r2
 8001ada:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d003      	beq.n	8001af0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001ae8:	69ba      	ldr	r2, [r7, #24]
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001af0:	4a24      	ldr	r2, [pc, #144]	@ (8001b84 <HAL_GPIO_Init+0x304>)
 8001af2:	69bb      	ldr	r3, [r7, #24]
 8001af4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001af6:	4b23      	ldr	r3, [pc, #140]	@ (8001b84 <HAL_GPIO_Init+0x304>)
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	43db      	mvns	r3, r3
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	4013      	ands	r3, r2
 8001b04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d003      	beq.n	8001b1a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001b12:	69ba      	ldr	r2, [r7, #24]
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	4313      	orrs	r3, r2
 8001b18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b1a:	4a1a      	ldr	r2, [pc, #104]	@ (8001b84 <HAL_GPIO_Init+0x304>)
 8001b1c:	69bb      	ldr	r3, [r7, #24]
 8001b1e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b20:	4b18      	ldr	r3, [pc, #96]	@ (8001b84 <HAL_GPIO_Init+0x304>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	43db      	mvns	r3, r3
 8001b2a:	69ba      	ldr	r2, [r7, #24]
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d003      	beq.n	8001b44 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b44:	4a0f      	ldr	r2, [pc, #60]	@ (8001b84 <HAL_GPIO_Init+0x304>)
 8001b46:	69bb      	ldr	r3, [r7, #24]
 8001b48:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	3301      	adds	r3, #1
 8001b4e:	61fb      	str	r3, [r7, #28]
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	2b0f      	cmp	r3, #15
 8001b54:	f67f aea2 	bls.w	800189c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b58:	bf00      	nop
 8001b5a:	bf00      	nop
 8001b5c:	3724      	adds	r7, #36	@ 0x24
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	40023800 	.word	0x40023800
 8001b6c:	40013800 	.word	0x40013800
 8001b70:	40020000 	.word	0x40020000
 8001b74:	40020400 	.word	0x40020400
 8001b78:	40020800 	.word	0x40020800
 8001b7c:	40020c00 	.word	0x40020c00
 8001b80:	40021000 	.word	0x40021000
 8001b84:	40013c00 	.word	0x40013c00

08001b88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d101      	bne.n	8001b9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e12b      	b.n	8001df2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d106      	bne.n	8001bb4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f7ff fc36 	bl	8001420 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2224      	movs	r2, #36	@ 0x24
 8001bb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f022 0201 	bic.w	r2, r2, #1
 8001bca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001bda:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001bea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001bec:	f001 fc20 	bl	8003430 <HAL_RCC_GetPCLK1Freq>
 8001bf0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	4a81      	ldr	r2, [pc, #516]	@ (8001dfc <HAL_I2C_Init+0x274>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d807      	bhi.n	8001c0c <HAL_I2C_Init+0x84>
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	4a80      	ldr	r2, [pc, #512]	@ (8001e00 <HAL_I2C_Init+0x278>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	bf94      	ite	ls
 8001c04:	2301      	movls	r3, #1
 8001c06:	2300      	movhi	r3, #0
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	e006      	b.n	8001c1a <HAL_I2C_Init+0x92>
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	4a7d      	ldr	r2, [pc, #500]	@ (8001e04 <HAL_I2C_Init+0x27c>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	bf94      	ite	ls
 8001c14:	2301      	movls	r3, #1
 8001c16:	2300      	movhi	r3, #0
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e0e7      	b.n	8001df2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	4a78      	ldr	r2, [pc, #480]	@ (8001e08 <HAL_I2C_Init+0x280>)
 8001c26:	fba2 2303 	umull	r2, r3, r2, r3
 8001c2a:	0c9b      	lsrs	r3, r3, #18
 8001c2c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	68ba      	ldr	r2, [r7, #8]
 8001c3e:	430a      	orrs	r2, r1
 8001c40:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	6a1b      	ldr	r3, [r3, #32]
 8001c48:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	4a6a      	ldr	r2, [pc, #424]	@ (8001dfc <HAL_I2C_Init+0x274>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d802      	bhi.n	8001c5c <HAL_I2C_Init+0xd4>
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	3301      	adds	r3, #1
 8001c5a:	e009      	b.n	8001c70 <HAL_I2C_Init+0xe8>
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001c62:	fb02 f303 	mul.w	r3, r2, r3
 8001c66:	4a69      	ldr	r2, [pc, #420]	@ (8001e0c <HAL_I2C_Init+0x284>)
 8001c68:	fba2 2303 	umull	r2, r3, r2, r3
 8001c6c:	099b      	lsrs	r3, r3, #6
 8001c6e:	3301      	adds	r3, #1
 8001c70:	687a      	ldr	r2, [r7, #4]
 8001c72:	6812      	ldr	r2, [r2, #0]
 8001c74:	430b      	orrs	r3, r1
 8001c76:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	69db      	ldr	r3, [r3, #28]
 8001c7e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001c82:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	495c      	ldr	r1, [pc, #368]	@ (8001dfc <HAL_I2C_Init+0x274>)
 8001c8c:	428b      	cmp	r3, r1
 8001c8e:	d819      	bhi.n	8001cc4 <HAL_I2C_Init+0x13c>
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	1e59      	subs	r1, r3, #1
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	005b      	lsls	r3, r3, #1
 8001c9a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c9e:	1c59      	adds	r1, r3, #1
 8001ca0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001ca4:	400b      	ands	r3, r1
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d00a      	beq.n	8001cc0 <HAL_I2C_Init+0x138>
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	1e59      	subs	r1, r3, #1
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	005b      	lsls	r3, r3, #1
 8001cb4:	fbb1 f3f3 	udiv	r3, r1, r3
 8001cb8:	3301      	adds	r3, #1
 8001cba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cbe:	e051      	b.n	8001d64 <HAL_I2C_Init+0x1dc>
 8001cc0:	2304      	movs	r3, #4
 8001cc2:	e04f      	b.n	8001d64 <HAL_I2C_Init+0x1dc>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d111      	bne.n	8001cf0 <HAL_I2C_Init+0x168>
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	1e58      	subs	r0, r3, #1
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6859      	ldr	r1, [r3, #4]
 8001cd4:	460b      	mov	r3, r1
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	440b      	add	r3, r1
 8001cda:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cde:	3301      	adds	r3, #1
 8001ce0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	bf0c      	ite	eq
 8001ce8:	2301      	moveq	r3, #1
 8001cea:	2300      	movne	r3, #0
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	e012      	b.n	8001d16 <HAL_I2C_Init+0x18e>
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	1e58      	subs	r0, r3, #1
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6859      	ldr	r1, [r3, #4]
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	440b      	add	r3, r1
 8001cfe:	0099      	lsls	r1, r3, #2
 8001d00:	440b      	add	r3, r1
 8001d02:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d06:	3301      	adds	r3, #1
 8001d08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	bf0c      	ite	eq
 8001d10:	2301      	moveq	r3, #1
 8001d12:	2300      	movne	r3, #0
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <HAL_I2C_Init+0x196>
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e022      	b.n	8001d64 <HAL_I2C_Init+0x1dc>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d10e      	bne.n	8001d44 <HAL_I2C_Init+0x1bc>
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	1e58      	subs	r0, r3, #1
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6859      	ldr	r1, [r3, #4]
 8001d2e:	460b      	mov	r3, r1
 8001d30:	005b      	lsls	r3, r3, #1
 8001d32:	440b      	add	r3, r1
 8001d34:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d38:	3301      	adds	r3, #1
 8001d3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001d42:	e00f      	b.n	8001d64 <HAL_I2C_Init+0x1dc>
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	1e58      	subs	r0, r3, #1
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6859      	ldr	r1, [r3, #4]
 8001d4c:	460b      	mov	r3, r1
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	440b      	add	r3, r1
 8001d52:	0099      	lsls	r1, r3, #2
 8001d54:	440b      	add	r3, r1
 8001d56:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d60:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001d64:	6879      	ldr	r1, [r7, #4]
 8001d66:	6809      	ldr	r1, [r1, #0]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	69da      	ldr	r2, [r3, #28]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6a1b      	ldr	r3, [r3, #32]
 8001d7e:	431a      	orrs	r2, r3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	430a      	orrs	r2, r1
 8001d86:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001d92:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	6911      	ldr	r1, [r2, #16]
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	68d2      	ldr	r2, [r2, #12]
 8001d9e:	4311      	orrs	r1, r2
 8001da0:	687a      	ldr	r2, [r7, #4]
 8001da2:	6812      	ldr	r2, [r2, #0]
 8001da4:	430b      	orrs	r3, r1
 8001da6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	68db      	ldr	r3, [r3, #12]
 8001dae:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	695a      	ldr	r2, [r3, #20]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	699b      	ldr	r3, [r3, #24]
 8001dba:	431a      	orrs	r2, r3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	430a      	orrs	r2, r1
 8001dc2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f042 0201 	orr.w	r2, r2, #1
 8001dd2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2220      	movs	r2, #32
 8001dde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2200      	movs	r2, #0
 8001de6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2200      	movs	r2, #0
 8001dec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001df0:	2300      	movs	r3, #0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3710      	adds	r7, #16
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	000186a0 	.word	0x000186a0
 8001e00:	001e847f 	.word	0x001e847f
 8001e04:	003d08ff 	.word	0x003d08ff
 8001e08:	431bde83 	.word	0x431bde83
 8001e0c:	10624dd3 	.word	0x10624dd3

08001e10 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b088      	sub	sp, #32
 8001e14:	af02      	add	r7, sp, #8
 8001e16:	60f8      	str	r0, [r7, #12]
 8001e18:	4608      	mov	r0, r1
 8001e1a:	4611      	mov	r1, r2
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	4603      	mov	r3, r0
 8001e20:	817b      	strh	r3, [r7, #10]
 8001e22:	460b      	mov	r3, r1
 8001e24:	813b      	strh	r3, [r7, #8]
 8001e26:	4613      	mov	r3, r2
 8001e28:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001e2a:	f7ff fc13 	bl	8001654 <HAL_GetTick>
 8001e2e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	2b20      	cmp	r3, #32
 8001e3a:	f040 80d9 	bne.w	8001ff0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	9300      	str	r3, [sp, #0]
 8001e42:	2319      	movs	r3, #25
 8001e44:	2201      	movs	r2, #1
 8001e46:	496d      	ldr	r1, [pc, #436]	@ (8001ffc <HAL_I2C_Mem_Write+0x1ec>)
 8001e48:	68f8      	ldr	r0, [r7, #12]
 8001e4a:	f000 fc8b 	bl	8002764 <I2C_WaitOnFlagUntilTimeout>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d001      	beq.n	8001e58 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001e54:	2302      	movs	r3, #2
 8001e56:	e0cc      	b.n	8001ff2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d101      	bne.n	8001e66 <HAL_I2C_Mem_Write+0x56>
 8001e62:	2302      	movs	r3, #2
 8001e64:	e0c5      	b.n	8001ff2 <HAL_I2C_Mem_Write+0x1e2>
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	2201      	movs	r2, #1
 8001e6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 0301 	and.w	r3, r3, #1
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d007      	beq.n	8001e8c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f042 0201 	orr.w	r2, r2, #1
 8001e8a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e9a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	2221      	movs	r2, #33	@ 0x21
 8001ea0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	2240      	movs	r2, #64	@ 0x40
 8001ea8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	6a3a      	ldr	r2, [r7, #32]
 8001eb6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001ebc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ec2:	b29a      	uxth	r2, r3
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	4a4d      	ldr	r2, [pc, #308]	@ (8002000 <HAL_I2C_Mem_Write+0x1f0>)
 8001ecc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001ece:	88f8      	ldrh	r0, [r7, #6]
 8001ed0:	893a      	ldrh	r2, [r7, #8]
 8001ed2:	8979      	ldrh	r1, [r7, #10]
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	9301      	str	r3, [sp, #4]
 8001ed8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001eda:	9300      	str	r3, [sp, #0]
 8001edc:	4603      	mov	r3, r0
 8001ede:	68f8      	ldr	r0, [r7, #12]
 8001ee0:	f000 fac2 	bl	8002468 <I2C_RequestMemoryWrite>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d052      	beq.n	8001f90 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e081      	b.n	8001ff2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001eee:	697a      	ldr	r2, [r7, #20]
 8001ef0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001ef2:	68f8      	ldr	r0, [r7, #12]
 8001ef4:	f000 fd50 	bl	8002998 <I2C_WaitOnTXEFlagUntilTimeout>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d00d      	beq.n	8001f1a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f02:	2b04      	cmp	r3, #4
 8001f04:	d107      	bne.n	8001f16 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f14:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e06b      	b.n	8001ff2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f1e:	781a      	ldrb	r2, [r3, #0]
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f2a:	1c5a      	adds	r2, r3, #1
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f34:	3b01      	subs	r3, #1
 8001f36:	b29a      	uxth	r2, r3
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f40:	b29b      	uxth	r3, r3
 8001f42:	3b01      	subs	r3, #1
 8001f44:	b29a      	uxth	r2, r3
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	695b      	ldr	r3, [r3, #20]
 8001f50:	f003 0304 	and.w	r3, r3, #4
 8001f54:	2b04      	cmp	r3, #4
 8001f56:	d11b      	bne.n	8001f90 <HAL_I2C_Mem_Write+0x180>
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d017      	beq.n	8001f90 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f64:	781a      	ldrb	r2, [r3, #0]
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f70:	1c5a      	adds	r2, r3, #1
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f7a:	3b01      	subs	r3, #1
 8001f7c:	b29a      	uxth	r2, r3
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f86:	b29b      	uxth	r3, r3
 8001f88:	3b01      	subs	r3, #1
 8001f8a:	b29a      	uxth	r2, r3
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d1aa      	bne.n	8001eee <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f98:	697a      	ldr	r2, [r7, #20]
 8001f9a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001f9c:	68f8      	ldr	r0, [r7, #12]
 8001f9e:	f000 fd43 	bl	8002a28 <I2C_WaitOnBTFFlagUntilTimeout>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d00d      	beq.n	8001fc4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fac:	2b04      	cmp	r3, #4
 8001fae:	d107      	bne.n	8001fc0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001fbe:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e016      	b.n	8001ff2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001fd2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	2220      	movs	r2, #32
 8001fd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001fec:	2300      	movs	r3, #0
 8001fee:	e000      	b.n	8001ff2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001ff0:	2302      	movs	r3, #2
  }
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3718      	adds	r7, #24
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	00100002 	.word	0x00100002
 8002000:	ffff0000 	.word	0xffff0000

08002004 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b08c      	sub	sp, #48	@ 0x30
 8002008:	af02      	add	r7, sp, #8
 800200a:	60f8      	str	r0, [r7, #12]
 800200c:	4608      	mov	r0, r1
 800200e:	4611      	mov	r1, r2
 8002010:	461a      	mov	r2, r3
 8002012:	4603      	mov	r3, r0
 8002014:	817b      	strh	r3, [r7, #10]
 8002016:	460b      	mov	r3, r1
 8002018:	813b      	strh	r3, [r7, #8]
 800201a:	4613      	mov	r3, r2
 800201c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800201e:	f7ff fb19 	bl	8001654 <HAL_GetTick>
 8002022:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800202a:	b2db      	uxtb	r3, r3
 800202c:	2b20      	cmp	r3, #32
 800202e:	f040 8214 	bne.w	800245a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002034:	9300      	str	r3, [sp, #0]
 8002036:	2319      	movs	r3, #25
 8002038:	2201      	movs	r2, #1
 800203a:	497b      	ldr	r1, [pc, #492]	@ (8002228 <HAL_I2C_Mem_Read+0x224>)
 800203c:	68f8      	ldr	r0, [r7, #12]
 800203e:	f000 fb91 	bl	8002764 <I2C_WaitOnFlagUntilTimeout>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d001      	beq.n	800204c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002048:	2302      	movs	r3, #2
 800204a:	e207      	b.n	800245c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002052:	2b01      	cmp	r3, #1
 8002054:	d101      	bne.n	800205a <HAL_I2C_Mem_Read+0x56>
 8002056:	2302      	movs	r3, #2
 8002058:	e200      	b.n	800245c <HAL_I2C_Mem_Read+0x458>
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2201      	movs	r2, #1
 800205e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0301 	and.w	r3, r3, #1
 800206c:	2b01      	cmp	r3, #1
 800206e:	d007      	beq.n	8002080 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f042 0201 	orr.w	r2, r2, #1
 800207e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800208e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2222      	movs	r2, #34	@ 0x22
 8002094:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2240      	movs	r2, #64	@ 0x40
 800209c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2200      	movs	r2, #0
 80020a4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80020aa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80020b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020b6:	b29a      	uxth	r2, r3
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	4a5b      	ldr	r2, [pc, #364]	@ (800222c <HAL_I2C_Mem_Read+0x228>)
 80020c0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80020c2:	88f8      	ldrh	r0, [r7, #6]
 80020c4:	893a      	ldrh	r2, [r7, #8]
 80020c6:	8979      	ldrh	r1, [r7, #10]
 80020c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ca:	9301      	str	r3, [sp, #4]
 80020cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020ce:	9300      	str	r3, [sp, #0]
 80020d0:	4603      	mov	r3, r0
 80020d2:	68f8      	ldr	r0, [r7, #12]
 80020d4:	f000 fa5e 	bl	8002594 <I2C_RequestMemoryRead>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d001      	beq.n	80020e2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e1bc      	b.n	800245c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d113      	bne.n	8002112 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020ea:	2300      	movs	r3, #0
 80020ec:	623b      	str	r3, [r7, #32]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	695b      	ldr	r3, [r3, #20]
 80020f4:	623b      	str	r3, [r7, #32]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	699b      	ldr	r3, [r3, #24]
 80020fc:	623b      	str	r3, [r7, #32]
 80020fe:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800210e:	601a      	str	r2, [r3, #0]
 8002110:	e190      	b.n	8002434 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002116:	2b01      	cmp	r3, #1
 8002118:	d11b      	bne.n	8002152 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002128:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800212a:	2300      	movs	r3, #0
 800212c:	61fb      	str	r3, [r7, #28]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	695b      	ldr	r3, [r3, #20]
 8002134:	61fb      	str	r3, [r7, #28]
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	699b      	ldr	r3, [r3, #24]
 800213c:	61fb      	str	r3, [r7, #28]
 800213e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800214e:	601a      	str	r2, [r3, #0]
 8002150:	e170      	b.n	8002434 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002156:	2b02      	cmp	r3, #2
 8002158:	d11b      	bne.n	8002192 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002168:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002178:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800217a:	2300      	movs	r3, #0
 800217c:	61bb      	str	r3, [r7, #24]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	695b      	ldr	r3, [r3, #20]
 8002184:	61bb      	str	r3, [r7, #24]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	699b      	ldr	r3, [r3, #24]
 800218c:	61bb      	str	r3, [r7, #24]
 800218e:	69bb      	ldr	r3, [r7, #24]
 8002190:	e150      	b.n	8002434 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002192:	2300      	movs	r3, #0
 8002194:	617b      	str	r3, [r7, #20]
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	695b      	ldr	r3, [r3, #20]
 800219c:	617b      	str	r3, [r7, #20]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	699b      	ldr	r3, [r3, #24]
 80021a4:	617b      	str	r3, [r7, #20]
 80021a6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80021a8:	e144      	b.n	8002434 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021ae:	2b03      	cmp	r3, #3
 80021b0:	f200 80f1 	bhi.w	8002396 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d123      	bne.n	8002204 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021be:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80021c0:	68f8      	ldr	r0, [r7, #12]
 80021c2:	f000 fc79 	bl	8002ab8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d001      	beq.n	80021d0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e145      	b.n	800245c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	691a      	ldr	r2, [r3, #16]
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021da:	b2d2      	uxtb	r2, r2
 80021dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021e2:	1c5a      	adds	r2, r3, #1
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021ec:	3b01      	subs	r3, #1
 80021ee:	b29a      	uxth	r2, r3
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021f8:	b29b      	uxth	r3, r3
 80021fa:	3b01      	subs	r3, #1
 80021fc:	b29a      	uxth	r2, r3
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002202:	e117      	b.n	8002434 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002208:	2b02      	cmp	r3, #2
 800220a:	d14e      	bne.n	80022aa <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800220c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800220e:	9300      	str	r3, [sp, #0]
 8002210:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002212:	2200      	movs	r2, #0
 8002214:	4906      	ldr	r1, [pc, #24]	@ (8002230 <HAL_I2C_Mem_Read+0x22c>)
 8002216:	68f8      	ldr	r0, [r7, #12]
 8002218:	f000 faa4 	bl	8002764 <I2C_WaitOnFlagUntilTimeout>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d008      	beq.n	8002234 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e11a      	b.n	800245c <HAL_I2C_Mem_Read+0x458>
 8002226:	bf00      	nop
 8002228:	00100002 	.word	0x00100002
 800222c:	ffff0000 	.word	0xffff0000
 8002230:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002242:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	691a      	ldr	r2, [r3, #16]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800224e:	b2d2      	uxtb	r2, r2
 8002250:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002256:	1c5a      	adds	r2, r3, #1
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002260:	3b01      	subs	r3, #1
 8002262:	b29a      	uxth	r2, r3
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800226c:	b29b      	uxth	r3, r3
 800226e:	3b01      	subs	r3, #1
 8002270:	b29a      	uxth	r2, r3
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	691a      	ldr	r2, [r3, #16]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002280:	b2d2      	uxtb	r2, r2
 8002282:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002288:	1c5a      	adds	r2, r3, #1
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002292:	3b01      	subs	r3, #1
 8002294:	b29a      	uxth	r2, r3
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800229e:	b29b      	uxth	r3, r3
 80022a0:	3b01      	subs	r3, #1
 80022a2:	b29a      	uxth	r2, r3
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80022a8:	e0c4      	b.n	8002434 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80022aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ac:	9300      	str	r3, [sp, #0]
 80022ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022b0:	2200      	movs	r2, #0
 80022b2:	496c      	ldr	r1, [pc, #432]	@ (8002464 <HAL_I2C_Mem_Read+0x460>)
 80022b4:	68f8      	ldr	r0, [r7, #12]
 80022b6:	f000 fa55 	bl	8002764 <I2C_WaitOnFlagUntilTimeout>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d001      	beq.n	80022c4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e0cb      	b.n	800245c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80022d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	691a      	ldr	r2, [r3, #16]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022de:	b2d2      	uxtb	r2, r2
 80022e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022e6:	1c5a      	adds	r2, r3, #1
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022f0:	3b01      	subs	r3, #1
 80022f2:	b29a      	uxth	r2, r3
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022fc:	b29b      	uxth	r3, r3
 80022fe:	3b01      	subs	r3, #1
 8002300:	b29a      	uxth	r2, r3
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002308:	9300      	str	r3, [sp, #0]
 800230a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800230c:	2200      	movs	r2, #0
 800230e:	4955      	ldr	r1, [pc, #340]	@ (8002464 <HAL_I2C_Mem_Read+0x460>)
 8002310:	68f8      	ldr	r0, [r7, #12]
 8002312:	f000 fa27 	bl	8002764 <I2C_WaitOnFlagUntilTimeout>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d001      	beq.n	8002320 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e09d      	b.n	800245c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800232e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	691a      	ldr	r2, [r3, #16]
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800233a:	b2d2      	uxtb	r2, r2
 800233c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002342:	1c5a      	adds	r2, r3, #1
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800234c:	3b01      	subs	r3, #1
 800234e:	b29a      	uxth	r2, r3
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002358:	b29b      	uxth	r3, r3
 800235a:	3b01      	subs	r3, #1
 800235c:	b29a      	uxth	r2, r3
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	691a      	ldr	r2, [r3, #16]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800236c:	b2d2      	uxtb	r2, r2
 800236e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002374:	1c5a      	adds	r2, r3, #1
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800237e:	3b01      	subs	r3, #1
 8002380:	b29a      	uxth	r2, r3
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800238a:	b29b      	uxth	r3, r3
 800238c:	3b01      	subs	r3, #1
 800238e:	b29a      	uxth	r2, r3
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002394:	e04e      	b.n	8002434 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002396:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002398:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800239a:	68f8      	ldr	r0, [r7, #12]
 800239c:	f000 fb8c 	bl	8002ab8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d001      	beq.n	80023aa <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e058      	b.n	800245c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	691a      	ldr	r2, [r3, #16]
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023b4:	b2d2      	uxtb	r2, r2
 80023b6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023bc:	1c5a      	adds	r2, r3, #1
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023c6:	3b01      	subs	r3, #1
 80023c8:	b29a      	uxth	r2, r3
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023d2:	b29b      	uxth	r3, r3
 80023d4:	3b01      	subs	r3, #1
 80023d6:	b29a      	uxth	r2, r3
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	695b      	ldr	r3, [r3, #20]
 80023e2:	f003 0304 	and.w	r3, r3, #4
 80023e6:	2b04      	cmp	r3, #4
 80023e8:	d124      	bne.n	8002434 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023ee:	2b03      	cmp	r3, #3
 80023f0:	d107      	bne.n	8002402 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002400:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	691a      	ldr	r2, [r3, #16]
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800240c:	b2d2      	uxtb	r2, r2
 800240e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002414:	1c5a      	adds	r2, r3, #1
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800241e:	3b01      	subs	r3, #1
 8002420:	b29a      	uxth	r2, r3
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800242a:	b29b      	uxth	r3, r3
 800242c:	3b01      	subs	r3, #1
 800242e:	b29a      	uxth	r2, r3
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002438:	2b00      	cmp	r3, #0
 800243a:	f47f aeb6 	bne.w	80021aa <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2220      	movs	r2, #32
 8002442:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2200      	movs	r2, #0
 800244a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2200      	movs	r2, #0
 8002452:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002456:	2300      	movs	r3, #0
 8002458:	e000      	b.n	800245c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800245a:	2302      	movs	r3, #2
  }
}
 800245c:	4618      	mov	r0, r3
 800245e:	3728      	adds	r7, #40	@ 0x28
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	00010004 	.word	0x00010004

08002468 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b088      	sub	sp, #32
 800246c:	af02      	add	r7, sp, #8
 800246e:	60f8      	str	r0, [r7, #12]
 8002470:	4608      	mov	r0, r1
 8002472:	4611      	mov	r1, r2
 8002474:	461a      	mov	r2, r3
 8002476:	4603      	mov	r3, r0
 8002478:	817b      	strh	r3, [r7, #10]
 800247a:	460b      	mov	r3, r1
 800247c:	813b      	strh	r3, [r7, #8]
 800247e:	4613      	mov	r3, r2
 8002480:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002490:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002494:	9300      	str	r3, [sp, #0]
 8002496:	6a3b      	ldr	r3, [r7, #32]
 8002498:	2200      	movs	r2, #0
 800249a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800249e:	68f8      	ldr	r0, [r7, #12]
 80024a0:	f000 f960 	bl	8002764 <I2C_WaitOnFlagUntilTimeout>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d00d      	beq.n	80024c6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80024b8:	d103      	bne.n	80024c2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80024c0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e05f      	b.n	8002586 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80024c6:	897b      	ldrh	r3, [r7, #10]
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	461a      	mov	r2, r3
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80024d4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80024d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024d8:	6a3a      	ldr	r2, [r7, #32]
 80024da:	492d      	ldr	r1, [pc, #180]	@ (8002590 <I2C_RequestMemoryWrite+0x128>)
 80024dc:	68f8      	ldr	r0, [r7, #12]
 80024de:	f000 f9bb 	bl	8002858 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d001      	beq.n	80024ec <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e04c      	b.n	8002586 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024ec:	2300      	movs	r3, #0
 80024ee:	617b      	str	r3, [r7, #20]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	695b      	ldr	r3, [r3, #20]
 80024f6:	617b      	str	r3, [r7, #20]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	699b      	ldr	r3, [r3, #24]
 80024fe:	617b      	str	r3, [r7, #20]
 8002500:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002502:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002504:	6a39      	ldr	r1, [r7, #32]
 8002506:	68f8      	ldr	r0, [r7, #12]
 8002508:	f000 fa46 	bl	8002998 <I2C_WaitOnTXEFlagUntilTimeout>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d00d      	beq.n	800252e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002516:	2b04      	cmp	r3, #4
 8002518:	d107      	bne.n	800252a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002528:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e02b      	b.n	8002586 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800252e:	88fb      	ldrh	r3, [r7, #6]
 8002530:	2b01      	cmp	r3, #1
 8002532:	d105      	bne.n	8002540 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002534:	893b      	ldrh	r3, [r7, #8]
 8002536:	b2da      	uxtb	r2, r3
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	611a      	str	r2, [r3, #16]
 800253e:	e021      	b.n	8002584 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002540:	893b      	ldrh	r3, [r7, #8]
 8002542:	0a1b      	lsrs	r3, r3, #8
 8002544:	b29b      	uxth	r3, r3
 8002546:	b2da      	uxtb	r2, r3
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800254e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002550:	6a39      	ldr	r1, [r7, #32]
 8002552:	68f8      	ldr	r0, [r7, #12]
 8002554:	f000 fa20 	bl	8002998 <I2C_WaitOnTXEFlagUntilTimeout>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d00d      	beq.n	800257a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002562:	2b04      	cmp	r3, #4
 8002564:	d107      	bne.n	8002576 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002574:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e005      	b.n	8002586 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800257a:	893b      	ldrh	r3, [r7, #8]
 800257c:	b2da      	uxtb	r2, r3
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002584:	2300      	movs	r3, #0
}
 8002586:	4618      	mov	r0, r3
 8002588:	3718      	adds	r7, #24
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	00010002 	.word	0x00010002

08002594 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b088      	sub	sp, #32
 8002598:	af02      	add	r7, sp, #8
 800259a:	60f8      	str	r0, [r7, #12]
 800259c:	4608      	mov	r0, r1
 800259e:	4611      	mov	r1, r2
 80025a0:	461a      	mov	r2, r3
 80025a2:	4603      	mov	r3, r0
 80025a4:	817b      	strh	r3, [r7, #10]
 80025a6:	460b      	mov	r3, r1
 80025a8:	813b      	strh	r3, [r7, #8]
 80025aa:	4613      	mov	r3, r2
 80025ac:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80025bc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80025cc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80025ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025d0:	9300      	str	r3, [sp, #0]
 80025d2:	6a3b      	ldr	r3, [r7, #32]
 80025d4:	2200      	movs	r2, #0
 80025d6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80025da:	68f8      	ldr	r0, [r7, #12]
 80025dc:	f000 f8c2 	bl	8002764 <I2C_WaitOnFlagUntilTimeout>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d00d      	beq.n	8002602 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80025f4:	d103      	bne.n	80025fe <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80025fc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e0aa      	b.n	8002758 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002602:	897b      	ldrh	r3, [r7, #10]
 8002604:	b2db      	uxtb	r3, r3
 8002606:	461a      	mov	r2, r3
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002610:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002614:	6a3a      	ldr	r2, [r7, #32]
 8002616:	4952      	ldr	r1, [pc, #328]	@ (8002760 <I2C_RequestMemoryRead+0x1cc>)
 8002618:	68f8      	ldr	r0, [r7, #12]
 800261a:	f000 f91d 	bl	8002858 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d001      	beq.n	8002628 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e097      	b.n	8002758 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002628:	2300      	movs	r3, #0
 800262a:	617b      	str	r3, [r7, #20]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	695b      	ldr	r3, [r3, #20]
 8002632:	617b      	str	r3, [r7, #20]
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	699b      	ldr	r3, [r3, #24]
 800263a:	617b      	str	r3, [r7, #20]
 800263c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800263e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002640:	6a39      	ldr	r1, [r7, #32]
 8002642:	68f8      	ldr	r0, [r7, #12]
 8002644:	f000 f9a8 	bl	8002998 <I2C_WaitOnTXEFlagUntilTimeout>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d00d      	beq.n	800266a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002652:	2b04      	cmp	r3, #4
 8002654:	d107      	bne.n	8002666 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002664:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e076      	b.n	8002758 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800266a:	88fb      	ldrh	r3, [r7, #6]
 800266c:	2b01      	cmp	r3, #1
 800266e:	d105      	bne.n	800267c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002670:	893b      	ldrh	r3, [r7, #8]
 8002672:	b2da      	uxtb	r2, r3
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	611a      	str	r2, [r3, #16]
 800267a:	e021      	b.n	80026c0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800267c:	893b      	ldrh	r3, [r7, #8]
 800267e:	0a1b      	lsrs	r3, r3, #8
 8002680:	b29b      	uxth	r3, r3
 8002682:	b2da      	uxtb	r2, r3
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800268a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800268c:	6a39      	ldr	r1, [r7, #32]
 800268e:	68f8      	ldr	r0, [r7, #12]
 8002690:	f000 f982 	bl	8002998 <I2C_WaitOnTXEFlagUntilTimeout>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d00d      	beq.n	80026b6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800269e:	2b04      	cmp	r3, #4
 80026a0:	d107      	bne.n	80026b2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026b0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e050      	b.n	8002758 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80026b6:	893b      	ldrh	r3, [r7, #8]
 80026b8:	b2da      	uxtb	r2, r3
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026c2:	6a39      	ldr	r1, [r7, #32]
 80026c4:	68f8      	ldr	r0, [r7, #12]
 80026c6:	f000 f967 	bl	8002998 <I2C_WaitOnTXEFlagUntilTimeout>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d00d      	beq.n	80026ec <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026d4:	2b04      	cmp	r3, #4
 80026d6:	d107      	bne.n	80026e8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026e6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e035      	b.n	8002758 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80026fa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80026fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026fe:	9300      	str	r3, [sp, #0]
 8002700:	6a3b      	ldr	r3, [r7, #32]
 8002702:	2200      	movs	r2, #0
 8002704:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002708:	68f8      	ldr	r0, [r7, #12]
 800270a:	f000 f82b 	bl	8002764 <I2C_WaitOnFlagUntilTimeout>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d00d      	beq.n	8002730 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800271e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002722:	d103      	bne.n	800272c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800272a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800272c:	2303      	movs	r3, #3
 800272e:	e013      	b.n	8002758 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002730:	897b      	ldrh	r3, [r7, #10]
 8002732:	b2db      	uxtb	r3, r3
 8002734:	f043 0301 	orr.w	r3, r3, #1
 8002738:	b2da      	uxtb	r2, r3
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002742:	6a3a      	ldr	r2, [r7, #32]
 8002744:	4906      	ldr	r1, [pc, #24]	@ (8002760 <I2C_RequestMemoryRead+0x1cc>)
 8002746:	68f8      	ldr	r0, [r7, #12]
 8002748:	f000 f886 	bl	8002858 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d001      	beq.n	8002756 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e000      	b.n	8002758 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002756:	2300      	movs	r3, #0
}
 8002758:	4618      	mov	r0, r3
 800275a:	3718      	adds	r7, #24
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	00010002 	.word	0x00010002

08002764 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af00      	add	r7, sp, #0
 800276a:	60f8      	str	r0, [r7, #12]
 800276c:	60b9      	str	r1, [r7, #8]
 800276e:	603b      	str	r3, [r7, #0]
 8002770:	4613      	mov	r3, r2
 8002772:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002774:	e048      	b.n	8002808 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800277c:	d044      	beq.n	8002808 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800277e:	f7fe ff69 	bl	8001654 <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	69bb      	ldr	r3, [r7, #24]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	683a      	ldr	r2, [r7, #0]
 800278a:	429a      	cmp	r2, r3
 800278c:	d302      	bcc.n	8002794 <I2C_WaitOnFlagUntilTimeout+0x30>
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d139      	bne.n	8002808 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	0c1b      	lsrs	r3, r3, #16
 8002798:	b2db      	uxtb	r3, r3
 800279a:	2b01      	cmp	r3, #1
 800279c:	d10d      	bne.n	80027ba <I2C_WaitOnFlagUntilTimeout+0x56>
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	695b      	ldr	r3, [r3, #20]
 80027a4:	43da      	mvns	r2, r3
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	4013      	ands	r3, r2
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	bf0c      	ite	eq
 80027b0:	2301      	moveq	r3, #1
 80027b2:	2300      	movne	r3, #0
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	461a      	mov	r2, r3
 80027b8:	e00c      	b.n	80027d4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	699b      	ldr	r3, [r3, #24]
 80027c0:	43da      	mvns	r2, r3
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	4013      	ands	r3, r2
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	bf0c      	ite	eq
 80027cc:	2301      	moveq	r3, #1
 80027ce:	2300      	movne	r3, #0
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	461a      	mov	r2, r3
 80027d4:	79fb      	ldrb	r3, [r7, #7]
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d116      	bne.n	8002808 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2200      	movs	r2, #0
 80027de:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2220      	movs	r2, #32
 80027e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2200      	movs	r2, #0
 80027ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f4:	f043 0220 	orr.w	r2, r3, #32
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2200      	movs	r2, #0
 8002800:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	e023      	b.n	8002850 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	0c1b      	lsrs	r3, r3, #16
 800280c:	b2db      	uxtb	r3, r3
 800280e:	2b01      	cmp	r3, #1
 8002810:	d10d      	bne.n	800282e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	695b      	ldr	r3, [r3, #20]
 8002818:	43da      	mvns	r2, r3
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	4013      	ands	r3, r2
 800281e:	b29b      	uxth	r3, r3
 8002820:	2b00      	cmp	r3, #0
 8002822:	bf0c      	ite	eq
 8002824:	2301      	moveq	r3, #1
 8002826:	2300      	movne	r3, #0
 8002828:	b2db      	uxtb	r3, r3
 800282a:	461a      	mov	r2, r3
 800282c:	e00c      	b.n	8002848 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	699b      	ldr	r3, [r3, #24]
 8002834:	43da      	mvns	r2, r3
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	4013      	ands	r3, r2
 800283a:	b29b      	uxth	r3, r3
 800283c:	2b00      	cmp	r3, #0
 800283e:	bf0c      	ite	eq
 8002840:	2301      	moveq	r3, #1
 8002842:	2300      	movne	r3, #0
 8002844:	b2db      	uxtb	r3, r3
 8002846:	461a      	mov	r2, r3
 8002848:	79fb      	ldrb	r3, [r7, #7]
 800284a:	429a      	cmp	r2, r3
 800284c:	d093      	beq.n	8002776 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800284e:	2300      	movs	r3, #0
}
 8002850:	4618      	mov	r0, r3
 8002852:	3710      	adds	r7, #16
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}

08002858 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
 800285e:	60f8      	str	r0, [r7, #12]
 8002860:	60b9      	str	r1, [r7, #8]
 8002862:	607a      	str	r2, [r7, #4]
 8002864:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002866:	e071      	b.n	800294c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	695b      	ldr	r3, [r3, #20]
 800286e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002872:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002876:	d123      	bne.n	80028c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002886:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002890:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2200      	movs	r2, #0
 8002896:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2220      	movs	r2, #32
 800289c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ac:	f043 0204 	orr.w	r2, r3, #4
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2200      	movs	r2, #0
 80028b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e067      	b.n	8002990 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028c6:	d041      	beq.n	800294c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028c8:	f7fe fec4 	bl	8001654 <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d302      	bcc.n	80028de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d136      	bne.n	800294c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	0c1b      	lsrs	r3, r3, #16
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d10c      	bne.n	8002902 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	695b      	ldr	r3, [r3, #20]
 80028ee:	43da      	mvns	r2, r3
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	4013      	ands	r3, r2
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	bf14      	ite	ne
 80028fa:	2301      	movne	r3, #1
 80028fc:	2300      	moveq	r3, #0
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	e00b      	b.n	800291a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	699b      	ldr	r3, [r3, #24]
 8002908:	43da      	mvns	r2, r3
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	4013      	ands	r3, r2
 800290e:	b29b      	uxth	r3, r3
 8002910:	2b00      	cmp	r3, #0
 8002912:	bf14      	ite	ne
 8002914:	2301      	movne	r3, #1
 8002916:	2300      	moveq	r3, #0
 8002918:	b2db      	uxtb	r3, r3
 800291a:	2b00      	cmp	r3, #0
 800291c:	d016      	beq.n	800294c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2200      	movs	r2, #0
 8002922:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2220      	movs	r2, #32
 8002928:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2200      	movs	r2, #0
 8002930:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002938:	f043 0220 	orr.w	r2, r3, #32
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2200      	movs	r2, #0
 8002944:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e021      	b.n	8002990 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	0c1b      	lsrs	r3, r3, #16
 8002950:	b2db      	uxtb	r3, r3
 8002952:	2b01      	cmp	r3, #1
 8002954:	d10c      	bne.n	8002970 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	695b      	ldr	r3, [r3, #20]
 800295c:	43da      	mvns	r2, r3
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	4013      	ands	r3, r2
 8002962:	b29b      	uxth	r3, r3
 8002964:	2b00      	cmp	r3, #0
 8002966:	bf14      	ite	ne
 8002968:	2301      	movne	r3, #1
 800296a:	2300      	moveq	r3, #0
 800296c:	b2db      	uxtb	r3, r3
 800296e:	e00b      	b.n	8002988 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	699b      	ldr	r3, [r3, #24]
 8002976:	43da      	mvns	r2, r3
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	4013      	ands	r3, r2
 800297c:	b29b      	uxth	r3, r3
 800297e:	2b00      	cmp	r3, #0
 8002980:	bf14      	ite	ne
 8002982:	2301      	movne	r3, #1
 8002984:	2300      	moveq	r3, #0
 8002986:	b2db      	uxtb	r3, r3
 8002988:	2b00      	cmp	r3, #0
 800298a:	f47f af6d 	bne.w	8002868 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800298e:	2300      	movs	r3, #0
}
 8002990:	4618      	mov	r0, r3
 8002992:	3710      	adds	r7, #16
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}

08002998 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b084      	sub	sp, #16
 800299c:	af00      	add	r7, sp, #0
 800299e:	60f8      	str	r0, [r7, #12]
 80029a0:	60b9      	str	r1, [r7, #8]
 80029a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80029a4:	e034      	b.n	8002a10 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80029a6:	68f8      	ldr	r0, [r7, #12]
 80029a8:	f000 f8e3 	bl	8002b72 <I2C_IsAcknowledgeFailed>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d001      	beq.n	80029b6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e034      	b.n	8002a20 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029bc:	d028      	beq.n	8002a10 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029be:	f7fe fe49 	bl	8001654 <HAL_GetTick>
 80029c2:	4602      	mov	r2, r0
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	68ba      	ldr	r2, [r7, #8]
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d302      	bcc.n	80029d4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d11d      	bne.n	8002a10 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	695b      	ldr	r3, [r3, #20]
 80029da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029de:	2b80      	cmp	r3, #128	@ 0x80
 80029e0:	d016      	beq.n	8002a10 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2200      	movs	r2, #0
 80029e6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2220      	movs	r2, #32
 80029ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2200      	movs	r2, #0
 80029f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029fc:	f043 0220 	orr.w	r2, r3, #32
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2200      	movs	r2, #0
 8002a08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e007      	b.n	8002a20 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	695b      	ldr	r3, [r3, #20]
 8002a16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a1a:	2b80      	cmp	r3, #128	@ 0x80
 8002a1c:	d1c3      	bne.n	80029a6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002a1e:	2300      	movs	r3, #0
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3710      	adds	r7, #16
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}

08002a28 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b084      	sub	sp, #16
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	60b9      	str	r1, [r7, #8]
 8002a32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a34:	e034      	b.n	8002aa0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a36:	68f8      	ldr	r0, [r7, #12]
 8002a38:	f000 f89b 	bl	8002b72 <I2C_IsAcknowledgeFailed>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d001      	beq.n	8002a46 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e034      	b.n	8002ab0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a4c:	d028      	beq.n	8002aa0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a4e:	f7fe fe01 	bl	8001654 <HAL_GetTick>
 8002a52:	4602      	mov	r2, r0
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	1ad3      	subs	r3, r2, r3
 8002a58:	68ba      	ldr	r2, [r7, #8]
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d302      	bcc.n	8002a64 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d11d      	bne.n	8002aa0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	695b      	ldr	r3, [r3, #20]
 8002a6a:	f003 0304 	and.w	r3, r3, #4
 8002a6e:	2b04      	cmp	r3, #4
 8002a70:	d016      	beq.n	8002aa0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2200      	movs	r2, #0
 8002a76:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2220      	movs	r2, #32
 8002a7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2200      	movs	r2, #0
 8002a84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a8c:	f043 0220 	orr.w	r2, r3, #32
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2200      	movs	r2, #0
 8002a98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e007      	b.n	8002ab0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	695b      	ldr	r3, [r3, #20]
 8002aa6:	f003 0304 	and.w	r3, r3, #4
 8002aaa:	2b04      	cmp	r3, #4
 8002aac:	d1c3      	bne.n	8002a36 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002aae:	2300      	movs	r3, #0
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3710      	adds	r7, #16
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}

08002ab8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	60f8      	str	r0, [r7, #12]
 8002ac0:	60b9      	str	r1, [r7, #8]
 8002ac2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002ac4:	e049      	b.n	8002b5a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	695b      	ldr	r3, [r3, #20]
 8002acc:	f003 0310 	and.w	r3, r3, #16
 8002ad0:	2b10      	cmp	r3, #16
 8002ad2:	d119      	bne.n	8002b08 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f06f 0210 	mvn.w	r2, #16
 8002adc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2220      	movs	r2, #32
 8002ae8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2200      	movs	r2, #0
 8002af0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2200      	movs	r2, #0
 8002b00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e030      	b.n	8002b6a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b08:	f7fe fda4 	bl	8001654 <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	68ba      	ldr	r2, [r7, #8]
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d302      	bcc.n	8002b1e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d11d      	bne.n	8002b5a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	695b      	ldr	r3, [r3, #20]
 8002b24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b28:	2b40      	cmp	r3, #64	@ 0x40
 8002b2a:	d016      	beq.n	8002b5a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2220      	movs	r2, #32
 8002b36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b46:	f043 0220 	orr.w	r2, r3, #32
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2200      	movs	r2, #0
 8002b52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e007      	b.n	8002b6a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	695b      	ldr	r3, [r3, #20]
 8002b60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b64:	2b40      	cmp	r3, #64	@ 0x40
 8002b66:	d1ae      	bne.n	8002ac6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b68:	2300      	movs	r3, #0
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3710      	adds	r7, #16
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}

08002b72 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002b72:	b480      	push	{r7}
 8002b74:	b083      	sub	sp, #12
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	695b      	ldr	r3, [r3, #20]
 8002b80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b88:	d11b      	bne.n	8002bc2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002b92:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2200      	movs	r2, #0
 8002b98:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2220      	movs	r2, #32
 8002b9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bae:	f043 0204 	orr.w	r2, r3, #4
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e000      	b.n	8002bc4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002bc2:	2300      	movs	r3, #0
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	370c      	adds	r7, #12
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr

08002bd0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b086      	sub	sp, #24
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d101      	bne.n	8002be2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e267      	b.n	80030b2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0301 	and.w	r3, r3, #1
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d075      	beq.n	8002cda <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002bee:	4b88      	ldr	r3, [pc, #544]	@ (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	f003 030c 	and.w	r3, r3, #12
 8002bf6:	2b04      	cmp	r3, #4
 8002bf8:	d00c      	beq.n	8002c14 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bfa:	4b85      	ldr	r3, [pc, #532]	@ (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002c02:	2b08      	cmp	r3, #8
 8002c04:	d112      	bne.n	8002c2c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c06:	4b82      	ldr	r3, [pc, #520]	@ (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c0e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c12:	d10b      	bne.n	8002c2c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c14:	4b7e      	ldr	r3, [pc, #504]	@ (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d05b      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x108>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d157      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e242      	b.n	80030b2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c34:	d106      	bne.n	8002c44 <HAL_RCC_OscConfig+0x74>
 8002c36:	4b76      	ldr	r3, [pc, #472]	@ (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a75      	ldr	r2, [pc, #468]	@ (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002c3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c40:	6013      	str	r3, [r2, #0]
 8002c42:	e01d      	b.n	8002c80 <HAL_RCC_OscConfig+0xb0>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c4c:	d10c      	bne.n	8002c68 <HAL_RCC_OscConfig+0x98>
 8002c4e:	4b70      	ldr	r3, [pc, #448]	@ (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a6f      	ldr	r2, [pc, #444]	@ (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002c54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c58:	6013      	str	r3, [r2, #0]
 8002c5a:	4b6d      	ldr	r3, [pc, #436]	@ (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a6c      	ldr	r2, [pc, #432]	@ (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002c60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c64:	6013      	str	r3, [r2, #0]
 8002c66:	e00b      	b.n	8002c80 <HAL_RCC_OscConfig+0xb0>
 8002c68:	4b69      	ldr	r3, [pc, #420]	@ (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a68      	ldr	r2, [pc, #416]	@ (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002c6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c72:	6013      	str	r3, [r2, #0]
 8002c74:	4b66      	ldr	r3, [pc, #408]	@ (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a65      	ldr	r2, [pc, #404]	@ (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002c7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d013      	beq.n	8002cb0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c88:	f7fe fce4 	bl	8001654 <HAL_GetTick>
 8002c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c8e:	e008      	b.n	8002ca2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c90:	f7fe fce0 	bl	8001654 <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	2b64      	cmp	r3, #100	@ 0x64
 8002c9c:	d901      	bls.n	8002ca2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e207      	b.n	80030b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ca2:	4b5b      	ldr	r3, [pc, #364]	@ (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d0f0      	beq.n	8002c90 <HAL_RCC_OscConfig+0xc0>
 8002cae:	e014      	b.n	8002cda <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb0:	f7fe fcd0 	bl	8001654 <HAL_GetTick>
 8002cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cb6:	e008      	b.n	8002cca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cb8:	f7fe fccc 	bl	8001654 <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	2b64      	cmp	r3, #100	@ 0x64
 8002cc4:	d901      	bls.n	8002cca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e1f3      	b.n	80030b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cca:	4b51      	ldr	r3, [pc, #324]	@ (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d1f0      	bne.n	8002cb8 <HAL_RCC_OscConfig+0xe8>
 8002cd6:	e000      	b.n	8002cda <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0302 	and.w	r3, r3, #2
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d063      	beq.n	8002dae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002ce6:	4b4a      	ldr	r3, [pc, #296]	@ (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	f003 030c 	and.w	r3, r3, #12
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d00b      	beq.n	8002d0a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cf2:	4b47      	ldr	r3, [pc, #284]	@ (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002cfa:	2b08      	cmp	r3, #8
 8002cfc:	d11c      	bne.n	8002d38 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cfe:	4b44      	ldr	r3, [pc, #272]	@ (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d116      	bne.n	8002d38 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d0a:	4b41      	ldr	r3, [pc, #260]	@ (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0302 	and.w	r3, r3, #2
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d005      	beq.n	8002d22 <HAL_RCC_OscConfig+0x152>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d001      	beq.n	8002d22 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e1c7      	b.n	80030b2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d22:	4b3b      	ldr	r3, [pc, #236]	@ (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	691b      	ldr	r3, [r3, #16]
 8002d2e:	00db      	lsls	r3, r3, #3
 8002d30:	4937      	ldr	r1, [pc, #220]	@ (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002d32:	4313      	orrs	r3, r2
 8002d34:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d36:	e03a      	b.n	8002dae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d020      	beq.n	8002d82 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d40:	4b34      	ldr	r3, [pc, #208]	@ (8002e14 <HAL_RCC_OscConfig+0x244>)
 8002d42:	2201      	movs	r2, #1
 8002d44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d46:	f7fe fc85 	bl	8001654 <HAL_GetTick>
 8002d4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d4c:	e008      	b.n	8002d60 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d4e:	f7fe fc81 	bl	8001654 <HAL_GetTick>
 8002d52:	4602      	mov	r2, r0
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	d901      	bls.n	8002d60 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	e1a8      	b.n	80030b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d60:	4b2b      	ldr	r3, [pc, #172]	@ (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0302 	and.w	r3, r3, #2
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d0f0      	beq.n	8002d4e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d6c:	4b28      	ldr	r3, [pc, #160]	@ (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	691b      	ldr	r3, [r3, #16]
 8002d78:	00db      	lsls	r3, r3, #3
 8002d7a:	4925      	ldr	r1, [pc, #148]	@ (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	600b      	str	r3, [r1, #0]
 8002d80:	e015      	b.n	8002dae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d82:	4b24      	ldr	r3, [pc, #144]	@ (8002e14 <HAL_RCC_OscConfig+0x244>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d88:	f7fe fc64 	bl	8001654 <HAL_GetTick>
 8002d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d8e:	e008      	b.n	8002da2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d90:	f7fe fc60 	bl	8001654 <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d901      	bls.n	8002da2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e187      	b.n	80030b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002da2:	4b1b      	ldr	r3, [pc, #108]	@ (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0302 	and.w	r3, r3, #2
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d1f0      	bne.n	8002d90 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0308 	and.w	r3, r3, #8
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d036      	beq.n	8002e28 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	695b      	ldr	r3, [r3, #20]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d016      	beq.n	8002df0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dc2:	4b15      	ldr	r3, [pc, #84]	@ (8002e18 <HAL_RCC_OscConfig+0x248>)
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dc8:	f7fe fc44 	bl	8001654 <HAL_GetTick>
 8002dcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dce:	e008      	b.n	8002de2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dd0:	f7fe fc40 	bl	8001654 <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	2b02      	cmp	r3, #2
 8002ddc:	d901      	bls.n	8002de2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e167      	b.n	80030b2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002de2:	4b0b      	ldr	r3, [pc, #44]	@ (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002de4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002de6:	f003 0302 	and.w	r3, r3, #2
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d0f0      	beq.n	8002dd0 <HAL_RCC_OscConfig+0x200>
 8002dee:	e01b      	b.n	8002e28 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002df0:	4b09      	ldr	r3, [pc, #36]	@ (8002e18 <HAL_RCC_OscConfig+0x248>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002df6:	f7fe fc2d 	bl	8001654 <HAL_GetTick>
 8002dfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dfc:	e00e      	b.n	8002e1c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dfe:	f7fe fc29 	bl	8001654 <HAL_GetTick>
 8002e02:	4602      	mov	r2, r0
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	d907      	bls.n	8002e1c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	e150      	b.n	80030b2 <HAL_RCC_OscConfig+0x4e2>
 8002e10:	40023800 	.word	0x40023800
 8002e14:	42470000 	.word	0x42470000
 8002e18:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e1c:	4b88      	ldr	r3, [pc, #544]	@ (8003040 <HAL_RCC_OscConfig+0x470>)
 8002e1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e20:	f003 0302 	and.w	r3, r3, #2
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d1ea      	bne.n	8002dfe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 0304 	and.w	r3, r3, #4
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	f000 8097 	beq.w	8002f64 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e36:	2300      	movs	r3, #0
 8002e38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e3a:	4b81      	ldr	r3, [pc, #516]	@ (8003040 <HAL_RCC_OscConfig+0x470>)
 8002e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d10f      	bne.n	8002e66 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e46:	2300      	movs	r3, #0
 8002e48:	60bb      	str	r3, [r7, #8]
 8002e4a:	4b7d      	ldr	r3, [pc, #500]	@ (8003040 <HAL_RCC_OscConfig+0x470>)
 8002e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e4e:	4a7c      	ldr	r2, [pc, #496]	@ (8003040 <HAL_RCC_OscConfig+0x470>)
 8002e50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e54:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e56:	4b7a      	ldr	r3, [pc, #488]	@ (8003040 <HAL_RCC_OscConfig+0x470>)
 8002e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e5e:	60bb      	str	r3, [r7, #8]
 8002e60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e62:	2301      	movs	r3, #1
 8002e64:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e66:	4b77      	ldr	r3, [pc, #476]	@ (8003044 <HAL_RCC_OscConfig+0x474>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d118      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e72:	4b74      	ldr	r3, [pc, #464]	@ (8003044 <HAL_RCC_OscConfig+0x474>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a73      	ldr	r2, [pc, #460]	@ (8003044 <HAL_RCC_OscConfig+0x474>)
 8002e78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e7e:	f7fe fbe9 	bl	8001654 <HAL_GetTick>
 8002e82:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e84:	e008      	b.n	8002e98 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e86:	f7fe fbe5 	bl	8001654 <HAL_GetTick>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d901      	bls.n	8002e98 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002e94:	2303      	movs	r3, #3
 8002e96:	e10c      	b.n	80030b2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e98:	4b6a      	ldr	r3, [pc, #424]	@ (8003044 <HAL_RCC_OscConfig+0x474>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d0f0      	beq.n	8002e86 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d106      	bne.n	8002eba <HAL_RCC_OscConfig+0x2ea>
 8002eac:	4b64      	ldr	r3, [pc, #400]	@ (8003040 <HAL_RCC_OscConfig+0x470>)
 8002eae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eb0:	4a63      	ldr	r2, [pc, #396]	@ (8003040 <HAL_RCC_OscConfig+0x470>)
 8002eb2:	f043 0301 	orr.w	r3, r3, #1
 8002eb6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002eb8:	e01c      	b.n	8002ef4 <HAL_RCC_OscConfig+0x324>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	2b05      	cmp	r3, #5
 8002ec0:	d10c      	bne.n	8002edc <HAL_RCC_OscConfig+0x30c>
 8002ec2:	4b5f      	ldr	r3, [pc, #380]	@ (8003040 <HAL_RCC_OscConfig+0x470>)
 8002ec4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ec6:	4a5e      	ldr	r2, [pc, #376]	@ (8003040 <HAL_RCC_OscConfig+0x470>)
 8002ec8:	f043 0304 	orr.w	r3, r3, #4
 8002ecc:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ece:	4b5c      	ldr	r3, [pc, #368]	@ (8003040 <HAL_RCC_OscConfig+0x470>)
 8002ed0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ed2:	4a5b      	ldr	r2, [pc, #364]	@ (8003040 <HAL_RCC_OscConfig+0x470>)
 8002ed4:	f043 0301 	orr.w	r3, r3, #1
 8002ed8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002eda:	e00b      	b.n	8002ef4 <HAL_RCC_OscConfig+0x324>
 8002edc:	4b58      	ldr	r3, [pc, #352]	@ (8003040 <HAL_RCC_OscConfig+0x470>)
 8002ede:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ee0:	4a57      	ldr	r2, [pc, #348]	@ (8003040 <HAL_RCC_OscConfig+0x470>)
 8002ee2:	f023 0301 	bic.w	r3, r3, #1
 8002ee6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ee8:	4b55      	ldr	r3, [pc, #340]	@ (8003040 <HAL_RCC_OscConfig+0x470>)
 8002eea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eec:	4a54      	ldr	r2, [pc, #336]	@ (8003040 <HAL_RCC_OscConfig+0x470>)
 8002eee:	f023 0304 	bic.w	r3, r3, #4
 8002ef2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d015      	beq.n	8002f28 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002efc:	f7fe fbaa 	bl	8001654 <HAL_GetTick>
 8002f00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f02:	e00a      	b.n	8002f1a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f04:	f7fe fba6 	bl	8001654 <HAL_GetTick>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d901      	bls.n	8002f1a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e0cb      	b.n	80030b2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f1a:	4b49      	ldr	r3, [pc, #292]	@ (8003040 <HAL_RCC_OscConfig+0x470>)
 8002f1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f1e:	f003 0302 	and.w	r3, r3, #2
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d0ee      	beq.n	8002f04 <HAL_RCC_OscConfig+0x334>
 8002f26:	e014      	b.n	8002f52 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f28:	f7fe fb94 	bl	8001654 <HAL_GetTick>
 8002f2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f2e:	e00a      	b.n	8002f46 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f30:	f7fe fb90 	bl	8001654 <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d901      	bls.n	8002f46 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	e0b5      	b.n	80030b2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f46:	4b3e      	ldr	r3, [pc, #248]	@ (8003040 <HAL_RCC_OscConfig+0x470>)
 8002f48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f4a:	f003 0302 	and.w	r3, r3, #2
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d1ee      	bne.n	8002f30 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f52:	7dfb      	ldrb	r3, [r7, #23]
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d105      	bne.n	8002f64 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f58:	4b39      	ldr	r3, [pc, #228]	@ (8003040 <HAL_RCC_OscConfig+0x470>)
 8002f5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f5c:	4a38      	ldr	r2, [pc, #224]	@ (8003040 <HAL_RCC_OscConfig+0x470>)
 8002f5e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f62:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	699b      	ldr	r3, [r3, #24]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	f000 80a1 	beq.w	80030b0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f6e:	4b34      	ldr	r3, [pc, #208]	@ (8003040 <HAL_RCC_OscConfig+0x470>)
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	f003 030c 	and.w	r3, r3, #12
 8002f76:	2b08      	cmp	r3, #8
 8002f78:	d05c      	beq.n	8003034 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	699b      	ldr	r3, [r3, #24]
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	d141      	bne.n	8003006 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f82:	4b31      	ldr	r3, [pc, #196]	@ (8003048 <HAL_RCC_OscConfig+0x478>)
 8002f84:	2200      	movs	r2, #0
 8002f86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f88:	f7fe fb64 	bl	8001654 <HAL_GetTick>
 8002f8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f8e:	e008      	b.n	8002fa2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f90:	f7fe fb60 	bl	8001654 <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	2b02      	cmp	r3, #2
 8002f9c:	d901      	bls.n	8002fa2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e087      	b.n	80030b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fa2:	4b27      	ldr	r3, [pc, #156]	@ (8003040 <HAL_RCC_OscConfig+0x470>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d1f0      	bne.n	8002f90 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	69da      	ldr	r2, [r3, #28]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6a1b      	ldr	r3, [r3, #32]
 8002fb6:	431a      	orrs	r2, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fbc:	019b      	lsls	r3, r3, #6
 8002fbe:	431a      	orrs	r2, r3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fc4:	085b      	lsrs	r3, r3, #1
 8002fc6:	3b01      	subs	r3, #1
 8002fc8:	041b      	lsls	r3, r3, #16
 8002fca:	431a      	orrs	r2, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fd0:	061b      	lsls	r3, r3, #24
 8002fd2:	491b      	ldr	r1, [pc, #108]	@ (8003040 <HAL_RCC_OscConfig+0x470>)
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fd8:	4b1b      	ldr	r3, [pc, #108]	@ (8003048 <HAL_RCC_OscConfig+0x478>)
 8002fda:	2201      	movs	r2, #1
 8002fdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fde:	f7fe fb39 	bl	8001654 <HAL_GetTick>
 8002fe2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fe4:	e008      	b.n	8002ff8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fe6:	f7fe fb35 	bl	8001654 <HAL_GetTick>
 8002fea:	4602      	mov	r2, r0
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	1ad3      	subs	r3, r2, r3
 8002ff0:	2b02      	cmp	r3, #2
 8002ff2:	d901      	bls.n	8002ff8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002ff4:	2303      	movs	r3, #3
 8002ff6:	e05c      	b.n	80030b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ff8:	4b11      	ldr	r3, [pc, #68]	@ (8003040 <HAL_RCC_OscConfig+0x470>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003000:	2b00      	cmp	r3, #0
 8003002:	d0f0      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x416>
 8003004:	e054      	b.n	80030b0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003006:	4b10      	ldr	r3, [pc, #64]	@ (8003048 <HAL_RCC_OscConfig+0x478>)
 8003008:	2200      	movs	r2, #0
 800300a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800300c:	f7fe fb22 	bl	8001654 <HAL_GetTick>
 8003010:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003012:	e008      	b.n	8003026 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003014:	f7fe fb1e 	bl	8001654 <HAL_GetTick>
 8003018:	4602      	mov	r2, r0
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	2b02      	cmp	r3, #2
 8003020:	d901      	bls.n	8003026 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003022:	2303      	movs	r3, #3
 8003024:	e045      	b.n	80030b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003026:	4b06      	ldr	r3, [pc, #24]	@ (8003040 <HAL_RCC_OscConfig+0x470>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d1f0      	bne.n	8003014 <HAL_RCC_OscConfig+0x444>
 8003032:	e03d      	b.n	80030b0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	699b      	ldr	r3, [r3, #24]
 8003038:	2b01      	cmp	r3, #1
 800303a:	d107      	bne.n	800304c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e038      	b.n	80030b2 <HAL_RCC_OscConfig+0x4e2>
 8003040:	40023800 	.word	0x40023800
 8003044:	40007000 	.word	0x40007000
 8003048:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800304c:	4b1b      	ldr	r3, [pc, #108]	@ (80030bc <HAL_RCC_OscConfig+0x4ec>)
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	699b      	ldr	r3, [r3, #24]
 8003056:	2b01      	cmp	r3, #1
 8003058:	d028      	beq.n	80030ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003064:	429a      	cmp	r2, r3
 8003066:	d121      	bne.n	80030ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003072:	429a      	cmp	r2, r3
 8003074:	d11a      	bne.n	80030ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003076:	68fa      	ldr	r2, [r7, #12]
 8003078:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800307c:	4013      	ands	r3, r2
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003082:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003084:	4293      	cmp	r3, r2
 8003086:	d111      	bne.n	80030ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003092:	085b      	lsrs	r3, r3, #1
 8003094:	3b01      	subs	r3, #1
 8003096:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003098:	429a      	cmp	r2, r3
 800309a:	d107      	bne.n	80030ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d001      	beq.n	80030b0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e000      	b.n	80030b2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80030b0:	2300      	movs	r3, #0
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3718      	adds	r7, #24
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop
 80030bc:	40023800 	.word	0x40023800

080030c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b084      	sub	sp, #16
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d101      	bne.n	80030d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e0cc      	b.n	800326e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030d4:	4b68      	ldr	r3, [pc, #416]	@ (8003278 <HAL_RCC_ClockConfig+0x1b8>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0307 	and.w	r3, r3, #7
 80030dc:	683a      	ldr	r2, [r7, #0]
 80030de:	429a      	cmp	r2, r3
 80030e0:	d90c      	bls.n	80030fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030e2:	4b65      	ldr	r3, [pc, #404]	@ (8003278 <HAL_RCC_ClockConfig+0x1b8>)
 80030e4:	683a      	ldr	r2, [r7, #0]
 80030e6:	b2d2      	uxtb	r2, r2
 80030e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ea:	4b63      	ldr	r3, [pc, #396]	@ (8003278 <HAL_RCC_ClockConfig+0x1b8>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0307 	and.w	r3, r3, #7
 80030f2:	683a      	ldr	r2, [r7, #0]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d001      	beq.n	80030fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e0b8      	b.n	800326e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 0302 	and.w	r3, r3, #2
 8003104:	2b00      	cmp	r3, #0
 8003106:	d020      	beq.n	800314a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 0304 	and.w	r3, r3, #4
 8003110:	2b00      	cmp	r3, #0
 8003112:	d005      	beq.n	8003120 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003114:	4b59      	ldr	r3, [pc, #356]	@ (800327c <HAL_RCC_ClockConfig+0x1bc>)
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	4a58      	ldr	r2, [pc, #352]	@ (800327c <HAL_RCC_ClockConfig+0x1bc>)
 800311a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800311e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0308 	and.w	r3, r3, #8
 8003128:	2b00      	cmp	r3, #0
 800312a:	d005      	beq.n	8003138 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800312c:	4b53      	ldr	r3, [pc, #332]	@ (800327c <HAL_RCC_ClockConfig+0x1bc>)
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	4a52      	ldr	r2, [pc, #328]	@ (800327c <HAL_RCC_ClockConfig+0x1bc>)
 8003132:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003136:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003138:	4b50      	ldr	r3, [pc, #320]	@ (800327c <HAL_RCC_ClockConfig+0x1bc>)
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	494d      	ldr	r1, [pc, #308]	@ (800327c <HAL_RCC_ClockConfig+0x1bc>)
 8003146:	4313      	orrs	r3, r2
 8003148:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 0301 	and.w	r3, r3, #1
 8003152:	2b00      	cmp	r3, #0
 8003154:	d044      	beq.n	80031e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	2b01      	cmp	r3, #1
 800315c:	d107      	bne.n	800316e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800315e:	4b47      	ldr	r3, [pc, #284]	@ (800327c <HAL_RCC_ClockConfig+0x1bc>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d119      	bne.n	800319e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e07f      	b.n	800326e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	2b02      	cmp	r3, #2
 8003174:	d003      	beq.n	800317e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800317a:	2b03      	cmp	r3, #3
 800317c:	d107      	bne.n	800318e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800317e:	4b3f      	ldr	r3, [pc, #252]	@ (800327c <HAL_RCC_ClockConfig+0x1bc>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d109      	bne.n	800319e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e06f      	b.n	800326e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800318e:	4b3b      	ldr	r3, [pc, #236]	@ (800327c <HAL_RCC_ClockConfig+0x1bc>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0302 	and.w	r3, r3, #2
 8003196:	2b00      	cmp	r3, #0
 8003198:	d101      	bne.n	800319e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e067      	b.n	800326e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800319e:	4b37      	ldr	r3, [pc, #220]	@ (800327c <HAL_RCC_ClockConfig+0x1bc>)
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	f023 0203 	bic.w	r2, r3, #3
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	4934      	ldr	r1, [pc, #208]	@ (800327c <HAL_RCC_ClockConfig+0x1bc>)
 80031ac:	4313      	orrs	r3, r2
 80031ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031b0:	f7fe fa50 	bl	8001654 <HAL_GetTick>
 80031b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031b6:	e00a      	b.n	80031ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031b8:	f7fe fa4c 	bl	8001654 <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d901      	bls.n	80031ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e04f      	b.n	800326e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ce:	4b2b      	ldr	r3, [pc, #172]	@ (800327c <HAL_RCC_ClockConfig+0x1bc>)
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	f003 020c 	and.w	r2, r3, #12
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	429a      	cmp	r2, r3
 80031de:	d1eb      	bne.n	80031b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031e0:	4b25      	ldr	r3, [pc, #148]	@ (8003278 <HAL_RCC_ClockConfig+0x1b8>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 0307 	and.w	r3, r3, #7
 80031e8:	683a      	ldr	r2, [r7, #0]
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d20c      	bcs.n	8003208 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ee:	4b22      	ldr	r3, [pc, #136]	@ (8003278 <HAL_RCC_ClockConfig+0x1b8>)
 80031f0:	683a      	ldr	r2, [r7, #0]
 80031f2:	b2d2      	uxtb	r2, r2
 80031f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031f6:	4b20      	ldr	r3, [pc, #128]	@ (8003278 <HAL_RCC_ClockConfig+0x1b8>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0307 	and.w	r3, r3, #7
 80031fe:	683a      	ldr	r2, [r7, #0]
 8003200:	429a      	cmp	r2, r3
 8003202:	d001      	beq.n	8003208 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e032      	b.n	800326e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0304 	and.w	r3, r3, #4
 8003210:	2b00      	cmp	r3, #0
 8003212:	d008      	beq.n	8003226 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003214:	4b19      	ldr	r3, [pc, #100]	@ (800327c <HAL_RCC_ClockConfig+0x1bc>)
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	4916      	ldr	r1, [pc, #88]	@ (800327c <HAL_RCC_ClockConfig+0x1bc>)
 8003222:	4313      	orrs	r3, r2
 8003224:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0308 	and.w	r3, r3, #8
 800322e:	2b00      	cmp	r3, #0
 8003230:	d009      	beq.n	8003246 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003232:	4b12      	ldr	r3, [pc, #72]	@ (800327c <HAL_RCC_ClockConfig+0x1bc>)
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	691b      	ldr	r3, [r3, #16]
 800323e:	00db      	lsls	r3, r3, #3
 8003240:	490e      	ldr	r1, [pc, #56]	@ (800327c <HAL_RCC_ClockConfig+0x1bc>)
 8003242:	4313      	orrs	r3, r2
 8003244:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003246:	f000 f821 	bl	800328c <HAL_RCC_GetSysClockFreq>
 800324a:	4602      	mov	r2, r0
 800324c:	4b0b      	ldr	r3, [pc, #44]	@ (800327c <HAL_RCC_ClockConfig+0x1bc>)
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	091b      	lsrs	r3, r3, #4
 8003252:	f003 030f 	and.w	r3, r3, #15
 8003256:	490a      	ldr	r1, [pc, #40]	@ (8003280 <HAL_RCC_ClockConfig+0x1c0>)
 8003258:	5ccb      	ldrb	r3, [r1, r3]
 800325a:	fa22 f303 	lsr.w	r3, r2, r3
 800325e:	4a09      	ldr	r2, [pc, #36]	@ (8003284 <HAL_RCC_ClockConfig+0x1c4>)
 8003260:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003262:	4b09      	ldr	r3, [pc, #36]	@ (8003288 <HAL_RCC_ClockConfig+0x1c8>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4618      	mov	r0, r3
 8003268:	f7fe f9b0 	bl	80015cc <HAL_InitTick>

  return HAL_OK;
 800326c:	2300      	movs	r3, #0
}
 800326e:	4618      	mov	r0, r3
 8003270:	3710      	adds	r7, #16
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	40023c00 	.word	0x40023c00
 800327c:	40023800 	.word	0x40023800
 8003280:	080034c8 	.word	0x080034c8
 8003284:	20000000 	.word	0x20000000
 8003288:	20000004 	.word	0x20000004

0800328c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800328c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003290:	b090      	sub	sp, #64	@ 0x40
 8003292:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003294:	2300      	movs	r3, #0
 8003296:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003298:	2300      	movs	r3, #0
 800329a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800329c:	2300      	movs	r3, #0
 800329e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80032a0:	2300      	movs	r3, #0
 80032a2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032a4:	4b59      	ldr	r3, [pc, #356]	@ (800340c <HAL_RCC_GetSysClockFreq+0x180>)
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	f003 030c 	and.w	r3, r3, #12
 80032ac:	2b08      	cmp	r3, #8
 80032ae:	d00d      	beq.n	80032cc <HAL_RCC_GetSysClockFreq+0x40>
 80032b0:	2b08      	cmp	r3, #8
 80032b2:	f200 80a1 	bhi.w	80033f8 <HAL_RCC_GetSysClockFreq+0x16c>
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d002      	beq.n	80032c0 <HAL_RCC_GetSysClockFreq+0x34>
 80032ba:	2b04      	cmp	r3, #4
 80032bc:	d003      	beq.n	80032c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80032be:	e09b      	b.n	80033f8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032c0:	4b53      	ldr	r3, [pc, #332]	@ (8003410 <HAL_RCC_GetSysClockFreq+0x184>)
 80032c2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80032c4:	e09b      	b.n	80033fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80032c6:	4b53      	ldr	r3, [pc, #332]	@ (8003414 <HAL_RCC_GetSysClockFreq+0x188>)
 80032c8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80032ca:	e098      	b.n	80033fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032cc:	4b4f      	ldr	r3, [pc, #316]	@ (800340c <HAL_RCC_GetSysClockFreq+0x180>)
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80032d4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032d6:	4b4d      	ldr	r3, [pc, #308]	@ (800340c <HAL_RCC_GetSysClockFreq+0x180>)
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d028      	beq.n	8003334 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032e2:	4b4a      	ldr	r3, [pc, #296]	@ (800340c <HAL_RCC_GetSysClockFreq+0x180>)
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	099b      	lsrs	r3, r3, #6
 80032e8:	2200      	movs	r2, #0
 80032ea:	623b      	str	r3, [r7, #32]
 80032ec:	627a      	str	r2, [r7, #36]	@ 0x24
 80032ee:	6a3b      	ldr	r3, [r7, #32]
 80032f0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80032f4:	2100      	movs	r1, #0
 80032f6:	4b47      	ldr	r3, [pc, #284]	@ (8003414 <HAL_RCC_GetSysClockFreq+0x188>)
 80032f8:	fb03 f201 	mul.w	r2, r3, r1
 80032fc:	2300      	movs	r3, #0
 80032fe:	fb00 f303 	mul.w	r3, r0, r3
 8003302:	4413      	add	r3, r2
 8003304:	4a43      	ldr	r2, [pc, #268]	@ (8003414 <HAL_RCC_GetSysClockFreq+0x188>)
 8003306:	fba0 1202 	umull	r1, r2, r0, r2
 800330a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800330c:	460a      	mov	r2, r1
 800330e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003310:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003312:	4413      	add	r3, r2
 8003314:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003316:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003318:	2200      	movs	r2, #0
 800331a:	61bb      	str	r3, [r7, #24]
 800331c:	61fa      	str	r2, [r7, #28]
 800331e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003322:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003326:	f7fc ffa7 	bl	8000278 <__aeabi_uldivmod>
 800332a:	4602      	mov	r2, r0
 800332c:	460b      	mov	r3, r1
 800332e:	4613      	mov	r3, r2
 8003330:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003332:	e053      	b.n	80033dc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003334:	4b35      	ldr	r3, [pc, #212]	@ (800340c <HAL_RCC_GetSysClockFreq+0x180>)
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	099b      	lsrs	r3, r3, #6
 800333a:	2200      	movs	r2, #0
 800333c:	613b      	str	r3, [r7, #16]
 800333e:	617a      	str	r2, [r7, #20]
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003346:	f04f 0b00 	mov.w	fp, #0
 800334a:	4652      	mov	r2, sl
 800334c:	465b      	mov	r3, fp
 800334e:	f04f 0000 	mov.w	r0, #0
 8003352:	f04f 0100 	mov.w	r1, #0
 8003356:	0159      	lsls	r1, r3, #5
 8003358:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800335c:	0150      	lsls	r0, r2, #5
 800335e:	4602      	mov	r2, r0
 8003360:	460b      	mov	r3, r1
 8003362:	ebb2 080a 	subs.w	r8, r2, sl
 8003366:	eb63 090b 	sbc.w	r9, r3, fp
 800336a:	f04f 0200 	mov.w	r2, #0
 800336e:	f04f 0300 	mov.w	r3, #0
 8003372:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003376:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800337a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800337e:	ebb2 0408 	subs.w	r4, r2, r8
 8003382:	eb63 0509 	sbc.w	r5, r3, r9
 8003386:	f04f 0200 	mov.w	r2, #0
 800338a:	f04f 0300 	mov.w	r3, #0
 800338e:	00eb      	lsls	r3, r5, #3
 8003390:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003394:	00e2      	lsls	r2, r4, #3
 8003396:	4614      	mov	r4, r2
 8003398:	461d      	mov	r5, r3
 800339a:	eb14 030a 	adds.w	r3, r4, sl
 800339e:	603b      	str	r3, [r7, #0]
 80033a0:	eb45 030b 	adc.w	r3, r5, fp
 80033a4:	607b      	str	r3, [r7, #4]
 80033a6:	f04f 0200 	mov.w	r2, #0
 80033aa:	f04f 0300 	mov.w	r3, #0
 80033ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80033b2:	4629      	mov	r1, r5
 80033b4:	028b      	lsls	r3, r1, #10
 80033b6:	4621      	mov	r1, r4
 80033b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80033bc:	4621      	mov	r1, r4
 80033be:	028a      	lsls	r2, r1, #10
 80033c0:	4610      	mov	r0, r2
 80033c2:	4619      	mov	r1, r3
 80033c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033c6:	2200      	movs	r2, #0
 80033c8:	60bb      	str	r3, [r7, #8]
 80033ca:	60fa      	str	r2, [r7, #12]
 80033cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80033d0:	f7fc ff52 	bl	8000278 <__aeabi_uldivmod>
 80033d4:	4602      	mov	r2, r0
 80033d6:	460b      	mov	r3, r1
 80033d8:	4613      	mov	r3, r2
 80033da:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80033dc:	4b0b      	ldr	r3, [pc, #44]	@ (800340c <HAL_RCC_GetSysClockFreq+0x180>)
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	0c1b      	lsrs	r3, r3, #16
 80033e2:	f003 0303 	and.w	r3, r3, #3
 80033e6:	3301      	adds	r3, #1
 80033e8:	005b      	lsls	r3, r3, #1
 80033ea:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80033ec:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80033ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80033f4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80033f6:	e002      	b.n	80033fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80033f8:	4b05      	ldr	r3, [pc, #20]	@ (8003410 <HAL_RCC_GetSysClockFreq+0x184>)
 80033fa:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80033fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003400:	4618      	mov	r0, r3
 8003402:	3740      	adds	r7, #64	@ 0x40
 8003404:	46bd      	mov	sp, r7
 8003406:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800340a:	bf00      	nop
 800340c:	40023800 	.word	0x40023800
 8003410:	00f42400 	.word	0x00f42400
 8003414:	017d7840 	.word	0x017d7840

08003418 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003418:	b480      	push	{r7}
 800341a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800341c:	4b03      	ldr	r3, [pc, #12]	@ (800342c <HAL_RCC_GetHCLKFreq+0x14>)
 800341e:	681b      	ldr	r3, [r3, #0]
}
 8003420:	4618      	mov	r0, r3
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr
 800342a:	bf00      	nop
 800342c:	20000000 	.word	0x20000000

08003430 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003434:	f7ff fff0 	bl	8003418 <HAL_RCC_GetHCLKFreq>
 8003438:	4602      	mov	r2, r0
 800343a:	4b05      	ldr	r3, [pc, #20]	@ (8003450 <HAL_RCC_GetPCLK1Freq+0x20>)
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	0a9b      	lsrs	r3, r3, #10
 8003440:	f003 0307 	and.w	r3, r3, #7
 8003444:	4903      	ldr	r1, [pc, #12]	@ (8003454 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003446:	5ccb      	ldrb	r3, [r1, r3]
 8003448:	fa22 f303 	lsr.w	r3, r2, r3
}
 800344c:	4618      	mov	r0, r3
 800344e:	bd80      	pop	{r7, pc}
 8003450:	40023800 	.word	0x40023800
 8003454:	080034d8 	.word	0x080034d8

08003458 <memset>:
 8003458:	4402      	add	r2, r0
 800345a:	4603      	mov	r3, r0
 800345c:	4293      	cmp	r3, r2
 800345e:	d100      	bne.n	8003462 <memset+0xa>
 8003460:	4770      	bx	lr
 8003462:	f803 1b01 	strb.w	r1, [r3], #1
 8003466:	e7f9      	b.n	800345c <memset+0x4>

08003468 <__libc_init_array>:
 8003468:	b570      	push	{r4, r5, r6, lr}
 800346a:	4d0d      	ldr	r5, [pc, #52]	@ (80034a0 <__libc_init_array+0x38>)
 800346c:	4c0d      	ldr	r4, [pc, #52]	@ (80034a4 <__libc_init_array+0x3c>)
 800346e:	1b64      	subs	r4, r4, r5
 8003470:	10a4      	asrs	r4, r4, #2
 8003472:	2600      	movs	r6, #0
 8003474:	42a6      	cmp	r6, r4
 8003476:	d109      	bne.n	800348c <__libc_init_array+0x24>
 8003478:	4d0b      	ldr	r5, [pc, #44]	@ (80034a8 <__libc_init_array+0x40>)
 800347a:	4c0c      	ldr	r4, [pc, #48]	@ (80034ac <__libc_init_array+0x44>)
 800347c:	f000 f818 	bl	80034b0 <_init>
 8003480:	1b64      	subs	r4, r4, r5
 8003482:	10a4      	asrs	r4, r4, #2
 8003484:	2600      	movs	r6, #0
 8003486:	42a6      	cmp	r6, r4
 8003488:	d105      	bne.n	8003496 <__libc_init_array+0x2e>
 800348a:	bd70      	pop	{r4, r5, r6, pc}
 800348c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003490:	4798      	blx	r3
 8003492:	3601      	adds	r6, #1
 8003494:	e7ee      	b.n	8003474 <__libc_init_array+0xc>
 8003496:	f855 3b04 	ldr.w	r3, [r5], #4
 800349a:	4798      	blx	r3
 800349c:	3601      	adds	r6, #1
 800349e:	e7f2      	b.n	8003486 <__libc_init_array+0x1e>
 80034a0:	080034e8 	.word	0x080034e8
 80034a4:	080034e8 	.word	0x080034e8
 80034a8:	080034e8 	.word	0x080034e8
 80034ac:	080034ec 	.word	0x080034ec

080034b0 <_init>:
 80034b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034b2:	bf00      	nop
 80034b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034b6:	bc08      	pop	{r3}
 80034b8:	469e      	mov	lr, r3
 80034ba:	4770      	bx	lr

080034bc <_fini>:
 80034bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034be:	bf00      	nop
 80034c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034c2:	bc08      	pop	{r3}
 80034c4:	469e      	mov	lr, r3
 80034c6:	4770      	bx	lr
