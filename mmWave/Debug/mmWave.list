
mmWave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007cdc  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08007e74  08007e74  00008e74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ed4  08007ed4  0000910c  2**0
                  CONTENTS
  4 .ARM          00000008  08007ed4  08007ed4  00008ed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007edc  08007edc  0000910c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007edc  08007edc  00008edc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007ee0  08007ee0  00008ee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000010c  20000000  08007ee4  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c98  2000010c  08007ff0  0000910c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001da4  08007ff0  00009da4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000910c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001701f  00000000  00000000  0000913c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a52  00000000  00000000  0002015b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001340  00000000  00000000  00023bb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ec1  00000000  00000000  00024ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c4dd  00000000  00000000  00025db1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019957  00000000  00000000  0004228e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094313  00000000  00000000  0005bbe5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000efef8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f88  00000000  00000000  000eff3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  000f4ec4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000010c 	.word	0x2000010c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08007e5c 	.word	0x08007e5c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000110 	.word	0x20000110
 80001d4:	08007e5c 	.word	0x08007e5c

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <_Z12EventLoopCppv>:
#include "stm32f4xx_hal_tim_ex.h"

uint8_t buf[] = "MMWAVE tick\r\n";
GPIO_PinState detectState = GPIO_PIN_RESET;

void EventLoopCpp() {
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 80004cc:	4802      	ldr	r0, [pc, #8]	@ (80004d8 <_Z12EventLoopCppv+0x10>)
 80004ce:	f002 fcff 	bl	8002ed0 <HAL_TIM_Base_Start_IT>
	while (1)
 80004d2:	bf00      	nop
 80004d4:	e7fd      	b.n	80004d2 <_Z12EventLoopCppv+0xa>
 80004d6:	bf00      	nop
 80004d8:	2000012c 	.word	0x2000012c

080004dc <HAL_GPIO_EXTI_Callback>:
	{
	}
}
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	4603      	mov	r3, r0
 80004e4:	80fb      	strh	r3, [r7, #6]
	detectState = HAL_GPIO_ReadPin(MMW_OUT_GPIO_Port, MMW_OUT_Pin);
 80004e6:	2108      	movs	r1, #8
 80004e8:	4805      	ldr	r0, [pc, #20]	@ (8000500 <HAL_GPIO_EXTI_Callback+0x24>)
 80004ea:	f000 fdc9 	bl	8001080 <HAL_GPIO_ReadPin>
 80004ee:	4603      	mov	r3, r0
 80004f0:	461a      	mov	r2, r3
 80004f2:	4b04      	ldr	r3, [pc, #16]	@ (8000504 <HAL_GPIO_EXTI_Callback+0x28>)
 80004f4:	701a      	strb	r2, [r3, #0]
}
 80004f6:	bf00      	nop
 80004f8:	3708      	adds	r7, #8
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	40020400 	.word	0x40020400
 8000504:	20000128 	.word	0x20000128

08000508 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
	CDC_Transmit_FS(buf, sizeof(buf));
 8000510:	210e      	movs	r1, #14
 8000512:	4803      	ldr	r0, [pc, #12]	@ (8000520 <HAL_TIM_PeriodElapsedCallback+0x18>)
 8000514:	f007 f824 	bl	8007560 <CDC_Transmit_FS>
}
 8000518:	bf00      	nop
 800051a:	3708      	adds	r7, #8
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}
 8000520:	20000000 	.word	0x20000000

08000524 <EventLoopC>:


// Define all C function calls from main.c below
extern "C" {
void EventLoopC() {
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
	EventLoopCpp();
 8000528:	f7ff ffce 	bl	80004c8 <_Z12EventLoopCppv>
}
 800052c:	bf00      	nop
 800052e:	bd80      	pop	{r7, pc}

08000530 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b088      	sub	sp, #32
 8000534:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000536:	f107 030c 	add.w	r3, r7, #12
 800053a:	2200      	movs	r2, #0
 800053c:	601a      	str	r2, [r3, #0]
 800053e:	605a      	str	r2, [r3, #4]
 8000540:	609a      	str	r2, [r3, #8]
 8000542:	60da      	str	r2, [r3, #12]
 8000544:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000546:	2300      	movs	r3, #0
 8000548:	60bb      	str	r3, [r7, #8]
 800054a:	4b20      	ldr	r3, [pc, #128]	@ (80005cc <MX_GPIO_Init+0x9c>)
 800054c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800054e:	4a1f      	ldr	r2, [pc, #124]	@ (80005cc <MX_GPIO_Init+0x9c>)
 8000550:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000554:	6313      	str	r3, [r2, #48]	@ 0x30
 8000556:	4b1d      	ldr	r3, [pc, #116]	@ (80005cc <MX_GPIO_Init+0x9c>)
 8000558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800055a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800055e:	60bb      	str	r3, [r7, #8]
 8000560:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000562:	2300      	movs	r3, #0
 8000564:	607b      	str	r3, [r7, #4]
 8000566:	4b19      	ldr	r3, [pc, #100]	@ (80005cc <MX_GPIO_Init+0x9c>)
 8000568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800056a:	4a18      	ldr	r2, [pc, #96]	@ (80005cc <MX_GPIO_Init+0x9c>)
 800056c:	f043 0301 	orr.w	r3, r3, #1
 8000570:	6313      	str	r3, [r2, #48]	@ 0x30
 8000572:	4b16      	ldr	r3, [pc, #88]	@ (80005cc <MX_GPIO_Init+0x9c>)
 8000574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000576:	f003 0301 	and.w	r3, r3, #1
 800057a:	607b      	str	r3, [r7, #4]
 800057c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800057e:	2300      	movs	r3, #0
 8000580:	603b      	str	r3, [r7, #0]
 8000582:	4b12      	ldr	r3, [pc, #72]	@ (80005cc <MX_GPIO_Init+0x9c>)
 8000584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000586:	4a11      	ldr	r2, [pc, #68]	@ (80005cc <MX_GPIO_Init+0x9c>)
 8000588:	f043 0302 	orr.w	r3, r3, #2
 800058c:	6313      	str	r3, [r2, #48]	@ 0x30
 800058e:	4b0f      	ldr	r3, [pc, #60]	@ (80005cc <MX_GPIO_Init+0x9c>)
 8000590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000592:	f003 0302 	and.w	r3, r3, #2
 8000596:	603b      	str	r3, [r7, #0]
 8000598:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MMW_OUT_Pin;
 800059a:	2308      	movs	r3, #8
 800059c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800059e:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80005a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a4:	2300      	movs	r3, #0
 80005a6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(MMW_OUT_GPIO_Port, &GPIO_InitStruct);
 80005a8:	f107 030c 	add.w	r3, r7, #12
 80005ac:	4619      	mov	r1, r3
 80005ae:	4808      	ldr	r0, [pc, #32]	@ (80005d0 <MX_GPIO_Init+0xa0>)
 80005b0:	f000 fbe2 	bl	8000d78 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80005b4:	2200      	movs	r2, #0
 80005b6:	2100      	movs	r1, #0
 80005b8:	2009      	movs	r0, #9
 80005ba:	f000 fba6 	bl	8000d0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80005be:	2009      	movs	r0, #9
 80005c0:	f000 fbbf 	bl	8000d42 <HAL_NVIC_EnableIRQ>

}
 80005c4:	bf00      	nop
 80005c6:	3720      	adds	r7, #32
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	40023800 	.word	0x40023800
 80005d0:	40020400 	.word	0x40020400

080005d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d8:	f000 fa26 	bl	8000a28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005dc:	f000 f80c 	bl	80005f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e0:	f7ff ffa6 	bl	8000530 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80005e4:	f000 f984 	bl	80008f0 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 80005e8:	f006 fefc 	bl	80073e4 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 80005ec:	f000 f8f6 	bl	80007dc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  EventLoopC();
 80005f0:	f7ff ff98 	bl	8000524 <EventLoopC>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005f4:	bf00      	nop
 80005f6:	e7fd      	b.n	80005f4 <main+0x20>

080005f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b094      	sub	sp, #80	@ 0x50
 80005fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fe:	f107 0320 	add.w	r3, r7, #32
 8000602:	2230      	movs	r2, #48	@ 0x30
 8000604:	2100      	movs	r1, #0
 8000606:	4618      	mov	r0, r3
 8000608:	f007 fbfc 	bl	8007e04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800060c:	f107 030c 	add.w	r3, r7, #12
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	60da      	str	r2, [r3, #12]
 800061a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800061c:	2300      	movs	r3, #0
 800061e:	60bb      	str	r3, [r7, #8]
 8000620:	4b27      	ldr	r3, [pc, #156]	@ (80006c0 <SystemClock_Config+0xc8>)
 8000622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000624:	4a26      	ldr	r2, [pc, #152]	@ (80006c0 <SystemClock_Config+0xc8>)
 8000626:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800062a:	6413      	str	r3, [r2, #64]	@ 0x40
 800062c:	4b24      	ldr	r3, [pc, #144]	@ (80006c0 <SystemClock_Config+0xc8>)
 800062e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000630:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000634:	60bb      	str	r3, [r7, #8]
 8000636:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000638:	2300      	movs	r3, #0
 800063a:	607b      	str	r3, [r7, #4]
 800063c:	4b21      	ldr	r3, [pc, #132]	@ (80006c4 <SystemClock_Config+0xcc>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4a20      	ldr	r2, [pc, #128]	@ (80006c4 <SystemClock_Config+0xcc>)
 8000642:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000646:	6013      	str	r3, [r2, #0]
 8000648:	4b1e      	ldr	r3, [pc, #120]	@ (80006c4 <SystemClock_Config+0xcc>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000650:	607b      	str	r3, [r7, #4]
 8000652:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000654:	2301      	movs	r3, #1
 8000656:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000658:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800065c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800065e:	2302      	movs	r3, #2
 8000660:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000662:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000666:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8000668:	230f      	movs	r3, #15
 800066a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 800066c:	2390      	movs	r3, #144	@ 0x90
 800066e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000670:	2304      	movs	r3, #4
 8000672:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000674:	2305      	movs	r3, #5
 8000676:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000678:	f107 0320 	add.w	r3, r7, #32
 800067c:	4618      	mov	r0, r3
 800067e:	f001 ff7f 	bl	8002580 <HAL_RCC_OscConfig>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000688:	f000 f81e 	bl	80006c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800068c:	230f      	movs	r3, #15
 800068e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000690:	2302      	movs	r3, #2
 8000692:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000694:	2300      	movs	r3, #0
 8000696:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000698:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800069c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800069e:	2300      	movs	r3, #0
 80006a0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006a2:	f107 030c 	add.w	r3, r7, #12
 80006a6:	2101      	movs	r1, #1
 80006a8:	4618      	mov	r0, r3
 80006aa:	f002 f9e1 	bl	8002a70 <HAL_RCC_ClockConfig>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006b4:	f000 f808 	bl	80006c8 <Error_Handler>
  }
}
 80006b8:	bf00      	nop
 80006ba:	3750      	adds	r7, #80	@ 0x50
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	40023800 	.word	0x40023800
 80006c4:	40007000 	.word	0x40007000

080006c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006cc:	b672      	cpsid	i
}
 80006ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006d0:	bf00      	nop
 80006d2:	e7fd      	b.n	80006d0 <Error_Handler+0x8>

080006d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b083      	sub	sp, #12
 80006d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006da:	2300      	movs	r3, #0
 80006dc:	607b      	str	r3, [r7, #4]
 80006de:	4b10      	ldr	r3, [pc, #64]	@ (8000720 <HAL_MspInit+0x4c>)
 80006e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006e2:	4a0f      	ldr	r2, [pc, #60]	@ (8000720 <HAL_MspInit+0x4c>)
 80006e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80006ea:	4b0d      	ldr	r3, [pc, #52]	@ (8000720 <HAL_MspInit+0x4c>)
 80006ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80006f2:	607b      	str	r3, [r7, #4]
 80006f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f6:	2300      	movs	r3, #0
 80006f8:	603b      	str	r3, [r7, #0]
 80006fa:	4b09      	ldr	r3, [pc, #36]	@ (8000720 <HAL_MspInit+0x4c>)
 80006fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006fe:	4a08      	ldr	r2, [pc, #32]	@ (8000720 <HAL_MspInit+0x4c>)
 8000700:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000704:	6413      	str	r3, [r2, #64]	@ 0x40
 8000706:	4b06      	ldr	r3, [pc, #24]	@ (8000720 <HAL_MspInit+0x4c>)
 8000708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800070a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800070e:	603b      	str	r3, [r7, #0]
 8000710:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000712:	bf00      	nop
 8000714:	370c      	adds	r7, #12
 8000716:	46bd      	mov	sp, r7
 8000718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071c:	4770      	bx	lr
 800071e:	bf00      	nop
 8000720:	40023800 	.word	0x40023800

08000724 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000728:	bf00      	nop
 800072a:	e7fd      	b.n	8000728 <NMI_Handler+0x4>

0800072c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000730:	bf00      	nop
 8000732:	e7fd      	b.n	8000730 <HardFault_Handler+0x4>

08000734 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000738:	bf00      	nop
 800073a:	e7fd      	b.n	8000738 <MemManage_Handler+0x4>

0800073c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000740:	bf00      	nop
 8000742:	e7fd      	b.n	8000740 <BusFault_Handler+0x4>

08000744 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000748:	bf00      	nop
 800074a:	e7fd      	b.n	8000748 <UsageFault_Handler+0x4>

0800074c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000750:	bf00      	nop
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr

0800075a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800075a:	b480      	push	{r7}
 800075c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800075e:	bf00      	nop
 8000760:	46bd      	mov	sp, r7
 8000762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000766:	4770      	bx	lr

08000768 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800076c:	bf00      	nop
 800076e:	46bd      	mov	sp, r7
 8000770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000774:	4770      	bx	lr

08000776 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000776:	b580      	push	{r7, lr}
 8000778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800077a:	f000 f9a7 	bl	8000acc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800077e:	bf00      	nop
 8000780:	bd80      	pop	{r7, pc}

08000782 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000782:	b580      	push	{r7, lr}
 8000784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MMW_OUT_Pin);
 8000786:	2008      	movs	r0, #8
 8000788:	f000 fc92 	bl	80010b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800078c:	bf00      	nop
 800078e:	bd80      	pop	{r7, pc}

08000790 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000794:	4802      	ldr	r0, [pc, #8]	@ (80007a0 <TIM2_IRQHandler+0x10>)
 8000796:	f002 fbfd 	bl	8002f94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800079a:	bf00      	nop
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	2000012c 	.word	0x2000012c

080007a4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80007a8:	4802      	ldr	r0, [pc, #8]	@ (80007b4 <OTG_FS_IRQHandler+0x10>)
 80007aa:	f000 fddd 	bl	8001368 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80007ae:	bf00      	nop
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	200016a0 	.word	0x200016a0

080007b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007bc:	4b06      	ldr	r3, [pc, #24]	@ (80007d8 <SystemInit+0x20>)
 80007be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80007c2:	4a05      	ldr	r2, [pc, #20]	@ (80007d8 <SystemInit+0x20>)
 80007c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80007c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007cc:	bf00      	nop
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	e000ed00 	.word	0xe000ed00

080007dc <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b08c      	sub	sp, #48	@ 0x30
 80007e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007e2:	f107 0320 	add.w	r3, r7, #32
 80007e6:	2200      	movs	r2, #0
 80007e8:	601a      	str	r2, [r3, #0]
 80007ea:	605a      	str	r2, [r3, #4]
 80007ec:	609a      	str	r2, [r3, #8]
 80007ee:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80007f0:	f107 030c 	add.w	r3, r7, #12
 80007f4:	2200      	movs	r2, #0
 80007f6:	601a      	str	r2, [r3, #0]
 80007f8:	605a      	str	r2, [r3, #4]
 80007fa:	609a      	str	r2, [r3, #8]
 80007fc:	60da      	str	r2, [r3, #12]
 80007fe:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000800:	1d3b      	adds	r3, r7, #4
 8000802:	2200      	movs	r2, #0
 8000804:	601a      	str	r2, [r3, #0]
 8000806:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000808:	4b25      	ldr	r3, [pc, #148]	@ (80008a0 <MX_TIM2_Init+0xc4>)
 800080a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800080e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 60000-1;
 8000810:	4b23      	ldr	r3, [pc, #140]	@ (80008a0 <MX_TIM2_Init+0xc4>)
 8000812:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8000816:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000818:	4b21      	ldr	r3, [pc, #132]	@ (80008a0 <MX_TIM2_Init+0xc4>)
 800081a:	2200      	movs	r2, #0
 800081c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 800081e:	4b20      	ldr	r3, [pc, #128]	@ (80008a0 <MX_TIM2_Init+0xc4>)
 8000820:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000824:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000826:	4b1e      	ldr	r3, [pc, #120]	@ (80008a0 <MX_TIM2_Init+0xc4>)
 8000828:	2200      	movs	r2, #0
 800082a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800082c:	4b1c      	ldr	r3, [pc, #112]	@ (80008a0 <MX_TIM2_Init+0xc4>)
 800082e:	2280      	movs	r2, #128	@ 0x80
 8000830:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000832:	481b      	ldr	r0, [pc, #108]	@ (80008a0 <MX_TIM2_Init+0xc4>)
 8000834:	f002 fafc 	bl	8002e30 <HAL_TIM_Base_Init>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 800083e:	f7ff ff43 	bl	80006c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000842:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000846:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000848:	f107 0320 	add.w	r3, r7, #32
 800084c:	4619      	mov	r1, r3
 800084e:	4814      	ldr	r0, [pc, #80]	@ (80008a0 <MX_TIM2_Init+0xc4>)
 8000850:	f002 fc90 	bl	8003174 <HAL_TIM_ConfigClockSource>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 800085a:	f7ff ff35 	bl	80006c8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 800085e:	2300      	movs	r3, #0
 8000860:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000862:	2300      	movs	r3, #0
 8000864:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000866:	f107 030c 	add.w	r3, r7, #12
 800086a:	4619      	mov	r1, r3
 800086c:	480c      	ldr	r0, [pc, #48]	@ (80008a0 <MX_TIM2_Init+0xc4>)
 800086e:	f002 fd48 	bl	8003302 <HAL_TIM_SlaveConfigSynchro>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000878:	f7ff ff26 	bl	80006c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800087c:	2320      	movs	r3, #32
 800087e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000880:	2300      	movs	r3, #0
 8000882:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000884:	1d3b      	adds	r3, r7, #4
 8000886:	4619      	mov	r1, r3
 8000888:	4805      	ldr	r0, [pc, #20]	@ (80008a0 <MX_TIM2_Init+0xc4>)
 800088a:	f002 ff5d 	bl	8003748 <HAL_TIMEx_MasterConfigSynchronization>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8000894:	f7ff ff18 	bl	80006c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000898:	bf00      	nop
 800089a:	3730      	adds	r7, #48	@ 0x30
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	2000012c 	.word	0x2000012c

080008a4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b084      	sub	sp, #16
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80008b4:	d115      	bne.n	80008e2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	60fb      	str	r3, [r7, #12]
 80008ba:	4b0c      	ldr	r3, [pc, #48]	@ (80008ec <HAL_TIM_Base_MspInit+0x48>)
 80008bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008be:	4a0b      	ldr	r2, [pc, #44]	@ (80008ec <HAL_TIM_Base_MspInit+0x48>)
 80008c0:	f043 0301 	orr.w	r3, r3, #1
 80008c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80008c6:	4b09      	ldr	r3, [pc, #36]	@ (80008ec <HAL_TIM_Base_MspInit+0x48>)
 80008c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ca:	f003 0301 	and.w	r3, r3, #1
 80008ce:	60fb      	str	r3, [r7, #12]
 80008d0:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80008d2:	2200      	movs	r2, #0
 80008d4:	2100      	movs	r1, #0
 80008d6:	201c      	movs	r0, #28
 80008d8:	f000 fa17 	bl	8000d0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80008dc:	201c      	movs	r0, #28
 80008de:	f000 fa30 	bl	8000d42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80008e2:	bf00      	nop
 80008e4:	3710      	adds	r7, #16
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	40023800 	.word	0x40023800

080008f0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008f4:	4b11      	ldr	r3, [pc, #68]	@ (800093c <MX_USART1_UART_Init+0x4c>)
 80008f6:	4a12      	ldr	r2, [pc, #72]	@ (8000940 <MX_USART1_UART_Init+0x50>)
 80008f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008fa:	4b10      	ldr	r3, [pc, #64]	@ (800093c <MX_USART1_UART_Init+0x4c>)
 80008fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000900:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000902:	4b0e      	ldr	r3, [pc, #56]	@ (800093c <MX_USART1_UART_Init+0x4c>)
 8000904:	2200      	movs	r2, #0
 8000906:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000908:	4b0c      	ldr	r3, [pc, #48]	@ (800093c <MX_USART1_UART_Init+0x4c>)
 800090a:	2200      	movs	r2, #0
 800090c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800090e:	4b0b      	ldr	r3, [pc, #44]	@ (800093c <MX_USART1_UART_Init+0x4c>)
 8000910:	2200      	movs	r2, #0
 8000912:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000914:	4b09      	ldr	r3, [pc, #36]	@ (800093c <MX_USART1_UART_Init+0x4c>)
 8000916:	220c      	movs	r2, #12
 8000918:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800091a:	4b08      	ldr	r3, [pc, #32]	@ (800093c <MX_USART1_UART_Init+0x4c>)
 800091c:	2200      	movs	r2, #0
 800091e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000920:	4b06      	ldr	r3, [pc, #24]	@ (800093c <MX_USART1_UART_Init+0x4c>)
 8000922:	2200      	movs	r2, #0
 8000924:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000926:	4805      	ldr	r0, [pc, #20]	@ (800093c <MX_USART1_UART_Init+0x4c>)
 8000928:	f002 ff90 	bl	800384c <HAL_UART_Init>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000932:	f7ff fec9 	bl	80006c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	20000174 	.word	0x20000174
 8000940:	40011000 	.word	0x40011000

08000944 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b08a      	sub	sp, #40	@ 0x28
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094c:	f107 0314 	add.w	r3, r7, #20
 8000950:	2200      	movs	r2, #0
 8000952:	601a      	str	r2, [r3, #0]
 8000954:	605a      	str	r2, [r3, #4]
 8000956:	609a      	str	r2, [r3, #8]
 8000958:	60da      	str	r2, [r3, #12]
 800095a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a19      	ldr	r2, [pc, #100]	@ (80009c8 <HAL_UART_MspInit+0x84>)
 8000962:	4293      	cmp	r3, r2
 8000964:	d12c      	bne.n	80009c0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	613b      	str	r3, [r7, #16]
 800096a:	4b18      	ldr	r3, [pc, #96]	@ (80009cc <HAL_UART_MspInit+0x88>)
 800096c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800096e:	4a17      	ldr	r2, [pc, #92]	@ (80009cc <HAL_UART_MspInit+0x88>)
 8000970:	f043 0310 	orr.w	r3, r3, #16
 8000974:	6453      	str	r3, [r2, #68]	@ 0x44
 8000976:	4b15      	ldr	r3, [pc, #84]	@ (80009cc <HAL_UART_MspInit+0x88>)
 8000978:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800097a:	f003 0310 	and.w	r3, r3, #16
 800097e:	613b      	str	r3, [r7, #16]
 8000980:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000982:	2300      	movs	r3, #0
 8000984:	60fb      	str	r3, [r7, #12]
 8000986:	4b11      	ldr	r3, [pc, #68]	@ (80009cc <HAL_UART_MspInit+0x88>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098a:	4a10      	ldr	r2, [pc, #64]	@ (80009cc <HAL_UART_MspInit+0x88>)
 800098c:	f043 0301 	orr.w	r3, r3, #1
 8000990:	6313      	str	r3, [r2, #48]	@ 0x30
 8000992:	4b0e      	ldr	r3, [pc, #56]	@ (80009cc <HAL_UART_MspInit+0x88>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000996:	f003 0301 	and.w	r3, r3, #1
 800099a:	60fb      	str	r3, [r7, #12]
 800099c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = MMW_TX_Pin|MMW_RX_Pin;
 800099e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80009a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a4:	2302      	movs	r3, #2
 80009a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a8:	2300      	movs	r3, #0
 80009aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ac:	2303      	movs	r3, #3
 80009ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80009b0:	2307      	movs	r3, #7
 80009b2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b4:	f107 0314 	add.w	r3, r7, #20
 80009b8:	4619      	mov	r1, r3
 80009ba:	4805      	ldr	r0, [pc, #20]	@ (80009d0 <HAL_UART_MspInit+0x8c>)
 80009bc:	f000 f9dc 	bl	8000d78 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80009c0:	bf00      	nop
 80009c2:	3728      	adds	r7, #40	@ 0x28
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	40011000 	.word	0x40011000
 80009cc:	40023800 	.word	0x40023800
 80009d0:	40020000 	.word	0x40020000

080009d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80009d4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a0c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80009d8:	f7ff feee 	bl	80007b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009dc:	480c      	ldr	r0, [pc, #48]	@ (8000a10 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009de:	490d      	ldr	r1, [pc, #52]	@ (8000a14 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009e0:	4a0d      	ldr	r2, [pc, #52]	@ (8000a18 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009e4:	e002      	b.n	80009ec <LoopCopyDataInit>

080009e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ea:	3304      	adds	r3, #4

080009ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009f0:	d3f9      	bcc.n	80009e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009f2:	4a0a      	ldr	r2, [pc, #40]	@ (8000a1c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80009f4:	4c0a      	ldr	r4, [pc, #40]	@ (8000a20 <LoopFillZerobss+0x22>)
  movs r3, #0
 80009f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009f8:	e001      	b.n	80009fe <LoopFillZerobss>

080009fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009fc:	3204      	adds	r2, #4

080009fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a00:	d3fb      	bcc.n	80009fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a02:	f007 fa07 	bl	8007e14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a06:	f7ff fde5 	bl	80005d4 <main>
  bx  lr    
 8000a0a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a0c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a14:	2000010c 	.word	0x2000010c
  ldr r2, =_sidata
 8000a18:	08007ee4 	.word	0x08007ee4
  ldr r2, =_sbss
 8000a1c:	2000010c 	.word	0x2000010c
  ldr r4, =_ebss
 8000a20:	20001da4 	.word	0x20001da4

08000a24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a24:	e7fe      	b.n	8000a24 <ADC_IRQHandler>
	...

08000a28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a2c:	4b0e      	ldr	r3, [pc, #56]	@ (8000a68 <HAL_Init+0x40>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a0d      	ldr	r2, [pc, #52]	@ (8000a68 <HAL_Init+0x40>)
 8000a32:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a38:	4b0b      	ldr	r3, [pc, #44]	@ (8000a68 <HAL_Init+0x40>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a0a      	ldr	r2, [pc, #40]	@ (8000a68 <HAL_Init+0x40>)
 8000a3e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a44:	4b08      	ldr	r3, [pc, #32]	@ (8000a68 <HAL_Init+0x40>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a07      	ldr	r2, [pc, #28]	@ (8000a68 <HAL_Init+0x40>)
 8000a4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a50:	2003      	movs	r0, #3
 8000a52:	f000 f94f 	bl	8000cf4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a56:	200f      	movs	r0, #15
 8000a58:	f000 f808 	bl	8000a6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a5c:	f7ff fe3a 	bl	80006d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a60:	2300      	movs	r3, #0
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	40023c00 	.word	0x40023c00

08000a6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a74:	4b12      	ldr	r3, [pc, #72]	@ (8000ac0 <HAL_InitTick+0x54>)
 8000a76:	681a      	ldr	r2, [r3, #0]
 8000a78:	4b12      	ldr	r3, [pc, #72]	@ (8000ac4 <HAL_InitTick+0x58>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a82:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a86:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f000 f967 	bl	8000d5e <HAL_SYSTICK_Config>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a96:	2301      	movs	r3, #1
 8000a98:	e00e      	b.n	8000ab8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	2b0f      	cmp	r3, #15
 8000a9e:	d80a      	bhi.n	8000ab6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	6879      	ldr	r1, [r7, #4]
 8000aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8000aa8:	f000 f92f 	bl	8000d0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000aac:	4a06      	ldr	r2, [pc, #24]	@ (8000ac8 <HAL_InitTick+0x5c>)
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	e000      	b.n	8000ab8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ab6:	2301      	movs	r3, #1
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	3708      	adds	r7, #8
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	20000010 	.word	0x20000010
 8000ac4:	20000018 	.word	0x20000018
 8000ac8:	20000014 	.word	0x20000014

08000acc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ad0:	4b06      	ldr	r3, [pc, #24]	@ (8000aec <HAL_IncTick+0x20>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	461a      	mov	r2, r3
 8000ad6:	4b06      	ldr	r3, [pc, #24]	@ (8000af0 <HAL_IncTick+0x24>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4413      	add	r3, r2
 8000adc:	4a04      	ldr	r2, [pc, #16]	@ (8000af0 <HAL_IncTick+0x24>)
 8000ade:	6013      	str	r3, [r2, #0]
}
 8000ae0:	bf00      	nop
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	20000018 	.word	0x20000018
 8000af0:	200001bc 	.word	0x200001bc

08000af4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  return uwTick;
 8000af8:	4b03      	ldr	r3, [pc, #12]	@ (8000b08 <HAL_GetTick+0x14>)
 8000afa:	681b      	ldr	r3, [r3, #0]
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	200001bc 	.word	0x200001bc

08000b0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b14:	f7ff ffee 	bl	8000af4 <HAL_GetTick>
 8000b18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b24:	d005      	beq.n	8000b32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b26:	4b0a      	ldr	r3, [pc, #40]	@ (8000b50 <HAL_Delay+0x44>)
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	461a      	mov	r2, r3
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	4413      	add	r3, r2
 8000b30:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b32:	bf00      	nop
 8000b34:	f7ff ffde 	bl	8000af4 <HAL_GetTick>
 8000b38:	4602      	mov	r2, r0
 8000b3a:	68bb      	ldr	r3, [r7, #8]
 8000b3c:	1ad3      	subs	r3, r2, r3
 8000b3e:	68fa      	ldr	r2, [r7, #12]
 8000b40:	429a      	cmp	r2, r3
 8000b42:	d8f7      	bhi.n	8000b34 <HAL_Delay+0x28>
  {
  }
}
 8000b44:	bf00      	nop
 8000b46:	bf00      	nop
 8000b48:	3710      	adds	r7, #16
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	20000018 	.word	0x20000018

08000b54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b085      	sub	sp, #20
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	f003 0307 	and.w	r3, r3, #7
 8000b62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b64:	4b0c      	ldr	r3, [pc, #48]	@ (8000b98 <__NVIC_SetPriorityGrouping+0x44>)
 8000b66:	68db      	ldr	r3, [r3, #12]
 8000b68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b6a:	68ba      	ldr	r2, [r7, #8]
 8000b6c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b70:	4013      	ands	r3, r2
 8000b72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b7c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b86:	4a04      	ldr	r2, [pc, #16]	@ (8000b98 <__NVIC_SetPriorityGrouping+0x44>)
 8000b88:	68bb      	ldr	r3, [r7, #8]
 8000b8a:	60d3      	str	r3, [r2, #12]
}
 8000b8c:	bf00      	nop
 8000b8e:	3714      	adds	r7, #20
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr
 8000b98:	e000ed00 	.word	0xe000ed00

08000b9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ba0:	4b04      	ldr	r3, [pc, #16]	@ (8000bb4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ba2:	68db      	ldr	r3, [r3, #12]
 8000ba4:	0a1b      	lsrs	r3, r3, #8
 8000ba6:	f003 0307 	and.w	r3, r3, #7
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr
 8000bb4:	e000ed00 	.word	0xe000ed00

08000bb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	db0b      	blt.n	8000be2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bca:	79fb      	ldrb	r3, [r7, #7]
 8000bcc:	f003 021f 	and.w	r2, r3, #31
 8000bd0:	4907      	ldr	r1, [pc, #28]	@ (8000bf0 <__NVIC_EnableIRQ+0x38>)
 8000bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd6:	095b      	lsrs	r3, r3, #5
 8000bd8:	2001      	movs	r0, #1
 8000bda:	fa00 f202 	lsl.w	r2, r0, r2
 8000bde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000be2:	bf00      	nop
 8000be4:	370c      	adds	r7, #12
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	e000e100 	.word	0xe000e100

08000bf4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	6039      	str	r1, [r7, #0]
 8000bfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	db0a      	blt.n	8000c1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	b2da      	uxtb	r2, r3
 8000c0c:	490c      	ldr	r1, [pc, #48]	@ (8000c40 <__NVIC_SetPriority+0x4c>)
 8000c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c12:	0112      	lsls	r2, r2, #4
 8000c14:	b2d2      	uxtb	r2, r2
 8000c16:	440b      	add	r3, r1
 8000c18:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c1c:	e00a      	b.n	8000c34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	b2da      	uxtb	r2, r3
 8000c22:	4908      	ldr	r1, [pc, #32]	@ (8000c44 <__NVIC_SetPriority+0x50>)
 8000c24:	79fb      	ldrb	r3, [r7, #7]
 8000c26:	f003 030f 	and.w	r3, r3, #15
 8000c2a:	3b04      	subs	r3, #4
 8000c2c:	0112      	lsls	r2, r2, #4
 8000c2e:	b2d2      	uxtb	r2, r2
 8000c30:	440b      	add	r3, r1
 8000c32:	761a      	strb	r2, [r3, #24]
}
 8000c34:	bf00      	nop
 8000c36:	370c      	adds	r7, #12
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr
 8000c40:	e000e100 	.word	0xe000e100
 8000c44:	e000ed00 	.word	0xe000ed00

08000c48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b089      	sub	sp, #36	@ 0x24
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	60f8      	str	r0, [r7, #12]
 8000c50:	60b9      	str	r1, [r7, #8]
 8000c52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	f003 0307 	and.w	r3, r3, #7
 8000c5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c5c:	69fb      	ldr	r3, [r7, #28]
 8000c5e:	f1c3 0307 	rsb	r3, r3, #7
 8000c62:	2b04      	cmp	r3, #4
 8000c64:	bf28      	it	cs
 8000c66:	2304      	movcs	r3, #4
 8000c68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c6a:	69fb      	ldr	r3, [r7, #28]
 8000c6c:	3304      	adds	r3, #4
 8000c6e:	2b06      	cmp	r3, #6
 8000c70:	d902      	bls.n	8000c78 <NVIC_EncodePriority+0x30>
 8000c72:	69fb      	ldr	r3, [r7, #28]
 8000c74:	3b03      	subs	r3, #3
 8000c76:	e000      	b.n	8000c7a <NVIC_EncodePriority+0x32>
 8000c78:	2300      	movs	r3, #0
 8000c7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c7c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c80:	69bb      	ldr	r3, [r7, #24]
 8000c82:	fa02 f303 	lsl.w	r3, r2, r3
 8000c86:	43da      	mvns	r2, r3
 8000c88:	68bb      	ldr	r3, [r7, #8]
 8000c8a:	401a      	ands	r2, r3
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c90:	f04f 31ff 	mov.w	r1, #4294967295
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	fa01 f303 	lsl.w	r3, r1, r3
 8000c9a:	43d9      	mvns	r1, r3
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca0:	4313      	orrs	r3, r2
         );
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3724      	adds	r7, #36	@ 0x24
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
	...

08000cb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	3b01      	subs	r3, #1
 8000cbc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000cc0:	d301      	bcc.n	8000cc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	e00f      	b.n	8000ce6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cc6:	4a0a      	ldr	r2, [pc, #40]	@ (8000cf0 <SysTick_Config+0x40>)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	3b01      	subs	r3, #1
 8000ccc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cce:	210f      	movs	r1, #15
 8000cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8000cd4:	f7ff ff8e 	bl	8000bf4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cd8:	4b05      	ldr	r3, [pc, #20]	@ (8000cf0 <SysTick_Config+0x40>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cde:	4b04      	ldr	r3, [pc, #16]	@ (8000cf0 <SysTick_Config+0x40>)
 8000ce0:	2207      	movs	r2, #7
 8000ce2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ce4:	2300      	movs	r3, #0
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	e000e010 	.word	0xe000e010

08000cf4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cfc:	6878      	ldr	r0, [r7, #4]
 8000cfe:	f7ff ff29 	bl	8000b54 <__NVIC_SetPriorityGrouping>
}
 8000d02:	bf00      	nop
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}

08000d0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	b086      	sub	sp, #24
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	4603      	mov	r3, r0
 8000d12:	60b9      	str	r1, [r7, #8]
 8000d14:	607a      	str	r2, [r7, #4]
 8000d16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d1c:	f7ff ff3e 	bl	8000b9c <__NVIC_GetPriorityGrouping>
 8000d20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d22:	687a      	ldr	r2, [r7, #4]
 8000d24:	68b9      	ldr	r1, [r7, #8]
 8000d26:	6978      	ldr	r0, [r7, #20]
 8000d28:	f7ff ff8e 	bl	8000c48 <NVIC_EncodePriority>
 8000d2c:	4602      	mov	r2, r0
 8000d2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d32:	4611      	mov	r1, r2
 8000d34:	4618      	mov	r0, r3
 8000d36:	f7ff ff5d 	bl	8000bf4 <__NVIC_SetPriority>
}
 8000d3a:	bf00      	nop
 8000d3c:	3718      	adds	r7, #24
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}

08000d42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d42:	b580      	push	{r7, lr}
 8000d44:	b082      	sub	sp, #8
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	4603      	mov	r3, r0
 8000d4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d50:	4618      	mov	r0, r3
 8000d52:	f7ff ff31 	bl	8000bb8 <__NVIC_EnableIRQ>
}
 8000d56:	bf00      	nop
 8000d58:	3708      	adds	r7, #8
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}

08000d5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d5e:	b580      	push	{r7, lr}
 8000d60:	b082      	sub	sp, #8
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d66:	6878      	ldr	r0, [r7, #4]
 8000d68:	f7ff ffa2 	bl	8000cb0 <SysTick_Config>
 8000d6c:	4603      	mov	r3, r0
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
	...

08000d78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b089      	sub	sp, #36	@ 0x24
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
 8000d80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d82:	2300      	movs	r3, #0
 8000d84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d86:	2300      	movs	r3, #0
 8000d88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d8e:	2300      	movs	r3, #0
 8000d90:	61fb      	str	r3, [r7, #28]
 8000d92:	e159      	b.n	8001048 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d94:	2201      	movs	r2, #1
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	697a      	ldr	r2, [r7, #20]
 8000da4:	4013      	ands	r3, r2
 8000da6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000da8:	693a      	ldr	r2, [r7, #16]
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	429a      	cmp	r2, r3
 8000dae:	f040 8148 	bne.w	8001042 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	f003 0303 	and.w	r3, r3, #3
 8000dba:	2b01      	cmp	r3, #1
 8000dbc:	d005      	beq.n	8000dca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dc6:	2b02      	cmp	r3, #2
 8000dc8:	d130      	bne.n	8000e2c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	689b      	ldr	r3, [r3, #8]
 8000dce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000dd0:	69fb      	ldr	r3, [r7, #28]
 8000dd2:	005b      	lsls	r3, r3, #1
 8000dd4:	2203      	movs	r2, #3
 8000dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dda:	43db      	mvns	r3, r3
 8000ddc:	69ba      	ldr	r2, [r7, #24]
 8000dde:	4013      	ands	r3, r2
 8000de0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	68da      	ldr	r2, [r3, #12]
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	005b      	lsls	r3, r3, #1
 8000dea:	fa02 f303 	lsl.w	r3, r2, r3
 8000dee:	69ba      	ldr	r2, [r7, #24]
 8000df0:	4313      	orrs	r3, r2
 8000df2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	69ba      	ldr	r2, [r7, #24]
 8000df8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e00:	2201      	movs	r2, #1
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	fa02 f303 	lsl.w	r3, r2, r3
 8000e08:	43db      	mvns	r3, r3
 8000e0a:	69ba      	ldr	r2, [r7, #24]
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	091b      	lsrs	r3, r3, #4
 8000e16:	f003 0201 	and.w	r2, r3, #1
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e20:	69ba      	ldr	r2, [r7, #24]
 8000e22:	4313      	orrs	r3, r2
 8000e24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	69ba      	ldr	r2, [r7, #24]
 8000e2a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	f003 0303 	and.w	r3, r3, #3
 8000e34:	2b03      	cmp	r3, #3
 8000e36:	d017      	beq.n	8000e68 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	68db      	ldr	r3, [r3, #12]
 8000e3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	005b      	lsls	r3, r3, #1
 8000e42:	2203      	movs	r2, #3
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	43db      	mvns	r3, r3
 8000e4a:	69ba      	ldr	r2, [r7, #24]
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	689a      	ldr	r2, [r3, #8]
 8000e54:	69fb      	ldr	r3, [r7, #28]
 8000e56:	005b      	lsls	r3, r3, #1
 8000e58:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5c:	69ba      	ldr	r2, [r7, #24]
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	69ba      	ldr	r2, [r7, #24]
 8000e66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	f003 0303 	and.w	r3, r3, #3
 8000e70:	2b02      	cmp	r3, #2
 8000e72:	d123      	bne.n	8000ebc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e74:	69fb      	ldr	r3, [r7, #28]
 8000e76:	08da      	lsrs	r2, r3, #3
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	3208      	adds	r2, #8
 8000e7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	f003 0307 	and.w	r3, r3, #7
 8000e88:	009b      	lsls	r3, r3, #2
 8000e8a:	220f      	movs	r2, #15
 8000e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e90:	43db      	mvns	r3, r3
 8000e92:	69ba      	ldr	r2, [r7, #24]
 8000e94:	4013      	ands	r3, r2
 8000e96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	691a      	ldr	r2, [r3, #16]
 8000e9c:	69fb      	ldr	r3, [r7, #28]
 8000e9e:	f003 0307 	and.w	r3, r3, #7
 8000ea2:	009b      	lsls	r3, r3, #2
 8000ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea8:	69ba      	ldr	r2, [r7, #24]
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	08da      	lsrs	r2, r3, #3
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	3208      	adds	r2, #8
 8000eb6:	69b9      	ldr	r1, [r7, #24]
 8000eb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	005b      	lsls	r3, r3, #1
 8000ec6:	2203      	movs	r2, #3
 8000ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ecc:	43db      	mvns	r3, r3
 8000ece:	69ba      	ldr	r2, [r7, #24]
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	f003 0203 	and.w	r2, r3, #3
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	005b      	lsls	r3, r3, #1
 8000ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee4:	69ba      	ldr	r2, [r7, #24]
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	f000 80a2 	beq.w	8001042 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	60fb      	str	r3, [r7, #12]
 8000f02:	4b57      	ldr	r3, [pc, #348]	@ (8001060 <HAL_GPIO_Init+0x2e8>)
 8000f04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f06:	4a56      	ldr	r2, [pc, #344]	@ (8001060 <HAL_GPIO_Init+0x2e8>)
 8000f08:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f0e:	4b54      	ldr	r3, [pc, #336]	@ (8001060 <HAL_GPIO_Init+0x2e8>)
 8000f10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f16:	60fb      	str	r3, [r7, #12]
 8000f18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f1a:	4a52      	ldr	r2, [pc, #328]	@ (8001064 <HAL_GPIO_Init+0x2ec>)
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	089b      	lsrs	r3, r3, #2
 8000f20:	3302      	adds	r3, #2
 8000f22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	f003 0303 	and.w	r3, r3, #3
 8000f2e:	009b      	lsls	r3, r3, #2
 8000f30:	220f      	movs	r2, #15
 8000f32:	fa02 f303 	lsl.w	r3, r2, r3
 8000f36:	43db      	mvns	r3, r3
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4a49      	ldr	r2, [pc, #292]	@ (8001068 <HAL_GPIO_Init+0x2f0>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d019      	beq.n	8000f7a <HAL_GPIO_Init+0x202>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4a48      	ldr	r2, [pc, #288]	@ (800106c <HAL_GPIO_Init+0x2f4>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d013      	beq.n	8000f76 <HAL_GPIO_Init+0x1fe>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4a47      	ldr	r2, [pc, #284]	@ (8001070 <HAL_GPIO_Init+0x2f8>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d00d      	beq.n	8000f72 <HAL_GPIO_Init+0x1fa>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4a46      	ldr	r2, [pc, #280]	@ (8001074 <HAL_GPIO_Init+0x2fc>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d007      	beq.n	8000f6e <HAL_GPIO_Init+0x1f6>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4a45      	ldr	r2, [pc, #276]	@ (8001078 <HAL_GPIO_Init+0x300>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d101      	bne.n	8000f6a <HAL_GPIO_Init+0x1f2>
 8000f66:	2304      	movs	r3, #4
 8000f68:	e008      	b.n	8000f7c <HAL_GPIO_Init+0x204>
 8000f6a:	2307      	movs	r3, #7
 8000f6c:	e006      	b.n	8000f7c <HAL_GPIO_Init+0x204>
 8000f6e:	2303      	movs	r3, #3
 8000f70:	e004      	b.n	8000f7c <HAL_GPIO_Init+0x204>
 8000f72:	2302      	movs	r3, #2
 8000f74:	e002      	b.n	8000f7c <HAL_GPIO_Init+0x204>
 8000f76:	2301      	movs	r3, #1
 8000f78:	e000      	b.n	8000f7c <HAL_GPIO_Init+0x204>
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	69fa      	ldr	r2, [r7, #28]
 8000f7e:	f002 0203 	and.w	r2, r2, #3
 8000f82:	0092      	lsls	r2, r2, #2
 8000f84:	4093      	lsls	r3, r2
 8000f86:	69ba      	ldr	r2, [r7, #24]
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f8c:	4935      	ldr	r1, [pc, #212]	@ (8001064 <HAL_GPIO_Init+0x2ec>)
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	089b      	lsrs	r3, r3, #2
 8000f92:	3302      	adds	r3, #2
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f9a:	4b38      	ldr	r3, [pc, #224]	@ (800107c <HAL_GPIO_Init+0x304>)
 8000f9c:	689b      	ldr	r3, [r3, #8]
 8000f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fa0:	693b      	ldr	r3, [r7, #16]
 8000fa2:	43db      	mvns	r3, r3
 8000fa4:	69ba      	ldr	r2, [r7, #24]
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d003      	beq.n	8000fbe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000fb6:	69ba      	ldr	r2, [r7, #24]
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fbe:	4a2f      	ldr	r2, [pc, #188]	@ (800107c <HAL_GPIO_Init+0x304>)
 8000fc0:	69bb      	ldr	r3, [r7, #24]
 8000fc2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fc4:	4b2d      	ldr	r3, [pc, #180]	@ (800107c <HAL_GPIO_Init+0x304>)
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	43db      	mvns	r3, r3
 8000fce:	69ba      	ldr	r2, [r7, #24]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d003      	beq.n	8000fe8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fe8:	4a24      	ldr	r2, [pc, #144]	@ (800107c <HAL_GPIO_Init+0x304>)
 8000fea:	69bb      	ldr	r3, [r7, #24]
 8000fec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000fee:	4b23      	ldr	r3, [pc, #140]	@ (800107c <HAL_GPIO_Init+0x304>)
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	43db      	mvns	r3, r3
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001006:	2b00      	cmp	r3, #0
 8001008:	d003      	beq.n	8001012 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800100a:	69ba      	ldr	r2, [r7, #24]
 800100c:	693b      	ldr	r3, [r7, #16]
 800100e:	4313      	orrs	r3, r2
 8001010:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001012:	4a1a      	ldr	r2, [pc, #104]	@ (800107c <HAL_GPIO_Init+0x304>)
 8001014:	69bb      	ldr	r3, [r7, #24]
 8001016:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001018:	4b18      	ldr	r3, [pc, #96]	@ (800107c <HAL_GPIO_Init+0x304>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	43db      	mvns	r3, r3
 8001022:	69ba      	ldr	r2, [r7, #24]
 8001024:	4013      	ands	r3, r2
 8001026:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001030:	2b00      	cmp	r3, #0
 8001032:	d003      	beq.n	800103c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	693b      	ldr	r3, [r7, #16]
 8001038:	4313      	orrs	r3, r2
 800103a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800103c:	4a0f      	ldr	r2, [pc, #60]	@ (800107c <HAL_GPIO_Init+0x304>)
 800103e:	69bb      	ldr	r3, [r7, #24]
 8001040:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	3301      	adds	r3, #1
 8001046:	61fb      	str	r3, [r7, #28]
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	2b0f      	cmp	r3, #15
 800104c:	f67f aea2 	bls.w	8000d94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001050:	bf00      	nop
 8001052:	bf00      	nop
 8001054:	3724      	adds	r7, #36	@ 0x24
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	40023800 	.word	0x40023800
 8001064:	40013800 	.word	0x40013800
 8001068:	40020000 	.word	0x40020000
 800106c:	40020400 	.word	0x40020400
 8001070:	40020800 	.word	0x40020800
 8001074:	40020c00 	.word	0x40020c00
 8001078:	40021000 	.word	0x40021000
 800107c:	40013c00 	.word	0x40013c00

08001080 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001080:	b480      	push	{r7}
 8001082:	b085      	sub	sp, #20
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	460b      	mov	r3, r1
 800108a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	691a      	ldr	r2, [r3, #16]
 8001090:	887b      	ldrh	r3, [r7, #2]
 8001092:	4013      	ands	r3, r2
 8001094:	2b00      	cmp	r3, #0
 8001096:	d002      	beq.n	800109e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001098:	2301      	movs	r3, #1
 800109a:	73fb      	strb	r3, [r7, #15]
 800109c:	e001      	b.n	80010a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800109e:	2300      	movs	r3, #0
 80010a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80010a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3714      	adds	r7, #20
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr

080010b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	4603      	mov	r3, r0
 80010b8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80010ba:	4b08      	ldr	r3, [pc, #32]	@ (80010dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80010bc:	695a      	ldr	r2, [r3, #20]
 80010be:	88fb      	ldrh	r3, [r7, #6]
 80010c0:	4013      	ands	r3, r2
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d006      	beq.n	80010d4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80010c6:	4a05      	ldr	r2, [pc, #20]	@ (80010dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80010c8:	88fb      	ldrh	r3, [r7, #6]
 80010ca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80010cc:	88fb      	ldrh	r3, [r7, #6]
 80010ce:	4618      	mov	r0, r3
 80010d0:	f7ff fa04 	bl	80004dc <HAL_GPIO_EXTI_Callback>
  }
}
 80010d4:	bf00      	nop
 80010d6:	3708      	adds	r7, #8
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	40013c00 	.word	0x40013c00

080010e0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b086      	sub	sp, #24
 80010e4:	af02      	add	r7, sp, #8
 80010e6:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d101      	bne.n	80010f2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	e101      	b.n	80012f6 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	2b00      	cmp	r3, #0
 8001102:	d106      	bne.n	8001112 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2200      	movs	r2, #0
 8001108:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	f006 fb6f 	bl	80077f0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2203      	movs	r2, #3
 8001116:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800111a:	68bb      	ldr	r3, [r7, #8]
 800111c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001120:	d102      	bne.n	8001128 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2200      	movs	r2, #0
 8001126:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4618      	mov	r0, r3
 800112e:	f002 ff68 	bl	8004002 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6818      	ldr	r0, [r3, #0]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	7c1a      	ldrb	r2, [r3, #16]
 800113a:	f88d 2000 	strb.w	r2, [sp]
 800113e:	3304      	adds	r3, #4
 8001140:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001142:	f002 fe47 	bl	8003dd4 <USB_CoreInit>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d005      	beq.n	8001158 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2202      	movs	r2, #2
 8001150:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001154:	2301      	movs	r3, #1
 8001156:	e0ce      	b.n	80012f6 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	2100      	movs	r1, #0
 800115e:	4618      	mov	r0, r3
 8001160:	f002 ff60 	bl	8004024 <USB_SetCurrentMode>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d005      	beq.n	8001176 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2202      	movs	r2, #2
 800116e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	e0bf      	b.n	80012f6 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001176:	2300      	movs	r3, #0
 8001178:	73fb      	strb	r3, [r7, #15]
 800117a:	e04a      	b.n	8001212 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800117c:	7bfa      	ldrb	r2, [r7, #15]
 800117e:	6879      	ldr	r1, [r7, #4]
 8001180:	4613      	mov	r3, r2
 8001182:	00db      	lsls	r3, r3, #3
 8001184:	4413      	add	r3, r2
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	440b      	add	r3, r1
 800118a:	3315      	adds	r3, #21
 800118c:	2201      	movs	r2, #1
 800118e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001190:	7bfa      	ldrb	r2, [r7, #15]
 8001192:	6879      	ldr	r1, [r7, #4]
 8001194:	4613      	mov	r3, r2
 8001196:	00db      	lsls	r3, r3, #3
 8001198:	4413      	add	r3, r2
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	440b      	add	r3, r1
 800119e:	3314      	adds	r3, #20
 80011a0:	7bfa      	ldrb	r2, [r7, #15]
 80011a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80011a4:	7bfa      	ldrb	r2, [r7, #15]
 80011a6:	7bfb      	ldrb	r3, [r7, #15]
 80011a8:	b298      	uxth	r0, r3
 80011aa:	6879      	ldr	r1, [r7, #4]
 80011ac:	4613      	mov	r3, r2
 80011ae:	00db      	lsls	r3, r3, #3
 80011b0:	4413      	add	r3, r2
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	440b      	add	r3, r1
 80011b6:	332e      	adds	r3, #46	@ 0x2e
 80011b8:	4602      	mov	r2, r0
 80011ba:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80011bc:	7bfa      	ldrb	r2, [r7, #15]
 80011be:	6879      	ldr	r1, [r7, #4]
 80011c0:	4613      	mov	r3, r2
 80011c2:	00db      	lsls	r3, r3, #3
 80011c4:	4413      	add	r3, r2
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	440b      	add	r3, r1
 80011ca:	3318      	adds	r3, #24
 80011cc:	2200      	movs	r2, #0
 80011ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80011d0:	7bfa      	ldrb	r2, [r7, #15]
 80011d2:	6879      	ldr	r1, [r7, #4]
 80011d4:	4613      	mov	r3, r2
 80011d6:	00db      	lsls	r3, r3, #3
 80011d8:	4413      	add	r3, r2
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	440b      	add	r3, r1
 80011de:	331c      	adds	r3, #28
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80011e4:	7bfa      	ldrb	r2, [r7, #15]
 80011e6:	6879      	ldr	r1, [r7, #4]
 80011e8:	4613      	mov	r3, r2
 80011ea:	00db      	lsls	r3, r3, #3
 80011ec:	4413      	add	r3, r2
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	440b      	add	r3, r1
 80011f2:	3320      	adds	r3, #32
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80011f8:	7bfa      	ldrb	r2, [r7, #15]
 80011fa:	6879      	ldr	r1, [r7, #4]
 80011fc:	4613      	mov	r3, r2
 80011fe:	00db      	lsls	r3, r3, #3
 8001200:	4413      	add	r3, r2
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	440b      	add	r3, r1
 8001206:	3324      	adds	r3, #36	@ 0x24
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800120c:	7bfb      	ldrb	r3, [r7, #15]
 800120e:	3301      	adds	r3, #1
 8001210:	73fb      	strb	r3, [r7, #15]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	791b      	ldrb	r3, [r3, #4]
 8001216:	7bfa      	ldrb	r2, [r7, #15]
 8001218:	429a      	cmp	r2, r3
 800121a:	d3af      	bcc.n	800117c <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800121c:	2300      	movs	r3, #0
 800121e:	73fb      	strb	r3, [r7, #15]
 8001220:	e044      	b.n	80012ac <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001222:	7bfa      	ldrb	r2, [r7, #15]
 8001224:	6879      	ldr	r1, [r7, #4]
 8001226:	4613      	mov	r3, r2
 8001228:	00db      	lsls	r3, r3, #3
 800122a:	4413      	add	r3, r2
 800122c:	009b      	lsls	r3, r3, #2
 800122e:	440b      	add	r3, r1
 8001230:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001234:	2200      	movs	r2, #0
 8001236:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001238:	7bfa      	ldrb	r2, [r7, #15]
 800123a:	6879      	ldr	r1, [r7, #4]
 800123c:	4613      	mov	r3, r2
 800123e:	00db      	lsls	r3, r3, #3
 8001240:	4413      	add	r3, r2
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	440b      	add	r3, r1
 8001246:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800124a:	7bfa      	ldrb	r2, [r7, #15]
 800124c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800124e:	7bfa      	ldrb	r2, [r7, #15]
 8001250:	6879      	ldr	r1, [r7, #4]
 8001252:	4613      	mov	r3, r2
 8001254:	00db      	lsls	r3, r3, #3
 8001256:	4413      	add	r3, r2
 8001258:	009b      	lsls	r3, r3, #2
 800125a:	440b      	add	r3, r1
 800125c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001260:	2200      	movs	r2, #0
 8001262:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001264:	7bfa      	ldrb	r2, [r7, #15]
 8001266:	6879      	ldr	r1, [r7, #4]
 8001268:	4613      	mov	r3, r2
 800126a:	00db      	lsls	r3, r3, #3
 800126c:	4413      	add	r3, r2
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	440b      	add	r3, r1
 8001272:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800127a:	7bfa      	ldrb	r2, [r7, #15]
 800127c:	6879      	ldr	r1, [r7, #4]
 800127e:	4613      	mov	r3, r2
 8001280:	00db      	lsls	r3, r3, #3
 8001282:	4413      	add	r3, r2
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	440b      	add	r3, r1
 8001288:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001290:	7bfa      	ldrb	r2, [r7, #15]
 8001292:	6879      	ldr	r1, [r7, #4]
 8001294:	4613      	mov	r3, r2
 8001296:	00db      	lsls	r3, r3, #3
 8001298:	4413      	add	r3, r2
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	440b      	add	r3, r1
 800129e:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80012a2:	2200      	movs	r2, #0
 80012a4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012a6:	7bfb      	ldrb	r3, [r7, #15]
 80012a8:	3301      	adds	r3, #1
 80012aa:	73fb      	strb	r3, [r7, #15]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	791b      	ldrb	r3, [r3, #4]
 80012b0:	7bfa      	ldrb	r2, [r7, #15]
 80012b2:	429a      	cmp	r2, r3
 80012b4:	d3b5      	bcc.n	8001222 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6818      	ldr	r0, [r3, #0]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	7c1a      	ldrb	r2, [r3, #16]
 80012be:	f88d 2000 	strb.w	r2, [sp]
 80012c2:	3304      	adds	r3, #4
 80012c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012c6:	f002 fef9 	bl	80040bc <USB_DevInit>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d005      	beq.n	80012dc <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2202      	movs	r2, #2
 80012d4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80012d8:	2301      	movs	r3, #1
 80012da:	e00c      	b.n	80012f6 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2200      	movs	r2, #0
 80012e0:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2201      	movs	r2, #1
 80012e6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4618      	mov	r0, r3
 80012f0:	f003 ff3d 	bl	800516e <USB_DevDisconnect>

  return HAL_OK;
 80012f4:	2300      	movs	r3, #0
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3710      	adds	r7, #16
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}

080012fe <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80012fe:	b580      	push	{r7, lr}
 8001300:	b084      	sub	sp, #16
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001312:	2b01      	cmp	r3, #1
 8001314:	d101      	bne.n	800131a <HAL_PCD_Start+0x1c>
 8001316:	2302      	movs	r3, #2
 8001318:	e022      	b.n	8001360 <HAL_PCD_Start+0x62>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2201      	movs	r2, #1
 800131e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	68db      	ldr	r3, [r3, #12]
 8001326:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800132a:	2b00      	cmp	r3, #0
 800132c:	d009      	beq.n	8001342 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001332:	2b01      	cmp	r3, #1
 8001334:	d105      	bne.n	8001342 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800133a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4618      	mov	r0, r3
 8001348:	f002 fe4a 	bl	8003fe0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4618      	mov	r0, r3
 8001352:	f003 feeb 	bl	800512c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2200      	movs	r2, #0
 800135a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800135e:	2300      	movs	r3, #0
}
 8001360:	4618      	mov	r0, r3
 8001362:	3710      	adds	r7, #16
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}

08001368 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001368:	b590      	push	{r4, r7, lr}
 800136a:	b08d      	sub	sp, #52	@ 0x34
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001376:	6a3b      	ldr	r3, [r7, #32]
 8001378:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4618      	mov	r0, r3
 8001380:	f003 ffa9 	bl	80052d6 <USB_GetMode>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	f040 848c 	bne.w	8001ca4 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4618      	mov	r0, r3
 8001392:	f003 ff0d 	bl	80051b0 <USB_ReadInterrupts>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	f000 8482 	beq.w	8001ca2 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	0a1b      	lsrs	r3, r3, #8
 80013a8:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4618      	mov	r0, r3
 80013b8:	f003 fefa 	bl	80051b0 <USB_ReadInterrupts>
 80013bc:	4603      	mov	r3, r0
 80013be:	f003 0302 	and.w	r3, r3, #2
 80013c2:	2b02      	cmp	r3, #2
 80013c4:	d107      	bne.n	80013d6 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	695a      	ldr	r2, [r3, #20]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f002 0202 	and.w	r2, r2, #2
 80013d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4618      	mov	r0, r3
 80013dc:	f003 fee8 	bl	80051b0 <USB_ReadInterrupts>
 80013e0:	4603      	mov	r3, r0
 80013e2:	f003 0310 	and.w	r3, r3, #16
 80013e6:	2b10      	cmp	r3, #16
 80013e8:	d161      	bne.n	80014ae <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	699a      	ldr	r2, [r3, #24]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f022 0210 	bic.w	r2, r2, #16
 80013f8:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80013fa:	6a3b      	ldr	r3, [r7, #32]
 80013fc:	6a1b      	ldr	r3, [r3, #32]
 80013fe:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001400:	69bb      	ldr	r3, [r7, #24]
 8001402:	f003 020f 	and.w	r2, r3, #15
 8001406:	4613      	mov	r3, r2
 8001408:	00db      	lsls	r3, r3, #3
 800140a:	4413      	add	r3, r2
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001412:	687a      	ldr	r2, [r7, #4]
 8001414:	4413      	add	r3, r2
 8001416:	3304      	adds	r3, #4
 8001418:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800141a:	69bb      	ldr	r3, [r7, #24]
 800141c:	0c5b      	lsrs	r3, r3, #17
 800141e:	f003 030f 	and.w	r3, r3, #15
 8001422:	2b02      	cmp	r3, #2
 8001424:	d124      	bne.n	8001470 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001426:	69ba      	ldr	r2, [r7, #24]
 8001428:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800142c:	4013      	ands	r3, r2
 800142e:	2b00      	cmp	r3, #0
 8001430:	d035      	beq.n	800149e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001436:	69bb      	ldr	r3, [r7, #24]
 8001438:	091b      	lsrs	r3, r3, #4
 800143a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800143c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001440:	b29b      	uxth	r3, r3
 8001442:	461a      	mov	r2, r3
 8001444:	6a38      	ldr	r0, [r7, #32]
 8001446:	f003 fd1f 	bl	8004e88 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	68da      	ldr	r2, [r3, #12]
 800144e:	69bb      	ldr	r3, [r7, #24]
 8001450:	091b      	lsrs	r3, r3, #4
 8001452:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001456:	441a      	add	r2, r3
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	695a      	ldr	r2, [r3, #20]
 8001460:	69bb      	ldr	r3, [r7, #24]
 8001462:	091b      	lsrs	r3, r3, #4
 8001464:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001468:	441a      	add	r2, r3
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	615a      	str	r2, [r3, #20]
 800146e:	e016      	b.n	800149e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001470:	69bb      	ldr	r3, [r7, #24]
 8001472:	0c5b      	lsrs	r3, r3, #17
 8001474:	f003 030f 	and.w	r3, r3, #15
 8001478:	2b06      	cmp	r3, #6
 800147a:	d110      	bne.n	800149e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001482:	2208      	movs	r2, #8
 8001484:	4619      	mov	r1, r3
 8001486:	6a38      	ldr	r0, [r7, #32]
 8001488:	f003 fcfe 	bl	8004e88 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	695a      	ldr	r2, [r3, #20]
 8001490:	69bb      	ldr	r3, [r7, #24]
 8001492:	091b      	lsrs	r3, r3, #4
 8001494:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001498:	441a      	add	r2, r3
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	699a      	ldr	r2, [r3, #24]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f042 0210 	orr.w	r2, r2, #16
 80014ac:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4618      	mov	r0, r3
 80014b4:	f003 fe7c 	bl	80051b0 <USB_ReadInterrupts>
 80014b8:	4603      	mov	r3, r0
 80014ba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80014be:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80014c2:	f040 80a7 	bne.w	8001614 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80014c6:	2300      	movs	r3, #0
 80014c8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4618      	mov	r0, r3
 80014d0:	f003 fe81 	bl	80051d6 <USB_ReadDevAllOutEpInterrupt>
 80014d4:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80014d6:	e099      	b.n	800160c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80014d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014da:	f003 0301 	and.w	r3, r3, #1
 80014de:	2b00      	cmp	r3, #0
 80014e0:	f000 808e 	beq.w	8001600 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80014ea:	b2d2      	uxtb	r2, r2
 80014ec:	4611      	mov	r1, r2
 80014ee:	4618      	mov	r0, r3
 80014f0:	f003 fea5 	bl	800523e <USB_ReadDevOutEPInterrupt>
 80014f4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	f003 0301 	and.w	r3, r3, #1
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d00c      	beq.n	800151a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001502:	015a      	lsls	r2, r3, #5
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	4413      	add	r3, r2
 8001508:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800150c:	461a      	mov	r2, r3
 800150e:	2301      	movs	r3, #1
 8001510:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001512:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f000 fea1 	bl	800225c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	f003 0308 	and.w	r3, r3, #8
 8001520:	2b00      	cmp	r3, #0
 8001522:	d00c      	beq.n	800153e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001526:	015a      	lsls	r2, r3, #5
 8001528:	69fb      	ldr	r3, [r7, #28]
 800152a:	4413      	add	r3, r2
 800152c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001530:	461a      	mov	r2, r3
 8001532:	2308      	movs	r3, #8
 8001534:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001536:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	f000 ff77 	bl	800242c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	f003 0310 	and.w	r3, r3, #16
 8001544:	2b00      	cmp	r3, #0
 8001546:	d008      	beq.n	800155a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800154a:	015a      	lsls	r2, r3, #5
 800154c:	69fb      	ldr	r3, [r7, #28]
 800154e:	4413      	add	r3, r2
 8001550:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001554:	461a      	mov	r2, r3
 8001556:	2310      	movs	r3, #16
 8001558:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	f003 0302 	and.w	r3, r3, #2
 8001560:	2b00      	cmp	r3, #0
 8001562:	d030      	beq.n	80015c6 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001564:	6a3b      	ldr	r3, [r7, #32]
 8001566:	695b      	ldr	r3, [r3, #20]
 8001568:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800156c:	2b80      	cmp	r3, #128	@ 0x80
 800156e:	d109      	bne.n	8001584 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	69fa      	ldr	r2, [r7, #28]
 800157a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800157e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001582:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001584:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001586:	4613      	mov	r3, r2
 8001588:	00db      	lsls	r3, r3, #3
 800158a:	4413      	add	r3, r2
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001592:	687a      	ldr	r2, [r7, #4]
 8001594:	4413      	add	r3, r2
 8001596:	3304      	adds	r3, #4
 8001598:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	78db      	ldrb	r3, [r3, #3]
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d108      	bne.n	80015b4 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	2200      	movs	r2, #0
 80015a6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80015a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	4619      	mov	r1, r3
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f006 fa1a 	bl	80079e8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80015b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015b6:	015a      	lsls	r2, r3, #5
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	4413      	add	r3, r2
 80015bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80015c0:	461a      	mov	r2, r3
 80015c2:	2302      	movs	r3, #2
 80015c4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	f003 0320 	and.w	r3, r3, #32
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d008      	beq.n	80015e2 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80015d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015d2:	015a      	lsls	r2, r3, #5
 80015d4:	69fb      	ldr	r3, [r7, #28]
 80015d6:	4413      	add	r3, r2
 80015d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80015dc:	461a      	mov	r2, r3
 80015de:	2320      	movs	r3, #32
 80015e0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d009      	beq.n	8001600 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80015ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015ee:	015a      	lsls	r2, r3, #5
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	4413      	add	r3, r2
 80015f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80015f8:	461a      	mov	r2, r3
 80015fa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015fe:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001602:	3301      	adds	r3, #1
 8001604:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001608:	085b      	lsrs	r3, r3, #1
 800160a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800160c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800160e:	2b00      	cmp	r3, #0
 8001610:	f47f af62 	bne.w	80014d8 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4618      	mov	r0, r3
 800161a:	f003 fdc9 	bl	80051b0 <USB_ReadInterrupts>
 800161e:	4603      	mov	r3, r0
 8001620:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001624:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001628:	f040 80db 	bne.w	80017e2 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4618      	mov	r0, r3
 8001632:	f003 fdea 	bl	800520a <USB_ReadDevAllInEpInterrupt>
 8001636:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8001638:	2300      	movs	r3, #0
 800163a:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800163c:	e0cd      	b.n	80017da <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800163e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001640:	f003 0301 	and.w	r3, r3, #1
 8001644:	2b00      	cmp	r3, #0
 8001646:	f000 80c2 	beq.w	80017ce <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001650:	b2d2      	uxtb	r2, r2
 8001652:	4611      	mov	r1, r2
 8001654:	4618      	mov	r0, r3
 8001656:	f003 fe10 	bl	800527a <USB_ReadDevInEPInterrupt>
 800165a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	f003 0301 	and.w	r3, r3, #1
 8001662:	2b00      	cmp	r3, #0
 8001664:	d057      	beq.n	8001716 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001668:	f003 030f 	and.w	r3, r3, #15
 800166c:	2201      	movs	r2, #1
 800166e:	fa02 f303 	lsl.w	r3, r2, r3
 8001672:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800167a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	43db      	mvns	r3, r3
 8001680:	69f9      	ldr	r1, [r7, #28]
 8001682:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8001686:	4013      	ands	r3, r2
 8001688:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800168a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800168c:	015a      	lsls	r2, r3, #5
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	4413      	add	r3, r2
 8001692:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001696:	461a      	mov	r2, r3
 8001698:	2301      	movs	r3, #1
 800169a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	799b      	ldrb	r3, [r3, #6]
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d132      	bne.n	800170a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80016a4:	6879      	ldr	r1, [r7, #4]
 80016a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016a8:	4613      	mov	r3, r2
 80016aa:	00db      	lsls	r3, r3, #3
 80016ac:	4413      	add	r3, r2
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	440b      	add	r3, r1
 80016b2:	3320      	adds	r3, #32
 80016b4:	6819      	ldr	r1, [r3, #0]
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016ba:	4613      	mov	r3, r2
 80016bc:	00db      	lsls	r3, r3, #3
 80016be:	4413      	add	r3, r2
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	4403      	add	r3, r0
 80016c4:	331c      	adds	r3, #28
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4419      	add	r1, r3
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016ce:	4613      	mov	r3, r2
 80016d0:	00db      	lsls	r3, r3, #3
 80016d2:	4413      	add	r3, r2
 80016d4:	009b      	lsls	r3, r3, #2
 80016d6:	4403      	add	r3, r0
 80016d8:	3320      	adds	r3, #32
 80016da:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80016dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d113      	bne.n	800170a <HAL_PCD_IRQHandler+0x3a2>
 80016e2:	6879      	ldr	r1, [r7, #4]
 80016e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016e6:	4613      	mov	r3, r2
 80016e8:	00db      	lsls	r3, r3, #3
 80016ea:	4413      	add	r3, r2
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	440b      	add	r3, r1
 80016f0:	3324      	adds	r3, #36	@ 0x24
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d108      	bne.n	800170a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6818      	ldr	r0, [r3, #0]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001702:	461a      	mov	r2, r3
 8001704:	2101      	movs	r1, #1
 8001706:	f003 fe17 	bl	8005338 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800170a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800170c:	b2db      	uxtb	r3, r3
 800170e:	4619      	mov	r1, r3
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f006 f8ee 	bl	80078f2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	f003 0308 	and.w	r3, r3, #8
 800171c:	2b00      	cmp	r3, #0
 800171e:	d008      	beq.n	8001732 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001722:	015a      	lsls	r2, r3, #5
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	4413      	add	r3, r2
 8001728:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800172c:	461a      	mov	r2, r3
 800172e:	2308      	movs	r3, #8
 8001730:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	f003 0310 	and.w	r3, r3, #16
 8001738:	2b00      	cmp	r3, #0
 800173a:	d008      	beq.n	800174e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800173c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800173e:	015a      	lsls	r2, r3, #5
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	4413      	add	r3, r2
 8001744:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001748:	461a      	mov	r2, r3
 800174a:	2310      	movs	r3, #16
 800174c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001754:	2b00      	cmp	r3, #0
 8001756:	d008      	beq.n	800176a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800175a:	015a      	lsls	r2, r3, #5
 800175c:	69fb      	ldr	r3, [r7, #28]
 800175e:	4413      	add	r3, r2
 8001760:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001764:	461a      	mov	r2, r3
 8001766:	2340      	movs	r3, #64	@ 0x40
 8001768:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	f003 0302 	and.w	r3, r3, #2
 8001770:	2b00      	cmp	r3, #0
 8001772:	d023      	beq.n	80017bc <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001774:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001776:	6a38      	ldr	r0, [r7, #32]
 8001778:	f002 fe04 	bl	8004384 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800177c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800177e:	4613      	mov	r3, r2
 8001780:	00db      	lsls	r3, r3, #3
 8001782:	4413      	add	r3, r2
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	3310      	adds	r3, #16
 8001788:	687a      	ldr	r2, [r7, #4]
 800178a:	4413      	add	r3, r2
 800178c:	3304      	adds	r3, #4
 800178e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	78db      	ldrb	r3, [r3, #3]
 8001794:	2b01      	cmp	r3, #1
 8001796:	d108      	bne.n	80017aa <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	2200      	movs	r2, #0
 800179c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800179e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	4619      	mov	r1, r3
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	f006 f931 	bl	8007a0c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80017aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ac:	015a      	lsls	r2, r3, #5
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	4413      	add	r3, r2
 80017b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80017b6:	461a      	mov	r2, r3
 80017b8:	2302      	movs	r3, #2
 80017ba:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d003      	beq.n	80017ce <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80017c6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	f000 fcbb 	bl	8002144 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80017ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017d0:	3301      	adds	r3, #1
 80017d2:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80017d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017d6:	085b      	lsrs	r3, r3, #1
 80017d8:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80017da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017dc:	2b00      	cmp	r3, #0
 80017de:	f47f af2e 	bne.w	800163e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4618      	mov	r0, r3
 80017e8:	f003 fce2 	bl	80051b0 <USB_ReadInterrupts>
 80017ec:	4603      	mov	r3, r0
 80017ee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80017f2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80017f6:	d122      	bne.n	800183e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	69fa      	ldr	r2, [r7, #28]
 8001802:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001806:	f023 0301 	bic.w	r3, r3, #1
 800180a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8001812:	2b01      	cmp	r3, #1
 8001814:	d108      	bne.n	8001828 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2200      	movs	r2, #0
 800181a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800181e:	2100      	movs	r1, #0
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	f000 fea1 	bl	8002568 <HAL_PCDEx_LPM_Callback>
 8001826:	e002      	b.n	800182e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001828:	6878      	ldr	r0, [r7, #4]
 800182a:	f006 f8cf 	bl	80079cc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	695a      	ldr	r2, [r3, #20]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800183c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4618      	mov	r0, r3
 8001844:	f003 fcb4 	bl	80051b0 <USB_ReadInterrupts>
 8001848:	4603      	mov	r3, r0
 800184a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800184e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001852:	d112      	bne.n	800187a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	f003 0301 	and.w	r3, r3, #1
 8001860:	2b01      	cmp	r3, #1
 8001862:	d102      	bne.n	800186a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001864:	6878      	ldr	r0, [r7, #4]
 8001866:	f006 f88b 	bl	8007980 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	695a      	ldr	r2, [r3, #20]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8001878:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4618      	mov	r0, r3
 8001880:	f003 fc96 	bl	80051b0 <USB_ReadInterrupts>
 8001884:	4603      	mov	r3, r0
 8001886:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800188a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800188e:	f040 80b7 	bne.w	8001a00 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	69fa      	ldr	r2, [r7, #28]
 800189c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80018a0:	f023 0301 	bic.w	r3, r3, #1
 80018a4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	2110      	movs	r1, #16
 80018ac:	4618      	mov	r0, r3
 80018ae:	f002 fd69 	bl	8004384 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018b2:	2300      	movs	r3, #0
 80018b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80018b6:	e046      	b.n	8001946 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80018b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018ba:	015a      	lsls	r2, r3, #5
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	4413      	add	r3, r2
 80018c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80018c4:	461a      	mov	r2, r3
 80018c6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80018ca:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80018cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018ce:	015a      	lsls	r2, r3, #5
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	4413      	add	r3, r2
 80018d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80018dc:	0151      	lsls	r1, r2, #5
 80018de:	69fa      	ldr	r2, [r7, #28]
 80018e0:	440a      	add	r2, r1
 80018e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80018e6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80018ea:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80018ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018ee:	015a      	lsls	r2, r3, #5
 80018f0:	69fb      	ldr	r3, [r7, #28]
 80018f2:	4413      	add	r3, r2
 80018f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80018f8:	461a      	mov	r2, r3
 80018fa:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80018fe:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001900:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001902:	015a      	lsls	r2, r3, #5
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	4413      	add	r3, r2
 8001908:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001910:	0151      	lsls	r1, r2, #5
 8001912:	69fa      	ldr	r2, [r7, #28]
 8001914:	440a      	add	r2, r1
 8001916:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800191a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800191e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001920:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001922:	015a      	lsls	r2, r3, #5
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	4413      	add	r3, r2
 8001928:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001930:	0151      	lsls	r1, r2, #5
 8001932:	69fa      	ldr	r2, [r7, #28]
 8001934:	440a      	add	r2, r1
 8001936:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800193a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800193e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001940:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001942:	3301      	adds	r3, #1
 8001944:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	791b      	ldrb	r3, [r3, #4]
 800194a:	461a      	mov	r2, r3
 800194c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800194e:	4293      	cmp	r3, r2
 8001950:	d3b2      	bcc.n	80018b8 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001958:	69db      	ldr	r3, [r3, #28]
 800195a:	69fa      	ldr	r2, [r7, #28]
 800195c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001960:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8001964:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	7bdb      	ldrb	r3, [r3, #15]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d016      	beq.n	800199c <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001974:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001978:	69fa      	ldr	r2, [r7, #28]
 800197a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800197e:	f043 030b 	orr.w	r3, r3, #11
 8001982:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800198c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800198e:	69fa      	ldr	r2, [r7, #28]
 8001990:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001994:	f043 030b 	orr.w	r3, r3, #11
 8001998:	6453      	str	r3, [r2, #68]	@ 0x44
 800199a:	e015      	b.n	80019c8 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800199c:	69fb      	ldr	r3, [r7, #28]
 800199e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80019a2:	695b      	ldr	r3, [r3, #20]
 80019a4:	69fa      	ldr	r2, [r7, #28]
 80019a6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80019aa:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80019ae:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80019b2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80019ba:	691b      	ldr	r3, [r3, #16]
 80019bc:	69fa      	ldr	r2, [r7, #28]
 80019be:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80019c2:	f043 030b 	orr.w	r3, r3, #11
 80019c6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	69fa      	ldr	r2, [r7, #28]
 80019d2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80019d6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80019da:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6818      	ldr	r0, [r3, #0]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80019ea:	461a      	mov	r2, r3
 80019ec:	f003 fca4 	bl	8005338 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	695a      	ldr	r2, [r3, #20]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80019fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4618      	mov	r0, r3
 8001a06:	f003 fbd3 	bl	80051b0 <USB_ReadInterrupts>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001a10:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001a14:	d123      	bne.n	8001a5e <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f003 fc69 	bl	80052f2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4618      	mov	r0, r3
 8001a26:	f002 fd26 	bl	8004476 <USB_GetDevSpeed>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681c      	ldr	r4, [r3, #0]
 8001a36:	f001 f9c7 	bl	8002dc8 <HAL_RCC_GetHCLKFreq>
 8001a3a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001a40:	461a      	mov	r2, r3
 8001a42:	4620      	mov	r0, r4
 8001a44:	f002 fa2a 	bl	8003e9c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f005 ff7a 	bl	8007942 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	695a      	ldr	r2, [r3, #20]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8001a5c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4618      	mov	r0, r3
 8001a64:	f003 fba4 	bl	80051b0 <USB_ReadInterrupts>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	f003 0308 	and.w	r3, r3, #8
 8001a6e:	2b08      	cmp	r3, #8
 8001a70:	d10a      	bne.n	8001a88 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f005 ff57 	bl	8007926 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	695a      	ldr	r2, [r3, #20]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f002 0208 	and.w	r2, r2, #8
 8001a86:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f003 fb8f 	bl	80051b0 <USB_ReadInterrupts>
 8001a92:	4603      	mov	r3, r0
 8001a94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a98:	2b80      	cmp	r3, #128	@ 0x80
 8001a9a:	d123      	bne.n	8001ae4 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001a9c:	6a3b      	ldr	r3, [r7, #32]
 8001a9e:	699b      	ldr	r3, [r3, #24]
 8001aa0:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001aa4:	6a3b      	ldr	r3, [r7, #32]
 8001aa6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	627b      	str	r3, [r7, #36]	@ 0x24
 8001aac:	e014      	b.n	8001ad8 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001aae:	6879      	ldr	r1, [r7, #4]
 8001ab0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ab2:	4613      	mov	r3, r2
 8001ab4:	00db      	lsls	r3, r3, #3
 8001ab6:	4413      	add	r3, r2
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	440b      	add	r3, r1
 8001abc:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d105      	bne.n	8001ad2 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	4619      	mov	r1, r3
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	f000 fb08 	bl	80020e2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ad4:	3301      	adds	r3, #1
 8001ad6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	791b      	ldrb	r3, [r3, #4]
 8001adc:	461a      	mov	r2, r3
 8001ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d3e4      	bcc.n	8001aae <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f003 fb61 	bl	80051b0 <USB_ReadInterrupts>
 8001aee:	4603      	mov	r3, r0
 8001af0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001af4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001af8:	d13c      	bne.n	8001b74 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001afa:	2301      	movs	r3, #1
 8001afc:	627b      	str	r3, [r7, #36]	@ 0x24
 8001afe:	e02b      	b.n	8001b58 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b02:	015a      	lsls	r2, r3, #5
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	4413      	add	r3, r2
 8001b08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b10:	6879      	ldr	r1, [r7, #4]
 8001b12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b14:	4613      	mov	r3, r2
 8001b16:	00db      	lsls	r3, r3, #3
 8001b18:	4413      	add	r3, r2
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	440b      	add	r3, r1
 8001b1e:	3318      	adds	r3, #24
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d115      	bne.n	8001b52 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001b26:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	da12      	bge.n	8001b52 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001b2c:	6879      	ldr	r1, [r7, #4]
 8001b2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b30:	4613      	mov	r3, r2
 8001b32:	00db      	lsls	r3, r3, #3
 8001b34:	4413      	add	r3, r2
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	440b      	add	r3, r1
 8001b3a:	3317      	adds	r3, #23
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f000 fac8 	bl	80020e2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b54:	3301      	adds	r3, #1
 8001b56:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	791b      	ldrb	r3, [r3, #4]
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d3cd      	bcc.n	8001b00 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	695a      	ldr	r2, [r3, #20]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8001b72:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f003 fb19 	bl	80051b0 <USB_ReadInterrupts>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b84:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001b88:	d156      	bne.n	8001c38 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b8e:	e045      	b.n	8001c1c <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b92:	015a      	lsls	r2, r3, #5
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	4413      	add	r3, r2
 8001b98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001ba0:	6879      	ldr	r1, [r7, #4]
 8001ba2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	00db      	lsls	r3, r3, #3
 8001ba8:	4413      	add	r3, r2
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	440b      	add	r3, r1
 8001bae:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d12e      	bne.n	8001c16 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001bb8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	da2b      	bge.n	8001c16 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001bbe:	69bb      	ldr	r3, [r7, #24]
 8001bc0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8001bca:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d121      	bne.n	8001c16 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001bd2:	6879      	ldr	r1, [r7, #4]
 8001bd4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001bd6:	4613      	mov	r3, r2
 8001bd8:	00db      	lsls	r3, r3, #3
 8001bda:	4413      	add	r3, r2
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	440b      	add	r3, r1
 8001be0:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001be4:	2201      	movs	r2, #1
 8001be6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001be8:	6a3b      	ldr	r3, [r7, #32]
 8001bea:	699b      	ldr	r3, [r3, #24]
 8001bec:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001bf0:	6a3b      	ldr	r3, [r7, #32]
 8001bf2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001bf4:	6a3b      	ldr	r3, [r7, #32]
 8001bf6:	695b      	ldr	r3, [r3, #20]
 8001bf8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d10a      	bne.n	8001c16 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	69fa      	ldr	r2, [r7, #28]
 8001c0a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001c0e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c12:	6053      	str	r3, [r2, #4]
            break;
 8001c14:	e008      	b.n	8001c28 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c18:	3301      	adds	r3, #1
 8001c1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	791b      	ldrb	r3, [r3, #4]
 8001c20:	461a      	mov	r2, r3
 8001c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d3b3      	bcc.n	8001b90 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	695a      	ldr	r2, [r3, #20]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8001c36:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f003 fab7 	bl	80051b0 <USB_ReadInterrupts>
 8001c42:	4603      	mov	r3, r0
 8001c44:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001c48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c4c:	d10a      	bne.n	8001c64 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f005 feee 	bl	8007a30 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	695a      	ldr	r2, [r3, #20]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8001c62:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f003 faa1 	bl	80051b0 <USB_ReadInterrupts>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	f003 0304 	and.w	r3, r3, #4
 8001c74:	2b04      	cmp	r3, #4
 8001c76:	d115      	bne.n	8001ca4 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001c80:	69bb      	ldr	r3, [r7, #24]
 8001c82:	f003 0304 	and.w	r3, r3, #4
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d002      	beq.n	8001c90 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f005 fede 	bl	8007a4c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	6859      	ldr	r1, [r3, #4]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	69ba      	ldr	r2, [r7, #24]
 8001c9c:	430a      	orrs	r2, r1
 8001c9e:	605a      	str	r2, [r3, #4]
 8001ca0:	e000      	b.n	8001ca4 <HAL_PCD_IRQHandler+0x93c>
      return;
 8001ca2:	bf00      	nop
    }
  }
}
 8001ca4:	3734      	adds	r7, #52	@ 0x34
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd90      	pop	{r4, r7, pc}

08001caa <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b082      	sub	sp, #8
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]
 8001cb2:	460b      	mov	r3, r1
 8001cb4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d101      	bne.n	8001cc4 <HAL_PCD_SetAddress+0x1a>
 8001cc0:	2302      	movs	r3, #2
 8001cc2:	e012      	b.n	8001cea <HAL_PCD_SetAddress+0x40>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	78fa      	ldrb	r2, [r7, #3]
 8001cd0:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	78fa      	ldrb	r2, [r7, #3]
 8001cd8:	4611      	mov	r1, r2
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f003 fa00 	bl	80050e0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001ce8:	2300      	movs	r3, #0
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3708      	adds	r7, #8
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001cf2:	b580      	push	{r7, lr}
 8001cf4:	b084      	sub	sp, #16
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
 8001cfa:	4608      	mov	r0, r1
 8001cfc:	4611      	mov	r1, r2
 8001cfe:	461a      	mov	r2, r3
 8001d00:	4603      	mov	r3, r0
 8001d02:	70fb      	strb	r3, [r7, #3]
 8001d04:	460b      	mov	r3, r1
 8001d06:	803b      	strh	r3, [r7, #0]
 8001d08:	4613      	mov	r3, r2
 8001d0a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	da0f      	bge.n	8001d38 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d18:	78fb      	ldrb	r3, [r7, #3]
 8001d1a:	f003 020f 	and.w	r2, r3, #15
 8001d1e:	4613      	mov	r3, r2
 8001d20:	00db      	lsls	r3, r3, #3
 8001d22:	4413      	add	r3, r2
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	3310      	adds	r3, #16
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	4413      	add	r3, r2
 8001d2c:	3304      	adds	r3, #4
 8001d2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	2201      	movs	r2, #1
 8001d34:	705a      	strb	r2, [r3, #1]
 8001d36:	e00f      	b.n	8001d58 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d38:	78fb      	ldrb	r3, [r7, #3]
 8001d3a:	f003 020f 	and.w	r2, r3, #15
 8001d3e:	4613      	mov	r3, r2
 8001d40:	00db      	lsls	r3, r3, #3
 8001d42:	4413      	add	r3, r2
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	4413      	add	r3, r2
 8001d4e:	3304      	adds	r3, #4
 8001d50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	2200      	movs	r2, #0
 8001d56:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001d58:	78fb      	ldrb	r3, [r7, #3]
 8001d5a:	f003 030f 	and.w	r3, r3, #15
 8001d5e:	b2da      	uxtb	r2, r3
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001d64:	883a      	ldrh	r2, [r7, #0]
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	78ba      	ldrb	r2, [r7, #2]
 8001d6e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	785b      	ldrb	r3, [r3, #1]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d004      	beq.n	8001d82 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001d82:	78bb      	ldrb	r3, [r7, #2]
 8001d84:	2b02      	cmp	r3, #2
 8001d86:	d102      	bne.n	8001d8e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d101      	bne.n	8001d9c <HAL_PCD_EP_Open+0xaa>
 8001d98:	2302      	movs	r3, #2
 8001d9a:	e00e      	b.n	8001dba <HAL_PCD_EP_Open+0xc8>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2201      	movs	r2, #1
 8001da0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	68f9      	ldr	r1, [r7, #12]
 8001daa:	4618      	mov	r0, r3
 8001dac:	f002 fb88 	bl	80044c0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2200      	movs	r2, #0
 8001db4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8001db8:	7afb      	ldrb	r3, [r7, #11]
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3710      	adds	r7, #16
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}

08001dc2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001dc2:	b580      	push	{r7, lr}
 8001dc4:	b084      	sub	sp, #16
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	6078      	str	r0, [r7, #4]
 8001dca:	460b      	mov	r3, r1
 8001dcc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001dce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	da0f      	bge.n	8001df6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001dd6:	78fb      	ldrb	r3, [r7, #3]
 8001dd8:	f003 020f 	and.w	r2, r3, #15
 8001ddc:	4613      	mov	r3, r2
 8001dde:	00db      	lsls	r3, r3, #3
 8001de0:	4413      	add	r3, r2
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	3310      	adds	r3, #16
 8001de6:	687a      	ldr	r2, [r7, #4]
 8001de8:	4413      	add	r3, r2
 8001dea:	3304      	adds	r3, #4
 8001dec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	2201      	movs	r2, #1
 8001df2:	705a      	strb	r2, [r3, #1]
 8001df4:	e00f      	b.n	8001e16 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001df6:	78fb      	ldrb	r3, [r7, #3]
 8001df8:	f003 020f 	and.w	r2, r3, #15
 8001dfc:	4613      	mov	r3, r2
 8001dfe:	00db      	lsls	r3, r3, #3
 8001e00:	4413      	add	r3, r2
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001e08:	687a      	ldr	r2, [r7, #4]
 8001e0a:	4413      	add	r3, r2
 8001e0c:	3304      	adds	r3, #4
 8001e0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	2200      	movs	r2, #0
 8001e14:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e16:	78fb      	ldrb	r3, [r7, #3]
 8001e18:	f003 030f 	and.w	r3, r3, #15
 8001e1c:	b2da      	uxtb	r2, r3
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d101      	bne.n	8001e30 <HAL_PCD_EP_Close+0x6e>
 8001e2c:	2302      	movs	r3, #2
 8001e2e:	e00e      	b.n	8001e4e <HAL_PCD_EP_Close+0x8c>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2201      	movs	r2, #1
 8001e34:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	68f9      	ldr	r1, [r7, #12]
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f002 fbc6 	bl	80045d0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2200      	movs	r2, #0
 8001e48:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8001e4c:	2300      	movs	r3, #0
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3710      	adds	r7, #16
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}

08001e56 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e56:	b580      	push	{r7, lr}
 8001e58:	b086      	sub	sp, #24
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	60f8      	str	r0, [r7, #12]
 8001e5e:	607a      	str	r2, [r7, #4]
 8001e60:	603b      	str	r3, [r7, #0]
 8001e62:	460b      	mov	r3, r1
 8001e64:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e66:	7afb      	ldrb	r3, [r7, #11]
 8001e68:	f003 020f 	and.w	r2, r3, #15
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	00db      	lsls	r3, r3, #3
 8001e70:	4413      	add	r3, r2
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001e78:	68fa      	ldr	r2, [r7, #12]
 8001e7a:	4413      	add	r3, r2
 8001e7c:	3304      	adds	r3, #4
 8001e7e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	683a      	ldr	r2, [r7, #0]
 8001e8a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	2200      	movs	r2, #0
 8001e96:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e98:	7afb      	ldrb	r3, [r7, #11]
 8001e9a:	f003 030f 	and.w	r3, r3, #15
 8001e9e:	b2da      	uxtb	r2, r3
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	799b      	ldrb	r3, [r3, #6]
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d102      	bne.n	8001eb2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001eac:	687a      	ldr	r2, [r7, #4]
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	6818      	ldr	r0, [r3, #0]
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	799b      	ldrb	r3, [r3, #6]
 8001eba:	461a      	mov	r2, r3
 8001ebc:	6979      	ldr	r1, [r7, #20]
 8001ebe:	f002 fc63 	bl	8004788 <USB_EPStartXfer>

  return HAL_OK;
 8001ec2:	2300      	movs	r3, #0
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3718      	adds	r7, #24
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001ed8:	78fb      	ldrb	r3, [r7, #3]
 8001eda:	f003 020f 	and.w	r2, r3, #15
 8001ede:	6879      	ldr	r1, [r7, #4]
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	00db      	lsls	r3, r3, #3
 8001ee4:	4413      	add	r3, r2
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	440b      	add	r3, r1
 8001eea:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8001eee:	681b      	ldr	r3, [r3, #0]
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	370c      	adds	r7, #12
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr

08001efc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b086      	sub	sp, #24
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	60f8      	str	r0, [r7, #12]
 8001f04:	607a      	str	r2, [r7, #4]
 8001f06:	603b      	str	r3, [r7, #0]
 8001f08:	460b      	mov	r3, r1
 8001f0a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f0c:	7afb      	ldrb	r3, [r7, #11]
 8001f0e:	f003 020f 	and.w	r2, r3, #15
 8001f12:	4613      	mov	r3, r2
 8001f14:	00db      	lsls	r3, r3, #3
 8001f16:	4413      	add	r3, r2
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	3310      	adds	r3, #16
 8001f1c:	68fa      	ldr	r2, [r7, #12]
 8001f1e:	4413      	add	r3, r2
 8001f20:	3304      	adds	r3, #4
 8001f22:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	683a      	ldr	r2, [r7, #0]
 8001f2e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	2200      	movs	r2, #0
 8001f34:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	2201      	movs	r2, #1
 8001f3a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f3c:	7afb      	ldrb	r3, [r7, #11]
 8001f3e:	f003 030f 	and.w	r3, r3, #15
 8001f42:	b2da      	uxtb	r2, r3
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	799b      	ldrb	r3, [r3, #6]
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d102      	bne.n	8001f56 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001f50:	687a      	ldr	r2, [r7, #4]
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	6818      	ldr	r0, [r3, #0]
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	799b      	ldrb	r3, [r3, #6]
 8001f5e:	461a      	mov	r2, r3
 8001f60:	6979      	ldr	r1, [r7, #20]
 8001f62:	f002 fc11 	bl	8004788 <USB_EPStartXfer>

  return HAL_OK;
 8001f66:	2300      	movs	r3, #0
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3718      	adds	r7, #24
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}

08001f70 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	460b      	mov	r3, r1
 8001f7a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001f7c:	78fb      	ldrb	r3, [r7, #3]
 8001f7e:	f003 030f 	and.w	r3, r3, #15
 8001f82:	687a      	ldr	r2, [r7, #4]
 8001f84:	7912      	ldrb	r2, [r2, #4]
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d901      	bls.n	8001f8e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e04f      	b.n	800202e <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f8e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	da0f      	bge.n	8001fb6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f96:	78fb      	ldrb	r3, [r7, #3]
 8001f98:	f003 020f 	and.w	r2, r3, #15
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	00db      	lsls	r3, r3, #3
 8001fa0:	4413      	add	r3, r2
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	3310      	adds	r3, #16
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	4413      	add	r3, r2
 8001faa:	3304      	adds	r3, #4
 8001fac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	705a      	strb	r2, [r3, #1]
 8001fb4:	e00d      	b.n	8001fd2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001fb6:	78fa      	ldrb	r2, [r7, #3]
 8001fb8:	4613      	mov	r3, r2
 8001fba:	00db      	lsls	r3, r3, #3
 8001fbc:	4413      	add	r3, r2
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001fc4:	687a      	ldr	r2, [r7, #4]
 8001fc6:	4413      	add	r3, r2
 8001fc8:	3304      	adds	r3, #4
 8001fca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fd8:	78fb      	ldrb	r3, [r7, #3]
 8001fda:	f003 030f 	and.w	r3, r3, #15
 8001fde:	b2da      	uxtb	r2, r3
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d101      	bne.n	8001ff2 <HAL_PCD_EP_SetStall+0x82>
 8001fee:	2302      	movs	r3, #2
 8001ff0:	e01d      	b.n	800202e <HAL_PCD_EP_SetStall+0xbe>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	68f9      	ldr	r1, [r7, #12]
 8002000:	4618      	mov	r0, r3
 8002002:	f002 ff99 	bl	8004f38 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002006:	78fb      	ldrb	r3, [r7, #3]
 8002008:	f003 030f 	and.w	r3, r3, #15
 800200c:	2b00      	cmp	r3, #0
 800200e:	d109      	bne.n	8002024 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6818      	ldr	r0, [r3, #0]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	7999      	ldrb	r1, [r3, #6]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800201e:	461a      	mov	r2, r3
 8002020:	f003 f98a 	bl	8005338 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2200      	movs	r2, #0
 8002028:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800202c:	2300      	movs	r3, #0
}
 800202e:	4618      	mov	r0, r3
 8002030:	3710      	adds	r7, #16
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}

08002036 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002036:	b580      	push	{r7, lr}
 8002038:	b084      	sub	sp, #16
 800203a:	af00      	add	r7, sp, #0
 800203c:	6078      	str	r0, [r7, #4]
 800203e:	460b      	mov	r3, r1
 8002040:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002042:	78fb      	ldrb	r3, [r7, #3]
 8002044:	f003 030f 	and.w	r3, r3, #15
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	7912      	ldrb	r2, [r2, #4]
 800204c:	4293      	cmp	r3, r2
 800204e:	d901      	bls.n	8002054 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e042      	b.n	80020da <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002054:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002058:	2b00      	cmp	r3, #0
 800205a:	da0f      	bge.n	800207c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800205c:	78fb      	ldrb	r3, [r7, #3]
 800205e:	f003 020f 	and.w	r2, r3, #15
 8002062:	4613      	mov	r3, r2
 8002064:	00db      	lsls	r3, r3, #3
 8002066:	4413      	add	r3, r2
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	3310      	adds	r3, #16
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	4413      	add	r3, r2
 8002070:	3304      	adds	r3, #4
 8002072:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2201      	movs	r2, #1
 8002078:	705a      	strb	r2, [r3, #1]
 800207a:	e00f      	b.n	800209c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800207c:	78fb      	ldrb	r3, [r7, #3]
 800207e:	f003 020f 	and.w	r2, r3, #15
 8002082:	4613      	mov	r3, r2
 8002084:	00db      	lsls	r3, r3, #3
 8002086:	4413      	add	r3, r2
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	4413      	add	r3, r2
 8002092:	3304      	adds	r3, #4
 8002094:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	2200      	movs	r2, #0
 800209a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	2200      	movs	r2, #0
 80020a0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020a2:	78fb      	ldrb	r3, [r7, #3]
 80020a4:	f003 030f 	and.w	r3, r3, #15
 80020a8:	b2da      	uxtb	r2, r3
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d101      	bne.n	80020bc <HAL_PCD_EP_ClrStall+0x86>
 80020b8:	2302      	movs	r3, #2
 80020ba:	e00e      	b.n	80020da <HAL_PCD_EP_ClrStall+0xa4>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2201      	movs	r2, #1
 80020c0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	68f9      	ldr	r1, [r7, #12]
 80020ca:	4618      	mov	r0, r3
 80020cc:	f002 ffa2 	bl	8005014 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2200      	movs	r2, #0
 80020d4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80020d8:	2300      	movs	r3, #0
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3710      	adds	r7, #16
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}

080020e2 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020e2:	b580      	push	{r7, lr}
 80020e4:	b084      	sub	sp, #16
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	6078      	str	r0, [r7, #4]
 80020ea:	460b      	mov	r3, r1
 80020ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80020ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	da0c      	bge.n	8002110 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020f6:	78fb      	ldrb	r3, [r7, #3]
 80020f8:	f003 020f 	and.w	r2, r3, #15
 80020fc:	4613      	mov	r3, r2
 80020fe:	00db      	lsls	r3, r3, #3
 8002100:	4413      	add	r3, r2
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	3310      	adds	r3, #16
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	4413      	add	r3, r2
 800210a:	3304      	adds	r3, #4
 800210c:	60fb      	str	r3, [r7, #12]
 800210e:	e00c      	b.n	800212a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002110:	78fb      	ldrb	r3, [r7, #3]
 8002112:	f003 020f 	and.w	r2, r3, #15
 8002116:	4613      	mov	r3, r2
 8002118:	00db      	lsls	r3, r3, #3
 800211a:	4413      	add	r3, r2
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	4413      	add	r3, r2
 8002126:	3304      	adds	r3, #4
 8002128:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	68f9      	ldr	r1, [r7, #12]
 8002130:	4618      	mov	r0, r3
 8002132:	f002 fdc1 	bl	8004cb8 <USB_EPStopXfer>
 8002136:	4603      	mov	r3, r0
 8002138:	72fb      	strb	r3, [r7, #11]

  return ret;
 800213a:	7afb      	ldrb	r3, [r7, #11]
}
 800213c:	4618      	mov	r0, r3
 800213e:	3710      	adds	r7, #16
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}

08002144 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b08a      	sub	sp, #40	@ 0x28
 8002148:	af02      	add	r7, sp, #8
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002158:	683a      	ldr	r2, [r7, #0]
 800215a:	4613      	mov	r3, r2
 800215c:	00db      	lsls	r3, r3, #3
 800215e:	4413      	add	r3, r2
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	3310      	adds	r3, #16
 8002164:	687a      	ldr	r2, [r7, #4]
 8002166:	4413      	add	r3, r2
 8002168:	3304      	adds	r3, #4
 800216a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	695a      	ldr	r2, [r3, #20]
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	691b      	ldr	r3, [r3, #16]
 8002174:	429a      	cmp	r2, r3
 8002176:	d901      	bls.n	800217c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e06b      	b.n	8002254 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	691a      	ldr	r2, [r3, #16]
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	695b      	ldr	r3, [r3, #20]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	69fa      	ldr	r2, [r7, #28]
 800218e:	429a      	cmp	r2, r3
 8002190:	d902      	bls.n	8002198 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	3303      	adds	r3, #3
 800219c:	089b      	lsrs	r3, r3, #2
 800219e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80021a0:	e02a      	b.n	80021f8 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	691a      	ldr	r2, [r3, #16]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	695b      	ldr	r3, [r3, #20]
 80021aa:	1ad3      	subs	r3, r2, r3
 80021ac:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	69fa      	ldr	r2, [r7, #28]
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d902      	bls.n	80021be <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	3303      	adds	r3, #3
 80021c2:	089b      	lsrs	r3, r3, #2
 80021c4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	68d9      	ldr	r1, [r3, #12]
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	b2da      	uxtb	r2, r3
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80021d6:	9300      	str	r3, [sp, #0]
 80021d8:	4603      	mov	r3, r0
 80021da:	6978      	ldr	r0, [r7, #20]
 80021dc:	f002 fe16 	bl	8004e0c <USB_WritePacket>

    ep->xfer_buff  += len;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	68da      	ldr	r2, [r3, #12]
 80021e4:	69fb      	ldr	r3, [r7, #28]
 80021e6:	441a      	add	r2, r3
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	695a      	ldr	r2, [r3, #20]
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	441a      	add	r2, r3
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	015a      	lsls	r2, r3, #5
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	4413      	add	r3, r2
 8002200:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002204:	699b      	ldr	r3, [r3, #24]
 8002206:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002208:	69ba      	ldr	r2, [r7, #24]
 800220a:	429a      	cmp	r2, r3
 800220c:	d809      	bhi.n	8002222 <PCD_WriteEmptyTxFifo+0xde>
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	695a      	ldr	r2, [r3, #20]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002216:	429a      	cmp	r2, r3
 8002218:	d203      	bcs.n	8002222 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	691b      	ldr	r3, [r3, #16]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d1bf      	bne.n	80021a2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	691a      	ldr	r2, [r3, #16]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	695b      	ldr	r3, [r3, #20]
 800222a:	429a      	cmp	r2, r3
 800222c:	d811      	bhi.n	8002252 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	f003 030f 	and.w	r3, r3, #15
 8002234:	2201      	movs	r2, #1
 8002236:	fa02 f303 	lsl.w	r3, r2, r3
 800223a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002242:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	43db      	mvns	r3, r3
 8002248:	6939      	ldr	r1, [r7, #16]
 800224a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800224e:	4013      	ands	r3, r2
 8002250:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8002252:	2300      	movs	r3, #0
}
 8002254:	4618      	mov	r0, r3
 8002256:	3720      	adds	r7, #32
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}

0800225c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b088      	sub	sp, #32
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	333c      	adds	r3, #60	@ 0x3c
 8002274:	3304      	adds	r3, #4
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	015a      	lsls	r2, r3, #5
 800227e:	69bb      	ldr	r3, [r7, #24]
 8002280:	4413      	add	r3, r2
 8002282:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	799b      	ldrb	r3, [r3, #6]
 800228e:	2b01      	cmp	r3, #1
 8002290:	d17b      	bne.n	800238a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	f003 0308 	and.w	r3, r3, #8
 8002298:	2b00      	cmp	r3, #0
 800229a:	d015      	beq.n	80022c8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	4a61      	ldr	r2, [pc, #388]	@ (8002424 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	f240 80b9 	bls.w	8002418 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	f000 80b3 	beq.w	8002418 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	015a      	lsls	r2, r3, #5
 80022b6:	69bb      	ldr	r3, [r7, #24]
 80022b8:	4413      	add	r3, r2
 80022ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80022be:	461a      	mov	r2, r3
 80022c0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80022c4:	6093      	str	r3, [r2, #8]
 80022c6:	e0a7      	b.n	8002418 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	f003 0320 	and.w	r3, r3, #32
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d009      	beq.n	80022e6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	015a      	lsls	r2, r3, #5
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	4413      	add	r3, r2
 80022da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80022de:	461a      	mov	r2, r3
 80022e0:	2320      	movs	r3, #32
 80022e2:	6093      	str	r3, [r2, #8]
 80022e4:	e098      	b.n	8002418 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	f040 8093 	bne.w	8002418 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	4a4b      	ldr	r2, [pc, #300]	@ (8002424 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d90f      	bls.n	800231a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002300:	2b00      	cmp	r3, #0
 8002302:	d00a      	beq.n	800231a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	015a      	lsls	r2, r3, #5
 8002308:	69bb      	ldr	r3, [r7, #24]
 800230a:	4413      	add	r3, r2
 800230c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002310:	461a      	mov	r2, r3
 8002312:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002316:	6093      	str	r3, [r2, #8]
 8002318:	e07e      	b.n	8002418 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800231a:	683a      	ldr	r2, [r7, #0]
 800231c:	4613      	mov	r3, r2
 800231e:	00db      	lsls	r3, r3, #3
 8002320:	4413      	add	r3, r2
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002328:	687a      	ldr	r2, [r7, #4]
 800232a:	4413      	add	r3, r2
 800232c:	3304      	adds	r3, #4
 800232e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	6a1a      	ldr	r2, [r3, #32]
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	0159      	lsls	r1, r3, #5
 8002338:	69bb      	ldr	r3, [r7, #24]
 800233a:	440b      	add	r3, r1
 800233c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002340:	691b      	ldr	r3, [r3, #16]
 8002342:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002346:	1ad2      	subs	r2, r2, r3
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d114      	bne.n	800237c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	691b      	ldr	r3, [r3, #16]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d109      	bne.n	800236e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6818      	ldr	r0, [r3, #0]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002364:	461a      	mov	r2, r3
 8002366:	2101      	movs	r1, #1
 8002368:	f002 ffe6 	bl	8005338 <USB_EP0_OutStart>
 800236c:	e006      	b.n	800237c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	68da      	ldr	r2, [r3, #12]
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	695b      	ldr	r3, [r3, #20]
 8002376:	441a      	add	r2, r3
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	b2db      	uxtb	r3, r3
 8002380:	4619      	mov	r1, r3
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f005 fa9a 	bl	80078bc <HAL_PCD_DataOutStageCallback>
 8002388:	e046      	b.n	8002418 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	4a26      	ldr	r2, [pc, #152]	@ (8002428 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d124      	bne.n	80023dc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002398:	2b00      	cmp	r3, #0
 800239a:	d00a      	beq.n	80023b2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	015a      	lsls	r2, r3, #5
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	4413      	add	r3, r2
 80023a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80023a8:	461a      	mov	r2, r3
 80023aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80023ae:	6093      	str	r3, [r2, #8]
 80023b0:	e032      	b.n	8002418 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	f003 0320 	and.w	r3, r3, #32
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d008      	beq.n	80023ce <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	015a      	lsls	r2, r3, #5
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	4413      	add	r3, r2
 80023c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80023c8:	461a      	mov	r2, r3
 80023ca:	2320      	movs	r3, #32
 80023cc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	4619      	mov	r1, r3
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	f005 fa71 	bl	80078bc <HAL_PCD_DataOutStageCallback>
 80023da:	e01d      	b.n	8002418 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d114      	bne.n	800240c <PCD_EP_OutXfrComplete_int+0x1b0>
 80023e2:	6879      	ldr	r1, [r7, #4]
 80023e4:	683a      	ldr	r2, [r7, #0]
 80023e6:	4613      	mov	r3, r2
 80023e8:	00db      	lsls	r3, r3, #3
 80023ea:	4413      	add	r3, r2
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	440b      	add	r3, r1
 80023f0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d108      	bne.n	800240c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6818      	ldr	r0, [r3, #0]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002404:	461a      	mov	r2, r3
 8002406:	2100      	movs	r1, #0
 8002408:	f002 ff96 	bl	8005338 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	b2db      	uxtb	r3, r3
 8002410:	4619      	mov	r1, r3
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f005 fa52 	bl	80078bc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002418:	2300      	movs	r3, #0
}
 800241a:	4618      	mov	r0, r3
 800241c:	3720      	adds	r7, #32
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	4f54300a 	.word	0x4f54300a
 8002428:	4f54310a 	.word	0x4f54310a

0800242c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b086      	sub	sp, #24
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	333c      	adds	r3, #60	@ 0x3c
 8002444:	3304      	adds	r3, #4
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	015a      	lsls	r2, r3, #5
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	4413      	add	r3, r2
 8002452:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	4a15      	ldr	r2, [pc, #84]	@ (80024b4 <PCD_EP_OutSetupPacket_int+0x88>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d90e      	bls.n	8002480 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002468:	2b00      	cmp	r3, #0
 800246a:	d009      	beq.n	8002480 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	015a      	lsls	r2, r3, #5
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	4413      	add	r3, r2
 8002474:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002478:	461a      	mov	r2, r3
 800247a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800247e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f005 fa09 	bl	8007898 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	4a0a      	ldr	r2, [pc, #40]	@ (80024b4 <PCD_EP_OutSetupPacket_int+0x88>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d90c      	bls.n	80024a8 <PCD_EP_OutSetupPacket_int+0x7c>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	799b      	ldrb	r3, [r3, #6]
 8002492:	2b01      	cmp	r3, #1
 8002494:	d108      	bne.n	80024a8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6818      	ldr	r0, [r3, #0]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80024a0:	461a      	mov	r2, r3
 80024a2:	2101      	movs	r1, #1
 80024a4:	f002 ff48 	bl	8005338 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3718      	adds	r7, #24
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	4f54300a 	.word	0x4f54300a

080024b8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b085      	sub	sp, #20
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	460b      	mov	r3, r1
 80024c2:	70fb      	strb	r3, [r7, #3]
 80024c4:	4613      	mov	r3, r2
 80024c6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ce:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80024d0:	78fb      	ldrb	r3, [r7, #3]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d107      	bne.n	80024e6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80024d6:	883b      	ldrh	r3, [r7, #0]
 80024d8:	0419      	lsls	r1, r3, #16
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	68ba      	ldr	r2, [r7, #8]
 80024e0:	430a      	orrs	r2, r1
 80024e2:	629a      	str	r2, [r3, #40]	@ 0x28
 80024e4:	e028      	b.n	8002538 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024ec:	0c1b      	lsrs	r3, r3, #16
 80024ee:	68ba      	ldr	r2, [r7, #8]
 80024f0:	4413      	add	r3, r2
 80024f2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80024f4:	2300      	movs	r3, #0
 80024f6:	73fb      	strb	r3, [r7, #15]
 80024f8:	e00d      	b.n	8002516 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	7bfb      	ldrb	r3, [r7, #15]
 8002500:	3340      	adds	r3, #64	@ 0x40
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	4413      	add	r3, r2
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	0c1b      	lsrs	r3, r3, #16
 800250a:	68ba      	ldr	r2, [r7, #8]
 800250c:	4413      	add	r3, r2
 800250e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002510:	7bfb      	ldrb	r3, [r7, #15]
 8002512:	3301      	adds	r3, #1
 8002514:	73fb      	strb	r3, [r7, #15]
 8002516:	7bfa      	ldrb	r2, [r7, #15]
 8002518:	78fb      	ldrb	r3, [r7, #3]
 800251a:	3b01      	subs	r3, #1
 800251c:	429a      	cmp	r2, r3
 800251e:	d3ec      	bcc.n	80024fa <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002520:	883b      	ldrh	r3, [r7, #0]
 8002522:	0418      	lsls	r0, r3, #16
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6819      	ldr	r1, [r3, #0]
 8002528:	78fb      	ldrb	r3, [r7, #3]
 800252a:	3b01      	subs	r3, #1
 800252c:	68ba      	ldr	r2, [r7, #8]
 800252e:	4302      	orrs	r2, r0
 8002530:	3340      	adds	r3, #64	@ 0x40
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	440b      	add	r3, r1
 8002536:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002538:	2300      	movs	r3, #0
}
 800253a:	4618      	mov	r0, r3
 800253c:	3714      	adds	r7, #20
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr

08002546 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002546:	b480      	push	{r7}
 8002548:	b083      	sub	sp, #12
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
 800254e:	460b      	mov	r3, r1
 8002550:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	887a      	ldrh	r2, [r7, #2]
 8002558:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800255a:	2300      	movs	r3, #0
}
 800255c:	4618      	mov	r0, r3
 800255e:	370c      	adds	r7, #12
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	460b      	mov	r3, r1
 8002572:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002574:	bf00      	nop
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr

08002580 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b086      	sub	sp, #24
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d101      	bne.n	8002592 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e267      	b.n	8002a62 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0301 	and.w	r3, r3, #1
 800259a:	2b00      	cmp	r3, #0
 800259c:	d075      	beq.n	800268a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800259e:	4b88      	ldr	r3, [pc, #544]	@ (80027c0 <HAL_RCC_OscConfig+0x240>)
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	f003 030c 	and.w	r3, r3, #12
 80025a6:	2b04      	cmp	r3, #4
 80025a8:	d00c      	beq.n	80025c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025aa:	4b85      	ldr	r3, [pc, #532]	@ (80027c0 <HAL_RCC_OscConfig+0x240>)
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025b2:	2b08      	cmp	r3, #8
 80025b4:	d112      	bne.n	80025dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025b6:	4b82      	ldr	r3, [pc, #520]	@ (80027c0 <HAL_RCC_OscConfig+0x240>)
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80025c2:	d10b      	bne.n	80025dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025c4:	4b7e      	ldr	r3, [pc, #504]	@ (80027c0 <HAL_RCC_OscConfig+0x240>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d05b      	beq.n	8002688 <HAL_RCC_OscConfig+0x108>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d157      	bne.n	8002688 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e242      	b.n	8002a62 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025e4:	d106      	bne.n	80025f4 <HAL_RCC_OscConfig+0x74>
 80025e6:	4b76      	ldr	r3, [pc, #472]	@ (80027c0 <HAL_RCC_OscConfig+0x240>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a75      	ldr	r2, [pc, #468]	@ (80027c0 <HAL_RCC_OscConfig+0x240>)
 80025ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025f0:	6013      	str	r3, [r2, #0]
 80025f2:	e01d      	b.n	8002630 <HAL_RCC_OscConfig+0xb0>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80025fc:	d10c      	bne.n	8002618 <HAL_RCC_OscConfig+0x98>
 80025fe:	4b70      	ldr	r3, [pc, #448]	@ (80027c0 <HAL_RCC_OscConfig+0x240>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a6f      	ldr	r2, [pc, #444]	@ (80027c0 <HAL_RCC_OscConfig+0x240>)
 8002604:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002608:	6013      	str	r3, [r2, #0]
 800260a:	4b6d      	ldr	r3, [pc, #436]	@ (80027c0 <HAL_RCC_OscConfig+0x240>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a6c      	ldr	r2, [pc, #432]	@ (80027c0 <HAL_RCC_OscConfig+0x240>)
 8002610:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002614:	6013      	str	r3, [r2, #0]
 8002616:	e00b      	b.n	8002630 <HAL_RCC_OscConfig+0xb0>
 8002618:	4b69      	ldr	r3, [pc, #420]	@ (80027c0 <HAL_RCC_OscConfig+0x240>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a68      	ldr	r2, [pc, #416]	@ (80027c0 <HAL_RCC_OscConfig+0x240>)
 800261e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002622:	6013      	str	r3, [r2, #0]
 8002624:	4b66      	ldr	r3, [pc, #408]	@ (80027c0 <HAL_RCC_OscConfig+0x240>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a65      	ldr	r2, [pc, #404]	@ (80027c0 <HAL_RCC_OscConfig+0x240>)
 800262a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800262e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d013      	beq.n	8002660 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002638:	f7fe fa5c 	bl	8000af4 <HAL_GetTick>
 800263c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800263e:	e008      	b.n	8002652 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002640:	f7fe fa58 	bl	8000af4 <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	2b64      	cmp	r3, #100	@ 0x64
 800264c:	d901      	bls.n	8002652 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	e207      	b.n	8002a62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002652:	4b5b      	ldr	r3, [pc, #364]	@ (80027c0 <HAL_RCC_OscConfig+0x240>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d0f0      	beq.n	8002640 <HAL_RCC_OscConfig+0xc0>
 800265e:	e014      	b.n	800268a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002660:	f7fe fa48 	bl	8000af4 <HAL_GetTick>
 8002664:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002666:	e008      	b.n	800267a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002668:	f7fe fa44 	bl	8000af4 <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	2b64      	cmp	r3, #100	@ 0x64
 8002674:	d901      	bls.n	800267a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e1f3      	b.n	8002a62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800267a:	4b51      	ldr	r3, [pc, #324]	@ (80027c0 <HAL_RCC_OscConfig+0x240>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d1f0      	bne.n	8002668 <HAL_RCC_OscConfig+0xe8>
 8002686:	e000      	b.n	800268a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002688:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0302 	and.w	r3, r3, #2
 8002692:	2b00      	cmp	r3, #0
 8002694:	d063      	beq.n	800275e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002696:	4b4a      	ldr	r3, [pc, #296]	@ (80027c0 <HAL_RCC_OscConfig+0x240>)
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	f003 030c 	and.w	r3, r3, #12
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d00b      	beq.n	80026ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026a2:	4b47      	ldr	r3, [pc, #284]	@ (80027c0 <HAL_RCC_OscConfig+0x240>)
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026aa:	2b08      	cmp	r3, #8
 80026ac:	d11c      	bne.n	80026e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026ae:	4b44      	ldr	r3, [pc, #272]	@ (80027c0 <HAL_RCC_OscConfig+0x240>)
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d116      	bne.n	80026e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026ba:	4b41      	ldr	r3, [pc, #260]	@ (80027c0 <HAL_RCC_OscConfig+0x240>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0302 	and.w	r3, r3, #2
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d005      	beq.n	80026d2 <HAL_RCC_OscConfig+0x152>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d001      	beq.n	80026d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e1c7      	b.n	8002a62 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026d2:	4b3b      	ldr	r3, [pc, #236]	@ (80027c0 <HAL_RCC_OscConfig+0x240>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	691b      	ldr	r3, [r3, #16]
 80026de:	00db      	lsls	r3, r3, #3
 80026e0:	4937      	ldr	r1, [pc, #220]	@ (80027c0 <HAL_RCC_OscConfig+0x240>)
 80026e2:	4313      	orrs	r3, r2
 80026e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026e6:	e03a      	b.n	800275e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d020      	beq.n	8002732 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026f0:	4b34      	ldr	r3, [pc, #208]	@ (80027c4 <HAL_RCC_OscConfig+0x244>)
 80026f2:	2201      	movs	r2, #1
 80026f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f6:	f7fe f9fd 	bl	8000af4 <HAL_GetTick>
 80026fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026fc:	e008      	b.n	8002710 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026fe:	f7fe f9f9 	bl	8000af4 <HAL_GetTick>
 8002702:	4602      	mov	r2, r0
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	2b02      	cmp	r3, #2
 800270a:	d901      	bls.n	8002710 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800270c:	2303      	movs	r3, #3
 800270e:	e1a8      	b.n	8002a62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002710:	4b2b      	ldr	r3, [pc, #172]	@ (80027c0 <HAL_RCC_OscConfig+0x240>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0302 	and.w	r3, r3, #2
 8002718:	2b00      	cmp	r3, #0
 800271a:	d0f0      	beq.n	80026fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800271c:	4b28      	ldr	r3, [pc, #160]	@ (80027c0 <HAL_RCC_OscConfig+0x240>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	691b      	ldr	r3, [r3, #16]
 8002728:	00db      	lsls	r3, r3, #3
 800272a:	4925      	ldr	r1, [pc, #148]	@ (80027c0 <HAL_RCC_OscConfig+0x240>)
 800272c:	4313      	orrs	r3, r2
 800272e:	600b      	str	r3, [r1, #0]
 8002730:	e015      	b.n	800275e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002732:	4b24      	ldr	r3, [pc, #144]	@ (80027c4 <HAL_RCC_OscConfig+0x244>)
 8002734:	2200      	movs	r2, #0
 8002736:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002738:	f7fe f9dc 	bl	8000af4 <HAL_GetTick>
 800273c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800273e:	e008      	b.n	8002752 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002740:	f7fe f9d8 	bl	8000af4 <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	2b02      	cmp	r3, #2
 800274c:	d901      	bls.n	8002752 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e187      	b.n	8002a62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002752:	4b1b      	ldr	r3, [pc, #108]	@ (80027c0 <HAL_RCC_OscConfig+0x240>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0302 	and.w	r3, r3, #2
 800275a:	2b00      	cmp	r3, #0
 800275c:	d1f0      	bne.n	8002740 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0308 	and.w	r3, r3, #8
 8002766:	2b00      	cmp	r3, #0
 8002768:	d036      	beq.n	80027d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	695b      	ldr	r3, [r3, #20]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d016      	beq.n	80027a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002772:	4b15      	ldr	r3, [pc, #84]	@ (80027c8 <HAL_RCC_OscConfig+0x248>)
 8002774:	2201      	movs	r2, #1
 8002776:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002778:	f7fe f9bc 	bl	8000af4 <HAL_GetTick>
 800277c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800277e:	e008      	b.n	8002792 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002780:	f7fe f9b8 	bl	8000af4 <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	2b02      	cmp	r3, #2
 800278c:	d901      	bls.n	8002792 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e167      	b.n	8002a62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002792:	4b0b      	ldr	r3, [pc, #44]	@ (80027c0 <HAL_RCC_OscConfig+0x240>)
 8002794:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002796:	f003 0302 	and.w	r3, r3, #2
 800279a:	2b00      	cmp	r3, #0
 800279c:	d0f0      	beq.n	8002780 <HAL_RCC_OscConfig+0x200>
 800279e:	e01b      	b.n	80027d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027a0:	4b09      	ldr	r3, [pc, #36]	@ (80027c8 <HAL_RCC_OscConfig+0x248>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027a6:	f7fe f9a5 	bl	8000af4 <HAL_GetTick>
 80027aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027ac:	e00e      	b.n	80027cc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027ae:	f7fe f9a1 	bl	8000af4 <HAL_GetTick>
 80027b2:	4602      	mov	r2, r0
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d907      	bls.n	80027cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80027bc:	2303      	movs	r3, #3
 80027be:	e150      	b.n	8002a62 <HAL_RCC_OscConfig+0x4e2>
 80027c0:	40023800 	.word	0x40023800
 80027c4:	42470000 	.word	0x42470000
 80027c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027cc:	4b88      	ldr	r3, [pc, #544]	@ (80029f0 <HAL_RCC_OscConfig+0x470>)
 80027ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027d0:	f003 0302 	and.w	r3, r3, #2
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d1ea      	bne.n	80027ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0304 	and.w	r3, r3, #4
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	f000 8097 	beq.w	8002914 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027e6:	2300      	movs	r3, #0
 80027e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027ea:	4b81      	ldr	r3, [pc, #516]	@ (80029f0 <HAL_RCC_OscConfig+0x470>)
 80027ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d10f      	bne.n	8002816 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027f6:	2300      	movs	r3, #0
 80027f8:	60bb      	str	r3, [r7, #8]
 80027fa:	4b7d      	ldr	r3, [pc, #500]	@ (80029f0 <HAL_RCC_OscConfig+0x470>)
 80027fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027fe:	4a7c      	ldr	r2, [pc, #496]	@ (80029f0 <HAL_RCC_OscConfig+0x470>)
 8002800:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002804:	6413      	str	r3, [r2, #64]	@ 0x40
 8002806:	4b7a      	ldr	r3, [pc, #488]	@ (80029f0 <HAL_RCC_OscConfig+0x470>)
 8002808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800280a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800280e:	60bb      	str	r3, [r7, #8]
 8002810:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002812:	2301      	movs	r3, #1
 8002814:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002816:	4b77      	ldr	r3, [pc, #476]	@ (80029f4 <HAL_RCC_OscConfig+0x474>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800281e:	2b00      	cmp	r3, #0
 8002820:	d118      	bne.n	8002854 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002822:	4b74      	ldr	r3, [pc, #464]	@ (80029f4 <HAL_RCC_OscConfig+0x474>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a73      	ldr	r2, [pc, #460]	@ (80029f4 <HAL_RCC_OscConfig+0x474>)
 8002828:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800282c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800282e:	f7fe f961 	bl	8000af4 <HAL_GetTick>
 8002832:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002834:	e008      	b.n	8002848 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002836:	f7fe f95d 	bl	8000af4 <HAL_GetTick>
 800283a:	4602      	mov	r2, r0
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	2b02      	cmp	r3, #2
 8002842:	d901      	bls.n	8002848 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002844:	2303      	movs	r3, #3
 8002846:	e10c      	b.n	8002a62 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002848:	4b6a      	ldr	r3, [pc, #424]	@ (80029f4 <HAL_RCC_OscConfig+0x474>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002850:	2b00      	cmp	r3, #0
 8002852:	d0f0      	beq.n	8002836 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	2b01      	cmp	r3, #1
 800285a:	d106      	bne.n	800286a <HAL_RCC_OscConfig+0x2ea>
 800285c:	4b64      	ldr	r3, [pc, #400]	@ (80029f0 <HAL_RCC_OscConfig+0x470>)
 800285e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002860:	4a63      	ldr	r2, [pc, #396]	@ (80029f0 <HAL_RCC_OscConfig+0x470>)
 8002862:	f043 0301 	orr.w	r3, r3, #1
 8002866:	6713      	str	r3, [r2, #112]	@ 0x70
 8002868:	e01c      	b.n	80028a4 <HAL_RCC_OscConfig+0x324>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	2b05      	cmp	r3, #5
 8002870:	d10c      	bne.n	800288c <HAL_RCC_OscConfig+0x30c>
 8002872:	4b5f      	ldr	r3, [pc, #380]	@ (80029f0 <HAL_RCC_OscConfig+0x470>)
 8002874:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002876:	4a5e      	ldr	r2, [pc, #376]	@ (80029f0 <HAL_RCC_OscConfig+0x470>)
 8002878:	f043 0304 	orr.w	r3, r3, #4
 800287c:	6713      	str	r3, [r2, #112]	@ 0x70
 800287e:	4b5c      	ldr	r3, [pc, #368]	@ (80029f0 <HAL_RCC_OscConfig+0x470>)
 8002880:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002882:	4a5b      	ldr	r2, [pc, #364]	@ (80029f0 <HAL_RCC_OscConfig+0x470>)
 8002884:	f043 0301 	orr.w	r3, r3, #1
 8002888:	6713      	str	r3, [r2, #112]	@ 0x70
 800288a:	e00b      	b.n	80028a4 <HAL_RCC_OscConfig+0x324>
 800288c:	4b58      	ldr	r3, [pc, #352]	@ (80029f0 <HAL_RCC_OscConfig+0x470>)
 800288e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002890:	4a57      	ldr	r2, [pc, #348]	@ (80029f0 <HAL_RCC_OscConfig+0x470>)
 8002892:	f023 0301 	bic.w	r3, r3, #1
 8002896:	6713      	str	r3, [r2, #112]	@ 0x70
 8002898:	4b55      	ldr	r3, [pc, #340]	@ (80029f0 <HAL_RCC_OscConfig+0x470>)
 800289a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800289c:	4a54      	ldr	r2, [pc, #336]	@ (80029f0 <HAL_RCC_OscConfig+0x470>)
 800289e:	f023 0304 	bic.w	r3, r3, #4
 80028a2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d015      	beq.n	80028d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028ac:	f7fe f922 	bl	8000af4 <HAL_GetTick>
 80028b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028b2:	e00a      	b.n	80028ca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028b4:	f7fe f91e 	bl	8000af4 <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d901      	bls.n	80028ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e0cb      	b.n	8002a62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028ca:	4b49      	ldr	r3, [pc, #292]	@ (80029f0 <HAL_RCC_OscConfig+0x470>)
 80028cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028ce:	f003 0302 	and.w	r3, r3, #2
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d0ee      	beq.n	80028b4 <HAL_RCC_OscConfig+0x334>
 80028d6:	e014      	b.n	8002902 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028d8:	f7fe f90c 	bl	8000af4 <HAL_GetTick>
 80028dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028de:	e00a      	b.n	80028f6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028e0:	f7fe f908 	bl	8000af4 <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d901      	bls.n	80028f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e0b5      	b.n	8002a62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028f6:	4b3e      	ldr	r3, [pc, #248]	@ (80029f0 <HAL_RCC_OscConfig+0x470>)
 80028f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028fa:	f003 0302 	and.w	r3, r3, #2
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d1ee      	bne.n	80028e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002902:	7dfb      	ldrb	r3, [r7, #23]
 8002904:	2b01      	cmp	r3, #1
 8002906:	d105      	bne.n	8002914 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002908:	4b39      	ldr	r3, [pc, #228]	@ (80029f0 <HAL_RCC_OscConfig+0x470>)
 800290a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800290c:	4a38      	ldr	r2, [pc, #224]	@ (80029f0 <HAL_RCC_OscConfig+0x470>)
 800290e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002912:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	699b      	ldr	r3, [r3, #24]
 8002918:	2b00      	cmp	r3, #0
 800291a:	f000 80a1 	beq.w	8002a60 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800291e:	4b34      	ldr	r3, [pc, #208]	@ (80029f0 <HAL_RCC_OscConfig+0x470>)
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	f003 030c 	and.w	r3, r3, #12
 8002926:	2b08      	cmp	r3, #8
 8002928:	d05c      	beq.n	80029e4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	699b      	ldr	r3, [r3, #24]
 800292e:	2b02      	cmp	r3, #2
 8002930:	d141      	bne.n	80029b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002932:	4b31      	ldr	r3, [pc, #196]	@ (80029f8 <HAL_RCC_OscConfig+0x478>)
 8002934:	2200      	movs	r2, #0
 8002936:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002938:	f7fe f8dc 	bl	8000af4 <HAL_GetTick>
 800293c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800293e:	e008      	b.n	8002952 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002940:	f7fe f8d8 	bl	8000af4 <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	2b02      	cmp	r3, #2
 800294c:	d901      	bls.n	8002952 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e087      	b.n	8002a62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002952:	4b27      	ldr	r3, [pc, #156]	@ (80029f0 <HAL_RCC_OscConfig+0x470>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d1f0      	bne.n	8002940 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	69da      	ldr	r2, [r3, #28]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6a1b      	ldr	r3, [r3, #32]
 8002966:	431a      	orrs	r2, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800296c:	019b      	lsls	r3, r3, #6
 800296e:	431a      	orrs	r2, r3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002974:	085b      	lsrs	r3, r3, #1
 8002976:	3b01      	subs	r3, #1
 8002978:	041b      	lsls	r3, r3, #16
 800297a:	431a      	orrs	r2, r3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002980:	061b      	lsls	r3, r3, #24
 8002982:	491b      	ldr	r1, [pc, #108]	@ (80029f0 <HAL_RCC_OscConfig+0x470>)
 8002984:	4313      	orrs	r3, r2
 8002986:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002988:	4b1b      	ldr	r3, [pc, #108]	@ (80029f8 <HAL_RCC_OscConfig+0x478>)
 800298a:	2201      	movs	r2, #1
 800298c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800298e:	f7fe f8b1 	bl	8000af4 <HAL_GetTick>
 8002992:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002994:	e008      	b.n	80029a8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002996:	f7fe f8ad 	bl	8000af4 <HAL_GetTick>
 800299a:	4602      	mov	r2, r0
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	1ad3      	subs	r3, r2, r3
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	d901      	bls.n	80029a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80029a4:	2303      	movs	r3, #3
 80029a6:	e05c      	b.n	8002a62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029a8:	4b11      	ldr	r3, [pc, #68]	@ (80029f0 <HAL_RCC_OscConfig+0x470>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d0f0      	beq.n	8002996 <HAL_RCC_OscConfig+0x416>
 80029b4:	e054      	b.n	8002a60 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029b6:	4b10      	ldr	r3, [pc, #64]	@ (80029f8 <HAL_RCC_OscConfig+0x478>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029bc:	f7fe f89a 	bl	8000af4 <HAL_GetTick>
 80029c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029c2:	e008      	b.n	80029d6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029c4:	f7fe f896 	bl	8000af4 <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d901      	bls.n	80029d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e045      	b.n	8002a62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029d6:	4b06      	ldr	r3, [pc, #24]	@ (80029f0 <HAL_RCC_OscConfig+0x470>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d1f0      	bne.n	80029c4 <HAL_RCC_OscConfig+0x444>
 80029e2:	e03d      	b.n	8002a60 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	699b      	ldr	r3, [r3, #24]
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d107      	bne.n	80029fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e038      	b.n	8002a62 <HAL_RCC_OscConfig+0x4e2>
 80029f0:	40023800 	.word	0x40023800
 80029f4:	40007000 	.word	0x40007000
 80029f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80029fc:	4b1b      	ldr	r3, [pc, #108]	@ (8002a6c <HAL_RCC_OscConfig+0x4ec>)
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	699b      	ldr	r3, [r3, #24]
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d028      	beq.n	8002a5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d121      	bne.n	8002a5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d11a      	bne.n	8002a5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a26:	68fa      	ldr	r2, [r7, #12]
 8002a28:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002a32:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d111      	bne.n	8002a5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a42:	085b      	lsrs	r3, r3, #1
 8002a44:	3b01      	subs	r3, #1
 8002a46:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d107      	bne.n	8002a5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a56:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d001      	beq.n	8002a60 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e000      	b.n	8002a62 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002a60:	2300      	movs	r3, #0
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3718      	adds	r7, #24
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	40023800 	.word	0x40023800

08002a70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b084      	sub	sp, #16
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d101      	bne.n	8002a84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e0cc      	b.n	8002c1e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a84:	4b68      	ldr	r3, [pc, #416]	@ (8002c28 <HAL_RCC_ClockConfig+0x1b8>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0307 	and.w	r3, r3, #7
 8002a8c:	683a      	ldr	r2, [r7, #0]
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d90c      	bls.n	8002aac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a92:	4b65      	ldr	r3, [pc, #404]	@ (8002c28 <HAL_RCC_ClockConfig+0x1b8>)
 8002a94:	683a      	ldr	r2, [r7, #0]
 8002a96:	b2d2      	uxtb	r2, r2
 8002a98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a9a:	4b63      	ldr	r3, [pc, #396]	@ (8002c28 <HAL_RCC_ClockConfig+0x1b8>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0307 	and.w	r3, r3, #7
 8002aa2:	683a      	ldr	r2, [r7, #0]
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d001      	beq.n	8002aac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e0b8      	b.n	8002c1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0302 	and.w	r3, r3, #2
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d020      	beq.n	8002afa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0304 	and.w	r3, r3, #4
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d005      	beq.n	8002ad0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ac4:	4b59      	ldr	r3, [pc, #356]	@ (8002c2c <HAL_RCC_ClockConfig+0x1bc>)
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	4a58      	ldr	r2, [pc, #352]	@ (8002c2c <HAL_RCC_ClockConfig+0x1bc>)
 8002aca:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002ace:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0308 	and.w	r3, r3, #8
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d005      	beq.n	8002ae8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002adc:	4b53      	ldr	r3, [pc, #332]	@ (8002c2c <HAL_RCC_ClockConfig+0x1bc>)
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	4a52      	ldr	r2, [pc, #328]	@ (8002c2c <HAL_RCC_ClockConfig+0x1bc>)
 8002ae2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002ae6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ae8:	4b50      	ldr	r3, [pc, #320]	@ (8002c2c <HAL_RCC_ClockConfig+0x1bc>)
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	494d      	ldr	r1, [pc, #308]	@ (8002c2c <HAL_RCC_ClockConfig+0x1bc>)
 8002af6:	4313      	orrs	r3, r2
 8002af8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0301 	and.w	r3, r3, #1
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d044      	beq.n	8002b90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d107      	bne.n	8002b1e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b0e:	4b47      	ldr	r3, [pc, #284]	@ (8002c2c <HAL_RCC_ClockConfig+0x1bc>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d119      	bne.n	8002b4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e07f      	b.n	8002c1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d003      	beq.n	8002b2e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b2a:	2b03      	cmp	r3, #3
 8002b2c:	d107      	bne.n	8002b3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b2e:	4b3f      	ldr	r3, [pc, #252]	@ (8002c2c <HAL_RCC_ClockConfig+0x1bc>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d109      	bne.n	8002b4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e06f      	b.n	8002c1e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b3e:	4b3b      	ldr	r3, [pc, #236]	@ (8002c2c <HAL_RCC_ClockConfig+0x1bc>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0302 	and.w	r3, r3, #2
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d101      	bne.n	8002b4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e067      	b.n	8002c1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b4e:	4b37      	ldr	r3, [pc, #220]	@ (8002c2c <HAL_RCC_ClockConfig+0x1bc>)
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	f023 0203 	bic.w	r2, r3, #3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	4934      	ldr	r1, [pc, #208]	@ (8002c2c <HAL_RCC_ClockConfig+0x1bc>)
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b60:	f7fd ffc8 	bl	8000af4 <HAL_GetTick>
 8002b64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b66:	e00a      	b.n	8002b7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b68:	f7fd ffc4 	bl	8000af4 <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d901      	bls.n	8002b7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e04f      	b.n	8002c1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b7e:	4b2b      	ldr	r3, [pc, #172]	@ (8002c2c <HAL_RCC_ClockConfig+0x1bc>)
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	f003 020c 	and.w	r2, r3, #12
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d1eb      	bne.n	8002b68 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b90:	4b25      	ldr	r3, [pc, #148]	@ (8002c28 <HAL_RCC_ClockConfig+0x1b8>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 0307 	and.w	r3, r3, #7
 8002b98:	683a      	ldr	r2, [r7, #0]
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d20c      	bcs.n	8002bb8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b9e:	4b22      	ldr	r3, [pc, #136]	@ (8002c28 <HAL_RCC_ClockConfig+0x1b8>)
 8002ba0:	683a      	ldr	r2, [r7, #0]
 8002ba2:	b2d2      	uxtb	r2, r2
 8002ba4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ba6:	4b20      	ldr	r3, [pc, #128]	@ (8002c28 <HAL_RCC_ClockConfig+0x1b8>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0307 	and.w	r3, r3, #7
 8002bae:	683a      	ldr	r2, [r7, #0]
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d001      	beq.n	8002bb8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e032      	b.n	8002c1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0304 	and.w	r3, r3, #4
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d008      	beq.n	8002bd6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bc4:	4b19      	ldr	r3, [pc, #100]	@ (8002c2c <HAL_RCC_ClockConfig+0x1bc>)
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	4916      	ldr	r1, [pc, #88]	@ (8002c2c <HAL_RCC_ClockConfig+0x1bc>)
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0308 	and.w	r3, r3, #8
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d009      	beq.n	8002bf6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002be2:	4b12      	ldr	r3, [pc, #72]	@ (8002c2c <HAL_RCC_ClockConfig+0x1bc>)
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	691b      	ldr	r3, [r3, #16]
 8002bee:	00db      	lsls	r3, r3, #3
 8002bf0:	490e      	ldr	r1, [pc, #56]	@ (8002c2c <HAL_RCC_ClockConfig+0x1bc>)
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002bf6:	f000 f821 	bl	8002c3c <HAL_RCC_GetSysClockFreq>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	4b0b      	ldr	r3, [pc, #44]	@ (8002c2c <HAL_RCC_ClockConfig+0x1bc>)
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	091b      	lsrs	r3, r3, #4
 8002c02:	f003 030f 	and.w	r3, r3, #15
 8002c06:	490a      	ldr	r1, [pc, #40]	@ (8002c30 <HAL_RCC_ClockConfig+0x1c0>)
 8002c08:	5ccb      	ldrb	r3, [r1, r3]
 8002c0a:	fa22 f303 	lsr.w	r3, r2, r3
 8002c0e:	4a09      	ldr	r2, [pc, #36]	@ (8002c34 <HAL_RCC_ClockConfig+0x1c4>)
 8002c10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c12:	4b09      	ldr	r3, [pc, #36]	@ (8002c38 <HAL_RCC_ClockConfig+0x1c8>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4618      	mov	r0, r3
 8002c18:	f7fd ff28 	bl	8000a6c <HAL_InitTick>

  return HAL_OK;
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3710      	adds	r7, #16
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	40023c00 	.word	0x40023c00
 8002c2c:	40023800 	.word	0x40023800
 8002c30:	08007ebc 	.word	0x08007ebc
 8002c34:	20000010 	.word	0x20000010
 8002c38:	20000014 	.word	0x20000014

08002c3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c40:	b090      	sub	sp, #64	@ 0x40
 8002c42:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002c44:	2300      	movs	r3, #0
 8002c46:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c48:	2300      	movs	r3, #0
 8002c4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002c50:	2300      	movs	r3, #0
 8002c52:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c54:	4b59      	ldr	r3, [pc, #356]	@ (8002dbc <HAL_RCC_GetSysClockFreq+0x180>)
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	f003 030c 	and.w	r3, r3, #12
 8002c5c:	2b08      	cmp	r3, #8
 8002c5e:	d00d      	beq.n	8002c7c <HAL_RCC_GetSysClockFreq+0x40>
 8002c60:	2b08      	cmp	r3, #8
 8002c62:	f200 80a1 	bhi.w	8002da8 <HAL_RCC_GetSysClockFreq+0x16c>
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d002      	beq.n	8002c70 <HAL_RCC_GetSysClockFreq+0x34>
 8002c6a:	2b04      	cmp	r3, #4
 8002c6c:	d003      	beq.n	8002c76 <HAL_RCC_GetSysClockFreq+0x3a>
 8002c6e:	e09b      	b.n	8002da8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c70:	4b53      	ldr	r3, [pc, #332]	@ (8002dc0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002c72:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8002c74:	e09b      	b.n	8002dae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c76:	4b53      	ldr	r3, [pc, #332]	@ (8002dc4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002c78:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002c7a:	e098      	b.n	8002dae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c7c:	4b4f      	ldr	r3, [pc, #316]	@ (8002dbc <HAL_RCC_GetSysClockFreq+0x180>)
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002c84:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c86:	4b4d      	ldr	r3, [pc, #308]	@ (8002dbc <HAL_RCC_GetSysClockFreq+0x180>)
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d028      	beq.n	8002ce4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c92:	4b4a      	ldr	r3, [pc, #296]	@ (8002dbc <HAL_RCC_GetSysClockFreq+0x180>)
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	099b      	lsrs	r3, r3, #6
 8002c98:	2200      	movs	r2, #0
 8002c9a:	623b      	str	r3, [r7, #32]
 8002c9c:	627a      	str	r2, [r7, #36]	@ 0x24
 8002c9e:	6a3b      	ldr	r3, [r7, #32]
 8002ca0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002ca4:	2100      	movs	r1, #0
 8002ca6:	4b47      	ldr	r3, [pc, #284]	@ (8002dc4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002ca8:	fb03 f201 	mul.w	r2, r3, r1
 8002cac:	2300      	movs	r3, #0
 8002cae:	fb00 f303 	mul.w	r3, r0, r3
 8002cb2:	4413      	add	r3, r2
 8002cb4:	4a43      	ldr	r2, [pc, #268]	@ (8002dc4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002cb6:	fba0 1202 	umull	r1, r2, r0, r2
 8002cba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002cbc:	460a      	mov	r2, r1
 8002cbe:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002cc0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002cc2:	4413      	add	r3, r2
 8002cc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002cc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cc8:	2200      	movs	r2, #0
 8002cca:	61bb      	str	r3, [r7, #24]
 8002ccc:	61fa      	str	r2, [r7, #28]
 8002cce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cd2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002cd6:	f7fd fa7f 	bl	80001d8 <__aeabi_uldivmod>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	460b      	mov	r3, r1
 8002cde:	4613      	mov	r3, r2
 8002ce0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ce2:	e053      	b.n	8002d8c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ce4:	4b35      	ldr	r3, [pc, #212]	@ (8002dbc <HAL_RCC_GetSysClockFreq+0x180>)
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	099b      	lsrs	r3, r3, #6
 8002cea:	2200      	movs	r2, #0
 8002cec:	613b      	str	r3, [r7, #16]
 8002cee:	617a      	str	r2, [r7, #20]
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002cf6:	f04f 0b00 	mov.w	fp, #0
 8002cfa:	4652      	mov	r2, sl
 8002cfc:	465b      	mov	r3, fp
 8002cfe:	f04f 0000 	mov.w	r0, #0
 8002d02:	f04f 0100 	mov.w	r1, #0
 8002d06:	0159      	lsls	r1, r3, #5
 8002d08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d0c:	0150      	lsls	r0, r2, #5
 8002d0e:	4602      	mov	r2, r0
 8002d10:	460b      	mov	r3, r1
 8002d12:	ebb2 080a 	subs.w	r8, r2, sl
 8002d16:	eb63 090b 	sbc.w	r9, r3, fp
 8002d1a:	f04f 0200 	mov.w	r2, #0
 8002d1e:	f04f 0300 	mov.w	r3, #0
 8002d22:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002d26:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002d2a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002d2e:	ebb2 0408 	subs.w	r4, r2, r8
 8002d32:	eb63 0509 	sbc.w	r5, r3, r9
 8002d36:	f04f 0200 	mov.w	r2, #0
 8002d3a:	f04f 0300 	mov.w	r3, #0
 8002d3e:	00eb      	lsls	r3, r5, #3
 8002d40:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d44:	00e2      	lsls	r2, r4, #3
 8002d46:	4614      	mov	r4, r2
 8002d48:	461d      	mov	r5, r3
 8002d4a:	eb14 030a 	adds.w	r3, r4, sl
 8002d4e:	603b      	str	r3, [r7, #0]
 8002d50:	eb45 030b 	adc.w	r3, r5, fp
 8002d54:	607b      	str	r3, [r7, #4]
 8002d56:	f04f 0200 	mov.w	r2, #0
 8002d5a:	f04f 0300 	mov.w	r3, #0
 8002d5e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d62:	4629      	mov	r1, r5
 8002d64:	028b      	lsls	r3, r1, #10
 8002d66:	4621      	mov	r1, r4
 8002d68:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d6c:	4621      	mov	r1, r4
 8002d6e:	028a      	lsls	r2, r1, #10
 8002d70:	4610      	mov	r0, r2
 8002d72:	4619      	mov	r1, r3
 8002d74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d76:	2200      	movs	r2, #0
 8002d78:	60bb      	str	r3, [r7, #8]
 8002d7a:	60fa      	str	r2, [r7, #12]
 8002d7c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d80:	f7fd fa2a 	bl	80001d8 <__aeabi_uldivmod>
 8002d84:	4602      	mov	r2, r0
 8002d86:	460b      	mov	r3, r1
 8002d88:	4613      	mov	r3, r2
 8002d8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d8c:	4b0b      	ldr	r3, [pc, #44]	@ (8002dbc <HAL_RCC_GetSysClockFreq+0x180>)
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	0c1b      	lsrs	r3, r3, #16
 8002d92:	f003 0303 	and.w	r3, r3, #3
 8002d96:	3301      	adds	r3, #1
 8002d98:	005b      	lsls	r3, r3, #1
 8002d9a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8002d9c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002d9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002da0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002da4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002da6:	e002      	b.n	8002dae <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002da8:	4b05      	ldr	r3, [pc, #20]	@ (8002dc0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002daa:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002dac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002dae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3740      	adds	r7, #64	@ 0x40
 8002db4:	46bd      	mov	sp, r7
 8002db6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002dba:	bf00      	nop
 8002dbc:	40023800 	.word	0x40023800
 8002dc0:	00f42400 	.word	0x00f42400
 8002dc4:	017d7840 	.word	0x017d7840

08002dc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002dcc:	4b03      	ldr	r3, [pc, #12]	@ (8002ddc <HAL_RCC_GetHCLKFreq+0x14>)
 8002dce:	681b      	ldr	r3, [r3, #0]
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr
 8002dda:	bf00      	nop
 8002ddc:	20000010 	.word	0x20000010

08002de0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002de4:	f7ff fff0 	bl	8002dc8 <HAL_RCC_GetHCLKFreq>
 8002de8:	4602      	mov	r2, r0
 8002dea:	4b05      	ldr	r3, [pc, #20]	@ (8002e00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	0a9b      	lsrs	r3, r3, #10
 8002df0:	f003 0307 	and.w	r3, r3, #7
 8002df4:	4903      	ldr	r1, [pc, #12]	@ (8002e04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002df6:	5ccb      	ldrb	r3, [r1, r3]
 8002df8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	40023800 	.word	0x40023800
 8002e04:	08007ecc 	.word	0x08007ecc

08002e08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002e0c:	f7ff ffdc 	bl	8002dc8 <HAL_RCC_GetHCLKFreq>
 8002e10:	4602      	mov	r2, r0
 8002e12:	4b05      	ldr	r3, [pc, #20]	@ (8002e28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	0b5b      	lsrs	r3, r3, #13
 8002e18:	f003 0307 	and.w	r3, r3, #7
 8002e1c:	4903      	ldr	r1, [pc, #12]	@ (8002e2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e1e:	5ccb      	ldrb	r3, [r1, r3]
 8002e20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	40023800 	.word	0x40023800
 8002e2c:	08007ecc 	.word	0x08007ecc

08002e30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b082      	sub	sp, #8
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d101      	bne.n	8002e42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e041      	b.n	8002ec6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d106      	bne.n	8002e5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f7fd fd24 	bl	80008a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2202      	movs	r2, #2
 8002e60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	3304      	adds	r3, #4
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	4610      	mov	r0, r2
 8002e70:	f000 fab2 	bl	80033d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2201      	movs	r2, #1
 8002e78:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2201      	movs	r2, #1
 8002e88:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2201      	movs	r2, #1
 8002e98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002ec4:	2300      	movs	r3, #0
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3708      	adds	r7, #8
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
	...

08002ed0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b085      	sub	sp, #20
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d001      	beq.n	8002ee8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e044      	b.n	8002f72 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2202      	movs	r2, #2
 8002eec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	68da      	ldr	r2, [r3, #12]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f042 0201 	orr.w	r2, r2, #1
 8002efe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a1e      	ldr	r2, [pc, #120]	@ (8002f80 <HAL_TIM_Base_Start_IT+0xb0>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d018      	beq.n	8002f3c <HAL_TIM_Base_Start_IT+0x6c>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f12:	d013      	beq.n	8002f3c <HAL_TIM_Base_Start_IT+0x6c>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a1a      	ldr	r2, [pc, #104]	@ (8002f84 <HAL_TIM_Base_Start_IT+0xb4>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d00e      	beq.n	8002f3c <HAL_TIM_Base_Start_IT+0x6c>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a19      	ldr	r2, [pc, #100]	@ (8002f88 <HAL_TIM_Base_Start_IT+0xb8>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d009      	beq.n	8002f3c <HAL_TIM_Base_Start_IT+0x6c>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a17      	ldr	r2, [pc, #92]	@ (8002f8c <HAL_TIM_Base_Start_IT+0xbc>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d004      	beq.n	8002f3c <HAL_TIM_Base_Start_IT+0x6c>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a16      	ldr	r2, [pc, #88]	@ (8002f90 <HAL_TIM_Base_Start_IT+0xc0>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d111      	bne.n	8002f60 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f003 0307 	and.w	r3, r3, #7
 8002f46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2b06      	cmp	r3, #6
 8002f4c:	d010      	beq.n	8002f70 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f042 0201 	orr.w	r2, r2, #1
 8002f5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f5e:	e007      	b.n	8002f70 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f042 0201 	orr.w	r2, r2, #1
 8002f6e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f70:	2300      	movs	r3, #0
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3714      	adds	r7, #20
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr
 8002f7e:	bf00      	nop
 8002f80:	40010000 	.word	0x40010000
 8002f84:	40000400 	.word	0x40000400
 8002f88:	40000800 	.word	0x40000800
 8002f8c:	40000c00 	.word	0x40000c00
 8002f90:	40014000 	.word	0x40014000

08002f94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	691b      	ldr	r3, [r3, #16]
 8002faa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	f003 0302 	and.w	r3, r3, #2
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d020      	beq.n	8002ff8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	f003 0302 	and.w	r3, r3, #2
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d01b      	beq.n	8002ff8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f06f 0202 	mvn.w	r2, #2
 8002fc8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2201      	movs	r2, #1
 8002fce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	699b      	ldr	r3, [r3, #24]
 8002fd6:	f003 0303 	and.w	r3, r3, #3
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d003      	beq.n	8002fe6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f000 f9db 	bl	800339a <HAL_TIM_IC_CaptureCallback>
 8002fe4:	e005      	b.n	8002ff2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f000 f9cd 	bl	8003386 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	f000 f9de 	bl	80033ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	f003 0304 	and.w	r3, r3, #4
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d020      	beq.n	8003044 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	f003 0304 	and.w	r3, r3, #4
 8003008:	2b00      	cmp	r3, #0
 800300a:	d01b      	beq.n	8003044 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f06f 0204 	mvn.w	r2, #4
 8003014:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2202      	movs	r2, #2
 800301a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	699b      	ldr	r3, [r3, #24]
 8003022:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003026:	2b00      	cmp	r3, #0
 8003028:	d003      	beq.n	8003032 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f000 f9b5 	bl	800339a <HAL_TIM_IC_CaptureCallback>
 8003030:	e005      	b.n	800303e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f000 f9a7 	bl	8003386 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f000 f9b8 	bl	80033ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2200      	movs	r2, #0
 8003042:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	f003 0308 	and.w	r3, r3, #8
 800304a:	2b00      	cmp	r3, #0
 800304c:	d020      	beq.n	8003090 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	f003 0308 	and.w	r3, r3, #8
 8003054:	2b00      	cmp	r3, #0
 8003056:	d01b      	beq.n	8003090 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f06f 0208 	mvn.w	r2, #8
 8003060:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2204      	movs	r2, #4
 8003066:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	69db      	ldr	r3, [r3, #28]
 800306e:	f003 0303 	and.w	r3, r3, #3
 8003072:	2b00      	cmp	r3, #0
 8003074:	d003      	beq.n	800307e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f000 f98f 	bl	800339a <HAL_TIM_IC_CaptureCallback>
 800307c:	e005      	b.n	800308a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f000 f981 	bl	8003386 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f000 f992 	bl	80033ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	f003 0310 	and.w	r3, r3, #16
 8003096:	2b00      	cmp	r3, #0
 8003098:	d020      	beq.n	80030dc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	f003 0310 	and.w	r3, r3, #16
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d01b      	beq.n	80030dc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f06f 0210 	mvn.w	r2, #16
 80030ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2208      	movs	r2, #8
 80030b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	69db      	ldr	r3, [r3, #28]
 80030ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d003      	beq.n	80030ca <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f000 f969 	bl	800339a <HAL_TIM_IC_CaptureCallback>
 80030c8:	e005      	b.n	80030d6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f000 f95b 	bl	8003386 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	f000 f96c 	bl	80033ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2200      	movs	r2, #0
 80030da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	f003 0301 	and.w	r3, r3, #1
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d00c      	beq.n	8003100 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	f003 0301 	and.w	r3, r3, #1
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d007      	beq.n	8003100 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f06f 0201 	mvn.w	r2, #1
 80030f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f7fd fa04 	bl	8000508 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003106:	2b00      	cmp	r3, #0
 8003108:	d00c      	beq.n	8003124 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003110:	2b00      	cmp	r3, #0
 8003112:	d007      	beq.n	8003124 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800311c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f000 fb8a 	bl	8003838 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800312a:	2b00      	cmp	r3, #0
 800312c:	d00c      	beq.n	8003148 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003134:	2b00      	cmp	r3, #0
 8003136:	d007      	beq.n	8003148 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003140:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f000 f93d 	bl	80033c2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	f003 0320 	and.w	r3, r3, #32
 800314e:	2b00      	cmp	r3, #0
 8003150:	d00c      	beq.n	800316c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	f003 0320 	and.w	r3, r3, #32
 8003158:	2b00      	cmp	r3, #0
 800315a:	d007      	beq.n	800316c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f06f 0220 	mvn.w	r2, #32
 8003164:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f000 fb5c 	bl	8003824 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800316c:	bf00      	nop
 800316e:	3710      	adds	r7, #16
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}

08003174 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800317e:	2300      	movs	r3, #0
 8003180:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003188:	2b01      	cmp	r3, #1
 800318a:	d101      	bne.n	8003190 <HAL_TIM_ConfigClockSource+0x1c>
 800318c:	2302      	movs	r3, #2
 800318e:	e0b4      	b.n	80032fa <HAL_TIM_ConfigClockSource+0x186>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2201      	movs	r2, #1
 8003194:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2202      	movs	r2, #2
 800319c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80031ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80031b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	68ba      	ldr	r2, [r7, #8]
 80031be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80031c8:	d03e      	beq.n	8003248 <HAL_TIM_ConfigClockSource+0xd4>
 80031ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80031ce:	f200 8087 	bhi.w	80032e0 <HAL_TIM_ConfigClockSource+0x16c>
 80031d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031d6:	f000 8086 	beq.w	80032e6 <HAL_TIM_ConfigClockSource+0x172>
 80031da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031de:	d87f      	bhi.n	80032e0 <HAL_TIM_ConfigClockSource+0x16c>
 80031e0:	2b70      	cmp	r3, #112	@ 0x70
 80031e2:	d01a      	beq.n	800321a <HAL_TIM_ConfigClockSource+0xa6>
 80031e4:	2b70      	cmp	r3, #112	@ 0x70
 80031e6:	d87b      	bhi.n	80032e0 <HAL_TIM_ConfigClockSource+0x16c>
 80031e8:	2b60      	cmp	r3, #96	@ 0x60
 80031ea:	d050      	beq.n	800328e <HAL_TIM_ConfigClockSource+0x11a>
 80031ec:	2b60      	cmp	r3, #96	@ 0x60
 80031ee:	d877      	bhi.n	80032e0 <HAL_TIM_ConfigClockSource+0x16c>
 80031f0:	2b50      	cmp	r3, #80	@ 0x50
 80031f2:	d03c      	beq.n	800326e <HAL_TIM_ConfigClockSource+0xfa>
 80031f4:	2b50      	cmp	r3, #80	@ 0x50
 80031f6:	d873      	bhi.n	80032e0 <HAL_TIM_ConfigClockSource+0x16c>
 80031f8:	2b40      	cmp	r3, #64	@ 0x40
 80031fa:	d058      	beq.n	80032ae <HAL_TIM_ConfigClockSource+0x13a>
 80031fc:	2b40      	cmp	r3, #64	@ 0x40
 80031fe:	d86f      	bhi.n	80032e0 <HAL_TIM_ConfigClockSource+0x16c>
 8003200:	2b30      	cmp	r3, #48	@ 0x30
 8003202:	d064      	beq.n	80032ce <HAL_TIM_ConfigClockSource+0x15a>
 8003204:	2b30      	cmp	r3, #48	@ 0x30
 8003206:	d86b      	bhi.n	80032e0 <HAL_TIM_ConfigClockSource+0x16c>
 8003208:	2b20      	cmp	r3, #32
 800320a:	d060      	beq.n	80032ce <HAL_TIM_ConfigClockSource+0x15a>
 800320c:	2b20      	cmp	r3, #32
 800320e:	d867      	bhi.n	80032e0 <HAL_TIM_ConfigClockSource+0x16c>
 8003210:	2b00      	cmp	r3, #0
 8003212:	d05c      	beq.n	80032ce <HAL_TIM_ConfigClockSource+0x15a>
 8003214:	2b10      	cmp	r3, #16
 8003216:	d05a      	beq.n	80032ce <HAL_TIM_ConfigClockSource+0x15a>
 8003218:	e062      	b.n	80032e0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800322a:	f000 fa6c 	bl	8003706 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800323c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	68ba      	ldr	r2, [r7, #8]
 8003244:	609a      	str	r2, [r3, #8]
      break;
 8003246:	e04f      	b.n	80032e8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003258:	f000 fa55 	bl	8003706 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	689a      	ldr	r2, [r3, #8]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800326a:	609a      	str	r2, [r3, #8]
      break;
 800326c:	e03c      	b.n	80032e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800327a:	461a      	mov	r2, r3
 800327c:	f000 f9c9 	bl	8003612 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	2150      	movs	r1, #80	@ 0x50
 8003286:	4618      	mov	r0, r3
 8003288:	f000 fa22 	bl	80036d0 <TIM_ITRx_SetConfig>
      break;
 800328c:	e02c      	b.n	80032e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800329a:	461a      	mov	r2, r3
 800329c:	f000 f9e8 	bl	8003670 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	2160      	movs	r1, #96	@ 0x60
 80032a6:	4618      	mov	r0, r3
 80032a8:	f000 fa12 	bl	80036d0 <TIM_ITRx_SetConfig>
      break;
 80032ac:	e01c      	b.n	80032e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80032ba:	461a      	mov	r2, r3
 80032bc:	f000 f9a9 	bl	8003612 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2140      	movs	r1, #64	@ 0x40
 80032c6:	4618      	mov	r0, r3
 80032c8:	f000 fa02 	bl	80036d0 <TIM_ITRx_SetConfig>
      break;
 80032cc:	e00c      	b.n	80032e8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4619      	mov	r1, r3
 80032d8:	4610      	mov	r0, r2
 80032da:	f000 f9f9 	bl	80036d0 <TIM_ITRx_SetConfig>
      break;
 80032de:	e003      	b.n	80032e8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	73fb      	strb	r3, [r7, #15]
      break;
 80032e4:	e000      	b.n	80032e8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80032e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2201      	movs	r2, #1
 80032ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2200      	movs	r2, #0
 80032f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80032f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3710      	adds	r7, #16
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}

08003302 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003302:	b580      	push	{r7, lr}
 8003304:	b082      	sub	sp, #8
 8003306:	af00      	add	r7, sp, #0
 8003308:	6078      	str	r0, [r7, #4]
 800330a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003312:	2b01      	cmp	r3, #1
 8003314:	d101      	bne.n	800331a <HAL_TIM_SlaveConfigSynchro+0x18>
 8003316:	2302      	movs	r3, #2
 8003318:	e031      	b.n	800337e <HAL_TIM_SlaveConfigSynchro+0x7c>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2201      	movs	r2, #1
 800331e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2202      	movs	r2, #2
 8003326:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800332a:	6839      	ldr	r1, [r7, #0]
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f000 f8df 	bl	80034f0 <TIM_SlaveTimer_SetConfig>
 8003332:	4603      	mov	r3, r0
 8003334:	2b00      	cmp	r3, #0
 8003336:	d009      	beq.n	800334c <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2201      	movs	r2, #1
 800333c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2200      	movs	r2, #0
 8003344:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e018      	b.n	800337e <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	68da      	ldr	r2, [r3, #12]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800335a:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	68da      	ldr	r2, [r3, #12]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800336a:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2201      	movs	r2, #1
 8003370:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2200      	movs	r2, #0
 8003378:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800337c:	2300      	movs	r3, #0
}
 800337e:	4618      	mov	r0, r3
 8003380:	3708      	adds	r7, #8
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}

08003386 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003386:	b480      	push	{r7}
 8003388:	b083      	sub	sp, #12
 800338a:	af00      	add	r7, sp, #0
 800338c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800338e:	bf00      	nop
 8003390:	370c      	adds	r7, #12
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr

0800339a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800339a:	b480      	push	{r7}
 800339c:	b083      	sub	sp, #12
 800339e:	af00      	add	r7, sp, #0
 80033a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80033a2:	bf00      	nop
 80033a4:	370c      	adds	r7, #12
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr

080033ae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80033ae:	b480      	push	{r7}
 80033b0:	b083      	sub	sp, #12
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80033b6:	bf00      	nop
 80033b8:	370c      	adds	r7, #12
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr

080033c2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80033c2:	b480      	push	{r7}
 80033c4:	b083      	sub	sp, #12
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80033ca:	bf00      	nop
 80033cc:	370c      	adds	r7, #12
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr
	...

080033d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80033d8:	b480      	push	{r7}
 80033da:	b085      	sub	sp, #20
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	4a3a      	ldr	r2, [pc, #232]	@ (80034d4 <TIM_Base_SetConfig+0xfc>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d00f      	beq.n	8003410 <TIM_Base_SetConfig+0x38>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033f6:	d00b      	beq.n	8003410 <TIM_Base_SetConfig+0x38>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	4a37      	ldr	r2, [pc, #220]	@ (80034d8 <TIM_Base_SetConfig+0x100>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d007      	beq.n	8003410 <TIM_Base_SetConfig+0x38>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	4a36      	ldr	r2, [pc, #216]	@ (80034dc <TIM_Base_SetConfig+0x104>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d003      	beq.n	8003410 <TIM_Base_SetConfig+0x38>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	4a35      	ldr	r2, [pc, #212]	@ (80034e0 <TIM_Base_SetConfig+0x108>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d108      	bne.n	8003422 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003416:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	68fa      	ldr	r2, [r7, #12]
 800341e:	4313      	orrs	r3, r2
 8003420:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4a2b      	ldr	r2, [pc, #172]	@ (80034d4 <TIM_Base_SetConfig+0xfc>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d01b      	beq.n	8003462 <TIM_Base_SetConfig+0x8a>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003430:	d017      	beq.n	8003462 <TIM_Base_SetConfig+0x8a>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4a28      	ldr	r2, [pc, #160]	@ (80034d8 <TIM_Base_SetConfig+0x100>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d013      	beq.n	8003462 <TIM_Base_SetConfig+0x8a>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4a27      	ldr	r2, [pc, #156]	@ (80034dc <TIM_Base_SetConfig+0x104>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d00f      	beq.n	8003462 <TIM_Base_SetConfig+0x8a>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	4a26      	ldr	r2, [pc, #152]	@ (80034e0 <TIM_Base_SetConfig+0x108>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d00b      	beq.n	8003462 <TIM_Base_SetConfig+0x8a>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4a25      	ldr	r2, [pc, #148]	@ (80034e4 <TIM_Base_SetConfig+0x10c>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d007      	beq.n	8003462 <TIM_Base_SetConfig+0x8a>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4a24      	ldr	r2, [pc, #144]	@ (80034e8 <TIM_Base_SetConfig+0x110>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d003      	beq.n	8003462 <TIM_Base_SetConfig+0x8a>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4a23      	ldr	r2, [pc, #140]	@ (80034ec <TIM_Base_SetConfig+0x114>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d108      	bne.n	8003474 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003468:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	68fa      	ldr	r2, [r7, #12]
 8003470:	4313      	orrs	r3, r2
 8003472:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	695b      	ldr	r3, [r3, #20]
 800347e:	4313      	orrs	r3, r2
 8003480:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	68fa      	ldr	r2, [r7, #12]
 8003486:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	689a      	ldr	r2, [r3, #8]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	4a0e      	ldr	r2, [pc, #56]	@ (80034d4 <TIM_Base_SetConfig+0xfc>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d103      	bne.n	80034a8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	691a      	ldr	r2, [r3, #16]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2201      	movs	r2, #1
 80034ac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	691b      	ldr	r3, [r3, #16]
 80034b2:	f003 0301 	and.w	r3, r3, #1
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d105      	bne.n	80034c6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	691b      	ldr	r3, [r3, #16]
 80034be:	f023 0201 	bic.w	r2, r3, #1
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	611a      	str	r2, [r3, #16]
  }
}
 80034c6:	bf00      	nop
 80034c8:	3714      	adds	r7, #20
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr
 80034d2:	bf00      	nop
 80034d4:	40010000 	.word	0x40010000
 80034d8:	40000400 	.word	0x40000400
 80034dc:	40000800 	.word	0x40000800
 80034e0:	40000c00 	.word	0x40000c00
 80034e4:	40014000 	.word	0x40014000
 80034e8:	40014400 	.word	0x40014400
 80034ec:	40014800 	.word	0x40014800

080034f0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b086      	sub	sp, #24
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034fa:	2300      	movs	r3, #0
 80034fc:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800350c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	693a      	ldr	r2, [r7, #16]
 8003514:	4313      	orrs	r3, r2
 8003516:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	f023 0307 	bic.w	r3, r3, #7
 800351e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	693a      	ldr	r2, [r7, #16]
 8003526:	4313      	orrs	r3, r2
 8003528:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	693a      	ldr	r2, [r7, #16]
 8003530:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	2b70      	cmp	r3, #112	@ 0x70
 8003538:	d01a      	beq.n	8003570 <TIM_SlaveTimer_SetConfig+0x80>
 800353a:	2b70      	cmp	r3, #112	@ 0x70
 800353c:	d860      	bhi.n	8003600 <TIM_SlaveTimer_SetConfig+0x110>
 800353e:	2b60      	cmp	r3, #96	@ 0x60
 8003540:	d054      	beq.n	80035ec <TIM_SlaveTimer_SetConfig+0xfc>
 8003542:	2b60      	cmp	r3, #96	@ 0x60
 8003544:	d85c      	bhi.n	8003600 <TIM_SlaveTimer_SetConfig+0x110>
 8003546:	2b50      	cmp	r3, #80	@ 0x50
 8003548:	d046      	beq.n	80035d8 <TIM_SlaveTimer_SetConfig+0xe8>
 800354a:	2b50      	cmp	r3, #80	@ 0x50
 800354c:	d858      	bhi.n	8003600 <TIM_SlaveTimer_SetConfig+0x110>
 800354e:	2b40      	cmp	r3, #64	@ 0x40
 8003550:	d019      	beq.n	8003586 <TIM_SlaveTimer_SetConfig+0x96>
 8003552:	2b40      	cmp	r3, #64	@ 0x40
 8003554:	d854      	bhi.n	8003600 <TIM_SlaveTimer_SetConfig+0x110>
 8003556:	2b30      	cmp	r3, #48	@ 0x30
 8003558:	d055      	beq.n	8003606 <TIM_SlaveTimer_SetConfig+0x116>
 800355a:	2b30      	cmp	r3, #48	@ 0x30
 800355c:	d850      	bhi.n	8003600 <TIM_SlaveTimer_SetConfig+0x110>
 800355e:	2b20      	cmp	r3, #32
 8003560:	d051      	beq.n	8003606 <TIM_SlaveTimer_SetConfig+0x116>
 8003562:	2b20      	cmp	r3, #32
 8003564:	d84c      	bhi.n	8003600 <TIM_SlaveTimer_SetConfig+0x110>
 8003566:	2b00      	cmp	r3, #0
 8003568:	d04d      	beq.n	8003606 <TIM_SlaveTimer_SetConfig+0x116>
 800356a:	2b10      	cmp	r3, #16
 800356c:	d04b      	beq.n	8003606 <TIM_SlaveTimer_SetConfig+0x116>
 800356e:	e047      	b.n	8003600 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8003580:	f000 f8c1 	bl	8003706 <TIM_ETR_SetConfig>
      break;
 8003584:	e040      	b.n	8003608 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	2b05      	cmp	r3, #5
 800358c:	d101      	bne.n	8003592 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e03b      	b.n	800360a <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	6a1b      	ldr	r3, [r3, #32]
 8003598:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	6a1a      	ldr	r2, [r3, #32]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f022 0201 	bic.w	r2, r2, #1
 80035a8:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	699b      	ldr	r3, [r3, #24]
 80035b0:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80035b8:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	691b      	ldr	r3, [r3, #16]
 80035be:	011b      	lsls	r3, r3, #4
 80035c0:	68ba      	ldr	r2, [r7, #8]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	68ba      	ldr	r2, [r7, #8]
 80035cc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	68fa      	ldr	r2, [r7, #12]
 80035d4:	621a      	str	r2, [r3, #32]
      break;
 80035d6:	e017      	b.n	8003608 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035e4:	461a      	mov	r2, r3
 80035e6:	f000 f814 	bl	8003612 <TIM_TI1_ConfigInputStage>
      break;
 80035ea:	e00d      	b.n	8003608 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80035f8:	461a      	mov	r2, r3
 80035fa:	f000 f839 	bl	8003670 <TIM_TI2_ConfigInputStage>
      break;
 80035fe:	e003      	b.n	8003608 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	75fb      	strb	r3, [r7, #23]
      break;
 8003604:	e000      	b.n	8003608 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8003606:	bf00      	nop
  }

  return status;
 8003608:	7dfb      	ldrb	r3, [r7, #23]
}
 800360a:	4618      	mov	r0, r3
 800360c:	3718      	adds	r7, #24
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}

08003612 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003612:	b480      	push	{r7}
 8003614:	b087      	sub	sp, #28
 8003616:	af00      	add	r7, sp, #0
 8003618:	60f8      	str	r0, [r7, #12]
 800361a:	60b9      	str	r1, [r7, #8]
 800361c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	6a1b      	ldr	r3, [r3, #32]
 8003622:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6a1b      	ldr	r3, [r3, #32]
 8003628:	f023 0201 	bic.w	r2, r3, #1
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	699b      	ldr	r3, [r3, #24]
 8003634:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800363c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	011b      	lsls	r3, r3, #4
 8003642:	693a      	ldr	r2, [r7, #16]
 8003644:	4313      	orrs	r3, r2
 8003646:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	f023 030a 	bic.w	r3, r3, #10
 800364e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003650:	697a      	ldr	r2, [r7, #20]
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	4313      	orrs	r3, r2
 8003656:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	693a      	ldr	r2, [r7, #16]
 800365c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	697a      	ldr	r2, [r7, #20]
 8003662:	621a      	str	r2, [r3, #32]
}
 8003664:	bf00      	nop
 8003666:	371c      	adds	r7, #28
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr

08003670 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003670:	b480      	push	{r7}
 8003672:	b087      	sub	sp, #28
 8003674:	af00      	add	r7, sp, #0
 8003676:	60f8      	str	r0, [r7, #12]
 8003678:	60b9      	str	r1, [r7, #8]
 800367a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	6a1b      	ldr	r3, [r3, #32]
 8003680:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	6a1b      	ldr	r3, [r3, #32]
 8003686:	f023 0210 	bic.w	r2, r3, #16
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	699b      	ldr	r3, [r3, #24]
 8003692:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800369a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	031b      	lsls	r3, r3, #12
 80036a0:	693a      	ldr	r2, [r7, #16]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80036ac:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	011b      	lsls	r3, r3, #4
 80036b2:	697a      	ldr	r2, [r7, #20]
 80036b4:	4313      	orrs	r3, r2
 80036b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	693a      	ldr	r2, [r7, #16]
 80036bc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	697a      	ldr	r2, [r7, #20]
 80036c2:	621a      	str	r2, [r3, #32]
}
 80036c4:	bf00      	nop
 80036c6:	371c      	adds	r7, #28
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr

080036d0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b085      	sub	sp, #20
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036e6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80036e8:	683a      	ldr	r2, [r7, #0]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	4313      	orrs	r3, r2
 80036ee:	f043 0307 	orr.w	r3, r3, #7
 80036f2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	68fa      	ldr	r2, [r7, #12]
 80036f8:	609a      	str	r2, [r3, #8]
}
 80036fa:	bf00      	nop
 80036fc:	3714      	adds	r7, #20
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr

08003706 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003706:	b480      	push	{r7}
 8003708:	b087      	sub	sp, #28
 800370a:	af00      	add	r7, sp, #0
 800370c:	60f8      	str	r0, [r7, #12]
 800370e:	60b9      	str	r1, [r7, #8]
 8003710:	607a      	str	r2, [r7, #4]
 8003712:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003720:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	021a      	lsls	r2, r3, #8
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	431a      	orrs	r2, r3
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	4313      	orrs	r3, r2
 800372e:	697a      	ldr	r2, [r7, #20]
 8003730:	4313      	orrs	r3, r2
 8003732:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	697a      	ldr	r2, [r7, #20]
 8003738:	609a      	str	r2, [r3, #8]
}
 800373a:	bf00      	nop
 800373c:	371c      	adds	r7, #28
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr
	...

08003748 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003748:	b480      	push	{r7}
 800374a:	b085      	sub	sp, #20
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003758:	2b01      	cmp	r3, #1
 800375a:	d101      	bne.n	8003760 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800375c:	2302      	movs	r3, #2
 800375e:	e050      	b.n	8003802 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2201      	movs	r2, #1
 8003764:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2202      	movs	r2, #2
 800376c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003786:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	68fa      	ldr	r2, [r7, #12]
 800378e:	4313      	orrs	r3, r2
 8003790:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	68fa      	ldr	r2, [r7, #12]
 8003798:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a1c      	ldr	r2, [pc, #112]	@ (8003810 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d018      	beq.n	80037d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037ac:	d013      	beq.n	80037d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a18      	ldr	r2, [pc, #96]	@ (8003814 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d00e      	beq.n	80037d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a16      	ldr	r2, [pc, #88]	@ (8003818 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d009      	beq.n	80037d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a15      	ldr	r2, [pc, #84]	@ (800381c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d004      	beq.n	80037d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a13      	ldr	r2, [pc, #76]	@ (8003820 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d10c      	bne.n	80037f0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80037dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	68ba      	ldr	r2, [r7, #8]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	68ba      	ldr	r2, [r7, #8]
 80037ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2200      	movs	r2, #0
 80037fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003800:	2300      	movs	r3, #0
}
 8003802:	4618      	mov	r0, r3
 8003804:	3714      	adds	r7, #20
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr
 800380e:	bf00      	nop
 8003810:	40010000 	.word	0x40010000
 8003814:	40000400 	.word	0x40000400
 8003818:	40000800 	.word	0x40000800
 800381c:	40000c00 	.word	0x40000c00
 8003820:	40014000 	.word	0x40014000

08003824 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003824:	b480      	push	{r7}
 8003826:	b083      	sub	sp, #12
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800382c:	bf00      	nop
 800382e:	370c      	adds	r7, #12
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr

08003838 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003840:	bf00      	nop
 8003842:	370c      	adds	r7, #12
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr

0800384c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b082      	sub	sp, #8
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d101      	bne.n	800385e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e042      	b.n	80038e4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003864:	b2db      	uxtb	r3, r3
 8003866:	2b00      	cmp	r3, #0
 8003868:	d106      	bne.n	8003878 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2200      	movs	r2, #0
 800386e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f7fd f866 	bl	8000944 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2224      	movs	r2, #36	@ 0x24
 800387c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	68da      	ldr	r2, [r3, #12]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800388e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f000 f82b 	bl	80038ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	691a      	ldr	r2, [r3, #16]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80038a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	695a      	ldr	r2, [r3, #20]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80038b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	68da      	ldr	r2, [r3, #12]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80038c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2220      	movs	r2, #32
 80038d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2220      	movs	r2, #32
 80038d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80038e2:	2300      	movs	r3, #0
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3708      	adds	r7, #8
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}

080038ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038f0:	b0c0      	sub	sp, #256	@ 0x100
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	691b      	ldr	r3, [r3, #16]
 8003900:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003908:	68d9      	ldr	r1, [r3, #12]
 800390a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	ea40 0301 	orr.w	r3, r0, r1
 8003914:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003916:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800391a:	689a      	ldr	r2, [r3, #8]
 800391c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003920:	691b      	ldr	r3, [r3, #16]
 8003922:	431a      	orrs	r2, r3
 8003924:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003928:	695b      	ldr	r3, [r3, #20]
 800392a:	431a      	orrs	r2, r3
 800392c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003930:	69db      	ldr	r3, [r3, #28]
 8003932:	4313      	orrs	r3, r2
 8003934:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003944:	f021 010c 	bic.w	r1, r1, #12
 8003948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003952:	430b      	orrs	r3, r1
 8003954:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003956:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	695b      	ldr	r3, [r3, #20]
 800395e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003962:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003966:	6999      	ldr	r1, [r3, #24]
 8003968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	ea40 0301 	orr.w	r3, r0, r1
 8003972:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	4b8f      	ldr	r3, [pc, #572]	@ (8003bb8 <UART_SetConfig+0x2cc>)
 800397c:	429a      	cmp	r2, r3
 800397e:	d005      	beq.n	800398c <UART_SetConfig+0xa0>
 8003980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	4b8d      	ldr	r3, [pc, #564]	@ (8003bbc <UART_SetConfig+0x2d0>)
 8003988:	429a      	cmp	r2, r3
 800398a:	d104      	bne.n	8003996 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800398c:	f7ff fa3c 	bl	8002e08 <HAL_RCC_GetPCLK2Freq>
 8003990:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003994:	e003      	b.n	800399e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003996:	f7ff fa23 	bl	8002de0 <HAL_RCC_GetPCLK1Freq>
 800399a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800399e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039a2:	69db      	ldr	r3, [r3, #28]
 80039a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80039a8:	f040 810c 	bne.w	8003bc4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80039ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80039b0:	2200      	movs	r2, #0
 80039b2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80039b6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80039ba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80039be:	4622      	mov	r2, r4
 80039c0:	462b      	mov	r3, r5
 80039c2:	1891      	adds	r1, r2, r2
 80039c4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80039c6:	415b      	adcs	r3, r3
 80039c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80039ca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80039ce:	4621      	mov	r1, r4
 80039d0:	eb12 0801 	adds.w	r8, r2, r1
 80039d4:	4629      	mov	r1, r5
 80039d6:	eb43 0901 	adc.w	r9, r3, r1
 80039da:	f04f 0200 	mov.w	r2, #0
 80039de:	f04f 0300 	mov.w	r3, #0
 80039e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80039e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80039ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80039ee:	4690      	mov	r8, r2
 80039f0:	4699      	mov	r9, r3
 80039f2:	4623      	mov	r3, r4
 80039f4:	eb18 0303 	adds.w	r3, r8, r3
 80039f8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80039fc:	462b      	mov	r3, r5
 80039fe:	eb49 0303 	adc.w	r3, r9, r3
 8003a02:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003a06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003a12:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003a16:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003a1a:	460b      	mov	r3, r1
 8003a1c:	18db      	adds	r3, r3, r3
 8003a1e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003a20:	4613      	mov	r3, r2
 8003a22:	eb42 0303 	adc.w	r3, r2, r3
 8003a26:	657b      	str	r3, [r7, #84]	@ 0x54
 8003a28:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003a2c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003a30:	f7fc fbd2 	bl	80001d8 <__aeabi_uldivmod>
 8003a34:	4602      	mov	r2, r0
 8003a36:	460b      	mov	r3, r1
 8003a38:	4b61      	ldr	r3, [pc, #388]	@ (8003bc0 <UART_SetConfig+0x2d4>)
 8003a3a:	fba3 2302 	umull	r2, r3, r3, r2
 8003a3e:	095b      	lsrs	r3, r3, #5
 8003a40:	011c      	lsls	r4, r3, #4
 8003a42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a46:	2200      	movs	r2, #0
 8003a48:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003a4c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003a50:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003a54:	4642      	mov	r2, r8
 8003a56:	464b      	mov	r3, r9
 8003a58:	1891      	adds	r1, r2, r2
 8003a5a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003a5c:	415b      	adcs	r3, r3
 8003a5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a60:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003a64:	4641      	mov	r1, r8
 8003a66:	eb12 0a01 	adds.w	sl, r2, r1
 8003a6a:	4649      	mov	r1, r9
 8003a6c:	eb43 0b01 	adc.w	fp, r3, r1
 8003a70:	f04f 0200 	mov.w	r2, #0
 8003a74:	f04f 0300 	mov.w	r3, #0
 8003a78:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003a7c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003a80:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a84:	4692      	mov	sl, r2
 8003a86:	469b      	mov	fp, r3
 8003a88:	4643      	mov	r3, r8
 8003a8a:	eb1a 0303 	adds.w	r3, sl, r3
 8003a8e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003a92:	464b      	mov	r3, r9
 8003a94:	eb4b 0303 	adc.w	r3, fp, r3
 8003a98:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003aa8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003aac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003ab0:	460b      	mov	r3, r1
 8003ab2:	18db      	adds	r3, r3, r3
 8003ab4:	643b      	str	r3, [r7, #64]	@ 0x40
 8003ab6:	4613      	mov	r3, r2
 8003ab8:	eb42 0303 	adc.w	r3, r2, r3
 8003abc:	647b      	str	r3, [r7, #68]	@ 0x44
 8003abe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003ac2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003ac6:	f7fc fb87 	bl	80001d8 <__aeabi_uldivmod>
 8003aca:	4602      	mov	r2, r0
 8003acc:	460b      	mov	r3, r1
 8003ace:	4611      	mov	r1, r2
 8003ad0:	4b3b      	ldr	r3, [pc, #236]	@ (8003bc0 <UART_SetConfig+0x2d4>)
 8003ad2:	fba3 2301 	umull	r2, r3, r3, r1
 8003ad6:	095b      	lsrs	r3, r3, #5
 8003ad8:	2264      	movs	r2, #100	@ 0x64
 8003ada:	fb02 f303 	mul.w	r3, r2, r3
 8003ade:	1acb      	subs	r3, r1, r3
 8003ae0:	00db      	lsls	r3, r3, #3
 8003ae2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003ae6:	4b36      	ldr	r3, [pc, #216]	@ (8003bc0 <UART_SetConfig+0x2d4>)
 8003ae8:	fba3 2302 	umull	r2, r3, r3, r2
 8003aec:	095b      	lsrs	r3, r3, #5
 8003aee:	005b      	lsls	r3, r3, #1
 8003af0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003af4:	441c      	add	r4, r3
 8003af6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003afa:	2200      	movs	r2, #0
 8003afc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003b00:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003b04:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003b08:	4642      	mov	r2, r8
 8003b0a:	464b      	mov	r3, r9
 8003b0c:	1891      	adds	r1, r2, r2
 8003b0e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003b10:	415b      	adcs	r3, r3
 8003b12:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b14:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003b18:	4641      	mov	r1, r8
 8003b1a:	1851      	adds	r1, r2, r1
 8003b1c:	6339      	str	r1, [r7, #48]	@ 0x30
 8003b1e:	4649      	mov	r1, r9
 8003b20:	414b      	adcs	r3, r1
 8003b22:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b24:	f04f 0200 	mov.w	r2, #0
 8003b28:	f04f 0300 	mov.w	r3, #0
 8003b2c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003b30:	4659      	mov	r1, fp
 8003b32:	00cb      	lsls	r3, r1, #3
 8003b34:	4651      	mov	r1, sl
 8003b36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b3a:	4651      	mov	r1, sl
 8003b3c:	00ca      	lsls	r2, r1, #3
 8003b3e:	4610      	mov	r0, r2
 8003b40:	4619      	mov	r1, r3
 8003b42:	4603      	mov	r3, r0
 8003b44:	4642      	mov	r2, r8
 8003b46:	189b      	adds	r3, r3, r2
 8003b48:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003b4c:	464b      	mov	r3, r9
 8003b4e:	460a      	mov	r2, r1
 8003b50:	eb42 0303 	adc.w	r3, r2, r3
 8003b54:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003b64:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003b68:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003b6c:	460b      	mov	r3, r1
 8003b6e:	18db      	adds	r3, r3, r3
 8003b70:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b72:	4613      	mov	r3, r2
 8003b74:	eb42 0303 	adc.w	r3, r2, r3
 8003b78:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b7a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003b7e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003b82:	f7fc fb29 	bl	80001d8 <__aeabi_uldivmod>
 8003b86:	4602      	mov	r2, r0
 8003b88:	460b      	mov	r3, r1
 8003b8a:	4b0d      	ldr	r3, [pc, #52]	@ (8003bc0 <UART_SetConfig+0x2d4>)
 8003b8c:	fba3 1302 	umull	r1, r3, r3, r2
 8003b90:	095b      	lsrs	r3, r3, #5
 8003b92:	2164      	movs	r1, #100	@ 0x64
 8003b94:	fb01 f303 	mul.w	r3, r1, r3
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	00db      	lsls	r3, r3, #3
 8003b9c:	3332      	adds	r3, #50	@ 0x32
 8003b9e:	4a08      	ldr	r2, [pc, #32]	@ (8003bc0 <UART_SetConfig+0x2d4>)
 8003ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ba4:	095b      	lsrs	r3, r3, #5
 8003ba6:	f003 0207 	and.w	r2, r3, #7
 8003baa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4422      	add	r2, r4
 8003bb2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003bb4:	e106      	b.n	8003dc4 <UART_SetConfig+0x4d8>
 8003bb6:	bf00      	nop
 8003bb8:	40011000 	.word	0x40011000
 8003bbc:	40011400 	.word	0x40011400
 8003bc0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003bc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003bce:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003bd2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003bd6:	4642      	mov	r2, r8
 8003bd8:	464b      	mov	r3, r9
 8003bda:	1891      	adds	r1, r2, r2
 8003bdc:	6239      	str	r1, [r7, #32]
 8003bde:	415b      	adcs	r3, r3
 8003be0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003be2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003be6:	4641      	mov	r1, r8
 8003be8:	1854      	adds	r4, r2, r1
 8003bea:	4649      	mov	r1, r9
 8003bec:	eb43 0501 	adc.w	r5, r3, r1
 8003bf0:	f04f 0200 	mov.w	r2, #0
 8003bf4:	f04f 0300 	mov.w	r3, #0
 8003bf8:	00eb      	lsls	r3, r5, #3
 8003bfa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003bfe:	00e2      	lsls	r2, r4, #3
 8003c00:	4614      	mov	r4, r2
 8003c02:	461d      	mov	r5, r3
 8003c04:	4643      	mov	r3, r8
 8003c06:	18e3      	adds	r3, r4, r3
 8003c08:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003c0c:	464b      	mov	r3, r9
 8003c0e:	eb45 0303 	adc.w	r3, r5, r3
 8003c12:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003c16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003c22:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003c26:	f04f 0200 	mov.w	r2, #0
 8003c2a:	f04f 0300 	mov.w	r3, #0
 8003c2e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003c32:	4629      	mov	r1, r5
 8003c34:	008b      	lsls	r3, r1, #2
 8003c36:	4621      	mov	r1, r4
 8003c38:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c3c:	4621      	mov	r1, r4
 8003c3e:	008a      	lsls	r2, r1, #2
 8003c40:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003c44:	f7fc fac8 	bl	80001d8 <__aeabi_uldivmod>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	460b      	mov	r3, r1
 8003c4c:	4b60      	ldr	r3, [pc, #384]	@ (8003dd0 <UART_SetConfig+0x4e4>)
 8003c4e:	fba3 2302 	umull	r2, r3, r3, r2
 8003c52:	095b      	lsrs	r3, r3, #5
 8003c54:	011c      	lsls	r4, r3, #4
 8003c56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003c60:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003c64:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003c68:	4642      	mov	r2, r8
 8003c6a:	464b      	mov	r3, r9
 8003c6c:	1891      	adds	r1, r2, r2
 8003c6e:	61b9      	str	r1, [r7, #24]
 8003c70:	415b      	adcs	r3, r3
 8003c72:	61fb      	str	r3, [r7, #28]
 8003c74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c78:	4641      	mov	r1, r8
 8003c7a:	1851      	adds	r1, r2, r1
 8003c7c:	6139      	str	r1, [r7, #16]
 8003c7e:	4649      	mov	r1, r9
 8003c80:	414b      	adcs	r3, r1
 8003c82:	617b      	str	r3, [r7, #20]
 8003c84:	f04f 0200 	mov.w	r2, #0
 8003c88:	f04f 0300 	mov.w	r3, #0
 8003c8c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c90:	4659      	mov	r1, fp
 8003c92:	00cb      	lsls	r3, r1, #3
 8003c94:	4651      	mov	r1, sl
 8003c96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c9a:	4651      	mov	r1, sl
 8003c9c:	00ca      	lsls	r2, r1, #3
 8003c9e:	4610      	mov	r0, r2
 8003ca0:	4619      	mov	r1, r3
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	4642      	mov	r2, r8
 8003ca6:	189b      	adds	r3, r3, r2
 8003ca8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003cac:	464b      	mov	r3, r9
 8003cae:	460a      	mov	r2, r1
 8003cb0:	eb42 0303 	adc.w	r3, r2, r3
 8003cb4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003cb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003cc2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003cc4:	f04f 0200 	mov.w	r2, #0
 8003cc8:	f04f 0300 	mov.w	r3, #0
 8003ccc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003cd0:	4649      	mov	r1, r9
 8003cd2:	008b      	lsls	r3, r1, #2
 8003cd4:	4641      	mov	r1, r8
 8003cd6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003cda:	4641      	mov	r1, r8
 8003cdc:	008a      	lsls	r2, r1, #2
 8003cde:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003ce2:	f7fc fa79 	bl	80001d8 <__aeabi_uldivmod>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	460b      	mov	r3, r1
 8003cea:	4611      	mov	r1, r2
 8003cec:	4b38      	ldr	r3, [pc, #224]	@ (8003dd0 <UART_SetConfig+0x4e4>)
 8003cee:	fba3 2301 	umull	r2, r3, r3, r1
 8003cf2:	095b      	lsrs	r3, r3, #5
 8003cf4:	2264      	movs	r2, #100	@ 0x64
 8003cf6:	fb02 f303 	mul.w	r3, r2, r3
 8003cfa:	1acb      	subs	r3, r1, r3
 8003cfc:	011b      	lsls	r3, r3, #4
 8003cfe:	3332      	adds	r3, #50	@ 0x32
 8003d00:	4a33      	ldr	r2, [pc, #204]	@ (8003dd0 <UART_SetConfig+0x4e4>)
 8003d02:	fba2 2303 	umull	r2, r3, r2, r3
 8003d06:	095b      	lsrs	r3, r3, #5
 8003d08:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003d0c:	441c      	add	r4, r3
 8003d0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d12:	2200      	movs	r2, #0
 8003d14:	673b      	str	r3, [r7, #112]	@ 0x70
 8003d16:	677a      	str	r2, [r7, #116]	@ 0x74
 8003d18:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003d1c:	4642      	mov	r2, r8
 8003d1e:	464b      	mov	r3, r9
 8003d20:	1891      	adds	r1, r2, r2
 8003d22:	60b9      	str	r1, [r7, #8]
 8003d24:	415b      	adcs	r3, r3
 8003d26:	60fb      	str	r3, [r7, #12]
 8003d28:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d2c:	4641      	mov	r1, r8
 8003d2e:	1851      	adds	r1, r2, r1
 8003d30:	6039      	str	r1, [r7, #0]
 8003d32:	4649      	mov	r1, r9
 8003d34:	414b      	adcs	r3, r1
 8003d36:	607b      	str	r3, [r7, #4]
 8003d38:	f04f 0200 	mov.w	r2, #0
 8003d3c:	f04f 0300 	mov.w	r3, #0
 8003d40:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003d44:	4659      	mov	r1, fp
 8003d46:	00cb      	lsls	r3, r1, #3
 8003d48:	4651      	mov	r1, sl
 8003d4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d4e:	4651      	mov	r1, sl
 8003d50:	00ca      	lsls	r2, r1, #3
 8003d52:	4610      	mov	r0, r2
 8003d54:	4619      	mov	r1, r3
 8003d56:	4603      	mov	r3, r0
 8003d58:	4642      	mov	r2, r8
 8003d5a:	189b      	adds	r3, r3, r2
 8003d5c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003d5e:	464b      	mov	r3, r9
 8003d60:	460a      	mov	r2, r1
 8003d62:	eb42 0303 	adc.w	r3, r2, r3
 8003d66:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003d68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	663b      	str	r3, [r7, #96]	@ 0x60
 8003d72:	667a      	str	r2, [r7, #100]	@ 0x64
 8003d74:	f04f 0200 	mov.w	r2, #0
 8003d78:	f04f 0300 	mov.w	r3, #0
 8003d7c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003d80:	4649      	mov	r1, r9
 8003d82:	008b      	lsls	r3, r1, #2
 8003d84:	4641      	mov	r1, r8
 8003d86:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d8a:	4641      	mov	r1, r8
 8003d8c:	008a      	lsls	r2, r1, #2
 8003d8e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003d92:	f7fc fa21 	bl	80001d8 <__aeabi_uldivmod>
 8003d96:	4602      	mov	r2, r0
 8003d98:	460b      	mov	r3, r1
 8003d9a:	4b0d      	ldr	r3, [pc, #52]	@ (8003dd0 <UART_SetConfig+0x4e4>)
 8003d9c:	fba3 1302 	umull	r1, r3, r3, r2
 8003da0:	095b      	lsrs	r3, r3, #5
 8003da2:	2164      	movs	r1, #100	@ 0x64
 8003da4:	fb01 f303 	mul.w	r3, r1, r3
 8003da8:	1ad3      	subs	r3, r2, r3
 8003daa:	011b      	lsls	r3, r3, #4
 8003dac:	3332      	adds	r3, #50	@ 0x32
 8003dae:	4a08      	ldr	r2, [pc, #32]	@ (8003dd0 <UART_SetConfig+0x4e4>)
 8003db0:	fba2 2303 	umull	r2, r3, r2, r3
 8003db4:	095b      	lsrs	r3, r3, #5
 8003db6:	f003 020f 	and.w	r2, r3, #15
 8003dba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4422      	add	r2, r4
 8003dc2:	609a      	str	r2, [r3, #8]
}
 8003dc4:	bf00      	nop
 8003dc6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003dd0:	51eb851f 	.word	0x51eb851f

08003dd4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003dd4:	b084      	sub	sp, #16
 8003dd6:	b580      	push	{r7, lr}
 8003dd8:	b084      	sub	sp, #16
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	6078      	str	r0, [r7, #4]
 8003dde:	f107 001c 	add.w	r0, r7, #28
 8003de2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003de6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d123      	bne.n	8003e36 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003df2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8003e02:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	68db      	ldr	r3, [r3, #12]
 8003e0e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003e16:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d105      	bne.n	8003e2a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	68db      	ldr	r3, [r3, #12]
 8003e22:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f001 fae2 	bl	80053f4 <USB_CoreReset>
 8003e30:	4603      	mov	r3, r0
 8003e32:	73fb      	strb	r3, [r7, #15]
 8003e34:	e01b      	b.n	8003e6e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	68db      	ldr	r3, [r3, #12]
 8003e3a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f001 fad6 	bl	80053f4 <USB_CoreReset>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003e4c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d106      	bne.n	8003e62 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e58:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	639a      	str	r2, [r3, #56]	@ 0x38
 8003e60:	e005      	b.n	8003e6e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e66:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003e6e:	7fbb      	ldrb	r3, [r7, #30]
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d10b      	bne.n	8003e8c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	f043 0206 	orr.w	r2, r3, #6
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	f043 0220 	orr.w	r2, r3, #32
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003e8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3710      	adds	r7, #16
 8003e92:	46bd      	mov	sp, r7
 8003e94:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003e98:	b004      	add	sp, #16
 8003e9a:	4770      	bx	lr

08003e9c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b087      	sub	sp, #28
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	60b9      	str	r1, [r7, #8]
 8003ea6:	4613      	mov	r3, r2
 8003ea8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003eaa:	79fb      	ldrb	r3, [r7, #7]
 8003eac:	2b02      	cmp	r3, #2
 8003eae:	d165      	bne.n	8003f7c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	4a41      	ldr	r2, [pc, #260]	@ (8003fb8 <USB_SetTurnaroundTime+0x11c>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d906      	bls.n	8003ec6 <USB_SetTurnaroundTime+0x2a>
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	4a40      	ldr	r2, [pc, #256]	@ (8003fbc <USB_SetTurnaroundTime+0x120>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d202      	bcs.n	8003ec6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003ec0:	230f      	movs	r3, #15
 8003ec2:	617b      	str	r3, [r7, #20]
 8003ec4:	e062      	b.n	8003f8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	4a3c      	ldr	r2, [pc, #240]	@ (8003fbc <USB_SetTurnaroundTime+0x120>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d306      	bcc.n	8003edc <USB_SetTurnaroundTime+0x40>
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	4a3b      	ldr	r2, [pc, #236]	@ (8003fc0 <USB_SetTurnaroundTime+0x124>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d202      	bcs.n	8003edc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003ed6:	230e      	movs	r3, #14
 8003ed8:	617b      	str	r3, [r7, #20]
 8003eda:	e057      	b.n	8003f8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	4a38      	ldr	r2, [pc, #224]	@ (8003fc0 <USB_SetTurnaroundTime+0x124>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d306      	bcc.n	8003ef2 <USB_SetTurnaroundTime+0x56>
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	4a37      	ldr	r2, [pc, #220]	@ (8003fc4 <USB_SetTurnaroundTime+0x128>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d202      	bcs.n	8003ef2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003eec:	230d      	movs	r3, #13
 8003eee:	617b      	str	r3, [r7, #20]
 8003ef0:	e04c      	b.n	8003f8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	4a33      	ldr	r2, [pc, #204]	@ (8003fc4 <USB_SetTurnaroundTime+0x128>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d306      	bcc.n	8003f08 <USB_SetTurnaroundTime+0x6c>
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	4a32      	ldr	r2, [pc, #200]	@ (8003fc8 <USB_SetTurnaroundTime+0x12c>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d802      	bhi.n	8003f08 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003f02:	230c      	movs	r3, #12
 8003f04:	617b      	str	r3, [r7, #20]
 8003f06:	e041      	b.n	8003f8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	4a2f      	ldr	r2, [pc, #188]	@ (8003fc8 <USB_SetTurnaroundTime+0x12c>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d906      	bls.n	8003f1e <USB_SetTurnaroundTime+0x82>
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	4a2e      	ldr	r2, [pc, #184]	@ (8003fcc <USB_SetTurnaroundTime+0x130>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d802      	bhi.n	8003f1e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003f18:	230b      	movs	r3, #11
 8003f1a:	617b      	str	r3, [r7, #20]
 8003f1c:	e036      	b.n	8003f8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	4a2a      	ldr	r2, [pc, #168]	@ (8003fcc <USB_SetTurnaroundTime+0x130>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d906      	bls.n	8003f34 <USB_SetTurnaroundTime+0x98>
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	4a29      	ldr	r2, [pc, #164]	@ (8003fd0 <USB_SetTurnaroundTime+0x134>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d802      	bhi.n	8003f34 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003f2e:	230a      	movs	r3, #10
 8003f30:	617b      	str	r3, [r7, #20]
 8003f32:	e02b      	b.n	8003f8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	4a26      	ldr	r2, [pc, #152]	@ (8003fd0 <USB_SetTurnaroundTime+0x134>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d906      	bls.n	8003f4a <USB_SetTurnaroundTime+0xae>
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	4a25      	ldr	r2, [pc, #148]	@ (8003fd4 <USB_SetTurnaroundTime+0x138>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d202      	bcs.n	8003f4a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003f44:	2309      	movs	r3, #9
 8003f46:	617b      	str	r3, [r7, #20]
 8003f48:	e020      	b.n	8003f8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	4a21      	ldr	r2, [pc, #132]	@ (8003fd4 <USB_SetTurnaroundTime+0x138>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d306      	bcc.n	8003f60 <USB_SetTurnaroundTime+0xc4>
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	4a20      	ldr	r2, [pc, #128]	@ (8003fd8 <USB_SetTurnaroundTime+0x13c>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d802      	bhi.n	8003f60 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003f5a:	2308      	movs	r3, #8
 8003f5c:	617b      	str	r3, [r7, #20]
 8003f5e:	e015      	b.n	8003f8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	4a1d      	ldr	r2, [pc, #116]	@ (8003fd8 <USB_SetTurnaroundTime+0x13c>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d906      	bls.n	8003f76 <USB_SetTurnaroundTime+0xda>
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	4a1c      	ldr	r2, [pc, #112]	@ (8003fdc <USB_SetTurnaroundTime+0x140>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d202      	bcs.n	8003f76 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003f70:	2307      	movs	r3, #7
 8003f72:	617b      	str	r3, [r7, #20]
 8003f74:	e00a      	b.n	8003f8c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003f76:	2306      	movs	r3, #6
 8003f78:	617b      	str	r3, [r7, #20]
 8003f7a:	e007      	b.n	8003f8c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003f7c:	79fb      	ldrb	r3, [r7, #7]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d102      	bne.n	8003f88 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003f82:	2309      	movs	r3, #9
 8003f84:	617b      	str	r3, [r7, #20]
 8003f86:	e001      	b.n	8003f8c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003f88:	2309      	movs	r3, #9
 8003f8a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	68da      	ldr	r2, [r3, #12]
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	029b      	lsls	r3, r3, #10
 8003fa0:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8003fa4:	431a      	orrs	r2, r3
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003faa:	2300      	movs	r3, #0
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	371c      	adds	r7, #28
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr
 8003fb8:	00d8acbf 	.word	0x00d8acbf
 8003fbc:	00e4e1c0 	.word	0x00e4e1c0
 8003fc0:	00f42400 	.word	0x00f42400
 8003fc4:	01067380 	.word	0x01067380
 8003fc8:	011a499f 	.word	0x011a499f
 8003fcc:	01312cff 	.word	0x01312cff
 8003fd0:	014ca43f 	.word	0x014ca43f
 8003fd4:	016e3600 	.word	0x016e3600
 8003fd8:	01a6ab1f 	.word	0x01a6ab1f
 8003fdc:	01e84800 	.word	0x01e84800

08003fe0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b083      	sub	sp, #12
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	f043 0201 	orr.w	r2, r3, #1
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003ff4:	2300      	movs	r3, #0
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	370c      	adds	r7, #12
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr

08004002 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004002:	b480      	push	{r7}
 8004004:	b083      	sub	sp, #12
 8004006:	af00      	add	r7, sp, #0
 8004008:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	f023 0201 	bic.w	r2, r3, #1
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004016:	2300      	movs	r3, #0
}
 8004018:	4618      	mov	r0, r3
 800401a:	370c      	adds	r7, #12
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr

08004024 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b084      	sub	sp, #16
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
 800402c:	460b      	mov	r3, r1
 800402e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004030:	2300      	movs	r3, #0
 8004032:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004040:	78fb      	ldrb	r3, [r7, #3]
 8004042:	2b01      	cmp	r3, #1
 8004044:	d115      	bne.n	8004072 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	68db      	ldr	r3, [r3, #12]
 800404a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004052:	200a      	movs	r0, #10
 8004054:	f7fc fd5a 	bl	8000b0c <HAL_Delay>
      ms += 10U;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	330a      	adds	r3, #10
 800405c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f001 f939 	bl	80052d6 <USB_GetMode>
 8004064:	4603      	mov	r3, r0
 8004066:	2b01      	cmp	r3, #1
 8004068:	d01e      	beq.n	80040a8 <USB_SetCurrentMode+0x84>
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2bc7      	cmp	r3, #199	@ 0xc7
 800406e:	d9f0      	bls.n	8004052 <USB_SetCurrentMode+0x2e>
 8004070:	e01a      	b.n	80040a8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004072:	78fb      	ldrb	r3, [r7, #3]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d115      	bne.n	80040a4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004084:	200a      	movs	r0, #10
 8004086:	f7fc fd41 	bl	8000b0c <HAL_Delay>
      ms += 10U;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	330a      	adds	r3, #10
 800408e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f001 f920 	bl	80052d6 <USB_GetMode>
 8004096:	4603      	mov	r3, r0
 8004098:	2b00      	cmp	r3, #0
 800409a:	d005      	beq.n	80040a8 <USB_SetCurrentMode+0x84>
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2bc7      	cmp	r3, #199	@ 0xc7
 80040a0:	d9f0      	bls.n	8004084 <USB_SetCurrentMode+0x60>
 80040a2:	e001      	b.n	80040a8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	e005      	b.n	80040b4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2bc8      	cmp	r3, #200	@ 0xc8
 80040ac:	d101      	bne.n	80040b2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	e000      	b.n	80040b4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80040b2:	2300      	movs	r3, #0
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	3710      	adds	r7, #16
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}

080040bc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80040bc:	b084      	sub	sp, #16
 80040be:	b580      	push	{r7, lr}
 80040c0:	b086      	sub	sp, #24
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	6078      	str	r0, [r7, #4]
 80040c6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80040ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80040ce:	2300      	movs	r3, #0
 80040d0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80040d6:	2300      	movs	r3, #0
 80040d8:	613b      	str	r3, [r7, #16]
 80040da:	e009      	b.n	80040f0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80040dc:	687a      	ldr	r2, [r7, #4]
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	3340      	adds	r3, #64	@ 0x40
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	4413      	add	r3, r2
 80040e6:	2200      	movs	r2, #0
 80040e8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	3301      	adds	r3, #1
 80040ee:	613b      	str	r3, [r7, #16]
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	2b0e      	cmp	r3, #14
 80040f4:	d9f2      	bls.n	80040dc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80040f6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d11c      	bne.n	8004138 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	68fa      	ldr	r2, [r7, #12]
 8004108:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800410c:	f043 0302 	orr.w	r3, r3, #2
 8004110:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004116:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004122:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800412e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	639a      	str	r2, [r3, #56]	@ 0x38
 8004136:	e00b      	b.n	8004150 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800413c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004148:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004156:	461a      	mov	r2, r3
 8004158:	2300      	movs	r3, #0
 800415a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800415c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004160:	2b01      	cmp	r3, #1
 8004162:	d10d      	bne.n	8004180 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004164:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004168:	2b00      	cmp	r3, #0
 800416a:	d104      	bne.n	8004176 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800416c:	2100      	movs	r1, #0
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f000 f968 	bl	8004444 <USB_SetDevSpeed>
 8004174:	e008      	b.n	8004188 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004176:	2101      	movs	r1, #1
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f000 f963 	bl	8004444 <USB_SetDevSpeed>
 800417e:	e003      	b.n	8004188 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004180:	2103      	movs	r1, #3
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f000 f95e 	bl	8004444 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004188:	2110      	movs	r1, #16
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f000 f8fa 	bl	8004384 <USB_FlushTxFifo>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d001      	beq.n	800419a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f000 f924 	bl	80043e8 <USB_FlushRxFifo>
 80041a0:	4603      	mov	r3, r0
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d001      	beq.n	80041aa <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041b0:	461a      	mov	r2, r3
 80041b2:	2300      	movs	r3, #0
 80041b4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041bc:	461a      	mov	r2, r3
 80041be:	2300      	movs	r3, #0
 80041c0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041c8:	461a      	mov	r2, r3
 80041ca:	2300      	movs	r3, #0
 80041cc:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80041ce:	2300      	movs	r3, #0
 80041d0:	613b      	str	r3, [r7, #16]
 80041d2:	e043      	b.n	800425c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	015a      	lsls	r2, r3, #5
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	4413      	add	r3, r2
 80041dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80041e6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80041ea:	d118      	bne.n	800421e <USB_DevInit+0x162>
    {
      if (i == 0U)
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d10a      	bne.n	8004208 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	015a      	lsls	r2, r3, #5
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	4413      	add	r3, r2
 80041fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041fe:	461a      	mov	r2, r3
 8004200:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004204:	6013      	str	r3, [r2, #0]
 8004206:	e013      	b.n	8004230 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	015a      	lsls	r2, r3, #5
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	4413      	add	r3, r2
 8004210:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004214:	461a      	mov	r2, r3
 8004216:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800421a:	6013      	str	r3, [r2, #0]
 800421c:	e008      	b.n	8004230 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	015a      	lsls	r2, r3, #5
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	4413      	add	r3, r2
 8004226:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800422a:	461a      	mov	r2, r3
 800422c:	2300      	movs	r3, #0
 800422e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	015a      	lsls	r2, r3, #5
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	4413      	add	r3, r2
 8004238:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800423c:	461a      	mov	r2, r3
 800423e:	2300      	movs	r3, #0
 8004240:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	015a      	lsls	r2, r3, #5
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	4413      	add	r3, r2
 800424a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800424e:	461a      	mov	r2, r3
 8004250:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004254:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	3301      	adds	r3, #1
 800425a:	613b      	str	r3, [r7, #16]
 800425c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004260:	461a      	mov	r2, r3
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	4293      	cmp	r3, r2
 8004266:	d3b5      	bcc.n	80041d4 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004268:	2300      	movs	r3, #0
 800426a:	613b      	str	r3, [r7, #16]
 800426c:	e043      	b.n	80042f6 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	015a      	lsls	r2, r3, #5
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	4413      	add	r3, r2
 8004276:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004280:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004284:	d118      	bne.n	80042b8 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d10a      	bne.n	80042a2 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	015a      	lsls	r2, r3, #5
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	4413      	add	r3, r2
 8004294:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004298:	461a      	mov	r2, r3
 800429a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800429e:	6013      	str	r3, [r2, #0]
 80042a0:	e013      	b.n	80042ca <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	015a      	lsls	r2, r3, #5
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	4413      	add	r3, r2
 80042aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042ae:	461a      	mov	r2, r3
 80042b0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80042b4:	6013      	str	r3, [r2, #0]
 80042b6:	e008      	b.n	80042ca <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	015a      	lsls	r2, r3, #5
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	4413      	add	r3, r2
 80042c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042c4:	461a      	mov	r2, r3
 80042c6:	2300      	movs	r3, #0
 80042c8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	015a      	lsls	r2, r3, #5
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	4413      	add	r3, r2
 80042d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042d6:	461a      	mov	r2, r3
 80042d8:	2300      	movs	r3, #0
 80042da:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	015a      	lsls	r2, r3, #5
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	4413      	add	r3, r2
 80042e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042e8:	461a      	mov	r2, r3
 80042ea:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80042ee:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	3301      	adds	r3, #1
 80042f4:	613b      	str	r3, [r7, #16]
 80042f6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80042fa:	461a      	mov	r2, r3
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	4293      	cmp	r3, r2
 8004300:	d3b5      	bcc.n	800426e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004308:	691b      	ldr	r3, [r3, #16]
 800430a:	68fa      	ldr	r2, [r7, #12]
 800430c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004310:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004314:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2200      	movs	r2, #0
 800431a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004322:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004324:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004328:	2b00      	cmp	r3, #0
 800432a:	d105      	bne.n	8004338 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	699b      	ldr	r3, [r3, #24]
 8004330:	f043 0210 	orr.w	r2, r3, #16
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	699a      	ldr	r2, [r3, #24]
 800433c:	4b10      	ldr	r3, [pc, #64]	@ (8004380 <USB_DevInit+0x2c4>)
 800433e:	4313      	orrs	r3, r2
 8004340:	687a      	ldr	r2, [r7, #4]
 8004342:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004344:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004348:	2b00      	cmp	r3, #0
 800434a:	d005      	beq.n	8004358 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	699b      	ldr	r3, [r3, #24]
 8004350:	f043 0208 	orr.w	r2, r3, #8
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004358:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800435c:	2b01      	cmp	r3, #1
 800435e:	d107      	bne.n	8004370 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	699b      	ldr	r3, [r3, #24]
 8004364:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004368:	f043 0304 	orr.w	r3, r3, #4
 800436c:	687a      	ldr	r2, [r7, #4]
 800436e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004370:	7dfb      	ldrb	r3, [r7, #23]
}
 8004372:	4618      	mov	r0, r3
 8004374:	3718      	adds	r7, #24
 8004376:	46bd      	mov	sp, r7
 8004378:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800437c:	b004      	add	sp, #16
 800437e:	4770      	bx	lr
 8004380:	803c3800 	.word	0x803c3800

08004384 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004384:	b480      	push	{r7}
 8004386:	b085      	sub	sp, #20
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
 800438c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800438e:	2300      	movs	r3, #0
 8004390:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	3301      	adds	r3, #1
 8004396:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800439e:	d901      	bls.n	80043a4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80043a0:	2303      	movs	r3, #3
 80043a2:	e01b      	b.n	80043dc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	691b      	ldr	r3, [r3, #16]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	daf2      	bge.n	8004392 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80043ac:	2300      	movs	r3, #0
 80043ae:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	019b      	lsls	r3, r3, #6
 80043b4:	f043 0220 	orr.w	r2, r3, #32
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	3301      	adds	r3, #1
 80043c0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80043c8:	d901      	bls.n	80043ce <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80043ca:	2303      	movs	r3, #3
 80043cc:	e006      	b.n	80043dc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	691b      	ldr	r3, [r3, #16]
 80043d2:	f003 0320 	and.w	r3, r3, #32
 80043d6:	2b20      	cmp	r3, #32
 80043d8:	d0f0      	beq.n	80043bc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80043da:	2300      	movs	r3, #0
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3714      	adds	r7, #20
 80043e0:	46bd      	mov	sp, r7
 80043e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e6:	4770      	bx	lr

080043e8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b085      	sub	sp, #20
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80043f0:	2300      	movs	r3, #0
 80043f2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	3301      	adds	r3, #1
 80043f8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004400:	d901      	bls.n	8004406 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004402:	2303      	movs	r3, #3
 8004404:	e018      	b.n	8004438 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	691b      	ldr	r3, [r3, #16]
 800440a:	2b00      	cmp	r3, #0
 800440c:	daf2      	bge.n	80043f4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800440e:	2300      	movs	r3, #0
 8004410:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2210      	movs	r2, #16
 8004416:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	3301      	adds	r3, #1
 800441c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004424:	d901      	bls.n	800442a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004426:	2303      	movs	r3, #3
 8004428:	e006      	b.n	8004438 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	691b      	ldr	r3, [r3, #16]
 800442e:	f003 0310 	and.w	r3, r3, #16
 8004432:	2b10      	cmp	r3, #16
 8004434:	d0f0      	beq.n	8004418 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004436:	2300      	movs	r3, #0
}
 8004438:	4618      	mov	r0, r3
 800443a:	3714      	adds	r7, #20
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr

08004444 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004444:	b480      	push	{r7}
 8004446:	b085      	sub	sp, #20
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	460b      	mov	r3, r1
 800444e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	78fb      	ldrb	r3, [r7, #3]
 800445e:	68f9      	ldr	r1, [r7, #12]
 8004460:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004464:	4313      	orrs	r3, r2
 8004466:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004468:	2300      	movs	r3, #0
}
 800446a:	4618      	mov	r0, r3
 800446c:	3714      	adds	r7, #20
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr

08004476 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8004476:	b480      	push	{r7}
 8004478:	b087      	sub	sp, #28
 800447a:	af00      	add	r7, sp, #0
 800447c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	f003 0306 	and.w	r3, r3, #6
 800448e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d102      	bne.n	800449c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004496:	2300      	movs	r3, #0
 8004498:	75fb      	strb	r3, [r7, #23]
 800449a:	e00a      	b.n	80044b2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2b02      	cmp	r3, #2
 80044a0:	d002      	beq.n	80044a8 <USB_GetDevSpeed+0x32>
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2b06      	cmp	r3, #6
 80044a6:	d102      	bne.n	80044ae <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80044a8:	2302      	movs	r3, #2
 80044aa:	75fb      	strb	r3, [r7, #23]
 80044ac:	e001      	b.n	80044b2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80044ae:	230f      	movs	r3, #15
 80044b0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80044b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	371c      	adds	r7, #28
 80044b8:	46bd      	mov	sp, r7
 80044ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044be:	4770      	bx	lr

080044c0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b085      	sub	sp, #20
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
 80044c8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	781b      	ldrb	r3, [r3, #0]
 80044d2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	785b      	ldrb	r3, [r3, #1]
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d13a      	bne.n	8004552 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044e2:	69da      	ldr	r2, [r3, #28]
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	781b      	ldrb	r3, [r3, #0]
 80044e8:	f003 030f 	and.w	r3, r3, #15
 80044ec:	2101      	movs	r1, #1
 80044ee:	fa01 f303 	lsl.w	r3, r1, r3
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	68f9      	ldr	r1, [r7, #12]
 80044f6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80044fa:	4313      	orrs	r3, r2
 80044fc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	015a      	lsls	r2, r3, #5
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	4413      	add	r3, r2
 8004506:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004510:	2b00      	cmp	r3, #0
 8004512:	d155      	bne.n	80045c0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	015a      	lsls	r2, r3, #5
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	4413      	add	r3, r2
 800451c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	791b      	ldrb	r3, [r3, #4]
 800452e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004530:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	059b      	lsls	r3, r3, #22
 8004536:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004538:	4313      	orrs	r3, r2
 800453a:	68ba      	ldr	r2, [r7, #8]
 800453c:	0151      	lsls	r1, r2, #5
 800453e:	68fa      	ldr	r2, [r7, #12]
 8004540:	440a      	add	r2, r1
 8004542:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004546:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800454a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800454e:	6013      	str	r3, [r2, #0]
 8004550:	e036      	b.n	80045c0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004558:	69da      	ldr	r2, [r3, #28]
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	781b      	ldrb	r3, [r3, #0]
 800455e:	f003 030f 	and.w	r3, r3, #15
 8004562:	2101      	movs	r1, #1
 8004564:	fa01 f303 	lsl.w	r3, r1, r3
 8004568:	041b      	lsls	r3, r3, #16
 800456a:	68f9      	ldr	r1, [r7, #12]
 800456c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004570:	4313      	orrs	r3, r2
 8004572:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	015a      	lsls	r2, r3, #5
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	4413      	add	r3, r2
 800457c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004586:	2b00      	cmp	r3, #0
 8004588:	d11a      	bne.n	80045c0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	015a      	lsls	r2, r3, #5
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	4413      	add	r3, r2
 8004592:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	791b      	ldrb	r3, [r3, #4]
 80045a4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80045a6:	430b      	orrs	r3, r1
 80045a8:	4313      	orrs	r3, r2
 80045aa:	68ba      	ldr	r2, [r7, #8]
 80045ac:	0151      	lsls	r1, r2, #5
 80045ae:	68fa      	ldr	r2, [r7, #12]
 80045b0:	440a      	add	r2, r1
 80045b2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80045b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80045be:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80045c0:	2300      	movs	r3, #0
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3714      	adds	r7, #20
 80045c6:	46bd      	mov	sp, r7
 80045c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045cc:	4770      	bx	lr
	...

080045d0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b085      	sub	sp, #20
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	781b      	ldrb	r3, [r3, #0]
 80045e2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	785b      	ldrb	r3, [r3, #1]
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d161      	bne.n	80046b0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	015a      	lsls	r2, r3, #5
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	4413      	add	r3, r2
 80045f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80045fe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004602:	d11f      	bne.n	8004644 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	015a      	lsls	r2, r3, #5
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	4413      	add	r3, r2
 800460c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	68ba      	ldr	r2, [r7, #8]
 8004614:	0151      	lsls	r1, r2, #5
 8004616:	68fa      	ldr	r2, [r7, #12]
 8004618:	440a      	add	r2, r1
 800461a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800461e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004622:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	015a      	lsls	r2, r3, #5
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	4413      	add	r3, r2
 800462c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	68ba      	ldr	r2, [r7, #8]
 8004634:	0151      	lsls	r1, r2, #5
 8004636:	68fa      	ldr	r2, [r7, #12]
 8004638:	440a      	add	r2, r1
 800463a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800463e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004642:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800464a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	781b      	ldrb	r3, [r3, #0]
 8004650:	f003 030f 	and.w	r3, r3, #15
 8004654:	2101      	movs	r1, #1
 8004656:	fa01 f303 	lsl.w	r3, r1, r3
 800465a:	b29b      	uxth	r3, r3
 800465c:	43db      	mvns	r3, r3
 800465e:	68f9      	ldr	r1, [r7, #12]
 8004660:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004664:	4013      	ands	r3, r2
 8004666:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800466e:	69da      	ldr	r2, [r3, #28]
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	781b      	ldrb	r3, [r3, #0]
 8004674:	f003 030f 	and.w	r3, r3, #15
 8004678:	2101      	movs	r1, #1
 800467a:	fa01 f303 	lsl.w	r3, r1, r3
 800467e:	b29b      	uxth	r3, r3
 8004680:	43db      	mvns	r3, r3
 8004682:	68f9      	ldr	r1, [r7, #12]
 8004684:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004688:	4013      	ands	r3, r2
 800468a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	015a      	lsls	r2, r3, #5
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	4413      	add	r3, r2
 8004694:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	0159      	lsls	r1, r3, #5
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	440b      	add	r3, r1
 80046a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046a6:	4619      	mov	r1, r3
 80046a8:	4b35      	ldr	r3, [pc, #212]	@ (8004780 <USB_DeactivateEndpoint+0x1b0>)
 80046aa:	4013      	ands	r3, r2
 80046ac:	600b      	str	r3, [r1, #0]
 80046ae:	e060      	b.n	8004772 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	015a      	lsls	r2, r3, #5
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	4413      	add	r3, r2
 80046b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80046c2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80046c6:	d11f      	bne.n	8004708 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	015a      	lsls	r2, r3, #5
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	4413      	add	r3, r2
 80046d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	68ba      	ldr	r2, [r7, #8]
 80046d8:	0151      	lsls	r1, r2, #5
 80046da:	68fa      	ldr	r2, [r7, #12]
 80046dc:	440a      	add	r2, r1
 80046de:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80046e2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80046e6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	015a      	lsls	r2, r3, #5
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	4413      	add	r3, r2
 80046f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	68ba      	ldr	r2, [r7, #8]
 80046f8:	0151      	lsls	r1, r2, #5
 80046fa:	68fa      	ldr	r2, [r7, #12]
 80046fc:	440a      	add	r2, r1
 80046fe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004702:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004706:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800470e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	781b      	ldrb	r3, [r3, #0]
 8004714:	f003 030f 	and.w	r3, r3, #15
 8004718:	2101      	movs	r1, #1
 800471a:	fa01 f303 	lsl.w	r3, r1, r3
 800471e:	041b      	lsls	r3, r3, #16
 8004720:	43db      	mvns	r3, r3
 8004722:	68f9      	ldr	r1, [r7, #12]
 8004724:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004728:	4013      	ands	r3, r2
 800472a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004732:	69da      	ldr	r2, [r3, #28]
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	781b      	ldrb	r3, [r3, #0]
 8004738:	f003 030f 	and.w	r3, r3, #15
 800473c:	2101      	movs	r1, #1
 800473e:	fa01 f303 	lsl.w	r3, r1, r3
 8004742:	041b      	lsls	r3, r3, #16
 8004744:	43db      	mvns	r3, r3
 8004746:	68f9      	ldr	r1, [r7, #12]
 8004748:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800474c:	4013      	ands	r3, r2
 800474e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	015a      	lsls	r2, r3, #5
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	4413      	add	r3, r2
 8004758:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	0159      	lsls	r1, r3, #5
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	440b      	add	r3, r1
 8004766:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800476a:	4619      	mov	r1, r3
 800476c:	4b05      	ldr	r3, [pc, #20]	@ (8004784 <USB_DeactivateEndpoint+0x1b4>)
 800476e:	4013      	ands	r3, r2
 8004770:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004772:	2300      	movs	r3, #0
}
 8004774:	4618      	mov	r0, r3
 8004776:	3714      	adds	r7, #20
 8004778:	46bd      	mov	sp, r7
 800477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477e:	4770      	bx	lr
 8004780:	ec337800 	.word	0xec337800
 8004784:	eff37800 	.word	0xeff37800

08004788 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b08a      	sub	sp, #40	@ 0x28
 800478c:	af02      	add	r7, sp, #8
 800478e:	60f8      	str	r0, [r7, #12]
 8004790:	60b9      	str	r1, [r7, #8]
 8004792:	4613      	mov	r3, r2
 8004794:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	781b      	ldrb	r3, [r3, #0]
 800479e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	785b      	ldrb	r3, [r3, #1]
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	f040 817a 	bne.w	8004a9e <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	691b      	ldr	r3, [r3, #16]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d132      	bne.n	8004818 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80047b2:	69bb      	ldr	r3, [r7, #24]
 80047b4:	015a      	lsls	r2, r3, #5
 80047b6:	69fb      	ldr	r3, [r7, #28]
 80047b8:	4413      	add	r3, r2
 80047ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047be:	691b      	ldr	r3, [r3, #16]
 80047c0:	69ba      	ldr	r2, [r7, #24]
 80047c2:	0151      	lsls	r1, r2, #5
 80047c4:	69fa      	ldr	r2, [r7, #28]
 80047c6:	440a      	add	r2, r1
 80047c8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80047cc:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80047d0:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80047d4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80047d6:	69bb      	ldr	r3, [r7, #24]
 80047d8:	015a      	lsls	r2, r3, #5
 80047da:	69fb      	ldr	r3, [r7, #28]
 80047dc:	4413      	add	r3, r2
 80047de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047e2:	691b      	ldr	r3, [r3, #16]
 80047e4:	69ba      	ldr	r2, [r7, #24]
 80047e6:	0151      	lsls	r1, r2, #5
 80047e8:	69fa      	ldr	r2, [r7, #28]
 80047ea:	440a      	add	r2, r1
 80047ec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80047f0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80047f4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80047f6:	69bb      	ldr	r3, [r7, #24]
 80047f8:	015a      	lsls	r2, r3, #5
 80047fa:	69fb      	ldr	r3, [r7, #28]
 80047fc:	4413      	add	r3, r2
 80047fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004802:	691b      	ldr	r3, [r3, #16]
 8004804:	69ba      	ldr	r2, [r7, #24]
 8004806:	0151      	lsls	r1, r2, #5
 8004808:	69fa      	ldr	r2, [r7, #28]
 800480a:	440a      	add	r2, r1
 800480c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004810:	0cdb      	lsrs	r3, r3, #19
 8004812:	04db      	lsls	r3, r3, #19
 8004814:	6113      	str	r3, [r2, #16]
 8004816:	e092      	b.n	800493e <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004818:	69bb      	ldr	r3, [r7, #24]
 800481a:	015a      	lsls	r2, r3, #5
 800481c:	69fb      	ldr	r3, [r7, #28]
 800481e:	4413      	add	r3, r2
 8004820:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004824:	691b      	ldr	r3, [r3, #16]
 8004826:	69ba      	ldr	r2, [r7, #24]
 8004828:	0151      	lsls	r1, r2, #5
 800482a:	69fa      	ldr	r2, [r7, #28]
 800482c:	440a      	add	r2, r1
 800482e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004832:	0cdb      	lsrs	r3, r3, #19
 8004834:	04db      	lsls	r3, r3, #19
 8004836:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004838:	69bb      	ldr	r3, [r7, #24]
 800483a:	015a      	lsls	r2, r3, #5
 800483c:	69fb      	ldr	r3, [r7, #28]
 800483e:	4413      	add	r3, r2
 8004840:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004844:	691b      	ldr	r3, [r3, #16]
 8004846:	69ba      	ldr	r2, [r7, #24]
 8004848:	0151      	lsls	r1, r2, #5
 800484a:	69fa      	ldr	r2, [r7, #28]
 800484c:	440a      	add	r2, r1
 800484e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004852:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004856:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800485a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800485c:	69bb      	ldr	r3, [r7, #24]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d11a      	bne.n	8004898 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	691a      	ldr	r2, [r3, #16]
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	429a      	cmp	r2, r3
 800486c:	d903      	bls.n	8004876 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	689a      	ldr	r2, [r3, #8]
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004876:	69bb      	ldr	r3, [r7, #24]
 8004878:	015a      	lsls	r2, r3, #5
 800487a:	69fb      	ldr	r3, [r7, #28]
 800487c:	4413      	add	r3, r2
 800487e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004882:	691b      	ldr	r3, [r3, #16]
 8004884:	69ba      	ldr	r2, [r7, #24]
 8004886:	0151      	lsls	r1, r2, #5
 8004888:	69fa      	ldr	r2, [r7, #28]
 800488a:	440a      	add	r2, r1
 800488c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004890:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004894:	6113      	str	r3, [r2, #16]
 8004896:	e01b      	b.n	80048d0 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004898:	69bb      	ldr	r3, [r7, #24]
 800489a:	015a      	lsls	r2, r3, #5
 800489c:	69fb      	ldr	r3, [r7, #28]
 800489e:	4413      	add	r3, r2
 80048a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048a4:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	6919      	ldr	r1, [r3, #16]
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	440b      	add	r3, r1
 80048b0:	1e59      	subs	r1, r3, #1
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80048ba:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80048bc:	4ba2      	ldr	r3, [pc, #648]	@ (8004b48 <USB_EPStartXfer+0x3c0>)
 80048be:	400b      	ands	r3, r1
 80048c0:	69b9      	ldr	r1, [r7, #24]
 80048c2:	0148      	lsls	r0, r1, #5
 80048c4:	69f9      	ldr	r1, [r7, #28]
 80048c6:	4401      	add	r1, r0
 80048c8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80048cc:	4313      	orrs	r3, r2
 80048ce:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80048d0:	69bb      	ldr	r3, [r7, #24]
 80048d2:	015a      	lsls	r2, r3, #5
 80048d4:	69fb      	ldr	r3, [r7, #28]
 80048d6:	4413      	add	r3, r2
 80048d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048dc:	691a      	ldr	r2, [r3, #16]
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	691b      	ldr	r3, [r3, #16]
 80048e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048e6:	69b9      	ldr	r1, [r7, #24]
 80048e8:	0148      	lsls	r0, r1, #5
 80048ea:	69f9      	ldr	r1, [r7, #28]
 80048ec:	4401      	add	r1, r0
 80048ee:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80048f2:	4313      	orrs	r3, r2
 80048f4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	791b      	ldrb	r3, [r3, #4]
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	d11f      	bne.n	800493e <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80048fe:	69bb      	ldr	r3, [r7, #24]
 8004900:	015a      	lsls	r2, r3, #5
 8004902:	69fb      	ldr	r3, [r7, #28]
 8004904:	4413      	add	r3, r2
 8004906:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800490a:	691b      	ldr	r3, [r3, #16]
 800490c:	69ba      	ldr	r2, [r7, #24]
 800490e:	0151      	lsls	r1, r2, #5
 8004910:	69fa      	ldr	r2, [r7, #28]
 8004912:	440a      	add	r2, r1
 8004914:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004918:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800491c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800491e:	69bb      	ldr	r3, [r7, #24]
 8004920:	015a      	lsls	r2, r3, #5
 8004922:	69fb      	ldr	r3, [r7, #28]
 8004924:	4413      	add	r3, r2
 8004926:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800492a:	691b      	ldr	r3, [r3, #16]
 800492c:	69ba      	ldr	r2, [r7, #24]
 800492e:	0151      	lsls	r1, r2, #5
 8004930:	69fa      	ldr	r2, [r7, #28]
 8004932:	440a      	add	r2, r1
 8004934:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004938:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800493c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800493e:	79fb      	ldrb	r3, [r7, #7]
 8004940:	2b01      	cmp	r3, #1
 8004942:	d14b      	bne.n	80049dc <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	69db      	ldr	r3, [r3, #28]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d009      	beq.n	8004960 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800494c:	69bb      	ldr	r3, [r7, #24]
 800494e:	015a      	lsls	r2, r3, #5
 8004950:	69fb      	ldr	r3, [r7, #28]
 8004952:	4413      	add	r3, r2
 8004954:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004958:	461a      	mov	r2, r3
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	69db      	ldr	r3, [r3, #28]
 800495e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	791b      	ldrb	r3, [r3, #4]
 8004964:	2b01      	cmp	r3, #1
 8004966:	d128      	bne.n	80049ba <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004968:	69fb      	ldr	r3, [r7, #28]
 800496a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004974:	2b00      	cmp	r3, #0
 8004976:	d110      	bne.n	800499a <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004978:	69bb      	ldr	r3, [r7, #24]
 800497a:	015a      	lsls	r2, r3, #5
 800497c:	69fb      	ldr	r3, [r7, #28]
 800497e:	4413      	add	r3, r2
 8004980:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	69ba      	ldr	r2, [r7, #24]
 8004988:	0151      	lsls	r1, r2, #5
 800498a:	69fa      	ldr	r2, [r7, #28]
 800498c:	440a      	add	r2, r1
 800498e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004992:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004996:	6013      	str	r3, [r2, #0]
 8004998:	e00f      	b.n	80049ba <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800499a:	69bb      	ldr	r3, [r7, #24]
 800499c:	015a      	lsls	r2, r3, #5
 800499e:	69fb      	ldr	r3, [r7, #28]
 80049a0:	4413      	add	r3, r2
 80049a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	69ba      	ldr	r2, [r7, #24]
 80049aa:	0151      	lsls	r1, r2, #5
 80049ac:	69fa      	ldr	r2, [r7, #28]
 80049ae:	440a      	add	r2, r1
 80049b0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80049b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80049b8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80049ba:	69bb      	ldr	r3, [r7, #24]
 80049bc:	015a      	lsls	r2, r3, #5
 80049be:	69fb      	ldr	r3, [r7, #28]
 80049c0:	4413      	add	r3, r2
 80049c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	69ba      	ldr	r2, [r7, #24]
 80049ca:	0151      	lsls	r1, r2, #5
 80049cc:	69fa      	ldr	r2, [r7, #28]
 80049ce:	440a      	add	r2, r1
 80049d0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80049d4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80049d8:	6013      	str	r3, [r2, #0]
 80049da:	e165      	b.n	8004ca8 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80049dc:	69bb      	ldr	r3, [r7, #24]
 80049de:	015a      	lsls	r2, r3, #5
 80049e0:	69fb      	ldr	r3, [r7, #28]
 80049e2:	4413      	add	r3, r2
 80049e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	69ba      	ldr	r2, [r7, #24]
 80049ec:	0151      	lsls	r1, r2, #5
 80049ee:	69fa      	ldr	r2, [r7, #28]
 80049f0:	440a      	add	r2, r1
 80049f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80049f6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80049fa:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	791b      	ldrb	r3, [r3, #4]
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d015      	beq.n	8004a30 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	691b      	ldr	r3, [r3, #16]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	f000 814d 	beq.w	8004ca8 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004a0e:	69fb      	ldr	r3, [r7, #28]
 8004a10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a14:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	781b      	ldrb	r3, [r3, #0]
 8004a1a:	f003 030f 	and.w	r3, r3, #15
 8004a1e:	2101      	movs	r1, #1
 8004a20:	fa01 f303 	lsl.w	r3, r1, r3
 8004a24:	69f9      	ldr	r1, [r7, #28]
 8004a26:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	634b      	str	r3, [r1, #52]	@ 0x34
 8004a2e:	e13b      	b.n	8004ca8 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004a30:	69fb      	ldr	r3, [r7, #28]
 8004a32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d110      	bne.n	8004a62 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004a40:	69bb      	ldr	r3, [r7, #24]
 8004a42:	015a      	lsls	r2, r3, #5
 8004a44:	69fb      	ldr	r3, [r7, #28]
 8004a46:	4413      	add	r3, r2
 8004a48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	69ba      	ldr	r2, [r7, #24]
 8004a50:	0151      	lsls	r1, r2, #5
 8004a52:	69fa      	ldr	r2, [r7, #28]
 8004a54:	440a      	add	r2, r1
 8004a56:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004a5a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004a5e:	6013      	str	r3, [r2, #0]
 8004a60:	e00f      	b.n	8004a82 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004a62:	69bb      	ldr	r3, [r7, #24]
 8004a64:	015a      	lsls	r2, r3, #5
 8004a66:	69fb      	ldr	r3, [r7, #28]
 8004a68:	4413      	add	r3, r2
 8004a6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	69ba      	ldr	r2, [r7, #24]
 8004a72:	0151      	lsls	r1, r2, #5
 8004a74:	69fa      	ldr	r2, [r7, #28]
 8004a76:	440a      	add	r2, r1
 8004a78:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004a7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a80:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	68d9      	ldr	r1, [r3, #12]
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	781a      	ldrb	r2, [r3, #0]
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	691b      	ldr	r3, [r3, #16]
 8004a8e:	b298      	uxth	r0, r3
 8004a90:	79fb      	ldrb	r3, [r7, #7]
 8004a92:	9300      	str	r3, [sp, #0]
 8004a94:	4603      	mov	r3, r0
 8004a96:	68f8      	ldr	r0, [r7, #12]
 8004a98:	f000 f9b8 	bl	8004e0c <USB_WritePacket>
 8004a9c:	e104      	b.n	8004ca8 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004a9e:	69bb      	ldr	r3, [r7, #24]
 8004aa0:	015a      	lsls	r2, r3, #5
 8004aa2:	69fb      	ldr	r3, [r7, #28]
 8004aa4:	4413      	add	r3, r2
 8004aa6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004aaa:	691b      	ldr	r3, [r3, #16]
 8004aac:	69ba      	ldr	r2, [r7, #24]
 8004aae:	0151      	lsls	r1, r2, #5
 8004ab0:	69fa      	ldr	r2, [r7, #28]
 8004ab2:	440a      	add	r2, r1
 8004ab4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004ab8:	0cdb      	lsrs	r3, r3, #19
 8004aba:	04db      	lsls	r3, r3, #19
 8004abc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004abe:	69bb      	ldr	r3, [r7, #24]
 8004ac0:	015a      	lsls	r2, r3, #5
 8004ac2:	69fb      	ldr	r3, [r7, #28]
 8004ac4:	4413      	add	r3, r2
 8004ac6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004aca:	691b      	ldr	r3, [r3, #16]
 8004acc:	69ba      	ldr	r2, [r7, #24]
 8004ace:	0151      	lsls	r1, r2, #5
 8004ad0:	69fa      	ldr	r2, [r7, #28]
 8004ad2:	440a      	add	r2, r1
 8004ad4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004ad8:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004adc:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004ae0:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8004ae2:	69bb      	ldr	r3, [r7, #24]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d131      	bne.n	8004b4c <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	691b      	ldr	r3, [r3, #16]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d003      	beq.n	8004af8 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	689a      	ldr	r2, [r3, #8]
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	689a      	ldr	r2, [r3, #8]
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004b00:	69bb      	ldr	r3, [r7, #24]
 8004b02:	015a      	lsls	r2, r3, #5
 8004b04:	69fb      	ldr	r3, [r7, #28]
 8004b06:	4413      	add	r3, r2
 8004b08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b0c:	691a      	ldr	r2, [r3, #16]
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	6a1b      	ldr	r3, [r3, #32]
 8004b12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b16:	69b9      	ldr	r1, [r7, #24]
 8004b18:	0148      	lsls	r0, r1, #5
 8004b1a:	69f9      	ldr	r1, [r7, #28]
 8004b1c:	4401      	add	r1, r0
 8004b1e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004b22:	4313      	orrs	r3, r2
 8004b24:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004b26:	69bb      	ldr	r3, [r7, #24]
 8004b28:	015a      	lsls	r2, r3, #5
 8004b2a:	69fb      	ldr	r3, [r7, #28]
 8004b2c:	4413      	add	r3, r2
 8004b2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b32:	691b      	ldr	r3, [r3, #16]
 8004b34:	69ba      	ldr	r2, [r7, #24]
 8004b36:	0151      	lsls	r1, r2, #5
 8004b38:	69fa      	ldr	r2, [r7, #28]
 8004b3a:	440a      	add	r2, r1
 8004b3c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004b40:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004b44:	6113      	str	r3, [r2, #16]
 8004b46:	e061      	b.n	8004c0c <USB_EPStartXfer+0x484>
 8004b48:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	691b      	ldr	r3, [r3, #16]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d123      	bne.n	8004b9c <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004b54:	69bb      	ldr	r3, [r7, #24]
 8004b56:	015a      	lsls	r2, r3, #5
 8004b58:	69fb      	ldr	r3, [r7, #28]
 8004b5a:	4413      	add	r3, r2
 8004b5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b60:	691a      	ldr	r2, [r3, #16]
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b6a:	69b9      	ldr	r1, [r7, #24]
 8004b6c:	0148      	lsls	r0, r1, #5
 8004b6e:	69f9      	ldr	r1, [r7, #28]
 8004b70:	4401      	add	r1, r0
 8004b72:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004b76:	4313      	orrs	r3, r2
 8004b78:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004b7a:	69bb      	ldr	r3, [r7, #24]
 8004b7c:	015a      	lsls	r2, r3, #5
 8004b7e:	69fb      	ldr	r3, [r7, #28]
 8004b80:	4413      	add	r3, r2
 8004b82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b86:	691b      	ldr	r3, [r3, #16]
 8004b88:	69ba      	ldr	r2, [r7, #24]
 8004b8a:	0151      	lsls	r1, r2, #5
 8004b8c:	69fa      	ldr	r2, [r7, #28]
 8004b8e:	440a      	add	r2, r1
 8004b90:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004b94:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004b98:	6113      	str	r3, [r2, #16]
 8004b9a:	e037      	b.n	8004c0c <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	691a      	ldr	r2, [r3, #16]
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	4413      	add	r3, r2
 8004ba6:	1e5a      	subs	r2, r3, #1
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bb0:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	8afa      	ldrh	r2, [r7, #22]
 8004bb8:	fb03 f202 	mul.w	r2, r3, r2
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004bc0:	69bb      	ldr	r3, [r7, #24]
 8004bc2:	015a      	lsls	r2, r3, #5
 8004bc4:	69fb      	ldr	r3, [r7, #28]
 8004bc6:	4413      	add	r3, r2
 8004bc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bcc:	691a      	ldr	r2, [r3, #16]
 8004bce:	8afb      	ldrh	r3, [r7, #22]
 8004bd0:	04d9      	lsls	r1, r3, #19
 8004bd2:	4b38      	ldr	r3, [pc, #224]	@ (8004cb4 <USB_EPStartXfer+0x52c>)
 8004bd4:	400b      	ands	r3, r1
 8004bd6:	69b9      	ldr	r1, [r7, #24]
 8004bd8:	0148      	lsls	r0, r1, #5
 8004bda:	69f9      	ldr	r1, [r7, #28]
 8004bdc:	4401      	add	r1, r0
 8004bde:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004be2:	4313      	orrs	r3, r2
 8004be4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004be6:	69bb      	ldr	r3, [r7, #24]
 8004be8:	015a      	lsls	r2, r3, #5
 8004bea:	69fb      	ldr	r3, [r7, #28]
 8004bec:	4413      	add	r3, r2
 8004bee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bf2:	691a      	ldr	r2, [r3, #16]
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	6a1b      	ldr	r3, [r3, #32]
 8004bf8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bfc:	69b9      	ldr	r1, [r7, #24]
 8004bfe:	0148      	lsls	r0, r1, #5
 8004c00:	69f9      	ldr	r1, [r7, #28]
 8004c02:	4401      	add	r1, r0
 8004c04:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8004c0c:	79fb      	ldrb	r3, [r7, #7]
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	d10d      	bne.n	8004c2e <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d009      	beq.n	8004c2e <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	68d9      	ldr	r1, [r3, #12]
 8004c1e:	69bb      	ldr	r3, [r7, #24]
 8004c20:	015a      	lsls	r2, r3, #5
 8004c22:	69fb      	ldr	r3, [r7, #28]
 8004c24:	4413      	add	r3, r2
 8004c26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c2a:	460a      	mov	r2, r1
 8004c2c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	791b      	ldrb	r3, [r3, #4]
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	d128      	bne.n	8004c88 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004c36:	69fb      	ldr	r3, [r7, #28]
 8004c38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d110      	bne.n	8004c68 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004c46:	69bb      	ldr	r3, [r7, #24]
 8004c48:	015a      	lsls	r2, r3, #5
 8004c4a:	69fb      	ldr	r3, [r7, #28]
 8004c4c:	4413      	add	r3, r2
 8004c4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	69ba      	ldr	r2, [r7, #24]
 8004c56:	0151      	lsls	r1, r2, #5
 8004c58:	69fa      	ldr	r2, [r7, #28]
 8004c5a:	440a      	add	r2, r1
 8004c5c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004c60:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004c64:	6013      	str	r3, [r2, #0]
 8004c66:	e00f      	b.n	8004c88 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004c68:	69bb      	ldr	r3, [r7, #24]
 8004c6a:	015a      	lsls	r2, r3, #5
 8004c6c:	69fb      	ldr	r3, [r7, #28]
 8004c6e:	4413      	add	r3, r2
 8004c70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	69ba      	ldr	r2, [r7, #24]
 8004c78:	0151      	lsls	r1, r2, #5
 8004c7a:	69fa      	ldr	r2, [r7, #28]
 8004c7c:	440a      	add	r2, r1
 8004c7e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004c82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c86:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004c88:	69bb      	ldr	r3, [r7, #24]
 8004c8a:	015a      	lsls	r2, r3, #5
 8004c8c:	69fb      	ldr	r3, [r7, #28]
 8004c8e:	4413      	add	r3, r2
 8004c90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	69ba      	ldr	r2, [r7, #24]
 8004c98:	0151      	lsls	r1, r2, #5
 8004c9a:	69fa      	ldr	r2, [r7, #28]
 8004c9c:	440a      	add	r2, r1
 8004c9e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004ca2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004ca6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004ca8:	2300      	movs	r3, #0
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3720      	adds	r7, #32
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}
 8004cb2:	bf00      	nop
 8004cb4:	1ff80000 	.word	0x1ff80000

08004cb8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b087      	sub	sp, #28
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	785b      	ldrb	r3, [r3, #1]
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	d14a      	bne.n	8004d6c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	781b      	ldrb	r3, [r3, #0]
 8004cda:	015a      	lsls	r2, r3, #5
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	4413      	add	r3, r2
 8004ce0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004cea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004cee:	f040 8086 	bne.w	8004dfe <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	781b      	ldrb	r3, [r3, #0]
 8004cf6:	015a      	lsls	r2, r3, #5
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	4413      	add	r3, r2
 8004cfc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	683a      	ldr	r2, [r7, #0]
 8004d04:	7812      	ldrb	r2, [r2, #0]
 8004d06:	0151      	lsls	r1, r2, #5
 8004d08:	693a      	ldr	r2, [r7, #16]
 8004d0a:	440a      	add	r2, r1
 8004d0c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d10:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004d14:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	781b      	ldrb	r3, [r3, #0]
 8004d1a:	015a      	lsls	r2, r3, #5
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	4413      	add	r3, r2
 8004d20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	683a      	ldr	r2, [r7, #0]
 8004d28:	7812      	ldrb	r2, [r2, #0]
 8004d2a:	0151      	lsls	r1, r2, #5
 8004d2c:	693a      	ldr	r2, [r7, #16]
 8004d2e:	440a      	add	r2, r1
 8004d30:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d34:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004d38:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	3301      	adds	r3, #1
 8004d3e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d902      	bls.n	8004d50 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	75fb      	strb	r3, [r7, #23]
          break;
 8004d4e:	e056      	b.n	8004dfe <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	781b      	ldrb	r3, [r3, #0]
 8004d54:	015a      	lsls	r2, r3, #5
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	4413      	add	r3, r2
 8004d5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004d64:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004d68:	d0e7      	beq.n	8004d3a <USB_EPStopXfer+0x82>
 8004d6a:	e048      	b.n	8004dfe <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	781b      	ldrb	r3, [r3, #0]
 8004d70:	015a      	lsls	r2, r3, #5
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	4413      	add	r3, r2
 8004d76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004d80:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004d84:	d13b      	bne.n	8004dfe <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	781b      	ldrb	r3, [r3, #0]
 8004d8a:	015a      	lsls	r2, r3, #5
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	4413      	add	r3, r2
 8004d90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	683a      	ldr	r2, [r7, #0]
 8004d98:	7812      	ldrb	r2, [r2, #0]
 8004d9a:	0151      	lsls	r1, r2, #5
 8004d9c:	693a      	ldr	r2, [r7, #16]
 8004d9e:	440a      	add	r2, r1
 8004da0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004da4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004da8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	781b      	ldrb	r3, [r3, #0]
 8004dae:	015a      	lsls	r2, r3, #5
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	4413      	add	r3, r2
 8004db4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	683a      	ldr	r2, [r7, #0]
 8004dbc:	7812      	ldrb	r2, [r2, #0]
 8004dbe:	0151      	lsls	r1, r2, #5
 8004dc0:	693a      	ldr	r2, [r7, #16]
 8004dc2:	440a      	add	r2, r1
 8004dc4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004dc8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004dcc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	3301      	adds	r3, #1
 8004dd2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d902      	bls.n	8004de4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	75fb      	strb	r3, [r7, #23]
          break;
 8004de2:	e00c      	b.n	8004dfe <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	781b      	ldrb	r3, [r3, #0]
 8004de8:	015a      	lsls	r2, r3, #5
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	4413      	add	r3, r2
 8004dee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004df8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004dfc:	d0e7      	beq.n	8004dce <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004dfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	371c      	adds	r7, #28
 8004e04:	46bd      	mov	sp, r7
 8004e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0a:	4770      	bx	lr

08004e0c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b089      	sub	sp, #36	@ 0x24
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	60f8      	str	r0, [r7, #12]
 8004e14:	60b9      	str	r1, [r7, #8]
 8004e16:	4611      	mov	r1, r2
 8004e18:	461a      	mov	r2, r3
 8004e1a:	460b      	mov	r3, r1
 8004e1c:	71fb      	strb	r3, [r7, #7]
 8004e1e:	4613      	mov	r3, r2
 8004e20:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004e2a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d123      	bne.n	8004e7a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004e32:	88bb      	ldrh	r3, [r7, #4]
 8004e34:	3303      	adds	r3, #3
 8004e36:	089b      	lsrs	r3, r3, #2
 8004e38:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	61bb      	str	r3, [r7, #24]
 8004e3e:	e018      	b.n	8004e72 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004e40:	79fb      	ldrb	r3, [r7, #7]
 8004e42:	031a      	lsls	r2, r3, #12
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	4413      	add	r3, r2
 8004e48:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004e4c:	461a      	mov	r2, r3
 8004e4e:	69fb      	ldr	r3, [r7, #28]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004e54:	69fb      	ldr	r3, [r7, #28]
 8004e56:	3301      	adds	r3, #1
 8004e58:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004e5a:	69fb      	ldr	r3, [r7, #28]
 8004e5c:	3301      	adds	r3, #1
 8004e5e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004e60:	69fb      	ldr	r3, [r7, #28]
 8004e62:	3301      	adds	r3, #1
 8004e64:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004e66:	69fb      	ldr	r3, [r7, #28]
 8004e68:	3301      	adds	r3, #1
 8004e6a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004e6c:	69bb      	ldr	r3, [r7, #24]
 8004e6e:	3301      	adds	r3, #1
 8004e70:	61bb      	str	r3, [r7, #24]
 8004e72:	69ba      	ldr	r2, [r7, #24]
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d3e2      	bcc.n	8004e40 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004e7a:	2300      	movs	r3, #0
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3724      	adds	r7, #36	@ 0x24
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr

08004e88 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b08b      	sub	sp, #44	@ 0x2c
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	60f8      	str	r0, [r7, #12]
 8004e90:	60b9      	str	r1, [r7, #8]
 8004e92:	4613      	mov	r3, r2
 8004e94:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004e9e:	88fb      	ldrh	r3, [r7, #6]
 8004ea0:	089b      	lsrs	r3, r3, #2
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004ea6:	88fb      	ldrh	r3, [r7, #6]
 8004ea8:	f003 0303 	and.w	r3, r3, #3
 8004eac:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004eae:	2300      	movs	r3, #0
 8004eb0:	623b      	str	r3, [r7, #32]
 8004eb2:	e014      	b.n	8004ede <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004eb4:	69bb      	ldr	r3, [r7, #24]
 8004eb6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ebe:	601a      	str	r2, [r3, #0]
    pDest++;
 8004ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ec2:	3301      	adds	r3, #1
 8004ec4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ec8:	3301      	adds	r3, #1
 8004eca:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ece:	3301      	adds	r3, #1
 8004ed0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ed4:	3301      	adds	r3, #1
 8004ed6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8004ed8:	6a3b      	ldr	r3, [r7, #32]
 8004eda:	3301      	adds	r3, #1
 8004edc:	623b      	str	r3, [r7, #32]
 8004ede:	6a3a      	ldr	r2, [r7, #32]
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	429a      	cmp	r2, r3
 8004ee4:	d3e6      	bcc.n	8004eb4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004ee6:	8bfb      	ldrh	r3, [r7, #30]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d01e      	beq.n	8004f2a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004eec:	2300      	movs	r3, #0
 8004eee:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004ef0:	69bb      	ldr	r3, [r7, #24]
 8004ef2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004ef6:	461a      	mov	r2, r3
 8004ef8:	f107 0310 	add.w	r3, r7, #16
 8004efc:	6812      	ldr	r2, [r2, #0]
 8004efe:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004f00:	693a      	ldr	r2, [r7, #16]
 8004f02:	6a3b      	ldr	r3, [r7, #32]
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	00db      	lsls	r3, r3, #3
 8004f08:	fa22 f303 	lsr.w	r3, r2, r3
 8004f0c:	b2da      	uxtb	r2, r3
 8004f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f10:	701a      	strb	r2, [r3, #0]
      i++;
 8004f12:	6a3b      	ldr	r3, [r7, #32]
 8004f14:	3301      	adds	r3, #1
 8004f16:	623b      	str	r3, [r7, #32]
      pDest++;
 8004f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f1a:	3301      	adds	r3, #1
 8004f1c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8004f1e:	8bfb      	ldrh	r3, [r7, #30]
 8004f20:	3b01      	subs	r3, #1
 8004f22:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004f24:	8bfb      	ldrh	r3, [r7, #30]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d1ea      	bne.n	8004f00 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	372c      	adds	r7, #44	@ 0x2c
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr

08004f38 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b085      	sub	sp, #20
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
 8004f40:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	781b      	ldrb	r3, [r3, #0]
 8004f4a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	785b      	ldrb	r3, [r3, #1]
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d12c      	bne.n	8004fae <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	015a      	lsls	r2, r3, #5
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	4413      	add	r3, r2
 8004f5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	db12      	blt.n	8004f8c <USB_EPSetStall+0x54>
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d00f      	beq.n	8004f8c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	015a      	lsls	r2, r3, #5
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	4413      	add	r3, r2
 8004f74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	68ba      	ldr	r2, [r7, #8]
 8004f7c:	0151      	lsls	r1, r2, #5
 8004f7e:	68fa      	ldr	r2, [r7, #12]
 8004f80:	440a      	add	r2, r1
 8004f82:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004f86:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004f8a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	015a      	lsls	r2, r3, #5
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	4413      	add	r3, r2
 8004f94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	68ba      	ldr	r2, [r7, #8]
 8004f9c:	0151      	lsls	r1, r2, #5
 8004f9e:	68fa      	ldr	r2, [r7, #12]
 8004fa0:	440a      	add	r2, r1
 8004fa2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004fa6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004faa:	6013      	str	r3, [r2, #0]
 8004fac:	e02b      	b.n	8005006 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	015a      	lsls	r2, r3, #5
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	4413      	add	r3, r2
 8004fb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	db12      	blt.n	8004fe6 <USB_EPSetStall+0xae>
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d00f      	beq.n	8004fe6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	015a      	lsls	r2, r3, #5
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	4413      	add	r3, r2
 8004fce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	68ba      	ldr	r2, [r7, #8]
 8004fd6:	0151      	lsls	r1, r2, #5
 8004fd8:	68fa      	ldr	r2, [r7, #12]
 8004fda:	440a      	add	r2, r1
 8004fdc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004fe0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004fe4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	015a      	lsls	r2, r3, #5
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	4413      	add	r3, r2
 8004fee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	68ba      	ldr	r2, [r7, #8]
 8004ff6:	0151      	lsls	r1, r2, #5
 8004ff8:	68fa      	ldr	r2, [r7, #12]
 8004ffa:	440a      	add	r2, r1
 8004ffc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005000:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005004:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005006:	2300      	movs	r3, #0
}
 8005008:	4618      	mov	r0, r3
 800500a:	3714      	adds	r7, #20
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr

08005014 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005014:	b480      	push	{r7}
 8005016:	b085      	sub	sp, #20
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	781b      	ldrb	r3, [r3, #0]
 8005026:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	785b      	ldrb	r3, [r3, #1]
 800502c:	2b01      	cmp	r3, #1
 800502e:	d128      	bne.n	8005082 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	015a      	lsls	r2, r3, #5
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	4413      	add	r3, r2
 8005038:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	68ba      	ldr	r2, [r7, #8]
 8005040:	0151      	lsls	r1, r2, #5
 8005042:	68fa      	ldr	r2, [r7, #12]
 8005044:	440a      	add	r2, r1
 8005046:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800504a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800504e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	791b      	ldrb	r3, [r3, #4]
 8005054:	2b03      	cmp	r3, #3
 8005056:	d003      	beq.n	8005060 <USB_EPClearStall+0x4c>
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	791b      	ldrb	r3, [r3, #4]
 800505c:	2b02      	cmp	r3, #2
 800505e:	d138      	bne.n	80050d2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	015a      	lsls	r2, r3, #5
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	4413      	add	r3, r2
 8005068:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	68ba      	ldr	r2, [r7, #8]
 8005070:	0151      	lsls	r1, r2, #5
 8005072:	68fa      	ldr	r2, [r7, #12]
 8005074:	440a      	add	r2, r1
 8005076:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800507a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800507e:	6013      	str	r3, [r2, #0]
 8005080:	e027      	b.n	80050d2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	015a      	lsls	r2, r3, #5
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	4413      	add	r3, r2
 800508a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	68ba      	ldr	r2, [r7, #8]
 8005092:	0151      	lsls	r1, r2, #5
 8005094:	68fa      	ldr	r2, [r7, #12]
 8005096:	440a      	add	r2, r1
 8005098:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800509c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80050a0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	791b      	ldrb	r3, [r3, #4]
 80050a6:	2b03      	cmp	r3, #3
 80050a8:	d003      	beq.n	80050b2 <USB_EPClearStall+0x9e>
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	791b      	ldrb	r3, [r3, #4]
 80050ae:	2b02      	cmp	r3, #2
 80050b0:	d10f      	bne.n	80050d2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	015a      	lsls	r2, r3, #5
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	4413      	add	r3, r2
 80050ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	68ba      	ldr	r2, [r7, #8]
 80050c2:	0151      	lsls	r1, r2, #5
 80050c4:	68fa      	ldr	r2, [r7, #12]
 80050c6:	440a      	add	r2, r1
 80050c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80050cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80050d0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80050d2:	2300      	movs	r3, #0
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	3714      	adds	r7, #20
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr

080050e0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b085      	sub	sp, #20
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
 80050e8:	460b      	mov	r3, r1
 80050ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	68fa      	ldr	r2, [r7, #12]
 80050fa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80050fe:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005102:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800510a:	681a      	ldr	r2, [r3, #0]
 800510c:	78fb      	ldrb	r3, [r7, #3]
 800510e:	011b      	lsls	r3, r3, #4
 8005110:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8005114:	68f9      	ldr	r1, [r7, #12]
 8005116:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800511a:	4313      	orrs	r3, r2
 800511c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800511e:	2300      	movs	r3, #0
}
 8005120:	4618      	mov	r0, r3
 8005122:	3714      	adds	r7, #20
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr

0800512c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800512c:	b480      	push	{r7}
 800512e:	b085      	sub	sp, #20
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	68fa      	ldr	r2, [r7, #12]
 8005142:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005146:	f023 0303 	bic.w	r3, r3, #3
 800514a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	68fa      	ldr	r2, [r7, #12]
 8005156:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800515a:	f023 0302 	bic.w	r3, r3, #2
 800515e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005160:	2300      	movs	r3, #0
}
 8005162:	4618      	mov	r0, r3
 8005164:	3714      	adds	r7, #20
 8005166:	46bd      	mov	sp, r7
 8005168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516c:	4770      	bx	lr

0800516e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800516e:	b480      	push	{r7}
 8005170:	b085      	sub	sp, #20
 8005172:	af00      	add	r7, sp, #0
 8005174:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	68fa      	ldr	r2, [r7, #12]
 8005184:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005188:	f023 0303 	bic.w	r3, r3, #3
 800518c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	68fa      	ldr	r2, [r7, #12]
 8005198:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800519c:	f043 0302 	orr.w	r3, r3, #2
 80051a0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80051a2:	2300      	movs	r3, #0
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	3714      	adds	r7, #20
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr

080051b0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b085      	sub	sp, #20
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	695b      	ldr	r3, [r3, #20]
 80051bc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	699b      	ldr	r3, [r3, #24]
 80051c2:	68fa      	ldr	r2, [r7, #12]
 80051c4:	4013      	ands	r3, r2
 80051c6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80051c8:	68fb      	ldr	r3, [r7, #12]
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3714      	adds	r7, #20
 80051ce:	46bd      	mov	sp, r7
 80051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d4:	4770      	bx	lr

080051d6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80051d6:	b480      	push	{r7}
 80051d8:	b085      	sub	sp, #20
 80051da:	af00      	add	r7, sp, #0
 80051dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051e8:	699b      	ldr	r3, [r3, #24]
 80051ea:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051f2:	69db      	ldr	r3, [r3, #28]
 80051f4:	68ba      	ldr	r2, [r7, #8]
 80051f6:	4013      	ands	r3, r2
 80051f8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	0c1b      	lsrs	r3, r3, #16
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3714      	adds	r7, #20
 8005202:	46bd      	mov	sp, r7
 8005204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005208:	4770      	bx	lr

0800520a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800520a:	b480      	push	{r7}
 800520c:	b085      	sub	sp, #20
 800520e:	af00      	add	r7, sp, #0
 8005210:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800521c:	699b      	ldr	r3, [r3, #24]
 800521e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005226:	69db      	ldr	r3, [r3, #28]
 8005228:	68ba      	ldr	r2, [r7, #8]
 800522a:	4013      	ands	r3, r2
 800522c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	b29b      	uxth	r3, r3
}
 8005232:	4618      	mov	r0, r3
 8005234:	3714      	adds	r7, #20
 8005236:	46bd      	mov	sp, r7
 8005238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523c:	4770      	bx	lr

0800523e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800523e:	b480      	push	{r7}
 8005240:	b085      	sub	sp, #20
 8005242:	af00      	add	r7, sp, #0
 8005244:	6078      	str	r0, [r7, #4]
 8005246:	460b      	mov	r3, r1
 8005248:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800524e:	78fb      	ldrb	r3, [r7, #3]
 8005250:	015a      	lsls	r2, r3, #5
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	4413      	add	r3, r2
 8005256:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005264:	695b      	ldr	r3, [r3, #20]
 8005266:	68ba      	ldr	r2, [r7, #8]
 8005268:	4013      	ands	r3, r2
 800526a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800526c:	68bb      	ldr	r3, [r7, #8]
}
 800526e:	4618      	mov	r0, r3
 8005270:	3714      	adds	r7, #20
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr

0800527a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800527a:	b480      	push	{r7}
 800527c:	b087      	sub	sp, #28
 800527e:	af00      	add	r7, sp, #0
 8005280:	6078      	str	r0, [r7, #4]
 8005282:	460b      	mov	r3, r1
 8005284:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005290:	691b      	ldr	r3, [r3, #16]
 8005292:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800529a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800529c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800529e:	78fb      	ldrb	r3, [r7, #3]
 80052a0:	f003 030f 	and.w	r3, r3, #15
 80052a4:	68fa      	ldr	r2, [r7, #12]
 80052a6:	fa22 f303 	lsr.w	r3, r2, r3
 80052aa:	01db      	lsls	r3, r3, #7
 80052ac:	b2db      	uxtb	r3, r3
 80052ae:	693a      	ldr	r2, [r7, #16]
 80052b0:	4313      	orrs	r3, r2
 80052b2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80052b4:	78fb      	ldrb	r3, [r7, #3]
 80052b6:	015a      	lsls	r2, r3, #5
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	4413      	add	r3, r2
 80052bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	693a      	ldr	r2, [r7, #16]
 80052c4:	4013      	ands	r3, r2
 80052c6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80052c8:	68bb      	ldr	r3, [r7, #8]
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	371c      	adds	r7, #28
 80052ce:	46bd      	mov	sp, r7
 80052d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d4:	4770      	bx	lr

080052d6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80052d6:	b480      	push	{r7}
 80052d8:	b083      	sub	sp, #12
 80052da:	af00      	add	r7, sp, #0
 80052dc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	695b      	ldr	r3, [r3, #20]
 80052e2:	f003 0301 	and.w	r3, r3, #1
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	370c      	adds	r7, #12
 80052ea:	46bd      	mov	sp, r7
 80052ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f0:	4770      	bx	lr

080052f2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80052f2:	b480      	push	{r7}
 80052f4:	b085      	sub	sp, #20
 80052f6:	af00      	add	r7, sp, #0
 80052f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	68fa      	ldr	r2, [r7, #12]
 8005308:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800530c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005310:	f023 0307 	bic.w	r3, r3, #7
 8005314:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	68fa      	ldr	r2, [r7, #12]
 8005320:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005324:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005328:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800532a:	2300      	movs	r3, #0
}
 800532c:	4618      	mov	r0, r3
 800532e:	3714      	adds	r7, #20
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr

08005338 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8005338:	b480      	push	{r7}
 800533a:	b087      	sub	sp, #28
 800533c:	af00      	add	r7, sp, #0
 800533e:	60f8      	str	r0, [r7, #12]
 8005340:	460b      	mov	r3, r1
 8005342:	607a      	str	r2, [r7, #4]
 8005344:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	333c      	adds	r3, #60	@ 0x3c
 800534e:	3304      	adds	r3, #4
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	4a26      	ldr	r2, [pc, #152]	@ (80053f0 <USB_EP0_OutStart+0xb8>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d90a      	bls.n	8005372 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005368:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800536c:	d101      	bne.n	8005372 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800536e:	2300      	movs	r3, #0
 8005370:	e037      	b.n	80053e2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005378:	461a      	mov	r2, r3
 800537a:	2300      	movs	r3, #0
 800537c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005384:	691b      	ldr	r3, [r3, #16]
 8005386:	697a      	ldr	r2, [r7, #20]
 8005388:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800538c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005390:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005398:	691b      	ldr	r3, [r3, #16]
 800539a:	697a      	ldr	r2, [r7, #20]
 800539c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80053a0:	f043 0318 	orr.w	r3, r3, #24
 80053a4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053ac:	691b      	ldr	r3, [r3, #16]
 80053ae:	697a      	ldr	r2, [r7, #20]
 80053b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80053b4:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80053b8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80053ba:	7afb      	ldrb	r3, [r7, #11]
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d10f      	bne.n	80053e0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053c6:	461a      	mov	r2, r3
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	697a      	ldr	r2, [r7, #20]
 80053d6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80053da:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80053de:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80053e0:	2300      	movs	r3, #0
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	371c      	adds	r7, #28
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr
 80053ee:	bf00      	nop
 80053f0:	4f54300a 	.word	0x4f54300a

080053f4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b085      	sub	sp, #20
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80053fc:	2300      	movs	r3, #0
 80053fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	3301      	adds	r3, #1
 8005404:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800540c:	d901      	bls.n	8005412 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800540e:	2303      	movs	r3, #3
 8005410:	e01b      	b.n	800544a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	691b      	ldr	r3, [r3, #16]
 8005416:	2b00      	cmp	r3, #0
 8005418:	daf2      	bge.n	8005400 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800541a:	2300      	movs	r3, #0
 800541c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	691b      	ldr	r3, [r3, #16]
 8005422:	f043 0201 	orr.w	r2, r3, #1
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	3301      	adds	r3, #1
 800542e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005436:	d901      	bls.n	800543c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005438:	2303      	movs	r3, #3
 800543a:	e006      	b.n	800544a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	691b      	ldr	r3, [r3, #16]
 8005440:	f003 0301 	and.w	r3, r3, #1
 8005444:	2b01      	cmp	r3, #1
 8005446:	d0f0      	beq.n	800542a <USB_CoreReset+0x36>

  return HAL_OK;
 8005448:	2300      	movs	r3, #0
}
 800544a:	4618      	mov	r0, r3
 800544c:	3714      	adds	r7, #20
 800544e:	46bd      	mov	sp, r7
 8005450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005454:	4770      	bx	lr
	...

08005458 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b084      	sub	sp, #16
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
 8005460:	460b      	mov	r3, r1
 8005462:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005464:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8005468:	f002 fc88 	bl	8007d7c <USBD_static_malloc>
 800546c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d109      	bne.n	8005488 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	32b0      	adds	r2, #176	@ 0xb0
 800547e:	2100      	movs	r1, #0
 8005480:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005484:	2302      	movs	r3, #2
 8005486:	e0d4      	b.n	8005632 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005488:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800548c:	2100      	movs	r1, #0
 800548e:	68f8      	ldr	r0, [r7, #12]
 8005490:	f002 fcb8 	bl	8007e04 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	32b0      	adds	r2, #176	@ 0xb0
 800549e:	68f9      	ldr	r1, [r7, #12]
 80054a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	32b0      	adds	r2, #176	@ 0xb0
 80054ae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	7c1b      	ldrb	r3, [r3, #16]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d138      	bne.n	8005532 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80054c0:	4b5e      	ldr	r3, [pc, #376]	@ (800563c <USBD_CDC_Init+0x1e4>)
 80054c2:	7819      	ldrb	r1, [r3, #0]
 80054c4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80054c8:	2202      	movs	r2, #2
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f002 fb33 	bl	8007b36 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80054d0:	4b5a      	ldr	r3, [pc, #360]	@ (800563c <USBD_CDC_Init+0x1e4>)
 80054d2:	781b      	ldrb	r3, [r3, #0]
 80054d4:	f003 020f 	and.w	r2, r3, #15
 80054d8:	6879      	ldr	r1, [r7, #4]
 80054da:	4613      	mov	r3, r2
 80054dc:	009b      	lsls	r3, r3, #2
 80054de:	4413      	add	r3, r2
 80054e0:	009b      	lsls	r3, r3, #2
 80054e2:	440b      	add	r3, r1
 80054e4:	3324      	adds	r3, #36	@ 0x24
 80054e6:	2201      	movs	r2, #1
 80054e8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80054ea:	4b55      	ldr	r3, [pc, #340]	@ (8005640 <USBD_CDC_Init+0x1e8>)
 80054ec:	7819      	ldrb	r1, [r3, #0]
 80054ee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80054f2:	2202      	movs	r2, #2
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f002 fb1e 	bl	8007b36 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80054fa:	4b51      	ldr	r3, [pc, #324]	@ (8005640 <USBD_CDC_Init+0x1e8>)
 80054fc:	781b      	ldrb	r3, [r3, #0]
 80054fe:	f003 020f 	and.w	r2, r3, #15
 8005502:	6879      	ldr	r1, [r7, #4]
 8005504:	4613      	mov	r3, r2
 8005506:	009b      	lsls	r3, r3, #2
 8005508:	4413      	add	r3, r2
 800550a:	009b      	lsls	r3, r3, #2
 800550c:	440b      	add	r3, r1
 800550e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005512:	2201      	movs	r2, #1
 8005514:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005516:	4b4b      	ldr	r3, [pc, #300]	@ (8005644 <USBD_CDC_Init+0x1ec>)
 8005518:	781b      	ldrb	r3, [r3, #0]
 800551a:	f003 020f 	and.w	r2, r3, #15
 800551e:	6879      	ldr	r1, [r7, #4]
 8005520:	4613      	mov	r3, r2
 8005522:	009b      	lsls	r3, r3, #2
 8005524:	4413      	add	r3, r2
 8005526:	009b      	lsls	r3, r3, #2
 8005528:	440b      	add	r3, r1
 800552a:	3326      	adds	r3, #38	@ 0x26
 800552c:	2210      	movs	r2, #16
 800552e:	801a      	strh	r2, [r3, #0]
 8005530:	e035      	b.n	800559e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005532:	4b42      	ldr	r3, [pc, #264]	@ (800563c <USBD_CDC_Init+0x1e4>)
 8005534:	7819      	ldrb	r1, [r3, #0]
 8005536:	2340      	movs	r3, #64	@ 0x40
 8005538:	2202      	movs	r2, #2
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f002 fafb 	bl	8007b36 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005540:	4b3e      	ldr	r3, [pc, #248]	@ (800563c <USBD_CDC_Init+0x1e4>)
 8005542:	781b      	ldrb	r3, [r3, #0]
 8005544:	f003 020f 	and.w	r2, r3, #15
 8005548:	6879      	ldr	r1, [r7, #4]
 800554a:	4613      	mov	r3, r2
 800554c:	009b      	lsls	r3, r3, #2
 800554e:	4413      	add	r3, r2
 8005550:	009b      	lsls	r3, r3, #2
 8005552:	440b      	add	r3, r1
 8005554:	3324      	adds	r3, #36	@ 0x24
 8005556:	2201      	movs	r2, #1
 8005558:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800555a:	4b39      	ldr	r3, [pc, #228]	@ (8005640 <USBD_CDC_Init+0x1e8>)
 800555c:	7819      	ldrb	r1, [r3, #0]
 800555e:	2340      	movs	r3, #64	@ 0x40
 8005560:	2202      	movs	r2, #2
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f002 fae7 	bl	8007b36 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005568:	4b35      	ldr	r3, [pc, #212]	@ (8005640 <USBD_CDC_Init+0x1e8>)
 800556a:	781b      	ldrb	r3, [r3, #0]
 800556c:	f003 020f 	and.w	r2, r3, #15
 8005570:	6879      	ldr	r1, [r7, #4]
 8005572:	4613      	mov	r3, r2
 8005574:	009b      	lsls	r3, r3, #2
 8005576:	4413      	add	r3, r2
 8005578:	009b      	lsls	r3, r3, #2
 800557a:	440b      	add	r3, r1
 800557c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005580:	2201      	movs	r2, #1
 8005582:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005584:	4b2f      	ldr	r3, [pc, #188]	@ (8005644 <USBD_CDC_Init+0x1ec>)
 8005586:	781b      	ldrb	r3, [r3, #0]
 8005588:	f003 020f 	and.w	r2, r3, #15
 800558c:	6879      	ldr	r1, [r7, #4]
 800558e:	4613      	mov	r3, r2
 8005590:	009b      	lsls	r3, r3, #2
 8005592:	4413      	add	r3, r2
 8005594:	009b      	lsls	r3, r3, #2
 8005596:	440b      	add	r3, r1
 8005598:	3326      	adds	r3, #38	@ 0x26
 800559a:	2210      	movs	r2, #16
 800559c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800559e:	4b29      	ldr	r3, [pc, #164]	@ (8005644 <USBD_CDC_Init+0x1ec>)
 80055a0:	7819      	ldrb	r1, [r3, #0]
 80055a2:	2308      	movs	r3, #8
 80055a4:	2203      	movs	r2, #3
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f002 fac5 	bl	8007b36 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80055ac:	4b25      	ldr	r3, [pc, #148]	@ (8005644 <USBD_CDC_Init+0x1ec>)
 80055ae:	781b      	ldrb	r3, [r3, #0]
 80055b0:	f003 020f 	and.w	r2, r3, #15
 80055b4:	6879      	ldr	r1, [r7, #4]
 80055b6:	4613      	mov	r3, r2
 80055b8:	009b      	lsls	r3, r3, #2
 80055ba:	4413      	add	r3, r2
 80055bc:	009b      	lsls	r3, r3, #2
 80055be:	440b      	add	r3, r1
 80055c0:	3324      	adds	r3, #36	@ 0x24
 80055c2:	2201      	movs	r2, #1
 80055c4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2200      	movs	r2, #0
 80055ca:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80055d4:	687a      	ldr	r2, [r7, #4]
 80055d6:	33b0      	adds	r3, #176	@ 0xb0
 80055d8:	009b      	lsls	r3, r3, #2
 80055da:	4413      	add	r3, r2
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2200      	movs	r2, #0
 80055e6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2200      	movs	r2, #0
 80055ee:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d101      	bne.n	8005600 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80055fc:	2302      	movs	r3, #2
 80055fe:	e018      	b.n	8005632 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	7c1b      	ldrb	r3, [r3, #16]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d10a      	bne.n	800561e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005608:	4b0d      	ldr	r3, [pc, #52]	@ (8005640 <USBD_CDC_Init+0x1e8>)
 800560a:	7819      	ldrb	r1, [r3, #0]
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005612:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f002 fb7c 	bl	8007d14 <USBD_LL_PrepareReceive>
 800561c:	e008      	b.n	8005630 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800561e:	4b08      	ldr	r3, [pc, #32]	@ (8005640 <USBD_CDC_Init+0x1e8>)
 8005620:	7819      	ldrb	r1, [r3, #0]
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005628:	2340      	movs	r3, #64	@ 0x40
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f002 fb72 	bl	8007d14 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005630:	2300      	movs	r3, #0
}
 8005632:	4618      	mov	r0, r3
 8005634:	3710      	adds	r7, #16
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}
 800563a:	bf00      	nop
 800563c:	200000a3 	.word	0x200000a3
 8005640:	200000a4 	.word	0x200000a4
 8005644:	200000a5 	.word	0x200000a5

08005648 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b082      	sub	sp, #8
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
 8005650:	460b      	mov	r3, r1
 8005652:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005654:	4b3a      	ldr	r3, [pc, #232]	@ (8005740 <USBD_CDC_DeInit+0xf8>)
 8005656:	781b      	ldrb	r3, [r3, #0]
 8005658:	4619      	mov	r1, r3
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f002 fa91 	bl	8007b82 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005660:	4b37      	ldr	r3, [pc, #220]	@ (8005740 <USBD_CDC_DeInit+0xf8>)
 8005662:	781b      	ldrb	r3, [r3, #0]
 8005664:	f003 020f 	and.w	r2, r3, #15
 8005668:	6879      	ldr	r1, [r7, #4]
 800566a:	4613      	mov	r3, r2
 800566c:	009b      	lsls	r3, r3, #2
 800566e:	4413      	add	r3, r2
 8005670:	009b      	lsls	r3, r3, #2
 8005672:	440b      	add	r3, r1
 8005674:	3324      	adds	r3, #36	@ 0x24
 8005676:	2200      	movs	r2, #0
 8005678:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800567a:	4b32      	ldr	r3, [pc, #200]	@ (8005744 <USBD_CDC_DeInit+0xfc>)
 800567c:	781b      	ldrb	r3, [r3, #0]
 800567e:	4619      	mov	r1, r3
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	f002 fa7e 	bl	8007b82 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005686:	4b2f      	ldr	r3, [pc, #188]	@ (8005744 <USBD_CDC_DeInit+0xfc>)
 8005688:	781b      	ldrb	r3, [r3, #0]
 800568a:	f003 020f 	and.w	r2, r3, #15
 800568e:	6879      	ldr	r1, [r7, #4]
 8005690:	4613      	mov	r3, r2
 8005692:	009b      	lsls	r3, r3, #2
 8005694:	4413      	add	r3, r2
 8005696:	009b      	lsls	r3, r3, #2
 8005698:	440b      	add	r3, r1
 800569a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800569e:	2200      	movs	r2, #0
 80056a0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80056a2:	4b29      	ldr	r3, [pc, #164]	@ (8005748 <USBD_CDC_DeInit+0x100>)
 80056a4:	781b      	ldrb	r3, [r3, #0]
 80056a6:	4619      	mov	r1, r3
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	f002 fa6a 	bl	8007b82 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80056ae:	4b26      	ldr	r3, [pc, #152]	@ (8005748 <USBD_CDC_DeInit+0x100>)
 80056b0:	781b      	ldrb	r3, [r3, #0]
 80056b2:	f003 020f 	and.w	r2, r3, #15
 80056b6:	6879      	ldr	r1, [r7, #4]
 80056b8:	4613      	mov	r3, r2
 80056ba:	009b      	lsls	r3, r3, #2
 80056bc:	4413      	add	r3, r2
 80056be:	009b      	lsls	r3, r3, #2
 80056c0:	440b      	add	r3, r1
 80056c2:	3324      	adds	r3, #36	@ 0x24
 80056c4:	2200      	movs	r2, #0
 80056c6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80056c8:	4b1f      	ldr	r3, [pc, #124]	@ (8005748 <USBD_CDC_DeInit+0x100>)
 80056ca:	781b      	ldrb	r3, [r3, #0]
 80056cc:	f003 020f 	and.w	r2, r3, #15
 80056d0:	6879      	ldr	r1, [r7, #4]
 80056d2:	4613      	mov	r3, r2
 80056d4:	009b      	lsls	r3, r3, #2
 80056d6:	4413      	add	r3, r2
 80056d8:	009b      	lsls	r3, r3, #2
 80056da:	440b      	add	r3, r1
 80056dc:	3326      	adds	r3, #38	@ 0x26
 80056de:	2200      	movs	r2, #0
 80056e0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	32b0      	adds	r2, #176	@ 0xb0
 80056ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d01f      	beq.n	8005734 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80056fa:	687a      	ldr	r2, [r7, #4]
 80056fc:	33b0      	adds	r3, #176	@ 0xb0
 80056fe:	009b      	lsls	r3, r3, #2
 8005700:	4413      	add	r3, r2
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	32b0      	adds	r2, #176	@ 0xb0
 8005712:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005716:	4618      	mov	r0, r3
 8005718:	f002 fb3e 	bl	8007d98 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	32b0      	adds	r2, #176	@ 0xb0
 8005726:	2100      	movs	r1, #0
 8005728:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2200      	movs	r2, #0
 8005730:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005734:	2300      	movs	r3, #0
}
 8005736:	4618      	mov	r0, r3
 8005738:	3708      	adds	r7, #8
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}
 800573e:	bf00      	nop
 8005740:	200000a3 	.word	0x200000a3
 8005744:	200000a4 	.word	0x200000a4
 8005748:	200000a5 	.word	0x200000a5

0800574c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b086      	sub	sp, #24
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
 8005754:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	32b0      	adds	r2, #176	@ 0xb0
 8005760:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005764:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005766:	2300      	movs	r3, #0
 8005768:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800576a:	2300      	movs	r3, #0
 800576c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800576e:	2300      	movs	r3, #0
 8005770:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d101      	bne.n	800577c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005778:	2303      	movs	r3, #3
 800577a:	e0bf      	b.n	80058fc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	781b      	ldrb	r3, [r3, #0]
 8005780:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005784:	2b00      	cmp	r3, #0
 8005786:	d050      	beq.n	800582a <USBD_CDC_Setup+0xde>
 8005788:	2b20      	cmp	r3, #32
 800578a:	f040 80af 	bne.w	80058ec <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	88db      	ldrh	r3, [r3, #6]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d03a      	beq.n	800580c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	781b      	ldrb	r3, [r3, #0]
 800579a:	b25b      	sxtb	r3, r3
 800579c:	2b00      	cmp	r3, #0
 800579e:	da1b      	bge.n	80057d8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80057a6:	687a      	ldr	r2, [r7, #4]
 80057a8:	33b0      	adds	r3, #176	@ 0xb0
 80057aa:	009b      	lsls	r3, r3, #2
 80057ac:	4413      	add	r3, r2
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	689b      	ldr	r3, [r3, #8]
 80057b2:	683a      	ldr	r2, [r7, #0]
 80057b4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80057b6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80057b8:	683a      	ldr	r2, [r7, #0]
 80057ba:	88d2      	ldrh	r2, [r2, #6]
 80057bc:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	88db      	ldrh	r3, [r3, #6]
 80057c2:	2b07      	cmp	r3, #7
 80057c4:	bf28      	it	cs
 80057c6:	2307      	movcs	r3, #7
 80057c8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	89fa      	ldrh	r2, [r7, #14]
 80057ce:	4619      	mov	r1, r3
 80057d0:	6878      	ldr	r0, [r7, #4]
 80057d2:	f001 fd87 	bl	80072e4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80057d6:	e090      	b.n	80058fa <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	785a      	ldrb	r2, [r3, #1]
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	88db      	ldrh	r3, [r3, #6]
 80057e6:	2b3f      	cmp	r3, #63	@ 0x3f
 80057e8:	d803      	bhi.n	80057f2 <USBD_CDC_Setup+0xa6>
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	88db      	ldrh	r3, [r3, #6]
 80057ee:	b2da      	uxtb	r2, r3
 80057f0:	e000      	b.n	80057f4 <USBD_CDC_Setup+0xa8>
 80057f2:	2240      	movs	r2, #64	@ 0x40
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80057fa:	6939      	ldr	r1, [r7, #16]
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8005802:	461a      	mov	r2, r3
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f001 fd99 	bl	800733c <USBD_CtlPrepareRx>
      break;
 800580a:	e076      	b.n	80058fa <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005812:	687a      	ldr	r2, [r7, #4]
 8005814:	33b0      	adds	r3, #176	@ 0xb0
 8005816:	009b      	lsls	r3, r3, #2
 8005818:	4413      	add	r3, r2
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	683a      	ldr	r2, [r7, #0]
 8005820:	7850      	ldrb	r0, [r2, #1]
 8005822:	2200      	movs	r2, #0
 8005824:	6839      	ldr	r1, [r7, #0]
 8005826:	4798      	blx	r3
      break;
 8005828:	e067      	b.n	80058fa <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	785b      	ldrb	r3, [r3, #1]
 800582e:	2b0b      	cmp	r3, #11
 8005830:	d851      	bhi.n	80058d6 <USBD_CDC_Setup+0x18a>
 8005832:	a201      	add	r2, pc, #4	@ (adr r2, 8005838 <USBD_CDC_Setup+0xec>)
 8005834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005838:	08005869 	.word	0x08005869
 800583c:	080058e5 	.word	0x080058e5
 8005840:	080058d7 	.word	0x080058d7
 8005844:	080058d7 	.word	0x080058d7
 8005848:	080058d7 	.word	0x080058d7
 800584c:	080058d7 	.word	0x080058d7
 8005850:	080058d7 	.word	0x080058d7
 8005854:	080058d7 	.word	0x080058d7
 8005858:	080058d7 	.word	0x080058d7
 800585c:	080058d7 	.word	0x080058d7
 8005860:	08005893 	.word	0x08005893
 8005864:	080058bd 	.word	0x080058bd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800586e:	b2db      	uxtb	r3, r3
 8005870:	2b03      	cmp	r3, #3
 8005872:	d107      	bne.n	8005884 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005874:	f107 030a 	add.w	r3, r7, #10
 8005878:	2202      	movs	r2, #2
 800587a:	4619      	mov	r1, r3
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	f001 fd31 	bl	80072e4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005882:	e032      	b.n	80058ea <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005884:	6839      	ldr	r1, [r7, #0]
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f001 fcbb 	bl	8007202 <USBD_CtlError>
            ret = USBD_FAIL;
 800588c:	2303      	movs	r3, #3
 800588e:	75fb      	strb	r3, [r7, #23]
          break;
 8005890:	e02b      	b.n	80058ea <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005898:	b2db      	uxtb	r3, r3
 800589a:	2b03      	cmp	r3, #3
 800589c:	d107      	bne.n	80058ae <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800589e:	f107 030d 	add.w	r3, r7, #13
 80058a2:	2201      	movs	r2, #1
 80058a4:	4619      	mov	r1, r3
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f001 fd1c 	bl	80072e4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80058ac:	e01d      	b.n	80058ea <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80058ae:	6839      	ldr	r1, [r7, #0]
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	f001 fca6 	bl	8007202 <USBD_CtlError>
            ret = USBD_FAIL;
 80058b6:	2303      	movs	r3, #3
 80058b8:	75fb      	strb	r3, [r7, #23]
          break;
 80058ba:	e016      	b.n	80058ea <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80058c2:	b2db      	uxtb	r3, r3
 80058c4:	2b03      	cmp	r3, #3
 80058c6:	d00f      	beq.n	80058e8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80058c8:	6839      	ldr	r1, [r7, #0]
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	f001 fc99 	bl	8007202 <USBD_CtlError>
            ret = USBD_FAIL;
 80058d0:	2303      	movs	r3, #3
 80058d2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80058d4:	e008      	b.n	80058e8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80058d6:	6839      	ldr	r1, [r7, #0]
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f001 fc92 	bl	8007202 <USBD_CtlError>
          ret = USBD_FAIL;
 80058de:	2303      	movs	r3, #3
 80058e0:	75fb      	strb	r3, [r7, #23]
          break;
 80058e2:	e002      	b.n	80058ea <USBD_CDC_Setup+0x19e>
          break;
 80058e4:	bf00      	nop
 80058e6:	e008      	b.n	80058fa <USBD_CDC_Setup+0x1ae>
          break;
 80058e8:	bf00      	nop
      }
      break;
 80058ea:	e006      	b.n	80058fa <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80058ec:	6839      	ldr	r1, [r7, #0]
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f001 fc87 	bl	8007202 <USBD_CtlError>
      ret = USBD_FAIL;
 80058f4:	2303      	movs	r3, #3
 80058f6:	75fb      	strb	r3, [r7, #23]
      break;
 80058f8:	bf00      	nop
  }

  return (uint8_t)ret;
 80058fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	3718      	adds	r7, #24
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}

08005904 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b084      	sub	sp, #16
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	460b      	mov	r3, r1
 800590e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8005916:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	32b0      	adds	r2, #176	@ 0xb0
 8005922:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d101      	bne.n	800592e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800592a:	2303      	movs	r3, #3
 800592c:	e065      	b.n	80059fa <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	32b0      	adds	r2, #176	@ 0xb0
 8005938:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800593c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800593e:	78fb      	ldrb	r3, [r7, #3]
 8005940:	f003 020f 	and.w	r2, r3, #15
 8005944:	6879      	ldr	r1, [r7, #4]
 8005946:	4613      	mov	r3, r2
 8005948:	009b      	lsls	r3, r3, #2
 800594a:	4413      	add	r3, r2
 800594c:	009b      	lsls	r3, r3, #2
 800594e:	440b      	add	r3, r1
 8005950:	3318      	adds	r3, #24
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d02f      	beq.n	80059b8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005958:	78fb      	ldrb	r3, [r7, #3]
 800595a:	f003 020f 	and.w	r2, r3, #15
 800595e:	6879      	ldr	r1, [r7, #4]
 8005960:	4613      	mov	r3, r2
 8005962:	009b      	lsls	r3, r3, #2
 8005964:	4413      	add	r3, r2
 8005966:	009b      	lsls	r3, r3, #2
 8005968:	440b      	add	r3, r1
 800596a:	3318      	adds	r3, #24
 800596c:	681a      	ldr	r2, [r3, #0]
 800596e:	78fb      	ldrb	r3, [r7, #3]
 8005970:	f003 010f 	and.w	r1, r3, #15
 8005974:	68f8      	ldr	r0, [r7, #12]
 8005976:	460b      	mov	r3, r1
 8005978:	00db      	lsls	r3, r3, #3
 800597a:	440b      	add	r3, r1
 800597c:	009b      	lsls	r3, r3, #2
 800597e:	4403      	add	r3, r0
 8005980:	331c      	adds	r3, #28
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	fbb2 f1f3 	udiv	r1, r2, r3
 8005988:	fb01 f303 	mul.w	r3, r1, r3
 800598c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800598e:	2b00      	cmp	r3, #0
 8005990:	d112      	bne.n	80059b8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8005992:	78fb      	ldrb	r3, [r7, #3]
 8005994:	f003 020f 	and.w	r2, r3, #15
 8005998:	6879      	ldr	r1, [r7, #4]
 800599a:	4613      	mov	r3, r2
 800599c:	009b      	lsls	r3, r3, #2
 800599e:	4413      	add	r3, r2
 80059a0:	009b      	lsls	r3, r3, #2
 80059a2:	440b      	add	r3, r1
 80059a4:	3318      	adds	r3, #24
 80059a6:	2200      	movs	r2, #0
 80059a8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80059aa:	78f9      	ldrb	r1, [r7, #3]
 80059ac:	2300      	movs	r3, #0
 80059ae:	2200      	movs	r2, #0
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f002 f98e 	bl	8007cd2 <USBD_LL_Transmit>
 80059b6:	e01f      	b.n	80059f8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	2200      	movs	r2, #0
 80059bc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80059c6:	687a      	ldr	r2, [r7, #4]
 80059c8:	33b0      	adds	r3, #176	@ 0xb0
 80059ca:	009b      	lsls	r3, r3, #2
 80059cc:	4413      	add	r3, r2
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	691b      	ldr	r3, [r3, #16]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d010      	beq.n	80059f8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80059dc:	687a      	ldr	r2, [r7, #4]
 80059de:	33b0      	adds	r3, #176	@ 0xb0
 80059e0:	009b      	lsls	r3, r3, #2
 80059e2:	4413      	add	r3, r2
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	691b      	ldr	r3, [r3, #16]
 80059e8:	68ba      	ldr	r2, [r7, #8]
 80059ea:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80059ee:	68ba      	ldr	r2, [r7, #8]
 80059f0:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80059f4:	78fa      	ldrb	r2, [r7, #3]
 80059f6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80059f8:	2300      	movs	r3, #0
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3710      	adds	r7, #16
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}

08005a02 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005a02:	b580      	push	{r7, lr}
 8005a04:	b084      	sub	sp, #16
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	6078      	str	r0, [r7, #4]
 8005a0a:	460b      	mov	r3, r1
 8005a0c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	32b0      	adds	r2, #176	@ 0xb0
 8005a18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a1c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	32b0      	adds	r2, #176	@ 0xb0
 8005a28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d101      	bne.n	8005a34 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005a30:	2303      	movs	r3, #3
 8005a32:	e01a      	b.n	8005a6a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005a34:	78fb      	ldrb	r3, [r7, #3]
 8005a36:	4619      	mov	r1, r3
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f002 f98c 	bl	8007d56 <USBD_LL_GetRxDataSize>
 8005a3e:	4602      	mov	r2, r0
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005a4c:	687a      	ldr	r2, [r7, #4]
 8005a4e:	33b0      	adds	r3, #176	@ 0xb0
 8005a50:	009b      	lsls	r3, r3, #2
 8005a52:	4413      	add	r3, r2
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	68db      	ldr	r3, [r3, #12]
 8005a58:	68fa      	ldr	r2, [r7, #12]
 8005a5a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8005a5e:	68fa      	ldr	r2, [r7, #12]
 8005a60:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8005a64:	4611      	mov	r1, r2
 8005a66:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005a68:	2300      	movs	r3, #0
}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	3710      	adds	r7, #16
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}

08005a72 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005a72:	b580      	push	{r7, lr}
 8005a74:	b084      	sub	sp, #16
 8005a76:	af00      	add	r7, sp, #0
 8005a78:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	32b0      	adds	r2, #176	@ 0xb0
 8005a84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a88:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d101      	bne.n	8005a94 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005a90:	2303      	movs	r3, #3
 8005a92:	e024      	b.n	8005ade <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005a9a:	687a      	ldr	r2, [r7, #4]
 8005a9c:	33b0      	adds	r3, #176	@ 0xb0
 8005a9e:	009b      	lsls	r3, r3, #2
 8005aa0:	4413      	add	r3, r2
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d019      	beq.n	8005adc <USBD_CDC_EP0_RxReady+0x6a>
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8005aae:	2bff      	cmp	r3, #255	@ 0xff
 8005ab0:	d014      	beq.n	8005adc <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005ab8:	687a      	ldr	r2, [r7, #4]
 8005aba:	33b0      	adds	r3, #176	@ 0xb0
 8005abc:	009b      	lsls	r3, r3, #2
 8005abe:	4413      	add	r3, r2
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	689b      	ldr	r3, [r3, #8]
 8005ac4:	68fa      	ldr	r2, [r7, #12]
 8005ac6:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8005aca:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005acc:	68fa      	ldr	r2, [r7, #12]
 8005ace:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005ad2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	22ff      	movs	r2, #255	@ 0xff
 8005ad8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8005adc:	2300      	movs	r3, #0
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	3710      	adds	r7, #16
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}
	...

08005ae8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b086      	sub	sp, #24
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005af0:	2182      	movs	r1, #130	@ 0x82
 8005af2:	4818      	ldr	r0, [pc, #96]	@ (8005b54 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005af4:	f000 fd4f 	bl	8006596 <USBD_GetEpDesc>
 8005af8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005afa:	2101      	movs	r1, #1
 8005afc:	4815      	ldr	r0, [pc, #84]	@ (8005b54 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005afe:	f000 fd4a 	bl	8006596 <USBD_GetEpDesc>
 8005b02:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005b04:	2181      	movs	r1, #129	@ 0x81
 8005b06:	4813      	ldr	r0, [pc, #76]	@ (8005b54 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005b08:	f000 fd45 	bl	8006596 <USBD_GetEpDesc>
 8005b0c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d002      	beq.n	8005b1a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	2210      	movs	r2, #16
 8005b18:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d006      	beq.n	8005b2e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005b20:	693b      	ldr	r3, [r7, #16]
 8005b22:	2200      	movs	r2, #0
 8005b24:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005b28:	711a      	strb	r2, [r3, #4]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d006      	beq.n	8005b42 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2200      	movs	r2, #0
 8005b38:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005b3c:	711a      	strb	r2, [r3, #4]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2243      	movs	r2, #67	@ 0x43
 8005b46:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005b48:	4b02      	ldr	r3, [pc, #8]	@ (8005b54 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3718      	adds	r7, #24
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}
 8005b52:	bf00      	nop
 8005b54:	20000060 	.word	0x20000060

08005b58 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b086      	sub	sp, #24
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005b60:	2182      	movs	r1, #130	@ 0x82
 8005b62:	4818      	ldr	r0, [pc, #96]	@ (8005bc4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005b64:	f000 fd17 	bl	8006596 <USBD_GetEpDesc>
 8005b68:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005b6a:	2101      	movs	r1, #1
 8005b6c:	4815      	ldr	r0, [pc, #84]	@ (8005bc4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005b6e:	f000 fd12 	bl	8006596 <USBD_GetEpDesc>
 8005b72:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005b74:	2181      	movs	r1, #129	@ 0x81
 8005b76:	4813      	ldr	r0, [pc, #76]	@ (8005bc4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005b78:	f000 fd0d 	bl	8006596 <USBD_GetEpDesc>
 8005b7c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d002      	beq.n	8005b8a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	2210      	movs	r2, #16
 8005b88:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d006      	beq.n	8005b9e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	2200      	movs	r2, #0
 8005b94:	711a      	strb	r2, [r3, #4]
 8005b96:	2200      	movs	r2, #0
 8005b98:	f042 0202 	orr.w	r2, r2, #2
 8005b9c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d006      	beq.n	8005bb2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	711a      	strb	r2, [r3, #4]
 8005baa:	2200      	movs	r2, #0
 8005bac:	f042 0202 	orr.w	r2, r2, #2
 8005bb0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2243      	movs	r2, #67	@ 0x43
 8005bb6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005bb8:	4b02      	ldr	r3, [pc, #8]	@ (8005bc4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3718      	adds	r7, #24
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}
 8005bc2:	bf00      	nop
 8005bc4:	20000060 	.word	0x20000060

08005bc8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b086      	sub	sp, #24
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005bd0:	2182      	movs	r1, #130	@ 0x82
 8005bd2:	4818      	ldr	r0, [pc, #96]	@ (8005c34 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005bd4:	f000 fcdf 	bl	8006596 <USBD_GetEpDesc>
 8005bd8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005bda:	2101      	movs	r1, #1
 8005bdc:	4815      	ldr	r0, [pc, #84]	@ (8005c34 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005bde:	f000 fcda 	bl	8006596 <USBD_GetEpDesc>
 8005be2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005be4:	2181      	movs	r1, #129	@ 0x81
 8005be6:	4813      	ldr	r0, [pc, #76]	@ (8005c34 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005be8:	f000 fcd5 	bl	8006596 <USBD_GetEpDesc>
 8005bec:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d002      	beq.n	8005bfa <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	2210      	movs	r2, #16
 8005bf8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d006      	beq.n	8005c0e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	2200      	movs	r2, #0
 8005c04:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005c08:	711a      	strb	r2, [r3, #4]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d006      	beq.n	8005c22 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2200      	movs	r2, #0
 8005c18:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005c1c:	711a      	strb	r2, [r3, #4]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2243      	movs	r2, #67	@ 0x43
 8005c26:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005c28:	4b02      	ldr	r3, [pc, #8]	@ (8005c34 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3718      	adds	r7, #24
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}
 8005c32:	bf00      	nop
 8005c34:	20000060 	.word	0x20000060

08005c38 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b083      	sub	sp, #12
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	220a      	movs	r2, #10
 8005c44:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005c46:	4b03      	ldr	r3, [pc, #12]	@ (8005c54 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	370c      	adds	r7, #12
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c52:	4770      	bx	lr
 8005c54:	2000001c 	.word	0x2000001c

08005c58 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b083      	sub	sp, #12
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
 8005c60:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d101      	bne.n	8005c6c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005c68:	2303      	movs	r3, #3
 8005c6a:	e009      	b.n	8005c80 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005c72:	687a      	ldr	r2, [r7, #4]
 8005c74:	33b0      	adds	r3, #176	@ 0xb0
 8005c76:	009b      	lsls	r3, r3, #2
 8005c78:	4413      	add	r3, r2
 8005c7a:	683a      	ldr	r2, [r7, #0]
 8005c7c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005c7e:	2300      	movs	r3, #0
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	370c      	adds	r7, #12
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr

08005c8c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b087      	sub	sp, #28
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	60f8      	str	r0, [r7, #12]
 8005c94:	60b9      	str	r1, [r7, #8]
 8005c96:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	32b0      	adds	r2, #176	@ 0xb0
 8005ca2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ca6:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d101      	bne.n	8005cb2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005cae:	2303      	movs	r3, #3
 8005cb0:	e008      	b.n	8005cc4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	68ba      	ldr	r2, [r7, #8]
 8005cb6:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	687a      	ldr	r2, [r7, #4]
 8005cbe:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8005cc2:	2300      	movs	r3, #0
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	371c      	adds	r7, #28
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cce:	4770      	bx	lr

08005cd0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b085      	sub	sp, #20
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
 8005cd8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	32b0      	adds	r2, #176	@ 0xb0
 8005ce4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ce8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d101      	bne.n	8005cf4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005cf0:	2303      	movs	r3, #3
 8005cf2:	e004      	b.n	8005cfe <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	683a      	ldr	r2, [r7, #0]
 8005cf8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8005cfc:	2300      	movs	r3, #0
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	3714      	adds	r7, #20
 8005d02:	46bd      	mov	sp, r7
 8005d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d08:	4770      	bx	lr
	...

08005d0c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b084      	sub	sp, #16
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	32b0      	adds	r2, #176	@ 0xb0
 8005d1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d22:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8005d24:	2301      	movs	r3, #1
 8005d26:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d101      	bne.n	8005d32 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005d2e:	2303      	movs	r3, #3
 8005d30:	e025      	b.n	8005d7e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d11f      	bne.n	8005d7c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8005d44:	4b10      	ldr	r3, [pc, #64]	@ (8005d88 <USBD_CDC_TransmitPacket+0x7c>)
 8005d46:	781b      	ldrb	r3, [r3, #0]
 8005d48:	f003 020f 	and.w	r2, r3, #15
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	4613      	mov	r3, r2
 8005d56:	009b      	lsls	r3, r3, #2
 8005d58:	4413      	add	r3, r2
 8005d5a:	009b      	lsls	r3, r3, #2
 8005d5c:	4403      	add	r3, r0
 8005d5e:	3318      	adds	r3, #24
 8005d60:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8005d62:	4b09      	ldr	r3, [pc, #36]	@ (8005d88 <USBD_CDC_TransmitPacket+0x7c>)
 8005d64:	7819      	ldrb	r1, [r3, #0]
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f001 ffad 	bl	8007cd2 <USBD_LL_Transmit>

    ret = USBD_OK;
 8005d78:	2300      	movs	r3, #0
 8005d7a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3710      	adds	r7, #16
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}
 8005d86:	bf00      	nop
 8005d88:	200000a3 	.word	0x200000a3

08005d8c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b084      	sub	sp, #16
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	32b0      	adds	r2, #176	@ 0xb0
 8005d9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005da2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	32b0      	adds	r2, #176	@ 0xb0
 8005dae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d101      	bne.n	8005dba <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8005db6:	2303      	movs	r3, #3
 8005db8:	e018      	b.n	8005dec <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	7c1b      	ldrb	r3, [r3, #16]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d10a      	bne.n	8005dd8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005dc2:	4b0c      	ldr	r3, [pc, #48]	@ (8005df4 <USBD_CDC_ReceivePacket+0x68>)
 8005dc4:	7819      	ldrb	r1, [r3, #0]
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005dcc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	f001 ff9f 	bl	8007d14 <USBD_LL_PrepareReceive>
 8005dd6:	e008      	b.n	8005dea <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005dd8:	4b06      	ldr	r3, [pc, #24]	@ (8005df4 <USBD_CDC_ReceivePacket+0x68>)
 8005dda:	7819      	ldrb	r1, [r3, #0]
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005de2:	2340      	movs	r3, #64	@ 0x40
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f001 ff95 	bl	8007d14 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005dea:	2300      	movs	r3, #0
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	3710      	adds	r7, #16
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bd80      	pop	{r7, pc}
 8005df4:	200000a4 	.word	0x200000a4

08005df8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b086      	sub	sp, #24
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	60f8      	str	r0, [r7, #12]
 8005e00:	60b9      	str	r1, [r7, #8]
 8005e02:	4613      	mov	r3, r2
 8005e04:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d101      	bne.n	8005e10 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005e0c:	2303      	movs	r3, #3
 8005e0e:	e01f      	b.n	8005e50 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2200      	movs	r2, #0
 8005e14:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2200      	movs	r2, #0
 8005e24:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d003      	beq.n	8005e36 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	68ba      	ldr	r2, [r7, #8]
 8005e32:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	2201      	movs	r2, #1
 8005e3a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	79fa      	ldrb	r2, [r7, #7]
 8005e42:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005e44:	68f8      	ldr	r0, [r7, #12]
 8005e46:	f001 fe0f 	bl	8007a68 <USBD_LL_Init>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005e4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	3718      	adds	r7, #24
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}

08005e58 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b084      	sub	sp, #16
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
 8005e60:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005e62:	2300      	movs	r3, #0
 8005e64:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d101      	bne.n	8005e70 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005e6c:	2303      	movs	r3, #3
 8005e6e:	e025      	b.n	8005ebc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	683a      	ldr	r2, [r7, #0]
 8005e74:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	32ae      	adds	r2, #174	@ 0xae
 8005e82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d00f      	beq.n	8005eac <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	32ae      	adds	r2, #174	@ 0xae
 8005e96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e9c:	f107 020e 	add.w	r2, r7, #14
 8005ea0:	4610      	mov	r0, r2
 8005ea2:	4798      	blx	r3
 8005ea4:	4602      	mov	r2, r0
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8005eb2:	1c5a      	adds	r2, r3, #1
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8005eba:	2300      	movs	r3, #0
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	3710      	adds	r7, #16
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}

08005ec4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b082      	sub	sp, #8
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005ecc:	6878      	ldr	r0, [r7, #4]
 8005ece:	f001 fe17 	bl	8007b00 <USBD_LL_Start>
 8005ed2:	4603      	mov	r3, r0
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	3708      	adds	r7, #8
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}

08005edc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b083      	sub	sp, #12
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005ee4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	370c      	adds	r7, #12
 8005eea:	46bd      	mov	sp, r7
 8005eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef0:	4770      	bx	lr

08005ef2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005ef2:	b580      	push	{r7, lr}
 8005ef4:	b084      	sub	sp, #16
 8005ef6:	af00      	add	r7, sp, #0
 8005ef8:	6078      	str	r0, [r7, #4]
 8005efa:	460b      	mov	r3, r1
 8005efc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005efe:	2300      	movs	r3, #0
 8005f00:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d009      	beq.n	8005f20 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	78fa      	ldrb	r2, [r7, #3]
 8005f16:	4611      	mov	r1, r2
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	4798      	blx	r3
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	3710      	adds	r7, #16
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}

08005f2a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005f2a:	b580      	push	{r7, lr}
 8005f2c:	b084      	sub	sp, #16
 8005f2e:	af00      	add	r7, sp, #0
 8005f30:	6078      	str	r0, [r7, #4]
 8005f32:	460b      	mov	r3, r1
 8005f34:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005f36:	2300      	movs	r3, #0
 8005f38:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	78fa      	ldrb	r2, [r7, #3]
 8005f44:	4611      	mov	r1, r2
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	4798      	blx	r3
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d001      	beq.n	8005f54 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005f50:	2303      	movs	r3, #3
 8005f52:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	3710      	adds	r7, #16
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}

08005f5e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005f5e:	b580      	push	{r7, lr}
 8005f60:	b084      	sub	sp, #16
 8005f62:	af00      	add	r7, sp, #0
 8005f64:	6078      	str	r0, [r7, #4]
 8005f66:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005f6e:	6839      	ldr	r1, [r7, #0]
 8005f70:	4618      	mov	r0, r3
 8005f72:	f001 f90c 	bl	800718e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2201      	movs	r2, #1
 8005f7a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8005f84:	461a      	mov	r2, r3
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005f92:	f003 031f 	and.w	r3, r3, #31
 8005f96:	2b02      	cmp	r3, #2
 8005f98:	d01a      	beq.n	8005fd0 <USBD_LL_SetupStage+0x72>
 8005f9a:	2b02      	cmp	r3, #2
 8005f9c:	d822      	bhi.n	8005fe4 <USBD_LL_SetupStage+0x86>
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d002      	beq.n	8005fa8 <USBD_LL_SetupStage+0x4a>
 8005fa2:	2b01      	cmp	r3, #1
 8005fa4:	d00a      	beq.n	8005fbc <USBD_LL_SetupStage+0x5e>
 8005fa6:	e01d      	b.n	8005fe4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005fae:	4619      	mov	r1, r3
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f000 fb63 	bl	800667c <USBD_StdDevReq>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	73fb      	strb	r3, [r7, #15]
      break;
 8005fba:	e020      	b.n	8005ffe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005fc2:	4619      	mov	r1, r3
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f000 fbcb 	bl	8006760 <USBD_StdItfReq>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	73fb      	strb	r3, [r7, #15]
      break;
 8005fce:	e016      	b.n	8005ffe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005fd6:	4619      	mov	r1, r3
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	f000 fc2d 	bl	8006838 <USBD_StdEPReq>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	73fb      	strb	r3, [r7, #15]
      break;
 8005fe2:	e00c      	b.n	8005ffe <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005fea:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8005fee:	b2db      	uxtb	r3, r3
 8005ff0:	4619      	mov	r1, r3
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f001 fde4 	bl	8007bc0 <USBD_LL_StallEP>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	73fb      	strb	r3, [r7, #15]
      break;
 8005ffc:	bf00      	nop
  }

  return ret;
 8005ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006000:	4618      	mov	r0, r3
 8006002:	3710      	adds	r7, #16
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}

08006008 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b086      	sub	sp, #24
 800600c:	af00      	add	r7, sp, #0
 800600e:	60f8      	str	r0, [r7, #12]
 8006010:	460b      	mov	r3, r1
 8006012:	607a      	str	r2, [r7, #4]
 8006014:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006016:	2300      	movs	r3, #0
 8006018:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800601a:	7afb      	ldrb	r3, [r7, #11]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d16e      	bne.n	80060fe <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8006026:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800602e:	2b03      	cmp	r3, #3
 8006030:	f040 8098 	bne.w	8006164 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	689a      	ldr	r2, [r3, #8]
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	68db      	ldr	r3, [r3, #12]
 800603c:	429a      	cmp	r2, r3
 800603e:	d913      	bls.n	8006068 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	689a      	ldr	r2, [r3, #8]
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	68db      	ldr	r3, [r3, #12]
 8006048:	1ad2      	subs	r2, r2, r3
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	68da      	ldr	r2, [r3, #12]
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	689b      	ldr	r3, [r3, #8]
 8006056:	4293      	cmp	r3, r2
 8006058:	bf28      	it	cs
 800605a:	4613      	movcs	r3, r2
 800605c:	461a      	mov	r2, r3
 800605e:	6879      	ldr	r1, [r7, #4]
 8006060:	68f8      	ldr	r0, [r7, #12]
 8006062:	f001 f988 	bl	8007376 <USBD_CtlContinueRx>
 8006066:	e07d      	b.n	8006164 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800606e:	f003 031f 	and.w	r3, r3, #31
 8006072:	2b02      	cmp	r3, #2
 8006074:	d014      	beq.n	80060a0 <USBD_LL_DataOutStage+0x98>
 8006076:	2b02      	cmp	r3, #2
 8006078:	d81d      	bhi.n	80060b6 <USBD_LL_DataOutStage+0xae>
 800607a:	2b00      	cmp	r3, #0
 800607c:	d002      	beq.n	8006084 <USBD_LL_DataOutStage+0x7c>
 800607e:	2b01      	cmp	r3, #1
 8006080:	d003      	beq.n	800608a <USBD_LL_DataOutStage+0x82>
 8006082:	e018      	b.n	80060b6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006084:	2300      	movs	r3, #0
 8006086:	75bb      	strb	r3, [r7, #22]
            break;
 8006088:	e018      	b.n	80060bc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006090:	b2db      	uxtb	r3, r3
 8006092:	4619      	mov	r1, r3
 8006094:	68f8      	ldr	r0, [r7, #12]
 8006096:	f000 fa64 	bl	8006562 <USBD_CoreFindIF>
 800609a:	4603      	mov	r3, r0
 800609c:	75bb      	strb	r3, [r7, #22]
            break;
 800609e:	e00d      	b.n	80060bc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80060a6:	b2db      	uxtb	r3, r3
 80060a8:	4619      	mov	r1, r3
 80060aa:	68f8      	ldr	r0, [r7, #12]
 80060ac:	f000 fa66 	bl	800657c <USBD_CoreFindEP>
 80060b0:	4603      	mov	r3, r0
 80060b2:	75bb      	strb	r3, [r7, #22]
            break;
 80060b4:	e002      	b.n	80060bc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80060b6:	2300      	movs	r3, #0
 80060b8:	75bb      	strb	r3, [r7, #22]
            break;
 80060ba:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80060bc:	7dbb      	ldrb	r3, [r7, #22]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d119      	bne.n	80060f6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80060c8:	b2db      	uxtb	r3, r3
 80060ca:	2b03      	cmp	r3, #3
 80060cc:	d113      	bne.n	80060f6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80060ce:	7dba      	ldrb	r2, [r7, #22]
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	32ae      	adds	r2, #174	@ 0xae
 80060d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060d8:	691b      	ldr	r3, [r3, #16]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d00b      	beq.n	80060f6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80060de:	7dba      	ldrb	r2, [r7, #22]
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80060e6:	7dba      	ldrb	r2, [r7, #22]
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	32ae      	adds	r2, #174	@ 0xae
 80060ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060f0:	691b      	ldr	r3, [r3, #16]
 80060f2:	68f8      	ldr	r0, [r7, #12]
 80060f4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80060f6:	68f8      	ldr	r0, [r7, #12]
 80060f8:	f001 f94e 	bl	8007398 <USBD_CtlSendStatus>
 80060fc:	e032      	b.n	8006164 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80060fe:	7afb      	ldrb	r3, [r7, #11]
 8006100:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006104:	b2db      	uxtb	r3, r3
 8006106:	4619      	mov	r1, r3
 8006108:	68f8      	ldr	r0, [r7, #12]
 800610a:	f000 fa37 	bl	800657c <USBD_CoreFindEP>
 800610e:	4603      	mov	r3, r0
 8006110:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006112:	7dbb      	ldrb	r3, [r7, #22]
 8006114:	2bff      	cmp	r3, #255	@ 0xff
 8006116:	d025      	beq.n	8006164 <USBD_LL_DataOutStage+0x15c>
 8006118:	7dbb      	ldrb	r3, [r7, #22]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d122      	bne.n	8006164 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006124:	b2db      	uxtb	r3, r3
 8006126:	2b03      	cmp	r3, #3
 8006128:	d117      	bne.n	800615a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800612a:	7dba      	ldrb	r2, [r7, #22]
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	32ae      	adds	r2, #174	@ 0xae
 8006130:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006134:	699b      	ldr	r3, [r3, #24]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d00f      	beq.n	800615a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800613a:	7dba      	ldrb	r2, [r7, #22]
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006142:	7dba      	ldrb	r2, [r7, #22]
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	32ae      	adds	r2, #174	@ 0xae
 8006148:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800614c:	699b      	ldr	r3, [r3, #24]
 800614e:	7afa      	ldrb	r2, [r7, #11]
 8006150:	4611      	mov	r1, r2
 8006152:	68f8      	ldr	r0, [r7, #12]
 8006154:	4798      	blx	r3
 8006156:	4603      	mov	r3, r0
 8006158:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800615a:	7dfb      	ldrb	r3, [r7, #23]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d001      	beq.n	8006164 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006160:	7dfb      	ldrb	r3, [r7, #23]
 8006162:	e000      	b.n	8006166 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006164:	2300      	movs	r3, #0
}
 8006166:	4618      	mov	r0, r3
 8006168:	3718      	adds	r7, #24
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}

0800616e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800616e:	b580      	push	{r7, lr}
 8006170:	b086      	sub	sp, #24
 8006172:	af00      	add	r7, sp, #0
 8006174:	60f8      	str	r0, [r7, #12]
 8006176:	460b      	mov	r3, r1
 8006178:	607a      	str	r2, [r7, #4]
 800617a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800617c:	7afb      	ldrb	r3, [r7, #11]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d16f      	bne.n	8006262 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	3314      	adds	r3, #20
 8006186:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800618e:	2b02      	cmp	r3, #2
 8006190:	d15a      	bne.n	8006248 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	689a      	ldr	r2, [r3, #8]
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	68db      	ldr	r3, [r3, #12]
 800619a:	429a      	cmp	r2, r3
 800619c:	d914      	bls.n	80061c8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	689a      	ldr	r2, [r3, #8]
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	68db      	ldr	r3, [r3, #12]
 80061a6:	1ad2      	subs	r2, r2, r3
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	689b      	ldr	r3, [r3, #8]
 80061b0:	461a      	mov	r2, r3
 80061b2:	6879      	ldr	r1, [r7, #4]
 80061b4:	68f8      	ldr	r0, [r7, #12]
 80061b6:	f001 f8b0 	bl	800731a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80061ba:	2300      	movs	r3, #0
 80061bc:	2200      	movs	r2, #0
 80061be:	2100      	movs	r1, #0
 80061c0:	68f8      	ldr	r0, [r7, #12]
 80061c2:	f001 fda7 	bl	8007d14 <USBD_LL_PrepareReceive>
 80061c6:	e03f      	b.n	8006248 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	68da      	ldr	r2, [r3, #12]
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	689b      	ldr	r3, [r3, #8]
 80061d0:	429a      	cmp	r2, r3
 80061d2:	d11c      	bne.n	800620e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	685a      	ldr	r2, [r3, #4]
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80061dc:	429a      	cmp	r2, r3
 80061de:	d316      	bcc.n	800620e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	685a      	ldr	r2, [r3, #4]
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80061ea:	429a      	cmp	r2, r3
 80061ec:	d20f      	bcs.n	800620e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80061ee:	2200      	movs	r2, #0
 80061f0:	2100      	movs	r1, #0
 80061f2:	68f8      	ldr	r0, [r7, #12]
 80061f4:	f001 f891 	bl	800731a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	2200      	movs	r2, #0
 80061fc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006200:	2300      	movs	r3, #0
 8006202:	2200      	movs	r2, #0
 8006204:	2100      	movs	r1, #0
 8006206:	68f8      	ldr	r0, [r7, #12]
 8006208:	f001 fd84 	bl	8007d14 <USBD_LL_PrepareReceive>
 800620c:	e01c      	b.n	8006248 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006214:	b2db      	uxtb	r3, r3
 8006216:	2b03      	cmp	r3, #3
 8006218:	d10f      	bne.n	800623a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006220:	68db      	ldr	r3, [r3, #12]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d009      	beq.n	800623a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2200      	movs	r2, #0
 800622a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006234:	68db      	ldr	r3, [r3, #12]
 8006236:	68f8      	ldr	r0, [r7, #12]
 8006238:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800623a:	2180      	movs	r1, #128	@ 0x80
 800623c:	68f8      	ldr	r0, [r7, #12]
 800623e:	f001 fcbf 	bl	8007bc0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006242:	68f8      	ldr	r0, [r7, #12]
 8006244:	f001 f8bb 	bl	80073be <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800624e:	2b00      	cmp	r3, #0
 8006250:	d03a      	beq.n	80062c8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006252:	68f8      	ldr	r0, [r7, #12]
 8006254:	f7ff fe42 	bl	8005edc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2200      	movs	r2, #0
 800625c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8006260:	e032      	b.n	80062c8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006262:	7afb      	ldrb	r3, [r7, #11]
 8006264:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006268:	b2db      	uxtb	r3, r3
 800626a:	4619      	mov	r1, r3
 800626c:	68f8      	ldr	r0, [r7, #12]
 800626e:	f000 f985 	bl	800657c <USBD_CoreFindEP>
 8006272:	4603      	mov	r3, r0
 8006274:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006276:	7dfb      	ldrb	r3, [r7, #23]
 8006278:	2bff      	cmp	r3, #255	@ 0xff
 800627a:	d025      	beq.n	80062c8 <USBD_LL_DataInStage+0x15a>
 800627c:	7dfb      	ldrb	r3, [r7, #23]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d122      	bne.n	80062c8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006288:	b2db      	uxtb	r3, r3
 800628a:	2b03      	cmp	r3, #3
 800628c:	d11c      	bne.n	80062c8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800628e:	7dfa      	ldrb	r2, [r7, #23]
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	32ae      	adds	r2, #174	@ 0xae
 8006294:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006298:	695b      	ldr	r3, [r3, #20]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d014      	beq.n	80062c8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800629e:	7dfa      	ldrb	r2, [r7, #23]
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80062a6:	7dfa      	ldrb	r2, [r7, #23]
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	32ae      	adds	r2, #174	@ 0xae
 80062ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062b0:	695b      	ldr	r3, [r3, #20]
 80062b2:	7afa      	ldrb	r2, [r7, #11]
 80062b4:	4611      	mov	r1, r2
 80062b6:	68f8      	ldr	r0, [r7, #12]
 80062b8:	4798      	blx	r3
 80062ba:	4603      	mov	r3, r0
 80062bc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80062be:	7dbb      	ldrb	r3, [r7, #22]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d001      	beq.n	80062c8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80062c4:	7dbb      	ldrb	r3, [r7, #22]
 80062c6:	e000      	b.n	80062ca <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80062c8:	2300      	movs	r3, #0
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3718      	adds	r7, #24
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}

080062d2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80062d2:	b580      	push	{r7, lr}
 80062d4:	b084      	sub	sp, #16
 80062d6:	af00      	add	r7, sp, #0
 80062d8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80062da:	2300      	movs	r3, #0
 80062dc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2201      	movs	r2, #1
 80062e2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2200      	movs	r2, #0
 80062ea:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2200      	movs	r2, #0
 80062f2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2200      	movs	r2, #0
 80062f8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2200      	movs	r2, #0
 8006300:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800630a:	2b00      	cmp	r3, #0
 800630c:	d014      	beq.n	8006338 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d00e      	beq.n	8006338 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	687a      	ldr	r2, [r7, #4]
 8006324:	6852      	ldr	r2, [r2, #4]
 8006326:	b2d2      	uxtb	r2, r2
 8006328:	4611      	mov	r1, r2
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	4798      	blx	r3
 800632e:	4603      	mov	r3, r0
 8006330:	2b00      	cmp	r3, #0
 8006332:	d001      	beq.n	8006338 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006334:	2303      	movs	r3, #3
 8006336:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006338:	2340      	movs	r3, #64	@ 0x40
 800633a:	2200      	movs	r2, #0
 800633c:	2100      	movs	r1, #0
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f001 fbf9 	bl	8007b36 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2201      	movs	r2, #1
 8006348:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2240      	movs	r2, #64	@ 0x40
 8006350:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006354:	2340      	movs	r3, #64	@ 0x40
 8006356:	2200      	movs	r2, #0
 8006358:	2180      	movs	r1, #128	@ 0x80
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f001 fbeb 	bl	8007b36 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2201      	movs	r2, #1
 8006364:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2240      	movs	r2, #64	@ 0x40
 800636a:	621a      	str	r2, [r3, #32]

  return ret;
 800636c:	7bfb      	ldrb	r3, [r7, #15]
}
 800636e:	4618      	mov	r0, r3
 8006370:	3710      	adds	r7, #16
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}

08006376 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006376:	b480      	push	{r7}
 8006378:	b083      	sub	sp, #12
 800637a:	af00      	add	r7, sp, #0
 800637c:	6078      	str	r0, [r7, #4]
 800637e:	460b      	mov	r3, r1
 8006380:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	78fa      	ldrb	r2, [r7, #3]
 8006386:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006388:	2300      	movs	r3, #0
}
 800638a:	4618      	mov	r0, r3
 800638c:	370c      	adds	r7, #12
 800638e:	46bd      	mov	sp, r7
 8006390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006394:	4770      	bx	lr

08006396 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006396:	b480      	push	{r7}
 8006398:	b083      	sub	sp, #12
 800639a:	af00      	add	r7, sp, #0
 800639c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80063a4:	b2db      	uxtb	r3, r3
 80063a6:	2b04      	cmp	r3, #4
 80063a8:	d006      	beq.n	80063b8 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80063b0:	b2da      	uxtb	r2, r3
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2204      	movs	r2, #4
 80063bc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80063c0:	2300      	movs	r3, #0
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	370c      	adds	r7, #12
 80063c6:	46bd      	mov	sp, r7
 80063c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063cc:	4770      	bx	lr

080063ce <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80063ce:	b480      	push	{r7}
 80063d0:	b083      	sub	sp, #12
 80063d2:	af00      	add	r7, sp, #0
 80063d4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80063dc:	b2db      	uxtb	r3, r3
 80063de:	2b04      	cmp	r3, #4
 80063e0:	d106      	bne.n	80063f0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80063e8:	b2da      	uxtb	r2, r3
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80063f0:	2300      	movs	r3, #0
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	370c      	adds	r7, #12
 80063f6:	46bd      	mov	sp, r7
 80063f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fc:	4770      	bx	lr

080063fe <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80063fe:	b580      	push	{r7, lr}
 8006400:	b082      	sub	sp, #8
 8006402:	af00      	add	r7, sp, #0
 8006404:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800640c:	b2db      	uxtb	r3, r3
 800640e:	2b03      	cmp	r3, #3
 8006410:	d110      	bne.n	8006434 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006418:	2b00      	cmp	r3, #0
 800641a:	d00b      	beq.n	8006434 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006422:	69db      	ldr	r3, [r3, #28]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d005      	beq.n	8006434 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800642e:	69db      	ldr	r3, [r3, #28]
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006434:	2300      	movs	r3, #0
}
 8006436:	4618      	mov	r0, r3
 8006438:	3708      	adds	r7, #8
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}

0800643e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800643e:	b580      	push	{r7, lr}
 8006440:	b082      	sub	sp, #8
 8006442:	af00      	add	r7, sp, #0
 8006444:	6078      	str	r0, [r7, #4]
 8006446:	460b      	mov	r3, r1
 8006448:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	32ae      	adds	r2, #174	@ 0xae
 8006454:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d101      	bne.n	8006460 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800645c:	2303      	movs	r3, #3
 800645e:	e01c      	b.n	800649a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006466:	b2db      	uxtb	r3, r3
 8006468:	2b03      	cmp	r3, #3
 800646a:	d115      	bne.n	8006498 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	32ae      	adds	r2, #174	@ 0xae
 8006476:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800647a:	6a1b      	ldr	r3, [r3, #32]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d00b      	beq.n	8006498 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	32ae      	adds	r2, #174	@ 0xae
 800648a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800648e:	6a1b      	ldr	r3, [r3, #32]
 8006490:	78fa      	ldrb	r2, [r7, #3]
 8006492:	4611      	mov	r1, r2
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006498:	2300      	movs	r3, #0
}
 800649a:	4618      	mov	r0, r3
 800649c:	3708      	adds	r7, #8
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}

080064a2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80064a2:	b580      	push	{r7, lr}
 80064a4:	b082      	sub	sp, #8
 80064a6:	af00      	add	r7, sp, #0
 80064a8:	6078      	str	r0, [r7, #4]
 80064aa:	460b      	mov	r3, r1
 80064ac:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	32ae      	adds	r2, #174	@ 0xae
 80064b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d101      	bne.n	80064c4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80064c0:	2303      	movs	r3, #3
 80064c2:	e01c      	b.n	80064fe <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80064ca:	b2db      	uxtb	r3, r3
 80064cc:	2b03      	cmp	r3, #3
 80064ce:	d115      	bne.n	80064fc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	32ae      	adds	r2, #174	@ 0xae
 80064da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d00b      	beq.n	80064fc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	32ae      	adds	r2, #174	@ 0xae
 80064ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064f4:	78fa      	ldrb	r2, [r7, #3]
 80064f6:	4611      	mov	r1, r2
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80064fc:	2300      	movs	r3, #0
}
 80064fe:	4618      	mov	r0, r3
 8006500:	3708      	adds	r7, #8
 8006502:	46bd      	mov	sp, r7
 8006504:	bd80      	pop	{r7, pc}

08006506 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006506:	b480      	push	{r7}
 8006508:	b083      	sub	sp, #12
 800650a:	af00      	add	r7, sp, #0
 800650c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800650e:	2300      	movs	r3, #0
}
 8006510:	4618      	mov	r0, r3
 8006512:	370c      	adds	r7, #12
 8006514:	46bd      	mov	sp, r7
 8006516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651a:	4770      	bx	lr

0800651c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b084      	sub	sp, #16
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006524:	2300      	movs	r3, #0
 8006526:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2201      	movs	r2, #1
 800652c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006536:	2b00      	cmp	r3, #0
 8006538:	d00e      	beq.n	8006558 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	687a      	ldr	r2, [r7, #4]
 8006544:	6852      	ldr	r2, [r2, #4]
 8006546:	b2d2      	uxtb	r2, r2
 8006548:	4611      	mov	r1, r2
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	4798      	blx	r3
 800654e:	4603      	mov	r3, r0
 8006550:	2b00      	cmp	r3, #0
 8006552:	d001      	beq.n	8006558 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006554:	2303      	movs	r3, #3
 8006556:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006558:	7bfb      	ldrb	r3, [r7, #15]
}
 800655a:	4618      	mov	r0, r3
 800655c:	3710      	adds	r7, #16
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}

08006562 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006562:	b480      	push	{r7}
 8006564:	b083      	sub	sp, #12
 8006566:	af00      	add	r7, sp, #0
 8006568:	6078      	str	r0, [r7, #4]
 800656a:	460b      	mov	r3, r1
 800656c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800656e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006570:	4618      	mov	r0, r3
 8006572:	370c      	adds	r7, #12
 8006574:	46bd      	mov	sp, r7
 8006576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657a:	4770      	bx	lr

0800657c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800657c:	b480      	push	{r7}
 800657e:	b083      	sub	sp, #12
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
 8006584:	460b      	mov	r3, r1
 8006586:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006588:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800658a:	4618      	mov	r0, r3
 800658c:	370c      	adds	r7, #12
 800658e:	46bd      	mov	sp, r7
 8006590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006594:	4770      	bx	lr

08006596 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006596:	b580      	push	{r7, lr}
 8006598:	b086      	sub	sp, #24
 800659a:	af00      	add	r7, sp, #0
 800659c:	6078      	str	r0, [r7, #4]
 800659e:	460b      	mov	r3, r1
 80065a0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80065aa:	2300      	movs	r3, #0
 80065ac:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	885b      	ldrh	r3, [r3, #2]
 80065b2:	b29b      	uxth	r3, r3
 80065b4:	68fa      	ldr	r2, [r7, #12]
 80065b6:	7812      	ldrb	r2, [r2, #0]
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d91f      	bls.n	80065fc <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	781b      	ldrb	r3, [r3, #0]
 80065c0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80065c2:	e013      	b.n	80065ec <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80065c4:	f107 030a 	add.w	r3, r7, #10
 80065c8:	4619      	mov	r1, r3
 80065ca:	6978      	ldr	r0, [r7, #20]
 80065cc:	f000 f81b 	bl	8006606 <USBD_GetNextDesc>
 80065d0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	785b      	ldrb	r3, [r3, #1]
 80065d6:	2b05      	cmp	r3, #5
 80065d8:	d108      	bne.n	80065ec <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	789b      	ldrb	r3, [r3, #2]
 80065e2:	78fa      	ldrb	r2, [r7, #3]
 80065e4:	429a      	cmp	r2, r3
 80065e6:	d008      	beq.n	80065fa <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80065e8:	2300      	movs	r3, #0
 80065ea:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	885b      	ldrh	r3, [r3, #2]
 80065f0:	b29a      	uxth	r2, r3
 80065f2:	897b      	ldrh	r3, [r7, #10]
 80065f4:	429a      	cmp	r2, r3
 80065f6:	d8e5      	bhi.n	80065c4 <USBD_GetEpDesc+0x2e>
 80065f8:	e000      	b.n	80065fc <USBD_GetEpDesc+0x66>
          break;
 80065fa:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80065fc:	693b      	ldr	r3, [r7, #16]
}
 80065fe:	4618      	mov	r0, r3
 8006600:	3718      	adds	r7, #24
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}

08006606 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006606:	b480      	push	{r7}
 8006608:	b085      	sub	sp, #20
 800660a:	af00      	add	r7, sp, #0
 800660c:	6078      	str	r0, [r7, #4]
 800660e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	881b      	ldrh	r3, [r3, #0]
 8006618:	68fa      	ldr	r2, [r7, #12]
 800661a:	7812      	ldrb	r2, [r2, #0]
 800661c:	4413      	add	r3, r2
 800661e:	b29a      	uxth	r2, r3
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	781b      	ldrb	r3, [r3, #0]
 8006628:	461a      	mov	r2, r3
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	4413      	add	r3, r2
 800662e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006630:	68fb      	ldr	r3, [r7, #12]
}
 8006632:	4618      	mov	r0, r3
 8006634:	3714      	adds	r7, #20
 8006636:	46bd      	mov	sp, r7
 8006638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663c:	4770      	bx	lr

0800663e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800663e:	b480      	push	{r7}
 8006640:	b087      	sub	sp, #28
 8006642:	af00      	add	r7, sp, #0
 8006644:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	781b      	ldrb	r3, [r3, #0]
 800664e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	3301      	adds	r3, #1
 8006654:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	781b      	ldrb	r3, [r3, #0]
 800665a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800665c:	8a3b      	ldrh	r3, [r7, #16]
 800665e:	021b      	lsls	r3, r3, #8
 8006660:	b21a      	sxth	r2, r3
 8006662:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006666:	4313      	orrs	r3, r2
 8006668:	b21b      	sxth	r3, r3
 800666a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800666c:	89fb      	ldrh	r3, [r7, #14]
}
 800666e:	4618      	mov	r0, r3
 8006670:	371c      	adds	r7, #28
 8006672:	46bd      	mov	sp, r7
 8006674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006678:	4770      	bx	lr
	...

0800667c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b084      	sub	sp, #16
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
 8006684:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006686:	2300      	movs	r3, #0
 8006688:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	781b      	ldrb	r3, [r3, #0]
 800668e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006692:	2b40      	cmp	r3, #64	@ 0x40
 8006694:	d005      	beq.n	80066a2 <USBD_StdDevReq+0x26>
 8006696:	2b40      	cmp	r3, #64	@ 0x40
 8006698:	d857      	bhi.n	800674a <USBD_StdDevReq+0xce>
 800669a:	2b00      	cmp	r3, #0
 800669c:	d00f      	beq.n	80066be <USBD_StdDevReq+0x42>
 800669e:	2b20      	cmp	r3, #32
 80066a0:	d153      	bne.n	800674a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	32ae      	adds	r2, #174	@ 0xae
 80066ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066b0:	689b      	ldr	r3, [r3, #8]
 80066b2:	6839      	ldr	r1, [r7, #0]
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	4798      	blx	r3
 80066b8:	4603      	mov	r3, r0
 80066ba:	73fb      	strb	r3, [r7, #15]
      break;
 80066bc:	e04a      	b.n	8006754 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	785b      	ldrb	r3, [r3, #1]
 80066c2:	2b09      	cmp	r3, #9
 80066c4:	d83b      	bhi.n	800673e <USBD_StdDevReq+0xc2>
 80066c6:	a201      	add	r2, pc, #4	@ (adr r2, 80066cc <USBD_StdDevReq+0x50>)
 80066c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066cc:	08006721 	.word	0x08006721
 80066d0:	08006735 	.word	0x08006735
 80066d4:	0800673f 	.word	0x0800673f
 80066d8:	0800672b 	.word	0x0800672b
 80066dc:	0800673f 	.word	0x0800673f
 80066e0:	080066ff 	.word	0x080066ff
 80066e4:	080066f5 	.word	0x080066f5
 80066e8:	0800673f 	.word	0x0800673f
 80066ec:	08006717 	.word	0x08006717
 80066f0:	08006709 	.word	0x08006709
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80066f4:	6839      	ldr	r1, [r7, #0]
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f000 fa3c 	bl	8006b74 <USBD_GetDescriptor>
          break;
 80066fc:	e024      	b.n	8006748 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80066fe:	6839      	ldr	r1, [r7, #0]
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f000 fba1 	bl	8006e48 <USBD_SetAddress>
          break;
 8006706:	e01f      	b.n	8006748 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006708:	6839      	ldr	r1, [r7, #0]
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f000 fbe0 	bl	8006ed0 <USBD_SetConfig>
 8006710:	4603      	mov	r3, r0
 8006712:	73fb      	strb	r3, [r7, #15]
          break;
 8006714:	e018      	b.n	8006748 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006716:	6839      	ldr	r1, [r7, #0]
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f000 fc83 	bl	8007024 <USBD_GetConfig>
          break;
 800671e:	e013      	b.n	8006748 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006720:	6839      	ldr	r1, [r7, #0]
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f000 fcb4 	bl	8007090 <USBD_GetStatus>
          break;
 8006728:	e00e      	b.n	8006748 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800672a:	6839      	ldr	r1, [r7, #0]
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f000 fce3 	bl	80070f8 <USBD_SetFeature>
          break;
 8006732:	e009      	b.n	8006748 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006734:	6839      	ldr	r1, [r7, #0]
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f000 fd07 	bl	800714a <USBD_ClrFeature>
          break;
 800673c:	e004      	b.n	8006748 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800673e:	6839      	ldr	r1, [r7, #0]
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f000 fd5e 	bl	8007202 <USBD_CtlError>
          break;
 8006746:	bf00      	nop
      }
      break;
 8006748:	e004      	b.n	8006754 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800674a:	6839      	ldr	r1, [r7, #0]
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f000 fd58 	bl	8007202 <USBD_CtlError>
      break;
 8006752:	bf00      	nop
  }

  return ret;
 8006754:	7bfb      	ldrb	r3, [r7, #15]
}
 8006756:	4618      	mov	r0, r3
 8006758:	3710      	adds	r7, #16
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}
 800675e:	bf00      	nop

08006760 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b084      	sub	sp, #16
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
 8006768:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800676a:	2300      	movs	r3, #0
 800676c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	781b      	ldrb	r3, [r3, #0]
 8006772:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006776:	2b40      	cmp	r3, #64	@ 0x40
 8006778:	d005      	beq.n	8006786 <USBD_StdItfReq+0x26>
 800677a:	2b40      	cmp	r3, #64	@ 0x40
 800677c:	d852      	bhi.n	8006824 <USBD_StdItfReq+0xc4>
 800677e:	2b00      	cmp	r3, #0
 8006780:	d001      	beq.n	8006786 <USBD_StdItfReq+0x26>
 8006782:	2b20      	cmp	r3, #32
 8006784:	d14e      	bne.n	8006824 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800678c:	b2db      	uxtb	r3, r3
 800678e:	3b01      	subs	r3, #1
 8006790:	2b02      	cmp	r3, #2
 8006792:	d840      	bhi.n	8006816 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	889b      	ldrh	r3, [r3, #4]
 8006798:	b2db      	uxtb	r3, r3
 800679a:	2b01      	cmp	r3, #1
 800679c:	d836      	bhi.n	800680c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	889b      	ldrh	r3, [r3, #4]
 80067a2:	b2db      	uxtb	r3, r3
 80067a4:	4619      	mov	r1, r3
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f7ff fedb 	bl	8006562 <USBD_CoreFindIF>
 80067ac:	4603      	mov	r3, r0
 80067ae:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80067b0:	7bbb      	ldrb	r3, [r7, #14]
 80067b2:	2bff      	cmp	r3, #255	@ 0xff
 80067b4:	d01d      	beq.n	80067f2 <USBD_StdItfReq+0x92>
 80067b6:	7bbb      	ldrb	r3, [r7, #14]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d11a      	bne.n	80067f2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80067bc:	7bba      	ldrb	r2, [r7, #14]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	32ae      	adds	r2, #174	@ 0xae
 80067c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067c6:	689b      	ldr	r3, [r3, #8]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d00f      	beq.n	80067ec <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80067cc:	7bba      	ldrb	r2, [r7, #14]
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80067d4:	7bba      	ldrb	r2, [r7, #14]
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	32ae      	adds	r2, #174	@ 0xae
 80067da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067de:	689b      	ldr	r3, [r3, #8]
 80067e0:	6839      	ldr	r1, [r7, #0]
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	4798      	blx	r3
 80067e6:	4603      	mov	r3, r0
 80067e8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80067ea:	e004      	b.n	80067f6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80067ec:	2303      	movs	r3, #3
 80067ee:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80067f0:	e001      	b.n	80067f6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80067f2:	2303      	movs	r3, #3
 80067f4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	88db      	ldrh	r3, [r3, #6]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d110      	bne.n	8006820 <USBD_StdItfReq+0xc0>
 80067fe:	7bfb      	ldrb	r3, [r7, #15]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d10d      	bne.n	8006820 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f000 fdc7 	bl	8007398 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800680a:	e009      	b.n	8006820 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800680c:	6839      	ldr	r1, [r7, #0]
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f000 fcf7 	bl	8007202 <USBD_CtlError>
          break;
 8006814:	e004      	b.n	8006820 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006816:	6839      	ldr	r1, [r7, #0]
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	f000 fcf2 	bl	8007202 <USBD_CtlError>
          break;
 800681e:	e000      	b.n	8006822 <USBD_StdItfReq+0xc2>
          break;
 8006820:	bf00      	nop
      }
      break;
 8006822:	e004      	b.n	800682e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006824:	6839      	ldr	r1, [r7, #0]
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f000 fceb 	bl	8007202 <USBD_CtlError>
      break;
 800682c:	bf00      	nop
  }

  return ret;
 800682e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006830:	4618      	mov	r0, r3
 8006832:	3710      	adds	r7, #16
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}

08006838 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b084      	sub	sp, #16
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
 8006840:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006842:	2300      	movs	r3, #0
 8006844:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	889b      	ldrh	r3, [r3, #4]
 800684a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	781b      	ldrb	r3, [r3, #0]
 8006850:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006854:	2b40      	cmp	r3, #64	@ 0x40
 8006856:	d007      	beq.n	8006868 <USBD_StdEPReq+0x30>
 8006858:	2b40      	cmp	r3, #64	@ 0x40
 800685a:	f200 817f 	bhi.w	8006b5c <USBD_StdEPReq+0x324>
 800685e:	2b00      	cmp	r3, #0
 8006860:	d02a      	beq.n	80068b8 <USBD_StdEPReq+0x80>
 8006862:	2b20      	cmp	r3, #32
 8006864:	f040 817a 	bne.w	8006b5c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006868:	7bbb      	ldrb	r3, [r7, #14]
 800686a:	4619      	mov	r1, r3
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f7ff fe85 	bl	800657c <USBD_CoreFindEP>
 8006872:	4603      	mov	r3, r0
 8006874:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006876:	7b7b      	ldrb	r3, [r7, #13]
 8006878:	2bff      	cmp	r3, #255	@ 0xff
 800687a:	f000 8174 	beq.w	8006b66 <USBD_StdEPReq+0x32e>
 800687e:	7b7b      	ldrb	r3, [r7, #13]
 8006880:	2b00      	cmp	r3, #0
 8006882:	f040 8170 	bne.w	8006b66 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006886:	7b7a      	ldrb	r2, [r7, #13]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800688e:	7b7a      	ldrb	r2, [r7, #13]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	32ae      	adds	r2, #174	@ 0xae
 8006894:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006898:	689b      	ldr	r3, [r3, #8]
 800689a:	2b00      	cmp	r3, #0
 800689c:	f000 8163 	beq.w	8006b66 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80068a0:	7b7a      	ldrb	r2, [r7, #13]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	32ae      	adds	r2, #174	@ 0xae
 80068a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068aa:	689b      	ldr	r3, [r3, #8]
 80068ac:	6839      	ldr	r1, [r7, #0]
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	4798      	blx	r3
 80068b2:	4603      	mov	r3, r0
 80068b4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80068b6:	e156      	b.n	8006b66 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	785b      	ldrb	r3, [r3, #1]
 80068bc:	2b03      	cmp	r3, #3
 80068be:	d008      	beq.n	80068d2 <USBD_StdEPReq+0x9a>
 80068c0:	2b03      	cmp	r3, #3
 80068c2:	f300 8145 	bgt.w	8006b50 <USBD_StdEPReq+0x318>
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	f000 809b 	beq.w	8006a02 <USBD_StdEPReq+0x1ca>
 80068cc:	2b01      	cmp	r3, #1
 80068ce:	d03c      	beq.n	800694a <USBD_StdEPReq+0x112>
 80068d0:	e13e      	b.n	8006b50 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80068d8:	b2db      	uxtb	r3, r3
 80068da:	2b02      	cmp	r3, #2
 80068dc:	d002      	beq.n	80068e4 <USBD_StdEPReq+0xac>
 80068de:	2b03      	cmp	r3, #3
 80068e0:	d016      	beq.n	8006910 <USBD_StdEPReq+0xd8>
 80068e2:	e02c      	b.n	800693e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80068e4:	7bbb      	ldrb	r3, [r7, #14]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d00d      	beq.n	8006906 <USBD_StdEPReq+0xce>
 80068ea:	7bbb      	ldrb	r3, [r7, #14]
 80068ec:	2b80      	cmp	r3, #128	@ 0x80
 80068ee:	d00a      	beq.n	8006906 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80068f0:	7bbb      	ldrb	r3, [r7, #14]
 80068f2:	4619      	mov	r1, r3
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f001 f963 	bl	8007bc0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80068fa:	2180      	movs	r1, #128	@ 0x80
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f001 f95f 	bl	8007bc0 <USBD_LL_StallEP>
 8006902:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006904:	e020      	b.n	8006948 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006906:	6839      	ldr	r1, [r7, #0]
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f000 fc7a 	bl	8007202 <USBD_CtlError>
              break;
 800690e:	e01b      	b.n	8006948 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	885b      	ldrh	r3, [r3, #2]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d10e      	bne.n	8006936 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006918:	7bbb      	ldrb	r3, [r7, #14]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d00b      	beq.n	8006936 <USBD_StdEPReq+0xfe>
 800691e:	7bbb      	ldrb	r3, [r7, #14]
 8006920:	2b80      	cmp	r3, #128	@ 0x80
 8006922:	d008      	beq.n	8006936 <USBD_StdEPReq+0xfe>
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	88db      	ldrh	r3, [r3, #6]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d104      	bne.n	8006936 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800692c:	7bbb      	ldrb	r3, [r7, #14]
 800692e:	4619      	mov	r1, r3
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	f001 f945 	bl	8007bc0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f000 fd2e 	bl	8007398 <USBD_CtlSendStatus>

              break;
 800693c:	e004      	b.n	8006948 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800693e:	6839      	ldr	r1, [r7, #0]
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f000 fc5e 	bl	8007202 <USBD_CtlError>
              break;
 8006946:	bf00      	nop
          }
          break;
 8006948:	e107      	b.n	8006b5a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006950:	b2db      	uxtb	r3, r3
 8006952:	2b02      	cmp	r3, #2
 8006954:	d002      	beq.n	800695c <USBD_StdEPReq+0x124>
 8006956:	2b03      	cmp	r3, #3
 8006958:	d016      	beq.n	8006988 <USBD_StdEPReq+0x150>
 800695a:	e04b      	b.n	80069f4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800695c:	7bbb      	ldrb	r3, [r7, #14]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d00d      	beq.n	800697e <USBD_StdEPReq+0x146>
 8006962:	7bbb      	ldrb	r3, [r7, #14]
 8006964:	2b80      	cmp	r3, #128	@ 0x80
 8006966:	d00a      	beq.n	800697e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006968:	7bbb      	ldrb	r3, [r7, #14]
 800696a:	4619      	mov	r1, r3
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f001 f927 	bl	8007bc0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006972:	2180      	movs	r1, #128	@ 0x80
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f001 f923 	bl	8007bc0 <USBD_LL_StallEP>
 800697a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800697c:	e040      	b.n	8006a00 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800697e:	6839      	ldr	r1, [r7, #0]
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f000 fc3e 	bl	8007202 <USBD_CtlError>
              break;
 8006986:	e03b      	b.n	8006a00 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	885b      	ldrh	r3, [r3, #2]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d136      	bne.n	80069fe <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006990:	7bbb      	ldrb	r3, [r7, #14]
 8006992:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006996:	2b00      	cmp	r3, #0
 8006998:	d004      	beq.n	80069a4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800699a:	7bbb      	ldrb	r3, [r7, #14]
 800699c:	4619      	mov	r1, r3
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f001 f92d 	bl	8007bfe <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f000 fcf7 	bl	8007398 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80069aa:	7bbb      	ldrb	r3, [r7, #14]
 80069ac:	4619      	mov	r1, r3
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f7ff fde4 	bl	800657c <USBD_CoreFindEP>
 80069b4:	4603      	mov	r3, r0
 80069b6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80069b8:	7b7b      	ldrb	r3, [r7, #13]
 80069ba:	2bff      	cmp	r3, #255	@ 0xff
 80069bc:	d01f      	beq.n	80069fe <USBD_StdEPReq+0x1c6>
 80069be:	7b7b      	ldrb	r3, [r7, #13]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d11c      	bne.n	80069fe <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80069c4:	7b7a      	ldrb	r2, [r7, #13]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80069cc:	7b7a      	ldrb	r2, [r7, #13]
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	32ae      	adds	r2, #174	@ 0xae
 80069d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069d6:	689b      	ldr	r3, [r3, #8]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d010      	beq.n	80069fe <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80069dc:	7b7a      	ldrb	r2, [r7, #13]
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	32ae      	adds	r2, #174	@ 0xae
 80069e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069e6:	689b      	ldr	r3, [r3, #8]
 80069e8:	6839      	ldr	r1, [r7, #0]
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	4798      	blx	r3
 80069ee:	4603      	mov	r3, r0
 80069f0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80069f2:	e004      	b.n	80069fe <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80069f4:	6839      	ldr	r1, [r7, #0]
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f000 fc03 	bl	8007202 <USBD_CtlError>
              break;
 80069fc:	e000      	b.n	8006a00 <USBD_StdEPReq+0x1c8>
              break;
 80069fe:	bf00      	nop
          }
          break;
 8006a00:	e0ab      	b.n	8006b5a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a08:	b2db      	uxtb	r3, r3
 8006a0a:	2b02      	cmp	r3, #2
 8006a0c:	d002      	beq.n	8006a14 <USBD_StdEPReq+0x1dc>
 8006a0e:	2b03      	cmp	r3, #3
 8006a10:	d032      	beq.n	8006a78 <USBD_StdEPReq+0x240>
 8006a12:	e097      	b.n	8006b44 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006a14:	7bbb      	ldrb	r3, [r7, #14]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d007      	beq.n	8006a2a <USBD_StdEPReq+0x1f2>
 8006a1a:	7bbb      	ldrb	r3, [r7, #14]
 8006a1c:	2b80      	cmp	r3, #128	@ 0x80
 8006a1e:	d004      	beq.n	8006a2a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006a20:	6839      	ldr	r1, [r7, #0]
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f000 fbed 	bl	8007202 <USBD_CtlError>
                break;
 8006a28:	e091      	b.n	8006b4e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006a2a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	da0b      	bge.n	8006a4a <USBD_StdEPReq+0x212>
 8006a32:	7bbb      	ldrb	r3, [r7, #14]
 8006a34:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006a38:	4613      	mov	r3, r2
 8006a3a:	009b      	lsls	r3, r3, #2
 8006a3c:	4413      	add	r3, r2
 8006a3e:	009b      	lsls	r3, r3, #2
 8006a40:	3310      	adds	r3, #16
 8006a42:	687a      	ldr	r2, [r7, #4]
 8006a44:	4413      	add	r3, r2
 8006a46:	3304      	adds	r3, #4
 8006a48:	e00b      	b.n	8006a62 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006a4a:	7bbb      	ldrb	r3, [r7, #14]
 8006a4c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006a50:	4613      	mov	r3, r2
 8006a52:	009b      	lsls	r3, r3, #2
 8006a54:	4413      	add	r3, r2
 8006a56:	009b      	lsls	r3, r3, #2
 8006a58:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006a5c:	687a      	ldr	r2, [r7, #4]
 8006a5e:	4413      	add	r3, r2
 8006a60:	3304      	adds	r3, #4
 8006a62:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	2200      	movs	r2, #0
 8006a68:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	2202      	movs	r2, #2
 8006a6e:	4619      	mov	r1, r3
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f000 fc37 	bl	80072e4 <USBD_CtlSendData>
              break;
 8006a76:	e06a      	b.n	8006b4e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006a78:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	da11      	bge.n	8006aa4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006a80:	7bbb      	ldrb	r3, [r7, #14]
 8006a82:	f003 020f 	and.w	r2, r3, #15
 8006a86:	6879      	ldr	r1, [r7, #4]
 8006a88:	4613      	mov	r3, r2
 8006a8a:	009b      	lsls	r3, r3, #2
 8006a8c:	4413      	add	r3, r2
 8006a8e:	009b      	lsls	r3, r3, #2
 8006a90:	440b      	add	r3, r1
 8006a92:	3324      	adds	r3, #36	@ 0x24
 8006a94:	881b      	ldrh	r3, [r3, #0]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d117      	bne.n	8006aca <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006a9a:	6839      	ldr	r1, [r7, #0]
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f000 fbb0 	bl	8007202 <USBD_CtlError>
                  break;
 8006aa2:	e054      	b.n	8006b4e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006aa4:	7bbb      	ldrb	r3, [r7, #14]
 8006aa6:	f003 020f 	and.w	r2, r3, #15
 8006aaa:	6879      	ldr	r1, [r7, #4]
 8006aac:	4613      	mov	r3, r2
 8006aae:	009b      	lsls	r3, r3, #2
 8006ab0:	4413      	add	r3, r2
 8006ab2:	009b      	lsls	r3, r3, #2
 8006ab4:	440b      	add	r3, r1
 8006ab6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006aba:	881b      	ldrh	r3, [r3, #0]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d104      	bne.n	8006aca <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006ac0:	6839      	ldr	r1, [r7, #0]
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f000 fb9d 	bl	8007202 <USBD_CtlError>
                  break;
 8006ac8:	e041      	b.n	8006b4e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006aca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	da0b      	bge.n	8006aea <USBD_StdEPReq+0x2b2>
 8006ad2:	7bbb      	ldrb	r3, [r7, #14]
 8006ad4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006ad8:	4613      	mov	r3, r2
 8006ada:	009b      	lsls	r3, r3, #2
 8006adc:	4413      	add	r3, r2
 8006ade:	009b      	lsls	r3, r3, #2
 8006ae0:	3310      	adds	r3, #16
 8006ae2:	687a      	ldr	r2, [r7, #4]
 8006ae4:	4413      	add	r3, r2
 8006ae6:	3304      	adds	r3, #4
 8006ae8:	e00b      	b.n	8006b02 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006aea:	7bbb      	ldrb	r3, [r7, #14]
 8006aec:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006af0:	4613      	mov	r3, r2
 8006af2:	009b      	lsls	r3, r3, #2
 8006af4:	4413      	add	r3, r2
 8006af6:	009b      	lsls	r3, r3, #2
 8006af8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006afc:	687a      	ldr	r2, [r7, #4]
 8006afe:	4413      	add	r3, r2
 8006b00:	3304      	adds	r3, #4
 8006b02:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006b04:	7bbb      	ldrb	r3, [r7, #14]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d002      	beq.n	8006b10 <USBD_StdEPReq+0x2d8>
 8006b0a:	7bbb      	ldrb	r3, [r7, #14]
 8006b0c:	2b80      	cmp	r3, #128	@ 0x80
 8006b0e:	d103      	bne.n	8006b18 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	2200      	movs	r2, #0
 8006b14:	601a      	str	r2, [r3, #0]
 8006b16:	e00e      	b.n	8006b36 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006b18:	7bbb      	ldrb	r3, [r7, #14]
 8006b1a:	4619      	mov	r1, r3
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f001 f88d 	bl	8007c3c <USBD_LL_IsStallEP>
 8006b22:	4603      	mov	r3, r0
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d003      	beq.n	8006b30 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	601a      	str	r2, [r3, #0]
 8006b2e:	e002      	b.n	8006b36 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	2200      	movs	r2, #0
 8006b34:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	2202      	movs	r2, #2
 8006b3a:	4619      	mov	r1, r3
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	f000 fbd1 	bl	80072e4 <USBD_CtlSendData>
              break;
 8006b42:	e004      	b.n	8006b4e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006b44:	6839      	ldr	r1, [r7, #0]
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f000 fb5b 	bl	8007202 <USBD_CtlError>
              break;
 8006b4c:	bf00      	nop
          }
          break;
 8006b4e:	e004      	b.n	8006b5a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006b50:	6839      	ldr	r1, [r7, #0]
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f000 fb55 	bl	8007202 <USBD_CtlError>
          break;
 8006b58:	bf00      	nop
      }
      break;
 8006b5a:	e005      	b.n	8006b68 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006b5c:	6839      	ldr	r1, [r7, #0]
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f000 fb4f 	bl	8007202 <USBD_CtlError>
      break;
 8006b64:	e000      	b.n	8006b68 <USBD_StdEPReq+0x330>
      break;
 8006b66:	bf00      	nop
  }

  return ret;
 8006b68:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	3710      	adds	r7, #16
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}
	...

08006b74 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b084      	sub	sp, #16
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
 8006b7c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006b7e:	2300      	movs	r3, #0
 8006b80:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006b82:	2300      	movs	r3, #0
 8006b84:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006b86:	2300      	movs	r3, #0
 8006b88:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	885b      	ldrh	r3, [r3, #2]
 8006b8e:	0a1b      	lsrs	r3, r3, #8
 8006b90:	b29b      	uxth	r3, r3
 8006b92:	3b01      	subs	r3, #1
 8006b94:	2b06      	cmp	r3, #6
 8006b96:	f200 8128 	bhi.w	8006dea <USBD_GetDescriptor+0x276>
 8006b9a:	a201      	add	r2, pc, #4	@ (adr r2, 8006ba0 <USBD_GetDescriptor+0x2c>)
 8006b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ba0:	08006bbd 	.word	0x08006bbd
 8006ba4:	08006bd5 	.word	0x08006bd5
 8006ba8:	08006c15 	.word	0x08006c15
 8006bac:	08006deb 	.word	0x08006deb
 8006bb0:	08006deb 	.word	0x08006deb
 8006bb4:	08006d8b 	.word	0x08006d8b
 8006bb8:	08006db7 	.word	0x08006db7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	687a      	ldr	r2, [r7, #4]
 8006bc6:	7c12      	ldrb	r2, [r2, #16]
 8006bc8:	f107 0108 	add.w	r1, r7, #8
 8006bcc:	4610      	mov	r0, r2
 8006bce:	4798      	blx	r3
 8006bd0:	60f8      	str	r0, [r7, #12]
      break;
 8006bd2:	e112      	b.n	8006dfa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	7c1b      	ldrb	r3, [r3, #16]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d10d      	bne.n	8006bf8 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006be2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006be4:	f107 0208 	add.w	r2, r7, #8
 8006be8:	4610      	mov	r0, r2
 8006bea:	4798      	blx	r3
 8006bec:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	3301      	adds	r3, #1
 8006bf2:	2202      	movs	r2, #2
 8006bf4:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006bf6:	e100      	b.n	8006dfa <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006bfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c00:	f107 0208 	add.w	r2, r7, #8
 8006c04:	4610      	mov	r0, r2
 8006c06:	4798      	blx	r3
 8006c08:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	3301      	adds	r3, #1
 8006c0e:	2202      	movs	r2, #2
 8006c10:	701a      	strb	r2, [r3, #0]
      break;
 8006c12:	e0f2      	b.n	8006dfa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	885b      	ldrh	r3, [r3, #2]
 8006c18:	b2db      	uxtb	r3, r3
 8006c1a:	2b05      	cmp	r3, #5
 8006c1c:	f200 80ac 	bhi.w	8006d78 <USBD_GetDescriptor+0x204>
 8006c20:	a201      	add	r2, pc, #4	@ (adr r2, 8006c28 <USBD_GetDescriptor+0xb4>)
 8006c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c26:	bf00      	nop
 8006c28:	08006c41 	.word	0x08006c41
 8006c2c:	08006c75 	.word	0x08006c75
 8006c30:	08006ca9 	.word	0x08006ca9
 8006c34:	08006cdd 	.word	0x08006cdd
 8006c38:	08006d11 	.word	0x08006d11
 8006c3c:	08006d45 	.word	0x08006d45
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006c46:	685b      	ldr	r3, [r3, #4]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d00b      	beq.n	8006c64 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006c52:	685b      	ldr	r3, [r3, #4]
 8006c54:	687a      	ldr	r2, [r7, #4]
 8006c56:	7c12      	ldrb	r2, [r2, #16]
 8006c58:	f107 0108 	add.w	r1, r7, #8
 8006c5c:	4610      	mov	r0, r2
 8006c5e:	4798      	blx	r3
 8006c60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c62:	e091      	b.n	8006d88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006c64:	6839      	ldr	r1, [r7, #0]
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f000 facb 	bl	8007202 <USBD_CtlError>
            err++;
 8006c6c:	7afb      	ldrb	r3, [r7, #11]
 8006c6e:	3301      	adds	r3, #1
 8006c70:	72fb      	strb	r3, [r7, #11]
          break;
 8006c72:	e089      	b.n	8006d88 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006c7a:	689b      	ldr	r3, [r3, #8]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d00b      	beq.n	8006c98 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006c86:	689b      	ldr	r3, [r3, #8]
 8006c88:	687a      	ldr	r2, [r7, #4]
 8006c8a:	7c12      	ldrb	r2, [r2, #16]
 8006c8c:	f107 0108 	add.w	r1, r7, #8
 8006c90:	4610      	mov	r0, r2
 8006c92:	4798      	blx	r3
 8006c94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c96:	e077      	b.n	8006d88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006c98:	6839      	ldr	r1, [r7, #0]
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f000 fab1 	bl	8007202 <USBD_CtlError>
            err++;
 8006ca0:	7afb      	ldrb	r3, [r7, #11]
 8006ca2:	3301      	adds	r3, #1
 8006ca4:	72fb      	strb	r3, [r7, #11]
          break;
 8006ca6:	e06f      	b.n	8006d88 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006cae:	68db      	ldr	r3, [r3, #12]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d00b      	beq.n	8006ccc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006cba:	68db      	ldr	r3, [r3, #12]
 8006cbc:	687a      	ldr	r2, [r7, #4]
 8006cbe:	7c12      	ldrb	r2, [r2, #16]
 8006cc0:	f107 0108 	add.w	r1, r7, #8
 8006cc4:	4610      	mov	r0, r2
 8006cc6:	4798      	blx	r3
 8006cc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006cca:	e05d      	b.n	8006d88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ccc:	6839      	ldr	r1, [r7, #0]
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f000 fa97 	bl	8007202 <USBD_CtlError>
            err++;
 8006cd4:	7afb      	ldrb	r3, [r7, #11]
 8006cd6:	3301      	adds	r3, #1
 8006cd8:	72fb      	strb	r3, [r7, #11]
          break;
 8006cda:	e055      	b.n	8006d88 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006ce2:	691b      	ldr	r3, [r3, #16]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d00b      	beq.n	8006d00 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006cee:	691b      	ldr	r3, [r3, #16]
 8006cf0:	687a      	ldr	r2, [r7, #4]
 8006cf2:	7c12      	ldrb	r2, [r2, #16]
 8006cf4:	f107 0108 	add.w	r1, r7, #8
 8006cf8:	4610      	mov	r0, r2
 8006cfa:	4798      	blx	r3
 8006cfc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006cfe:	e043      	b.n	8006d88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006d00:	6839      	ldr	r1, [r7, #0]
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f000 fa7d 	bl	8007202 <USBD_CtlError>
            err++;
 8006d08:	7afb      	ldrb	r3, [r7, #11]
 8006d0a:	3301      	adds	r3, #1
 8006d0c:	72fb      	strb	r3, [r7, #11]
          break;
 8006d0e:	e03b      	b.n	8006d88 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d16:	695b      	ldr	r3, [r3, #20]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d00b      	beq.n	8006d34 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d22:	695b      	ldr	r3, [r3, #20]
 8006d24:	687a      	ldr	r2, [r7, #4]
 8006d26:	7c12      	ldrb	r2, [r2, #16]
 8006d28:	f107 0108 	add.w	r1, r7, #8
 8006d2c:	4610      	mov	r0, r2
 8006d2e:	4798      	blx	r3
 8006d30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d32:	e029      	b.n	8006d88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006d34:	6839      	ldr	r1, [r7, #0]
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f000 fa63 	bl	8007202 <USBD_CtlError>
            err++;
 8006d3c:	7afb      	ldrb	r3, [r7, #11]
 8006d3e:	3301      	adds	r3, #1
 8006d40:	72fb      	strb	r3, [r7, #11]
          break;
 8006d42:	e021      	b.n	8006d88 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d4a:	699b      	ldr	r3, [r3, #24]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d00b      	beq.n	8006d68 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d56:	699b      	ldr	r3, [r3, #24]
 8006d58:	687a      	ldr	r2, [r7, #4]
 8006d5a:	7c12      	ldrb	r2, [r2, #16]
 8006d5c:	f107 0108 	add.w	r1, r7, #8
 8006d60:	4610      	mov	r0, r2
 8006d62:	4798      	blx	r3
 8006d64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d66:	e00f      	b.n	8006d88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006d68:	6839      	ldr	r1, [r7, #0]
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f000 fa49 	bl	8007202 <USBD_CtlError>
            err++;
 8006d70:	7afb      	ldrb	r3, [r7, #11]
 8006d72:	3301      	adds	r3, #1
 8006d74:	72fb      	strb	r3, [r7, #11]
          break;
 8006d76:	e007      	b.n	8006d88 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006d78:	6839      	ldr	r1, [r7, #0]
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f000 fa41 	bl	8007202 <USBD_CtlError>
          err++;
 8006d80:	7afb      	ldrb	r3, [r7, #11]
 8006d82:	3301      	adds	r3, #1
 8006d84:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006d86:	bf00      	nop
      }
      break;
 8006d88:	e037      	b.n	8006dfa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	7c1b      	ldrb	r3, [r3, #16]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d109      	bne.n	8006da6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d9a:	f107 0208 	add.w	r2, r7, #8
 8006d9e:	4610      	mov	r0, r2
 8006da0:	4798      	blx	r3
 8006da2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006da4:	e029      	b.n	8006dfa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006da6:	6839      	ldr	r1, [r7, #0]
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f000 fa2a 	bl	8007202 <USBD_CtlError>
        err++;
 8006dae:	7afb      	ldrb	r3, [r7, #11]
 8006db0:	3301      	adds	r3, #1
 8006db2:	72fb      	strb	r3, [r7, #11]
      break;
 8006db4:	e021      	b.n	8006dfa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	7c1b      	ldrb	r3, [r3, #16]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d10d      	bne.n	8006dda <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dc6:	f107 0208 	add.w	r2, r7, #8
 8006dca:	4610      	mov	r0, r2
 8006dcc:	4798      	blx	r3
 8006dce:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	3301      	adds	r3, #1
 8006dd4:	2207      	movs	r2, #7
 8006dd6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006dd8:	e00f      	b.n	8006dfa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006dda:	6839      	ldr	r1, [r7, #0]
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f000 fa10 	bl	8007202 <USBD_CtlError>
        err++;
 8006de2:	7afb      	ldrb	r3, [r7, #11]
 8006de4:	3301      	adds	r3, #1
 8006de6:	72fb      	strb	r3, [r7, #11]
      break;
 8006de8:	e007      	b.n	8006dfa <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006dea:	6839      	ldr	r1, [r7, #0]
 8006dec:	6878      	ldr	r0, [r7, #4]
 8006dee:	f000 fa08 	bl	8007202 <USBD_CtlError>
      err++;
 8006df2:	7afb      	ldrb	r3, [r7, #11]
 8006df4:	3301      	adds	r3, #1
 8006df6:	72fb      	strb	r3, [r7, #11]
      break;
 8006df8:	bf00      	nop
  }

  if (err != 0U)
 8006dfa:	7afb      	ldrb	r3, [r7, #11]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d11e      	bne.n	8006e3e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	88db      	ldrh	r3, [r3, #6]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d016      	beq.n	8006e36 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006e08:	893b      	ldrh	r3, [r7, #8]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d00e      	beq.n	8006e2c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	88da      	ldrh	r2, [r3, #6]
 8006e12:	893b      	ldrh	r3, [r7, #8]
 8006e14:	4293      	cmp	r3, r2
 8006e16:	bf28      	it	cs
 8006e18:	4613      	movcs	r3, r2
 8006e1a:	b29b      	uxth	r3, r3
 8006e1c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006e1e:	893b      	ldrh	r3, [r7, #8]
 8006e20:	461a      	mov	r2, r3
 8006e22:	68f9      	ldr	r1, [r7, #12]
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f000 fa5d 	bl	80072e4 <USBD_CtlSendData>
 8006e2a:	e009      	b.n	8006e40 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006e2c:	6839      	ldr	r1, [r7, #0]
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f000 f9e7 	bl	8007202 <USBD_CtlError>
 8006e34:	e004      	b.n	8006e40 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f000 faae 	bl	8007398 <USBD_CtlSendStatus>
 8006e3c:	e000      	b.n	8006e40 <USBD_GetDescriptor+0x2cc>
    return;
 8006e3e:	bf00      	nop
  }
}
 8006e40:	3710      	adds	r7, #16
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}
 8006e46:	bf00      	nop

08006e48 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b084      	sub	sp, #16
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
 8006e50:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	889b      	ldrh	r3, [r3, #4]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d131      	bne.n	8006ebe <USBD_SetAddress+0x76>
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	88db      	ldrh	r3, [r3, #6]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d12d      	bne.n	8006ebe <USBD_SetAddress+0x76>
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	885b      	ldrh	r3, [r3, #2]
 8006e66:	2b7f      	cmp	r3, #127	@ 0x7f
 8006e68:	d829      	bhi.n	8006ebe <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	885b      	ldrh	r3, [r3, #2]
 8006e6e:	b2db      	uxtb	r3, r3
 8006e70:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006e74:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e7c:	b2db      	uxtb	r3, r3
 8006e7e:	2b03      	cmp	r3, #3
 8006e80:	d104      	bne.n	8006e8c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006e82:	6839      	ldr	r1, [r7, #0]
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f000 f9bc 	bl	8007202 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e8a:	e01d      	b.n	8006ec8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	7bfa      	ldrb	r2, [r7, #15]
 8006e90:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006e94:	7bfb      	ldrb	r3, [r7, #15]
 8006e96:	4619      	mov	r1, r3
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	f000 fefb 	bl	8007c94 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f000 fa7a 	bl	8007398 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006ea4:	7bfb      	ldrb	r3, [r7, #15]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d004      	beq.n	8006eb4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2202      	movs	r2, #2
 8006eae:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006eb2:	e009      	b.n	8006ec8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2201      	movs	r2, #1
 8006eb8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ebc:	e004      	b.n	8006ec8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006ebe:	6839      	ldr	r1, [r7, #0]
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f000 f99e 	bl	8007202 <USBD_CtlError>
  }
}
 8006ec6:	bf00      	nop
 8006ec8:	bf00      	nop
 8006eca:	3710      	adds	r7, #16
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bd80      	pop	{r7, pc}

08006ed0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b084      	sub	sp, #16
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
 8006ed8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006eda:	2300      	movs	r3, #0
 8006edc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	885b      	ldrh	r3, [r3, #2]
 8006ee2:	b2da      	uxtb	r2, r3
 8006ee4:	4b4e      	ldr	r3, [pc, #312]	@ (8007020 <USBD_SetConfig+0x150>)
 8006ee6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006ee8:	4b4d      	ldr	r3, [pc, #308]	@ (8007020 <USBD_SetConfig+0x150>)
 8006eea:	781b      	ldrb	r3, [r3, #0]
 8006eec:	2b01      	cmp	r3, #1
 8006eee:	d905      	bls.n	8006efc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006ef0:	6839      	ldr	r1, [r7, #0]
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f000 f985 	bl	8007202 <USBD_CtlError>
    return USBD_FAIL;
 8006ef8:	2303      	movs	r3, #3
 8006efa:	e08c      	b.n	8007016 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f02:	b2db      	uxtb	r3, r3
 8006f04:	2b02      	cmp	r3, #2
 8006f06:	d002      	beq.n	8006f0e <USBD_SetConfig+0x3e>
 8006f08:	2b03      	cmp	r3, #3
 8006f0a:	d029      	beq.n	8006f60 <USBD_SetConfig+0x90>
 8006f0c:	e075      	b.n	8006ffa <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006f0e:	4b44      	ldr	r3, [pc, #272]	@ (8007020 <USBD_SetConfig+0x150>)
 8006f10:	781b      	ldrb	r3, [r3, #0]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d020      	beq.n	8006f58 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006f16:	4b42      	ldr	r3, [pc, #264]	@ (8007020 <USBD_SetConfig+0x150>)
 8006f18:	781b      	ldrb	r3, [r3, #0]
 8006f1a:	461a      	mov	r2, r3
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006f20:	4b3f      	ldr	r3, [pc, #252]	@ (8007020 <USBD_SetConfig+0x150>)
 8006f22:	781b      	ldrb	r3, [r3, #0]
 8006f24:	4619      	mov	r1, r3
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f7fe ffe3 	bl	8005ef2 <USBD_SetClassConfig>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006f30:	7bfb      	ldrb	r3, [r7, #15]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d008      	beq.n	8006f48 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006f36:	6839      	ldr	r1, [r7, #0]
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	f000 f962 	bl	8007202 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2202      	movs	r2, #2
 8006f42:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006f46:	e065      	b.n	8007014 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f000 fa25 	bl	8007398 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2203      	movs	r2, #3
 8006f52:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8006f56:	e05d      	b.n	8007014 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006f58:	6878      	ldr	r0, [r7, #4]
 8006f5a:	f000 fa1d 	bl	8007398 <USBD_CtlSendStatus>
      break;
 8006f5e:	e059      	b.n	8007014 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006f60:	4b2f      	ldr	r3, [pc, #188]	@ (8007020 <USBD_SetConfig+0x150>)
 8006f62:	781b      	ldrb	r3, [r3, #0]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d112      	bne.n	8006f8e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2202      	movs	r2, #2
 8006f6c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8006f70:	4b2b      	ldr	r3, [pc, #172]	@ (8007020 <USBD_SetConfig+0x150>)
 8006f72:	781b      	ldrb	r3, [r3, #0]
 8006f74:	461a      	mov	r2, r3
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006f7a:	4b29      	ldr	r3, [pc, #164]	@ (8007020 <USBD_SetConfig+0x150>)
 8006f7c:	781b      	ldrb	r3, [r3, #0]
 8006f7e:	4619      	mov	r1, r3
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f7fe ffd2 	bl	8005f2a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f000 fa06 	bl	8007398 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006f8c:	e042      	b.n	8007014 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006f8e:	4b24      	ldr	r3, [pc, #144]	@ (8007020 <USBD_SetConfig+0x150>)
 8006f90:	781b      	ldrb	r3, [r3, #0]
 8006f92:	461a      	mov	r2, r3
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	685b      	ldr	r3, [r3, #4]
 8006f98:	429a      	cmp	r2, r3
 8006f9a:	d02a      	beq.n	8006ff2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	685b      	ldr	r3, [r3, #4]
 8006fa0:	b2db      	uxtb	r3, r3
 8006fa2:	4619      	mov	r1, r3
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	f7fe ffc0 	bl	8005f2a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006faa:	4b1d      	ldr	r3, [pc, #116]	@ (8007020 <USBD_SetConfig+0x150>)
 8006fac:	781b      	ldrb	r3, [r3, #0]
 8006fae:	461a      	mov	r2, r3
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006fb4:	4b1a      	ldr	r3, [pc, #104]	@ (8007020 <USBD_SetConfig+0x150>)
 8006fb6:	781b      	ldrb	r3, [r3, #0]
 8006fb8:	4619      	mov	r1, r3
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f7fe ff99 	bl	8005ef2 <USBD_SetClassConfig>
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006fc4:	7bfb      	ldrb	r3, [r7, #15]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d00f      	beq.n	8006fea <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006fca:	6839      	ldr	r1, [r7, #0]
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	f000 f918 	bl	8007202 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	685b      	ldr	r3, [r3, #4]
 8006fd6:	b2db      	uxtb	r3, r3
 8006fd8:	4619      	mov	r1, r3
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f7fe ffa5 	bl	8005f2a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2202      	movs	r2, #2
 8006fe4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8006fe8:	e014      	b.n	8007014 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f000 f9d4 	bl	8007398 <USBD_CtlSendStatus>
      break;
 8006ff0:	e010      	b.n	8007014 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f000 f9d0 	bl	8007398 <USBD_CtlSendStatus>
      break;
 8006ff8:	e00c      	b.n	8007014 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006ffa:	6839      	ldr	r1, [r7, #0]
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	f000 f900 	bl	8007202 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007002:	4b07      	ldr	r3, [pc, #28]	@ (8007020 <USBD_SetConfig+0x150>)
 8007004:	781b      	ldrb	r3, [r3, #0]
 8007006:	4619      	mov	r1, r3
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f7fe ff8e 	bl	8005f2a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800700e:	2303      	movs	r3, #3
 8007010:	73fb      	strb	r3, [r7, #15]
      break;
 8007012:	bf00      	nop
  }

  return ret;
 8007014:	7bfb      	ldrb	r3, [r7, #15]
}
 8007016:	4618      	mov	r0, r3
 8007018:	3710      	adds	r7, #16
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}
 800701e:	bf00      	nop
 8007020:	200001c0 	.word	0x200001c0

08007024 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b082      	sub	sp, #8
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
 800702c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	88db      	ldrh	r3, [r3, #6]
 8007032:	2b01      	cmp	r3, #1
 8007034:	d004      	beq.n	8007040 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007036:	6839      	ldr	r1, [r7, #0]
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f000 f8e2 	bl	8007202 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800703e:	e023      	b.n	8007088 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007046:	b2db      	uxtb	r3, r3
 8007048:	2b02      	cmp	r3, #2
 800704a:	dc02      	bgt.n	8007052 <USBD_GetConfig+0x2e>
 800704c:	2b00      	cmp	r3, #0
 800704e:	dc03      	bgt.n	8007058 <USBD_GetConfig+0x34>
 8007050:	e015      	b.n	800707e <USBD_GetConfig+0x5a>
 8007052:	2b03      	cmp	r3, #3
 8007054:	d00b      	beq.n	800706e <USBD_GetConfig+0x4a>
 8007056:	e012      	b.n	800707e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2200      	movs	r2, #0
 800705c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	3308      	adds	r3, #8
 8007062:	2201      	movs	r2, #1
 8007064:	4619      	mov	r1, r3
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f000 f93c 	bl	80072e4 <USBD_CtlSendData>
        break;
 800706c:	e00c      	b.n	8007088 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	3304      	adds	r3, #4
 8007072:	2201      	movs	r2, #1
 8007074:	4619      	mov	r1, r3
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f000 f934 	bl	80072e4 <USBD_CtlSendData>
        break;
 800707c:	e004      	b.n	8007088 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800707e:	6839      	ldr	r1, [r7, #0]
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f000 f8be 	bl	8007202 <USBD_CtlError>
        break;
 8007086:	bf00      	nop
}
 8007088:	bf00      	nop
 800708a:	3708      	adds	r7, #8
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}

08007090 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b082      	sub	sp, #8
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
 8007098:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80070a0:	b2db      	uxtb	r3, r3
 80070a2:	3b01      	subs	r3, #1
 80070a4:	2b02      	cmp	r3, #2
 80070a6:	d81e      	bhi.n	80070e6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	88db      	ldrh	r3, [r3, #6]
 80070ac:	2b02      	cmp	r3, #2
 80070ae:	d004      	beq.n	80070ba <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80070b0:	6839      	ldr	r1, [r7, #0]
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f000 f8a5 	bl	8007202 <USBD_CtlError>
        break;
 80070b8:	e01a      	b.n	80070f0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2201      	movs	r2, #1
 80070be:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d005      	beq.n	80070d6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	68db      	ldr	r3, [r3, #12]
 80070ce:	f043 0202 	orr.w	r2, r3, #2
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	330c      	adds	r3, #12
 80070da:	2202      	movs	r2, #2
 80070dc:	4619      	mov	r1, r3
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f000 f900 	bl	80072e4 <USBD_CtlSendData>
      break;
 80070e4:	e004      	b.n	80070f0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80070e6:	6839      	ldr	r1, [r7, #0]
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f000 f88a 	bl	8007202 <USBD_CtlError>
      break;
 80070ee:	bf00      	nop
  }
}
 80070f0:	bf00      	nop
 80070f2:	3708      	adds	r7, #8
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}

080070f8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b082      	sub	sp, #8
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
 8007100:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	885b      	ldrh	r3, [r3, #2]
 8007106:	2b01      	cmp	r3, #1
 8007108:	d107      	bne.n	800711a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2201      	movs	r2, #1
 800710e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f000 f940 	bl	8007398 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007118:	e013      	b.n	8007142 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	885b      	ldrh	r3, [r3, #2]
 800711e:	2b02      	cmp	r3, #2
 8007120:	d10b      	bne.n	800713a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	889b      	ldrh	r3, [r3, #4]
 8007126:	0a1b      	lsrs	r3, r3, #8
 8007128:	b29b      	uxth	r3, r3
 800712a:	b2da      	uxtb	r2, r3
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f000 f930 	bl	8007398 <USBD_CtlSendStatus>
}
 8007138:	e003      	b.n	8007142 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800713a:	6839      	ldr	r1, [r7, #0]
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f000 f860 	bl	8007202 <USBD_CtlError>
}
 8007142:	bf00      	nop
 8007144:	3708      	adds	r7, #8
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}

0800714a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800714a:	b580      	push	{r7, lr}
 800714c:	b082      	sub	sp, #8
 800714e:	af00      	add	r7, sp, #0
 8007150:	6078      	str	r0, [r7, #4]
 8007152:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800715a:	b2db      	uxtb	r3, r3
 800715c:	3b01      	subs	r3, #1
 800715e:	2b02      	cmp	r3, #2
 8007160:	d80b      	bhi.n	800717a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	885b      	ldrh	r3, [r3, #2]
 8007166:	2b01      	cmp	r3, #1
 8007168:	d10c      	bne.n	8007184 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2200      	movs	r2, #0
 800716e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f000 f910 	bl	8007398 <USBD_CtlSendStatus>
      }
      break;
 8007178:	e004      	b.n	8007184 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800717a:	6839      	ldr	r1, [r7, #0]
 800717c:	6878      	ldr	r0, [r7, #4]
 800717e:	f000 f840 	bl	8007202 <USBD_CtlError>
      break;
 8007182:	e000      	b.n	8007186 <USBD_ClrFeature+0x3c>
      break;
 8007184:	bf00      	nop
  }
}
 8007186:	bf00      	nop
 8007188:	3708      	adds	r7, #8
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}

0800718e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800718e:	b580      	push	{r7, lr}
 8007190:	b084      	sub	sp, #16
 8007192:	af00      	add	r7, sp, #0
 8007194:	6078      	str	r0, [r7, #4]
 8007196:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	781a      	ldrb	r2, [r3, #0]
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	3301      	adds	r3, #1
 80071a8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	781a      	ldrb	r2, [r3, #0]
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	3301      	adds	r3, #1
 80071b6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80071b8:	68f8      	ldr	r0, [r7, #12]
 80071ba:	f7ff fa40 	bl	800663e <SWAPBYTE>
 80071be:	4603      	mov	r3, r0
 80071c0:	461a      	mov	r2, r3
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	3301      	adds	r3, #1
 80071ca:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	3301      	adds	r3, #1
 80071d0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80071d2:	68f8      	ldr	r0, [r7, #12]
 80071d4:	f7ff fa33 	bl	800663e <SWAPBYTE>
 80071d8:	4603      	mov	r3, r0
 80071da:	461a      	mov	r2, r3
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	3301      	adds	r3, #1
 80071e4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	3301      	adds	r3, #1
 80071ea:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80071ec:	68f8      	ldr	r0, [r7, #12]
 80071ee:	f7ff fa26 	bl	800663e <SWAPBYTE>
 80071f2:	4603      	mov	r3, r0
 80071f4:	461a      	mov	r2, r3
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	80da      	strh	r2, [r3, #6]
}
 80071fa:	bf00      	nop
 80071fc:	3710      	adds	r7, #16
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd80      	pop	{r7, pc}

08007202 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007202:	b580      	push	{r7, lr}
 8007204:	b082      	sub	sp, #8
 8007206:	af00      	add	r7, sp, #0
 8007208:	6078      	str	r0, [r7, #4]
 800720a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800720c:	2180      	movs	r1, #128	@ 0x80
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f000 fcd6 	bl	8007bc0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007214:	2100      	movs	r1, #0
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f000 fcd2 	bl	8007bc0 <USBD_LL_StallEP>
}
 800721c:	bf00      	nop
 800721e:	3708      	adds	r7, #8
 8007220:	46bd      	mov	sp, r7
 8007222:	bd80      	pop	{r7, pc}

08007224 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b086      	sub	sp, #24
 8007228:	af00      	add	r7, sp, #0
 800722a:	60f8      	str	r0, [r7, #12]
 800722c:	60b9      	str	r1, [r7, #8]
 800722e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007230:	2300      	movs	r3, #0
 8007232:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d036      	beq.n	80072a8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800723e:	6938      	ldr	r0, [r7, #16]
 8007240:	f000 f836 	bl	80072b0 <USBD_GetLen>
 8007244:	4603      	mov	r3, r0
 8007246:	3301      	adds	r3, #1
 8007248:	b29b      	uxth	r3, r3
 800724a:	005b      	lsls	r3, r3, #1
 800724c:	b29a      	uxth	r2, r3
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007252:	7dfb      	ldrb	r3, [r7, #23]
 8007254:	68ba      	ldr	r2, [r7, #8]
 8007256:	4413      	add	r3, r2
 8007258:	687a      	ldr	r2, [r7, #4]
 800725a:	7812      	ldrb	r2, [r2, #0]
 800725c:	701a      	strb	r2, [r3, #0]
  idx++;
 800725e:	7dfb      	ldrb	r3, [r7, #23]
 8007260:	3301      	adds	r3, #1
 8007262:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007264:	7dfb      	ldrb	r3, [r7, #23]
 8007266:	68ba      	ldr	r2, [r7, #8]
 8007268:	4413      	add	r3, r2
 800726a:	2203      	movs	r2, #3
 800726c:	701a      	strb	r2, [r3, #0]
  idx++;
 800726e:	7dfb      	ldrb	r3, [r7, #23]
 8007270:	3301      	adds	r3, #1
 8007272:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007274:	e013      	b.n	800729e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007276:	7dfb      	ldrb	r3, [r7, #23]
 8007278:	68ba      	ldr	r2, [r7, #8]
 800727a:	4413      	add	r3, r2
 800727c:	693a      	ldr	r2, [r7, #16]
 800727e:	7812      	ldrb	r2, [r2, #0]
 8007280:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007282:	693b      	ldr	r3, [r7, #16]
 8007284:	3301      	adds	r3, #1
 8007286:	613b      	str	r3, [r7, #16]
    idx++;
 8007288:	7dfb      	ldrb	r3, [r7, #23]
 800728a:	3301      	adds	r3, #1
 800728c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800728e:	7dfb      	ldrb	r3, [r7, #23]
 8007290:	68ba      	ldr	r2, [r7, #8]
 8007292:	4413      	add	r3, r2
 8007294:	2200      	movs	r2, #0
 8007296:	701a      	strb	r2, [r3, #0]
    idx++;
 8007298:	7dfb      	ldrb	r3, [r7, #23]
 800729a:	3301      	adds	r3, #1
 800729c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800729e:	693b      	ldr	r3, [r7, #16]
 80072a0:	781b      	ldrb	r3, [r3, #0]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d1e7      	bne.n	8007276 <USBD_GetString+0x52>
 80072a6:	e000      	b.n	80072aa <USBD_GetString+0x86>
    return;
 80072a8:	bf00      	nop
  }
}
 80072aa:	3718      	adds	r7, #24
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bd80      	pop	{r7, pc}

080072b0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80072b0:	b480      	push	{r7}
 80072b2:	b085      	sub	sp, #20
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80072b8:	2300      	movs	r3, #0
 80072ba:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80072c0:	e005      	b.n	80072ce <USBD_GetLen+0x1e>
  {
    len++;
 80072c2:	7bfb      	ldrb	r3, [r7, #15]
 80072c4:	3301      	adds	r3, #1
 80072c6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	3301      	adds	r3, #1
 80072cc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	781b      	ldrb	r3, [r3, #0]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d1f5      	bne.n	80072c2 <USBD_GetLen+0x12>
  }

  return len;
 80072d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80072d8:	4618      	mov	r0, r3
 80072da:	3714      	adds	r7, #20
 80072dc:	46bd      	mov	sp, r7
 80072de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e2:	4770      	bx	lr

080072e4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b084      	sub	sp, #16
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	60f8      	str	r0, [r7, #12]
 80072ec:	60b9      	str	r1, [r7, #8]
 80072ee:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	2202      	movs	r2, #2
 80072f4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	687a      	ldr	r2, [r7, #4]
 80072fc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	687a      	ldr	r2, [r7, #4]
 8007302:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	68ba      	ldr	r2, [r7, #8]
 8007308:	2100      	movs	r1, #0
 800730a:	68f8      	ldr	r0, [r7, #12]
 800730c:	f000 fce1 	bl	8007cd2 <USBD_LL_Transmit>

  return USBD_OK;
 8007310:	2300      	movs	r3, #0
}
 8007312:	4618      	mov	r0, r3
 8007314:	3710      	adds	r7, #16
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}

0800731a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800731a:	b580      	push	{r7, lr}
 800731c:	b084      	sub	sp, #16
 800731e:	af00      	add	r7, sp, #0
 8007320:	60f8      	str	r0, [r7, #12]
 8007322:	60b9      	str	r1, [r7, #8]
 8007324:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	68ba      	ldr	r2, [r7, #8]
 800732a:	2100      	movs	r1, #0
 800732c:	68f8      	ldr	r0, [r7, #12]
 800732e:	f000 fcd0 	bl	8007cd2 <USBD_LL_Transmit>

  return USBD_OK;
 8007332:	2300      	movs	r3, #0
}
 8007334:	4618      	mov	r0, r3
 8007336:	3710      	adds	r7, #16
 8007338:	46bd      	mov	sp, r7
 800733a:	bd80      	pop	{r7, pc}

0800733c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b084      	sub	sp, #16
 8007340:	af00      	add	r7, sp, #0
 8007342:	60f8      	str	r0, [r7, #12]
 8007344:	60b9      	str	r1, [r7, #8]
 8007346:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	2203      	movs	r2, #3
 800734c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	687a      	ldr	r2, [r7, #4]
 8007354:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	687a      	ldr	r2, [r7, #4]
 800735c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	68ba      	ldr	r2, [r7, #8]
 8007364:	2100      	movs	r1, #0
 8007366:	68f8      	ldr	r0, [r7, #12]
 8007368:	f000 fcd4 	bl	8007d14 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800736c:	2300      	movs	r3, #0
}
 800736e:	4618      	mov	r0, r3
 8007370:	3710      	adds	r7, #16
 8007372:	46bd      	mov	sp, r7
 8007374:	bd80      	pop	{r7, pc}

08007376 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007376:	b580      	push	{r7, lr}
 8007378:	b084      	sub	sp, #16
 800737a:	af00      	add	r7, sp, #0
 800737c:	60f8      	str	r0, [r7, #12]
 800737e:	60b9      	str	r1, [r7, #8]
 8007380:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	68ba      	ldr	r2, [r7, #8]
 8007386:	2100      	movs	r1, #0
 8007388:	68f8      	ldr	r0, [r7, #12]
 800738a:	f000 fcc3 	bl	8007d14 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800738e:	2300      	movs	r3, #0
}
 8007390:	4618      	mov	r0, r3
 8007392:	3710      	adds	r7, #16
 8007394:	46bd      	mov	sp, r7
 8007396:	bd80      	pop	{r7, pc}

08007398 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b082      	sub	sp, #8
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2204      	movs	r2, #4
 80073a4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80073a8:	2300      	movs	r3, #0
 80073aa:	2200      	movs	r2, #0
 80073ac:	2100      	movs	r1, #0
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f000 fc8f 	bl	8007cd2 <USBD_LL_Transmit>

  return USBD_OK;
 80073b4:	2300      	movs	r3, #0
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	3708      	adds	r7, #8
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}

080073be <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80073be:	b580      	push	{r7, lr}
 80073c0:	b082      	sub	sp, #8
 80073c2:	af00      	add	r7, sp, #0
 80073c4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2205      	movs	r2, #5
 80073ca:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80073ce:	2300      	movs	r3, #0
 80073d0:	2200      	movs	r2, #0
 80073d2:	2100      	movs	r1, #0
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f000 fc9d 	bl	8007d14 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80073da:	2300      	movs	r3, #0
}
 80073dc:	4618      	mov	r0, r3
 80073de:	3708      	adds	r7, #8
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd80      	pop	{r7, pc}

080073e4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80073e8:	2200      	movs	r2, #0
 80073ea:	4912      	ldr	r1, [pc, #72]	@ (8007434 <MX_USB_DEVICE_Init+0x50>)
 80073ec:	4812      	ldr	r0, [pc, #72]	@ (8007438 <MX_USB_DEVICE_Init+0x54>)
 80073ee:	f7fe fd03 	bl	8005df8 <USBD_Init>
 80073f2:	4603      	mov	r3, r0
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d001      	beq.n	80073fc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80073f8:	f7f9 f966 	bl	80006c8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80073fc:	490f      	ldr	r1, [pc, #60]	@ (800743c <MX_USB_DEVICE_Init+0x58>)
 80073fe:	480e      	ldr	r0, [pc, #56]	@ (8007438 <MX_USB_DEVICE_Init+0x54>)
 8007400:	f7fe fd2a 	bl	8005e58 <USBD_RegisterClass>
 8007404:	4603      	mov	r3, r0
 8007406:	2b00      	cmp	r3, #0
 8007408:	d001      	beq.n	800740e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800740a:	f7f9 f95d 	bl	80006c8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800740e:	490c      	ldr	r1, [pc, #48]	@ (8007440 <MX_USB_DEVICE_Init+0x5c>)
 8007410:	4809      	ldr	r0, [pc, #36]	@ (8007438 <MX_USB_DEVICE_Init+0x54>)
 8007412:	f7fe fc21 	bl	8005c58 <USBD_CDC_RegisterInterface>
 8007416:	4603      	mov	r3, r0
 8007418:	2b00      	cmp	r3, #0
 800741a:	d001      	beq.n	8007420 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800741c:	f7f9 f954 	bl	80006c8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007420:	4805      	ldr	r0, [pc, #20]	@ (8007438 <MX_USB_DEVICE_Init+0x54>)
 8007422:	f7fe fd4f 	bl	8005ec4 <USBD_Start>
 8007426:	4603      	mov	r3, r0
 8007428:	2b00      	cmp	r3, #0
 800742a:	d001      	beq.n	8007430 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800742c:	f7f9 f94c 	bl	80006c8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007430:	bf00      	nop
 8007432:	bd80      	pop	{r7, pc}
 8007434:	200000bc 	.word	0x200000bc
 8007438:	200001c4 	.word	0x200001c4
 800743c:	20000028 	.word	0x20000028
 8007440:	200000a8 	.word	0x200000a8

08007444 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007448:	2200      	movs	r2, #0
 800744a:	4905      	ldr	r1, [pc, #20]	@ (8007460 <CDC_Init_FS+0x1c>)
 800744c:	4805      	ldr	r0, [pc, #20]	@ (8007464 <CDC_Init_FS+0x20>)
 800744e:	f7fe fc1d 	bl	8005c8c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007452:	4905      	ldr	r1, [pc, #20]	@ (8007468 <CDC_Init_FS+0x24>)
 8007454:	4803      	ldr	r0, [pc, #12]	@ (8007464 <CDC_Init_FS+0x20>)
 8007456:	f7fe fc3b 	bl	8005cd0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800745a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800745c:	4618      	mov	r0, r3
 800745e:	bd80      	pop	{r7, pc}
 8007460:	20000ca0 	.word	0x20000ca0
 8007464:	200001c4 	.word	0x200001c4
 8007468:	200004a0 	.word	0x200004a0

0800746c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800746c:	b480      	push	{r7}
 800746e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007470:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007472:	4618      	mov	r0, r3
 8007474:	46bd      	mov	sp, r7
 8007476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747a:	4770      	bx	lr

0800747c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800747c:	b480      	push	{r7}
 800747e:	b083      	sub	sp, #12
 8007480:	af00      	add	r7, sp, #0
 8007482:	4603      	mov	r3, r0
 8007484:	6039      	str	r1, [r7, #0]
 8007486:	71fb      	strb	r3, [r7, #7]
 8007488:	4613      	mov	r3, r2
 800748a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800748c:	79fb      	ldrb	r3, [r7, #7]
 800748e:	2b23      	cmp	r3, #35	@ 0x23
 8007490:	d84a      	bhi.n	8007528 <CDC_Control_FS+0xac>
 8007492:	a201      	add	r2, pc, #4	@ (adr r2, 8007498 <CDC_Control_FS+0x1c>)
 8007494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007498:	08007529 	.word	0x08007529
 800749c:	08007529 	.word	0x08007529
 80074a0:	08007529 	.word	0x08007529
 80074a4:	08007529 	.word	0x08007529
 80074a8:	08007529 	.word	0x08007529
 80074ac:	08007529 	.word	0x08007529
 80074b0:	08007529 	.word	0x08007529
 80074b4:	08007529 	.word	0x08007529
 80074b8:	08007529 	.word	0x08007529
 80074bc:	08007529 	.word	0x08007529
 80074c0:	08007529 	.word	0x08007529
 80074c4:	08007529 	.word	0x08007529
 80074c8:	08007529 	.word	0x08007529
 80074cc:	08007529 	.word	0x08007529
 80074d0:	08007529 	.word	0x08007529
 80074d4:	08007529 	.word	0x08007529
 80074d8:	08007529 	.word	0x08007529
 80074dc:	08007529 	.word	0x08007529
 80074e0:	08007529 	.word	0x08007529
 80074e4:	08007529 	.word	0x08007529
 80074e8:	08007529 	.word	0x08007529
 80074ec:	08007529 	.word	0x08007529
 80074f0:	08007529 	.word	0x08007529
 80074f4:	08007529 	.word	0x08007529
 80074f8:	08007529 	.word	0x08007529
 80074fc:	08007529 	.word	0x08007529
 8007500:	08007529 	.word	0x08007529
 8007504:	08007529 	.word	0x08007529
 8007508:	08007529 	.word	0x08007529
 800750c:	08007529 	.word	0x08007529
 8007510:	08007529 	.word	0x08007529
 8007514:	08007529 	.word	0x08007529
 8007518:	08007529 	.word	0x08007529
 800751c:	08007529 	.word	0x08007529
 8007520:	08007529 	.word	0x08007529
 8007524:	08007529 	.word	0x08007529
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007528:	bf00      	nop
  }

  return (USBD_OK);
 800752a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800752c:	4618      	mov	r0, r3
 800752e:	370c      	adds	r7, #12
 8007530:	46bd      	mov	sp, r7
 8007532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007536:	4770      	bx	lr

08007538 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b082      	sub	sp, #8
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
 8007540:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007542:	6879      	ldr	r1, [r7, #4]
 8007544:	4805      	ldr	r0, [pc, #20]	@ (800755c <CDC_Receive_FS+0x24>)
 8007546:	f7fe fbc3 	bl	8005cd0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800754a:	4804      	ldr	r0, [pc, #16]	@ (800755c <CDC_Receive_FS+0x24>)
 800754c:	f7fe fc1e 	bl	8005d8c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007550:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007552:	4618      	mov	r0, r3
 8007554:	3708      	adds	r7, #8
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}
 800755a:	bf00      	nop
 800755c:	200001c4 	.word	0x200001c4

08007560 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b084      	sub	sp, #16
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
 8007568:	460b      	mov	r3, r1
 800756a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800756c:	2300      	movs	r3, #0
 800756e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007570:	4b0d      	ldr	r3, [pc, #52]	@ (80075a8 <CDC_Transmit_FS+0x48>)
 8007572:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007576:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800757e:	2b00      	cmp	r3, #0
 8007580:	d001      	beq.n	8007586 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007582:	2301      	movs	r3, #1
 8007584:	e00b      	b.n	800759e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007586:	887b      	ldrh	r3, [r7, #2]
 8007588:	461a      	mov	r2, r3
 800758a:	6879      	ldr	r1, [r7, #4]
 800758c:	4806      	ldr	r0, [pc, #24]	@ (80075a8 <CDC_Transmit_FS+0x48>)
 800758e:	f7fe fb7d 	bl	8005c8c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007592:	4805      	ldr	r0, [pc, #20]	@ (80075a8 <CDC_Transmit_FS+0x48>)
 8007594:	f7fe fbba 	bl	8005d0c <USBD_CDC_TransmitPacket>
 8007598:	4603      	mov	r3, r0
 800759a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800759c:	7bfb      	ldrb	r3, [r7, #15]
}
 800759e:	4618      	mov	r0, r3
 80075a0:	3710      	adds	r7, #16
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}
 80075a6:	bf00      	nop
 80075a8:	200001c4 	.word	0x200001c4

080075ac <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b087      	sub	sp, #28
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	60f8      	str	r0, [r7, #12]
 80075b4:	60b9      	str	r1, [r7, #8]
 80075b6:	4613      	mov	r3, r2
 80075b8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80075ba:	2300      	movs	r3, #0
 80075bc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80075be:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80075c2:	4618      	mov	r0, r3
 80075c4:	371c      	adds	r7, #28
 80075c6:	46bd      	mov	sp, r7
 80075c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075cc:	4770      	bx	lr
	...

080075d0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075d0:	b480      	push	{r7}
 80075d2:	b083      	sub	sp, #12
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	4603      	mov	r3, r0
 80075d8:	6039      	str	r1, [r7, #0]
 80075da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	2212      	movs	r2, #18
 80075e0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80075e2:	4b03      	ldr	r3, [pc, #12]	@ (80075f0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80075e4:	4618      	mov	r0, r3
 80075e6:	370c      	adds	r7, #12
 80075e8:	46bd      	mov	sp, r7
 80075ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ee:	4770      	bx	lr
 80075f0:	200000d8 	.word	0x200000d8

080075f4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075f4:	b480      	push	{r7}
 80075f6:	b083      	sub	sp, #12
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	4603      	mov	r3, r0
 80075fc:	6039      	str	r1, [r7, #0]
 80075fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	2204      	movs	r2, #4
 8007604:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007606:	4b03      	ldr	r3, [pc, #12]	@ (8007614 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007608:	4618      	mov	r0, r3
 800760a:	370c      	adds	r7, #12
 800760c:	46bd      	mov	sp, r7
 800760e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007612:	4770      	bx	lr
 8007614:	200000ec 	.word	0x200000ec

08007618 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b082      	sub	sp, #8
 800761c:	af00      	add	r7, sp, #0
 800761e:	4603      	mov	r3, r0
 8007620:	6039      	str	r1, [r7, #0]
 8007622:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007624:	79fb      	ldrb	r3, [r7, #7]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d105      	bne.n	8007636 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800762a:	683a      	ldr	r2, [r7, #0]
 800762c:	4907      	ldr	r1, [pc, #28]	@ (800764c <USBD_FS_ProductStrDescriptor+0x34>)
 800762e:	4808      	ldr	r0, [pc, #32]	@ (8007650 <USBD_FS_ProductStrDescriptor+0x38>)
 8007630:	f7ff fdf8 	bl	8007224 <USBD_GetString>
 8007634:	e004      	b.n	8007640 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007636:	683a      	ldr	r2, [r7, #0]
 8007638:	4904      	ldr	r1, [pc, #16]	@ (800764c <USBD_FS_ProductStrDescriptor+0x34>)
 800763a:	4805      	ldr	r0, [pc, #20]	@ (8007650 <USBD_FS_ProductStrDescriptor+0x38>)
 800763c:	f7ff fdf2 	bl	8007224 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007640:	4b02      	ldr	r3, [pc, #8]	@ (800764c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007642:	4618      	mov	r0, r3
 8007644:	3708      	adds	r7, #8
 8007646:	46bd      	mov	sp, r7
 8007648:	bd80      	pop	{r7, pc}
 800764a:	bf00      	nop
 800764c:	200014a0 	.word	0x200014a0
 8007650:	08007e74 	.word	0x08007e74

08007654 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b082      	sub	sp, #8
 8007658:	af00      	add	r7, sp, #0
 800765a:	4603      	mov	r3, r0
 800765c:	6039      	str	r1, [r7, #0]
 800765e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007660:	683a      	ldr	r2, [r7, #0]
 8007662:	4904      	ldr	r1, [pc, #16]	@ (8007674 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007664:	4804      	ldr	r0, [pc, #16]	@ (8007678 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007666:	f7ff fddd 	bl	8007224 <USBD_GetString>
  return USBD_StrDesc;
 800766a:	4b02      	ldr	r3, [pc, #8]	@ (8007674 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800766c:	4618      	mov	r0, r3
 800766e:	3708      	adds	r7, #8
 8007670:	46bd      	mov	sp, r7
 8007672:	bd80      	pop	{r7, pc}
 8007674:	200014a0 	.word	0x200014a0
 8007678:	08007e8c 	.word	0x08007e8c

0800767c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b082      	sub	sp, #8
 8007680:	af00      	add	r7, sp, #0
 8007682:	4603      	mov	r3, r0
 8007684:	6039      	str	r1, [r7, #0]
 8007686:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	221a      	movs	r2, #26
 800768c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800768e:	f000 f843 	bl	8007718 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007692:	4b02      	ldr	r3, [pc, #8]	@ (800769c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007694:	4618      	mov	r0, r3
 8007696:	3708      	adds	r7, #8
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}
 800769c:	200000f0 	.word	0x200000f0

080076a0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b082      	sub	sp, #8
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	4603      	mov	r3, r0
 80076a8:	6039      	str	r1, [r7, #0]
 80076aa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80076ac:	79fb      	ldrb	r3, [r7, #7]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d105      	bne.n	80076be <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80076b2:	683a      	ldr	r2, [r7, #0]
 80076b4:	4907      	ldr	r1, [pc, #28]	@ (80076d4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80076b6:	4808      	ldr	r0, [pc, #32]	@ (80076d8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80076b8:	f7ff fdb4 	bl	8007224 <USBD_GetString>
 80076bc:	e004      	b.n	80076c8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80076be:	683a      	ldr	r2, [r7, #0]
 80076c0:	4904      	ldr	r1, [pc, #16]	@ (80076d4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80076c2:	4805      	ldr	r0, [pc, #20]	@ (80076d8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80076c4:	f7ff fdae 	bl	8007224 <USBD_GetString>
  }
  return USBD_StrDesc;
 80076c8:	4b02      	ldr	r3, [pc, #8]	@ (80076d4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80076ca:	4618      	mov	r0, r3
 80076cc:	3708      	adds	r7, #8
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd80      	pop	{r7, pc}
 80076d2:	bf00      	nop
 80076d4:	200014a0 	.word	0x200014a0
 80076d8:	08007ea0 	.word	0x08007ea0

080076dc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b082      	sub	sp, #8
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	4603      	mov	r3, r0
 80076e4:	6039      	str	r1, [r7, #0]
 80076e6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80076e8:	79fb      	ldrb	r3, [r7, #7]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d105      	bne.n	80076fa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80076ee:	683a      	ldr	r2, [r7, #0]
 80076f0:	4907      	ldr	r1, [pc, #28]	@ (8007710 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80076f2:	4808      	ldr	r0, [pc, #32]	@ (8007714 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80076f4:	f7ff fd96 	bl	8007224 <USBD_GetString>
 80076f8:	e004      	b.n	8007704 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80076fa:	683a      	ldr	r2, [r7, #0]
 80076fc:	4904      	ldr	r1, [pc, #16]	@ (8007710 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80076fe:	4805      	ldr	r0, [pc, #20]	@ (8007714 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007700:	f7ff fd90 	bl	8007224 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007704:	4b02      	ldr	r3, [pc, #8]	@ (8007710 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007706:	4618      	mov	r0, r3
 8007708:	3708      	adds	r7, #8
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}
 800770e:	bf00      	nop
 8007710:	200014a0 	.word	0x200014a0
 8007714:	08007eac 	.word	0x08007eac

08007718 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b084      	sub	sp, #16
 800771c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800771e:	4b0f      	ldr	r3, [pc, #60]	@ (800775c <Get_SerialNum+0x44>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007724:	4b0e      	ldr	r3, [pc, #56]	@ (8007760 <Get_SerialNum+0x48>)
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800772a:	4b0e      	ldr	r3, [pc, #56]	@ (8007764 <Get_SerialNum+0x4c>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007730:	68fa      	ldr	r2, [r7, #12]
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	4413      	add	r3, r2
 8007736:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d009      	beq.n	8007752 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800773e:	2208      	movs	r2, #8
 8007740:	4909      	ldr	r1, [pc, #36]	@ (8007768 <Get_SerialNum+0x50>)
 8007742:	68f8      	ldr	r0, [r7, #12]
 8007744:	f000 f814 	bl	8007770 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007748:	2204      	movs	r2, #4
 800774a:	4908      	ldr	r1, [pc, #32]	@ (800776c <Get_SerialNum+0x54>)
 800774c:	68b8      	ldr	r0, [r7, #8]
 800774e:	f000 f80f 	bl	8007770 <IntToUnicode>
  }
}
 8007752:	bf00      	nop
 8007754:	3710      	adds	r7, #16
 8007756:	46bd      	mov	sp, r7
 8007758:	bd80      	pop	{r7, pc}
 800775a:	bf00      	nop
 800775c:	1fff7a10 	.word	0x1fff7a10
 8007760:	1fff7a14 	.word	0x1fff7a14
 8007764:	1fff7a18 	.word	0x1fff7a18
 8007768:	200000f2 	.word	0x200000f2
 800776c:	20000102 	.word	0x20000102

08007770 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007770:	b480      	push	{r7}
 8007772:	b087      	sub	sp, #28
 8007774:	af00      	add	r7, sp, #0
 8007776:	60f8      	str	r0, [r7, #12]
 8007778:	60b9      	str	r1, [r7, #8]
 800777a:	4613      	mov	r3, r2
 800777c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800777e:	2300      	movs	r3, #0
 8007780:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007782:	2300      	movs	r3, #0
 8007784:	75fb      	strb	r3, [r7, #23]
 8007786:	e027      	b.n	80077d8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	0f1b      	lsrs	r3, r3, #28
 800778c:	2b09      	cmp	r3, #9
 800778e:	d80b      	bhi.n	80077a8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	0f1b      	lsrs	r3, r3, #28
 8007794:	b2da      	uxtb	r2, r3
 8007796:	7dfb      	ldrb	r3, [r7, #23]
 8007798:	005b      	lsls	r3, r3, #1
 800779a:	4619      	mov	r1, r3
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	440b      	add	r3, r1
 80077a0:	3230      	adds	r2, #48	@ 0x30
 80077a2:	b2d2      	uxtb	r2, r2
 80077a4:	701a      	strb	r2, [r3, #0]
 80077a6:	e00a      	b.n	80077be <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	0f1b      	lsrs	r3, r3, #28
 80077ac:	b2da      	uxtb	r2, r3
 80077ae:	7dfb      	ldrb	r3, [r7, #23]
 80077b0:	005b      	lsls	r3, r3, #1
 80077b2:	4619      	mov	r1, r3
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	440b      	add	r3, r1
 80077b8:	3237      	adds	r2, #55	@ 0x37
 80077ba:	b2d2      	uxtb	r2, r2
 80077bc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	011b      	lsls	r3, r3, #4
 80077c2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80077c4:	7dfb      	ldrb	r3, [r7, #23]
 80077c6:	005b      	lsls	r3, r3, #1
 80077c8:	3301      	adds	r3, #1
 80077ca:	68ba      	ldr	r2, [r7, #8]
 80077cc:	4413      	add	r3, r2
 80077ce:	2200      	movs	r2, #0
 80077d0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80077d2:	7dfb      	ldrb	r3, [r7, #23]
 80077d4:	3301      	adds	r3, #1
 80077d6:	75fb      	strb	r3, [r7, #23]
 80077d8:	7dfa      	ldrb	r2, [r7, #23]
 80077da:	79fb      	ldrb	r3, [r7, #7]
 80077dc:	429a      	cmp	r2, r3
 80077de:	d3d3      	bcc.n	8007788 <IntToUnicode+0x18>
  }
}
 80077e0:	bf00      	nop
 80077e2:	bf00      	nop
 80077e4:	371c      	adds	r7, #28
 80077e6:	46bd      	mov	sp, r7
 80077e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ec:	4770      	bx	lr
	...

080077f0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b08a      	sub	sp, #40	@ 0x28
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80077f8:	f107 0314 	add.w	r3, r7, #20
 80077fc:	2200      	movs	r2, #0
 80077fe:	601a      	str	r2, [r3, #0]
 8007800:	605a      	str	r2, [r3, #4]
 8007802:	609a      	str	r2, [r3, #8]
 8007804:	60da      	str	r2, [r3, #12]
 8007806:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007810:	d13a      	bne.n	8007888 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007812:	2300      	movs	r3, #0
 8007814:	613b      	str	r3, [r7, #16]
 8007816:	4b1e      	ldr	r3, [pc, #120]	@ (8007890 <HAL_PCD_MspInit+0xa0>)
 8007818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800781a:	4a1d      	ldr	r2, [pc, #116]	@ (8007890 <HAL_PCD_MspInit+0xa0>)
 800781c:	f043 0301 	orr.w	r3, r3, #1
 8007820:	6313      	str	r3, [r2, #48]	@ 0x30
 8007822:	4b1b      	ldr	r3, [pc, #108]	@ (8007890 <HAL_PCD_MspInit+0xa0>)
 8007824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007826:	f003 0301 	and.w	r3, r3, #1
 800782a:	613b      	str	r3, [r7, #16]
 800782c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800782e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8007832:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007834:	2302      	movs	r3, #2
 8007836:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007838:	2300      	movs	r3, #0
 800783a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800783c:	2303      	movs	r3, #3
 800783e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007840:	230a      	movs	r3, #10
 8007842:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007844:	f107 0314 	add.w	r3, r7, #20
 8007848:	4619      	mov	r1, r3
 800784a:	4812      	ldr	r0, [pc, #72]	@ (8007894 <HAL_PCD_MspInit+0xa4>)
 800784c:	f7f9 fa94 	bl	8000d78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007850:	4b0f      	ldr	r3, [pc, #60]	@ (8007890 <HAL_PCD_MspInit+0xa0>)
 8007852:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007854:	4a0e      	ldr	r2, [pc, #56]	@ (8007890 <HAL_PCD_MspInit+0xa0>)
 8007856:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800785a:	6353      	str	r3, [r2, #52]	@ 0x34
 800785c:	2300      	movs	r3, #0
 800785e:	60fb      	str	r3, [r7, #12]
 8007860:	4b0b      	ldr	r3, [pc, #44]	@ (8007890 <HAL_PCD_MspInit+0xa0>)
 8007862:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007864:	4a0a      	ldr	r2, [pc, #40]	@ (8007890 <HAL_PCD_MspInit+0xa0>)
 8007866:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800786a:	6453      	str	r3, [r2, #68]	@ 0x44
 800786c:	4b08      	ldr	r3, [pc, #32]	@ (8007890 <HAL_PCD_MspInit+0xa0>)
 800786e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007870:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007874:	60fb      	str	r3, [r7, #12]
 8007876:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007878:	2200      	movs	r2, #0
 800787a:	2100      	movs	r1, #0
 800787c:	2043      	movs	r0, #67	@ 0x43
 800787e:	f7f9 fa44 	bl	8000d0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007882:	2043      	movs	r0, #67	@ 0x43
 8007884:	f7f9 fa5d 	bl	8000d42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007888:	bf00      	nop
 800788a:	3728      	adds	r7, #40	@ 0x28
 800788c:	46bd      	mov	sp, r7
 800788e:	bd80      	pop	{r7, pc}
 8007890:	40023800 	.word	0x40023800
 8007894:	40020000 	.word	0x40020000

08007898 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b082      	sub	sp, #8
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80078ac:	4619      	mov	r1, r3
 80078ae:	4610      	mov	r0, r2
 80078b0:	f7fe fb55 	bl	8005f5e <USBD_LL_SetupStage>
}
 80078b4:	bf00      	nop
 80078b6:	3708      	adds	r7, #8
 80078b8:	46bd      	mov	sp, r7
 80078ba:	bd80      	pop	{r7, pc}

080078bc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b082      	sub	sp, #8
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
 80078c4:	460b      	mov	r3, r1
 80078c6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80078ce:	78fa      	ldrb	r2, [r7, #3]
 80078d0:	6879      	ldr	r1, [r7, #4]
 80078d2:	4613      	mov	r3, r2
 80078d4:	00db      	lsls	r3, r3, #3
 80078d6:	4413      	add	r3, r2
 80078d8:	009b      	lsls	r3, r3, #2
 80078da:	440b      	add	r3, r1
 80078dc:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80078e0:	681a      	ldr	r2, [r3, #0]
 80078e2:	78fb      	ldrb	r3, [r7, #3]
 80078e4:	4619      	mov	r1, r3
 80078e6:	f7fe fb8f 	bl	8006008 <USBD_LL_DataOutStage>
}
 80078ea:	bf00      	nop
 80078ec:	3708      	adds	r7, #8
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}

080078f2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078f2:	b580      	push	{r7, lr}
 80078f4:	b082      	sub	sp, #8
 80078f6:	af00      	add	r7, sp, #0
 80078f8:	6078      	str	r0, [r7, #4]
 80078fa:	460b      	mov	r3, r1
 80078fc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8007904:	78fa      	ldrb	r2, [r7, #3]
 8007906:	6879      	ldr	r1, [r7, #4]
 8007908:	4613      	mov	r3, r2
 800790a:	00db      	lsls	r3, r3, #3
 800790c:	4413      	add	r3, r2
 800790e:	009b      	lsls	r3, r3, #2
 8007910:	440b      	add	r3, r1
 8007912:	3320      	adds	r3, #32
 8007914:	681a      	ldr	r2, [r3, #0]
 8007916:	78fb      	ldrb	r3, [r7, #3]
 8007918:	4619      	mov	r1, r3
 800791a:	f7fe fc28 	bl	800616e <USBD_LL_DataInStage>
}
 800791e:	bf00      	nop
 8007920:	3708      	adds	r7, #8
 8007922:	46bd      	mov	sp, r7
 8007924:	bd80      	pop	{r7, pc}

08007926 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007926:	b580      	push	{r7, lr}
 8007928:	b082      	sub	sp, #8
 800792a:	af00      	add	r7, sp, #0
 800792c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007934:	4618      	mov	r0, r3
 8007936:	f7fe fd62 	bl	80063fe <USBD_LL_SOF>
}
 800793a:	bf00      	nop
 800793c:	3708      	adds	r7, #8
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}

08007942 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007942:	b580      	push	{r7, lr}
 8007944:	b084      	sub	sp, #16
 8007946:	af00      	add	r7, sp, #0
 8007948:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800794a:	2301      	movs	r3, #1
 800794c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	79db      	ldrb	r3, [r3, #7]
 8007952:	2b02      	cmp	r3, #2
 8007954:	d001      	beq.n	800795a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007956:	f7f8 feb7 	bl	80006c8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007960:	7bfa      	ldrb	r2, [r7, #15]
 8007962:	4611      	mov	r1, r2
 8007964:	4618      	mov	r0, r3
 8007966:	f7fe fd06 	bl	8006376 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007970:	4618      	mov	r0, r3
 8007972:	f7fe fcae 	bl	80062d2 <USBD_LL_Reset>
}
 8007976:	bf00      	nop
 8007978:	3710      	adds	r7, #16
 800797a:	46bd      	mov	sp, r7
 800797c:	bd80      	pop	{r7, pc}
	...

08007980 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b082      	sub	sp, #8
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800798e:	4618      	mov	r0, r3
 8007990:	f7fe fd01 	bl	8006396 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	687a      	ldr	r2, [r7, #4]
 80079a0:	6812      	ldr	r2, [r2, #0]
 80079a2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80079a6:	f043 0301 	orr.w	r3, r3, #1
 80079aa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	7adb      	ldrb	r3, [r3, #11]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d005      	beq.n	80079c0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80079b4:	4b04      	ldr	r3, [pc, #16]	@ (80079c8 <HAL_PCD_SuspendCallback+0x48>)
 80079b6:	691b      	ldr	r3, [r3, #16]
 80079b8:	4a03      	ldr	r2, [pc, #12]	@ (80079c8 <HAL_PCD_SuspendCallback+0x48>)
 80079ba:	f043 0306 	orr.w	r3, r3, #6
 80079be:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80079c0:	bf00      	nop
 80079c2:	3708      	adds	r7, #8
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bd80      	pop	{r7, pc}
 80079c8:	e000ed00 	.word	0xe000ed00

080079cc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b082      	sub	sp, #8
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80079da:	4618      	mov	r0, r3
 80079dc:	f7fe fcf7 	bl	80063ce <USBD_LL_Resume>
}
 80079e0:	bf00      	nop
 80079e2:	3708      	adds	r7, #8
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd80      	pop	{r7, pc}

080079e8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b082      	sub	sp, #8
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
 80079f0:	460b      	mov	r3, r1
 80079f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80079fa:	78fa      	ldrb	r2, [r7, #3]
 80079fc:	4611      	mov	r1, r2
 80079fe:	4618      	mov	r0, r3
 8007a00:	f7fe fd4f 	bl	80064a2 <USBD_LL_IsoOUTIncomplete>
}
 8007a04:	bf00      	nop
 8007a06:	3708      	adds	r7, #8
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bd80      	pop	{r7, pc}

08007a0c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b082      	sub	sp, #8
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
 8007a14:	460b      	mov	r3, r1
 8007a16:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007a1e:	78fa      	ldrb	r2, [r7, #3]
 8007a20:	4611      	mov	r1, r2
 8007a22:	4618      	mov	r0, r3
 8007a24:	f7fe fd0b 	bl	800643e <USBD_LL_IsoINIncomplete>
}
 8007a28:	bf00      	nop
 8007a2a:	3708      	adds	r7, #8
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}

08007a30 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b082      	sub	sp, #8
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007a3e:	4618      	mov	r0, r3
 8007a40:	f7fe fd61 	bl	8006506 <USBD_LL_DevConnected>
}
 8007a44:	bf00      	nop
 8007a46:	3708      	adds	r7, #8
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}

08007a4c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b082      	sub	sp, #8
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	f7fe fd5e 	bl	800651c <USBD_LL_DevDisconnected>
}
 8007a60:	bf00      	nop
 8007a62:	3708      	adds	r7, #8
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bd80      	pop	{r7, pc}

08007a68 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b082      	sub	sp, #8
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	781b      	ldrb	r3, [r3, #0]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d13c      	bne.n	8007af2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007a78:	4a20      	ldr	r2, [pc, #128]	@ (8007afc <USBD_LL_Init+0x94>)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	4a1e      	ldr	r2, [pc, #120]	@ (8007afc <USBD_LL_Init+0x94>)
 8007a84:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007a88:	4b1c      	ldr	r3, [pc, #112]	@ (8007afc <USBD_LL_Init+0x94>)
 8007a8a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8007a8e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007a90:	4b1a      	ldr	r3, [pc, #104]	@ (8007afc <USBD_LL_Init+0x94>)
 8007a92:	2204      	movs	r2, #4
 8007a94:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007a96:	4b19      	ldr	r3, [pc, #100]	@ (8007afc <USBD_LL_Init+0x94>)
 8007a98:	2202      	movs	r2, #2
 8007a9a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007a9c:	4b17      	ldr	r3, [pc, #92]	@ (8007afc <USBD_LL_Init+0x94>)
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007aa2:	4b16      	ldr	r3, [pc, #88]	@ (8007afc <USBD_LL_Init+0x94>)
 8007aa4:	2202      	movs	r2, #2
 8007aa6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007aa8:	4b14      	ldr	r3, [pc, #80]	@ (8007afc <USBD_LL_Init+0x94>)
 8007aaa:	2200      	movs	r2, #0
 8007aac:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007aae:	4b13      	ldr	r3, [pc, #76]	@ (8007afc <USBD_LL_Init+0x94>)
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007ab4:	4b11      	ldr	r3, [pc, #68]	@ (8007afc <USBD_LL_Init+0x94>)
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007aba:	4b10      	ldr	r3, [pc, #64]	@ (8007afc <USBD_LL_Init+0x94>)
 8007abc:	2200      	movs	r2, #0
 8007abe:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007ac0:	4b0e      	ldr	r3, [pc, #56]	@ (8007afc <USBD_LL_Init+0x94>)
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007ac6:	480d      	ldr	r0, [pc, #52]	@ (8007afc <USBD_LL_Init+0x94>)
 8007ac8:	f7f9 fb0a 	bl	80010e0 <HAL_PCD_Init>
 8007acc:	4603      	mov	r3, r0
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d001      	beq.n	8007ad6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007ad2:	f7f8 fdf9 	bl	80006c8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007ad6:	2180      	movs	r1, #128	@ 0x80
 8007ad8:	4808      	ldr	r0, [pc, #32]	@ (8007afc <USBD_LL_Init+0x94>)
 8007ada:	f7fa fd34 	bl	8002546 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007ade:	2240      	movs	r2, #64	@ 0x40
 8007ae0:	2100      	movs	r1, #0
 8007ae2:	4806      	ldr	r0, [pc, #24]	@ (8007afc <USBD_LL_Init+0x94>)
 8007ae4:	f7fa fce8 	bl	80024b8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007ae8:	2280      	movs	r2, #128	@ 0x80
 8007aea:	2101      	movs	r1, #1
 8007aec:	4803      	ldr	r0, [pc, #12]	@ (8007afc <USBD_LL_Init+0x94>)
 8007aee:	f7fa fce3 	bl	80024b8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007af2:	2300      	movs	r3, #0
}
 8007af4:	4618      	mov	r0, r3
 8007af6:	3708      	adds	r7, #8
 8007af8:	46bd      	mov	sp, r7
 8007afa:	bd80      	pop	{r7, pc}
 8007afc:	200016a0 	.word	0x200016a0

08007b00 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b084      	sub	sp, #16
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b08:	2300      	movs	r3, #0
 8007b0a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007b16:	4618      	mov	r0, r3
 8007b18:	f7f9 fbf1 	bl	80012fe <HAL_PCD_Start>
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b20:	7bfb      	ldrb	r3, [r7, #15]
 8007b22:	4618      	mov	r0, r3
 8007b24:	f000 f942 	bl	8007dac <USBD_Get_USB_Status>
 8007b28:	4603      	mov	r3, r0
 8007b2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b2c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b2e:	4618      	mov	r0, r3
 8007b30:	3710      	adds	r7, #16
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd80      	pop	{r7, pc}

08007b36 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007b36:	b580      	push	{r7, lr}
 8007b38:	b084      	sub	sp, #16
 8007b3a:	af00      	add	r7, sp, #0
 8007b3c:	6078      	str	r0, [r7, #4]
 8007b3e:	4608      	mov	r0, r1
 8007b40:	4611      	mov	r1, r2
 8007b42:	461a      	mov	r2, r3
 8007b44:	4603      	mov	r3, r0
 8007b46:	70fb      	strb	r3, [r7, #3]
 8007b48:	460b      	mov	r3, r1
 8007b4a:	70bb      	strb	r3, [r7, #2]
 8007b4c:	4613      	mov	r3, r2
 8007b4e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b50:	2300      	movs	r3, #0
 8007b52:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b54:	2300      	movs	r3, #0
 8007b56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007b5e:	78bb      	ldrb	r3, [r7, #2]
 8007b60:	883a      	ldrh	r2, [r7, #0]
 8007b62:	78f9      	ldrb	r1, [r7, #3]
 8007b64:	f7fa f8c5 	bl	8001cf2 <HAL_PCD_EP_Open>
 8007b68:	4603      	mov	r3, r0
 8007b6a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b6c:	7bfb      	ldrb	r3, [r7, #15]
 8007b6e:	4618      	mov	r0, r3
 8007b70:	f000 f91c 	bl	8007dac <USBD_Get_USB_Status>
 8007b74:	4603      	mov	r3, r0
 8007b76:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b78:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	3710      	adds	r7, #16
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bd80      	pop	{r7, pc}

08007b82 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b82:	b580      	push	{r7, lr}
 8007b84:	b084      	sub	sp, #16
 8007b86:	af00      	add	r7, sp, #0
 8007b88:	6078      	str	r0, [r7, #4]
 8007b8a:	460b      	mov	r3, r1
 8007b8c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b92:	2300      	movs	r3, #0
 8007b94:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007b9c:	78fa      	ldrb	r2, [r7, #3]
 8007b9e:	4611      	mov	r1, r2
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	f7fa f90e 	bl	8001dc2 <HAL_PCD_EP_Close>
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007baa:	7bfb      	ldrb	r3, [r7, #15]
 8007bac:	4618      	mov	r0, r3
 8007bae:	f000 f8fd 	bl	8007dac <USBD_Get_USB_Status>
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007bb6:	7bbb      	ldrb	r3, [r7, #14]
}
 8007bb8:	4618      	mov	r0, r3
 8007bba:	3710      	adds	r7, #16
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	bd80      	pop	{r7, pc}

08007bc0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b084      	sub	sp, #16
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
 8007bc8:	460b      	mov	r3, r1
 8007bca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007bcc:	2300      	movs	r3, #0
 8007bce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007bda:	78fa      	ldrb	r2, [r7, #3]
 8007bdc:	4611      	mov	r1, r2
 8007bde:	4618      	mov	r0, r3
 8007be0:	f7fa f9c6 	bl	8001f70 <HAL_PCD_EP_SetStall>
 8007be4:	4603      	mov	r3, r0
 8007be6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007be8:	7bfb      	ldrb	r3, [r7, #15]
 8007bea:	4618      	mov	r0, r3
 8007bec:	f000 f8de 	bl	8007dac <USBD_Get_USB_Status>
 8007bf0:	4603      	mov	r3, r0
 8007bf2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007bf4:	7bbb      	ldrb	r3, [r7, #14]
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	3710      	adds	r7, #16
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}

08007bfe <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007bfe:	b580      	push	{r7, lr}
 8007c00:	b084      	sub	sp, #16
 8007c02:	af00      	add	r7, sp, #0
 8007c04:	6078      	str	r0, [r7, #4]
 8007c06:	460b      	mov	r3, r1
 8007c08:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007c18:	78fa      	ldrb	r2, [r7, #3]
 8007c1a:	4611      	mov	r1, r2
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	f7fa fa0a 	bl	8002036 <HAL_PCD_EP_ClrStall>
 8007c22:	4603      	mov	r3, r0
 8007c24:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c26:	7bfb      	ldrb	r3, [r7, #15]
 8007c28:	4618      	mov	r0, r3
 8007c2a:	f000 f8bf 	bl	8007dac <USBD_Get_USB_Status>
 8007c2e:	4603      	mov	r3, r0
 8007c30:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c32:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c34:	4618      	mov	r0, r3
 8007c36:	3710      	adds	r7, #16
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	bd80      	pop	{r7, pc}

08007c3c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	b085      	sub	sp, #20
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
 8007c44:	460b      	mov	r3, r1
 8007c46:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007c4e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007c50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	da0b      	bge.n	8007c70 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007c58:	78fb      	ldrb	r3, [r7, #3]
 8007c5a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007c5e:	68f9      	ldr	r1, [r7, #12]
 8007c60:	4613      	mov	r3, r2
 8007c62:	00db      	lsls	r3, r3, #3
 8007c64:	4413      	add	r3, r2
 8007c66:	009b      	lsls	r3, r3, #2
 8007c68:	440b      	add	r3, r1
 8007c6a:	3316      	adds	r3, #22
 8007c6c:	781b      	ldrb	r3, [r3, #0]
 8007c6e:	e00b      	b.n	8007c88 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007c70:	78fb      	ldrb	r3, [r7, #3]
 8007c72:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007c76:	68f9      	ldr	r1, [r7, #12]
 8007c78:	4613      	mov	r3, r2
 8007c7a:	00db      	lsls	r3, r3, #3
 8007c7c:	4413      	add	r3, r2
 8007c7e:	009b      	lsls	r3, r3, #2
 8007c80:	440b      	add	r3, r1
 8007c82:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8007c86:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	3714      	adds	r7, #20
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c92:	4770      	bx	lr

08007c94 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b084      	sub	sp, #16
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
 8007c9c:	460b      	mov	r3, r1
 8007c9e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007cae:	78fa      	ldrb	r2, [r7, #3]
 8007cb0:	4611      	mov	r1, r2
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	f7f9 fff9 	bl	8001caa <HAL_PCD_SetAddress>
 8007cb8:	4603      	mov	r3, r0
 8007cba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007cbc:	7bfb      	ldrb	r3, [r7, #15]
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	f000 f874 	bl	8007dac <USBD_Get_USB_Status>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007cc8:	7bbb      	ldrb	r3, [r7, #14]
}
 8007cca:	4618      	mov	r0, r3
 8007ccc:	3710      	adds	r7, #16
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	bd80      	pop	{r7, pc}

08007cd2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007cd2:	b580      	push	{r7, lr}
 8007cd4:	b086      	sub	sp, #24
 8007cd6:	af00      	add	r7, sp, #0
 8007cd8:	60f8      	str	r0, [r7, #12]
 8007cda:	607a      	str	r2, [r7, #4]
 8007cdc:	603b      	str	r3, [r7, #0]
 8007cde:	460b      	mov	r3, r1
 8007ce0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007cf0:	7af9      	ldrb	r1, [r7, #11]
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	687a      	ldr	r2, [r7, #4]
 8007cf6:	f7fa f901 	bl	8001efc <HAL_PCD_EP_Transmit>
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007cfe:	7dfb      	ldrb	r3, [r7, #23]
 8007d00:	4618      	mov	r0, r3
 8007d02:	f000 f853 	bl	8007dac <USBD_Get_USB_Status>
 8007d06:	4603      	mov	r3, r0
 8007d08:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007d0a:	7dbb      	ldrb	r3, [r7, #22]
}
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	3718      	adds	r7, #24
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bd80      	pop	{r7, pc}

08007d14 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b086      	sub	sp, #24
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	60f8      	str	r0, [r7, #12]
 8007d1c:	607a      	str	r2, [r7, #4]
 8007d1e:	603b      	str	r3, [r7, #0]
 8007d20:	460b      	mov	r3, r1
 8007d22:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d24:	2300      	movs	r3, #0
 8007d26:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d28:	2300      	movs	r3, #0
 8007d2a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007d32:	7af9      	ldrb	r1, [r7, #11]
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	687a      	ldr	r2, [r7, #4]
 8007d38:	f7fa f88d 	bl	8001e56 <HAL_PCD_EP_Receive>
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d40:	7dfb      	ldrb	r3, [r7, #23]
 8007d42:	4618      	mov	r0, r3
 8007d44:	f000 f832 	bl	8007dac <USBD_Get_USB_Status>
 8007d48:	4603      	mov	r3, r0
 8007d4a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007d4c:	7dbb      	ldrb	r3, [r7, #22]
}
 8007d4e:	4618      	mov	r0, r3
 8007d50:	3718      	adds	r7, #24
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd80      	pop	{r7, pc}

08007d56 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d56:	b580      	push	{r7, lr}
 8007d58:	b082      	sub	sp, #8
 8007d5a:	af00      	add	r7, sp, #0
 8007d5c:	6078      	str	r0, [r7, #4]
 8007d5e:	460b      	mov	r3, r1
 8007d60:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007d68:	78fa      	ldrb	r2, [r7, #3]
 8007d6a:	4611      	mov	r1, r2
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	f7fa f8ad 	bl	8001ecc <HAL_PCD_EP_GetRxCount>
 8007d72:	4603      	mov	r3, r0
}
 8007d74:	4618      	mov	r0, r3
 8007d76:	3708      	adds	r7, #8
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bd80      	pop	{r7, pc}

08007d7c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007d7c:	b480      	push	{r7}
 8007d7e:	b083      	sub	sp, #12
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007d84:	4b03      	ldr	r3, [pc, #12]	@ (8007d94 <USBD_static_malloc+0x18>)
}
 8007d86:	4618      	mov	r0, r3
 8007d88:	370c      	adds	r7, #12
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d90:	4770      	bx	lr
 8007d92:	bf00      	nop
 8007d94:	20001b84 	.word	0x20001b84

08007d98 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007d98:	b480      	push	{r7}
 8007d9a:	b083      	sub	sp, #12
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]

}
 8007da0:	bf00      	nop
 8007da2:	370c      	adds	r7, #12
 8007da4:	46bd      	mov	sp, r7
 8007da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007daa:	4770      	bx	lr

08007dac <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007dac:	b480      	push	{r7}
 8007dae:	b085      	sub	sp, #20
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	4603      	mov	r3, r0
 8007db4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007db6:	2300      	movs	r3, #0
 8007db8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007dba:	79fb      	ldrb	r3, [r7, #7]
 8007dbc:	2b03      	cmp	r3, #3
 8007dbe:	d817      	bhi.n	8007df0 <USBD_Get_USB_Status+0x44>
 8007dc0:	a201      	add	r2, pc, #4	@ (adr r2, 8007dc8 <USBD_Get_USB_Status+0x1c>)
 8007dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dc6:	bf00      	nop
 8007dc8:	08007dd9 	.word	0x08007dd9
 8007dcc:	08007ddf 	.word	0x08007ddf
 8007dd0:	08007de5 	.word	0x08007de5
 8007dd4:	08007deb 	.word	0x08007deb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007dd8:	2300      	movs	r3, #0
 8007dda:	73fb      	strb	r3, [r7, #15]
    break;
 8007ddc:	e00b      	b.n	8007df6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007dde:	2303      	movs	r3, #3
 8007de0:	73fb      	strb	r3, [r7, #15]
    break;
 8007de2:	e008      	b.n	8007df6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007de4:	2301      	movs	r3, #1
 8007de6:	73fb      	strb	r3, [r7, #15]
    break;
 8007de8:	e005      	b.n	8007df6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007dea:	2303      	movs	r3, #3
 8007dec:	73fb      	strb	r3, [r7, #15]
    break;
 8007dee:	e002      	b.n	8007df6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007df0:	2303      	movs	r3, #3
 8007df2:	73fb      	strb	r3, [r7, #15]
    break;
 8007df4:	bf00      	nop
  }
  return usb_status;
 8007df6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007df8:	4618      	mov	r0, r3
 8007dfa:	3714      	adds	r7, #20
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e02:	4770      	bx	lr

08007e04 <memset>:
 8007e04:	4402      	add	r2, r0
 8007e06:	4603      	mov	r3, r0
 8007e08:	4293      	cmp	r3, r2
 8007e0a:	d100      	bne.n	8007e0e <memset+0xa>
 8007e0c:	4770      	bx	lr
 8007e0e:	f803 1b01 	strb.w	r1, [r3], #1
 8007e12:	e7f9      	b.n	8007e08 <memset+0x4>

08007e14 <__libc_init_array>:
 8007e14:	b570      	push	{r4, r5, r6, lr}
 8007e16:	4d0d      	ldr	r5, [pc, #52]	@ (8007e4c <__libc_init_array+0x38>)
 8007e18:	4c0d      	ldr	r4, [pc, #52]	@ (8007e50 <__libc_init_array+0x3c>)
 8007e1a:	1b64      	subs	r4, r4, r5
 8007e1c:	10a4      	asrs	r4, r4, #2
 8007e1e:	2600      	movs	r6, #0
 8007e20:	42a6      	cmp	r6, r4
 8007e22:	d109      	bne.n	8007e38 <__libc_init_array+0x24>
 8007e24:	4d0b      	ldr	r5, [pc, #44]	@ (8007e54 <__libc_init_array+0x40>)
 8007e26:	4c0c      	ldr	r4, [pc, #48]	@ (8007e58 <__libc_init_array+0x44>)
 8007e28:	f000 f818 	bl	8007e5c <_init>
 8007e2c:	1b64      	subs	r4, r4, r5
 8007e2e:	10a4      	asrs	r4, r4, #2
 8007e30:	2600      	movs	r6, #0
 8007e32:	42a6      	cmp	r6, r4
 8007e34:	d105      	bne.n	8007e42 <__libc_init_array+0x2e>
 8007e36:	bd70      	pop	{r4, r5, r6, pc}
 8007e38:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e3c:	4798      	blx	r3
 8007e3e:	3601      	adds	r6, #1
 8007e40:	e7ee      	b.n	8007e20 <__libc_init_array+0xc>
 8007e42:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e46:	4798      	blx	r3
 8007e48:	3601      	adds	r6, #1
 8007e4a:	e7f2      	b.n	8007e32 <__libc_init_array+0x1e>
 8007e4c:	08007edc 	.word	0x08007edc
 8007e50:	08007edc 	.word	0x08007edc
 8007e54:	08007edc 	.word	0x08007edc
 8007e58:	08007ee0 	.word	0x08007ee0

08007e5c <_init>:
 8007e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e5e:	bf00      	nop
 8007e60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e62:	bc08      	pop	{r3}
 8007e64:	469e      	mov	lr, r3
 8007e66:	4770      	bx	lr

08007e68 <_fini>:
 8007e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e6a:	bf00      	nop
 8007e6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e6e:	bc08      	pop	{r3}
 8007e70:	469e      	mov	lr, r3
 8007e72:	4770      	bx	lr
