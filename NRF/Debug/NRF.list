
NRF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b9c4  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  0800bb5c  0800bb5c  0000cb5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bc28  0800bc28  0000d150  2**0
                  CONTENTS
  4 .ARM          00000008  0800bc28  0800bc28  0000cc28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bc30  0800bc30  0000d150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800bc30  0800bc30  0000cc30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  0800bc38  0800bc38  0000cc38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000150  20000000  0800bc40  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002058  20000150  0800bd90  0000d150  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200021a8  0800bd90  0000d1a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d150  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021f72  00000000  00000000  0000d180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000593a  00000000  00000000  0002f0f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b80  00000000  00000000  00034a30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014f3  00000000  00000000  000365b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020a2f  00000000  00000000  00037aa3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000247db  00000000  00000000  000584d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a5f18  00000000  00000000  0007ccad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00122bc5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000761c  00000000  00000000  00122c08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  0012a224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000150 	.word	0x20000150
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800bb44 	.word	0x0800bb44

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000154 	.word	0x20000154
 80001d4:	0800bb44 	.word	0x0800bb44

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <HAL_ADC_ConvHalfCpltCallback>:
uint8_t buffer[] = "Hello World\n";

#define ADC_BUF_LEN 6
uint32_t _adcBuf[ADC_BUF_LEN];

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 80004c8:	b480      	push	{r7}
 80004ca:	b083      	sub	sp, #12
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
  //HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
}
 80004d0:	bf00      	nop
 80004d2:	370c      	adds	r7, #12
 80004d4:	46bd      	mov	sp, r7
 80004d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004da:	4770      	bx	lr

080004dc <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 80004dc:	b480      	push	{r7}
 80004de:	b083      	sub	sp, #12
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
  //HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
}
 80004e4:	bf00      	nop
 80004e6:	370c      	adds	r7, #12
 80004e8:	46bd      	mov	sp, r7
 80004ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ee:	4770      	bx	lr

080004f0 <HAL_GPIO_EXTI_Callback>:

#define IS_TX

extern void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b082      	sub	sp, #8
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	4603      	mov	r3, r0
 80004f8:	80fb      	strh	r3, [r7, #6]
	Interrupts::Invoke_GPIO_EXTI(GPIO_Pin);
 80004fa:	88fb      	ldrh	r3, [r7, #6]
 80004fc:	4618      	mov	r0, r3
 80004fe:	f000 f8f9 	bl	80006f4 <_ZN10Interrupts16Invoke_GPIO_EXTIEt>
			tmDevice.writeHexTo(2, 2, nRF24_payload[2]);
			tmDevice.writeHexTo(0, 2, nRF24_payload[3]);
		//}
    }
#endif
}
 8000502:	bf00      	nop
 8000504:	3708      	adds	r7, #8
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}

0800050a <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800050a:	b480      	push	{r7}
 800050c:	b083      	sub	sp, #12
 800050e:	af00      	add	r7, sp, #0
 8000510:	6078      	str	r0, [r7, #4]
	//CDC_Transmit_FS(RX_BUF, sizeof(RX_BUF));
}
 8000512:	bf00      	nop
 8000514:	370c      	adds	r7, #12
 8000516:	46bd      	mov	sp, r7
 8000518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051c:	4770      	bx	lr

0800051e <_Z22onButtonChangedHandlerP3Joy>:
	}

}

void onButtonChangedHandler(Joy* instance)
{
 800051e:	b480      	push	{r7}
 8000520:	b083      	sub	sp, #12
 8000522:	af00      	add	r7, sp, #0
 8000524:	6078      	str	r0, [r7, #4]
	//CDC_Transmit_FS(buffer, sizeof(buffer));
}
 8000526:	bf00      	nop
 8000528:	370c      	adds	r7, #12
 800052a:	46bd      	mov	sp, r7
 800052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000530:	4770      	bx	lr
	...

08000534 <_Z12EventLoopCppv>:
void EventLoopCpp() {
 8000534:	b590      	push	{r4, r7, lr}
 8000536:	b085      	sub	sp, #20
 8000538:	af02      	add	r7, sp, #8

	tmDevice.test();
 800053a:	482e      	ldr	r0, [pc, #184]	@ (80005f4 <_Z12EventLoopCppv+0xc0>)
 800053c:	f000 fe36 	bl	80011ac <_ZN6Tm16384testEv>
	nrfDevice.Init();
 8000540:	482d      	ldr	r0, [pc, #180]	@ (80005f8 <_Z12EventLoopCppv+0xc4>)
 8000542:	f000 fb92 	bl	8000c6a <_ZN6NRF24L4InitEv>
	nrfDevice.Check();
 8000546:	482c      	ldr	r0, [pc, #176]	@ (80005f8 <_Z12EventLoopCppv+0xc4>)
 8000548:	f000 fbf4 	bl	8000d34 <_ZN6NRF24L5CheckEv>

#ifdef IS_TX
	uint32_t count = 0;
 800054c:	2300      	movs	r3, #0
 800054e:	607b      	str	r3, [r7, #4]
	NRF24L::TXResult tx_res;
	nrfDevice.InitTX();
 8000550:	4829      	ldr	r0, [pc, #164]	@ (80005f8 <_Z12EventLoopCppv+0xc4>)
 8000552:	f000 fdb7 	bl	80010c4 <_ZN6NRF24L6InitTXEv>

	myJoy = new Joy(&hadc1, &htim2, JOY_BTN_GPIO_Port, JOY_BTN_Pin); // only tx uses joystick
 8000556:	2024      	movs	r0, #36	@ 0x24
 8000558:	f00b f940 	bl	800b7dc <_Znwj>
 800055c:	4603      	mov	r3, r0
 800055e:	461c      	mov	r4, r3
 8000560:	2301      	movs	r3, #1
 8000562:	9300      	str	r3, [sp, #0]
 8000564:	4b25      	ldr	r3, [pc, #148]	@ (80005fc <_Z12EventLoopCppv+0xc8>)
 8000566:	4a26      	ldr	r2, [pc, #152]	@ (8000600 <_Z12EventLoopCppv+0xcc>)
 8000568:	4926      	ldr	r1, [pc, #152]	@ (8000604 <_Z12EventLoopCppv+0xd0>)
 800056a:	4620      	mov	r0, r4
 800056c:	f000 f902 	bl	8000774 <_ZN3JoyC1EP17ADC_HandleTypeDefP17TIM_HandleTypeDefP12GPIO_TypeDeft>
 8000570:	4b25      	ldr	r3, [pc, #148]	@ (8000608 <_Z12EventLoopCppv+0xd4>)
 8000572:	601c      	str	r4, [r3, #0]
	myJoy->attachOnButtonChanged(onButtonChangedHandler);
 8000574:	4b24      	ldr	r3, [pc, #144]	@ (8000608 <_Z12EventLoopCppv+0xd4>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4924      	ldr	r1, [pc, #144]	@ (800060c <_Z12EventLoopCppv+0xd8>)
 800057a:	4618      	mov	r0, r3
 800057c:	f000 f96c 	bl	8000858 <_ZN3Joy21attachOnButtonChangedEPFvPS_E>
#else
	nrfDevice.InitRX(nRF24_payload, payload_length);
#endif

	HAL_Delay(100);
 8000580:	2064      	movs	r0, #100	@ 0x64
 8000582:	f001 fd29 	bl	8001fd8 <HAL_Delay>
//		for (int i = 0; i < 8; i++) {
//			bool val = (btns & (1 << i)) > 0 ? true : false;
//			tmDevice.writeLed(i, val);
//		}
#ifdef IS_TX
	nRF24_payload[0] = count & 0xFF;
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	b2da      	uxtb	r2, r3
 800058a:	4b21      	ldr	r3, [pc, #132]	@ (8000610 <_Z12EventLoopCppv+0xdc>)
 800058c:	701a      	strb	r2, [r3, #0]
	nRF24_payload[1] = (count >> 8) & 0xFF;
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	0a1b      	lsrs	r3, r3, #8
 8000592:	b2da      	uxtb	r2, r3
 8000594:	4b1e      	ldr	r3, [pc, #120]	@ (8000610 <_Z12EventLoopCppv+0xdc>)
 8000596:	705a      	strb	r2, [r3, #1]
	nRF24_payload[2] = (count >> 16) & 0xFF;
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	0c1b      	lsrs	r3, r3, #16
 800059c:	b2da      	uxtb	r2, r3
 800059e:	4b1c      	ldr	r3, [pc, #112]	@ (8000610 <_Z12EventLoopCppv+0xdc>)
 80005a0:	709a      	strb	r2, [r3, #2]
	nRF24_payload[3] = (count >> 24) & 0xFF;
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	0e1b      	lsrs	r3, r3, #24
 80005a6:	b2da      	uxtb	r2, r3
 80005a8:	4b19      	ldr	r3, [pc, #100]	@ (8000610 <_Z12EventLoopCppv+0xdc>)
 80005aa:	70da      	strb	r2, [r3, #3]
	nRF24_payload[4] = 0xAA;
 80005ac:	4b18      	ldr	r3, [pc, #96]	@ (8000610 <_Z12EventLoopCppv+0xdc>)
 80005ae:	22aa      	movs	r2, #170	@ 0xaa
 80005b0:	711a      	strb	r2, [r3, #4]
	// Transmit a packet
	tx_res = nrfDevice.TransmitPacket(nRF24_payload, payload_length);
 80005b2:	4b18      	ldr	r3, [pc, #96]	@ (8000614 <_Z12EventLoopCppv+0xe0>)
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	461a      	mov	r2, r3
 80005b8:	4915      	ldr	r1, [pc, #84]	@ (8000610 <_Z12EventLoopCppv+0xdc>)
 80005ba:	480f      	ldr	r0, [pc, #60]	@ (80005f8 <_Z12EventLoopCppv+0xc4>)
 80005bc:	f000 fa50 	bl	8000a60 <_ZN6NRF24L14TransmitPacketEPhh>
 80005c0:	4603      	mov	r3, r0
 80005c2:	70fb      	strb	r3, [r7, #3]
	switch (tx_res) {
 80005c4:	78fb      	ldrb	r3, [r7, #3]
 80005c6:	2b03      	cmp	r3, #3
 80005c8:	d006      	beq.n	80005d8 <_Z12EventLoopCppv+0xa4>
 80005ca:	2b03      	cmp	r3, #3
 80005cc:	dc06      	bgt.n	80005dc <_Z12EventLoopCppv+0xa8>
 80005ce:	2b01      	cmp	r3, #1
 80005d0:	d006      	beq.n	80005e0 <_Z12EventLoopCppv+0xac>
 80005d2:	2b02      	cmp	r3, #2
 80005d4:	d006      	beq.n	80005e4 <_Z12EventLoopCppv+0xb0>
		case NRF24L::TX_TIMEOUT:
			break;
		case NRF24L::TX_MAXRT:
			break;
		default:
			break;
 80005d6:	e001      	b.n	80005dc <_Z12EventLoopCppv+0xa8>
			break;
 80005d8:	bf00      	nop
 80005da:	e004      	b.n	80005e6 <_Z12EventLoopCppv+0xb2>
			break;
 80005dc:	bf00      	nop
 80005de:	e002      	b.n	80005e6 <_Z12EventLoopCppv+0xb2>
			break;
 80005e0:	bf00      	nop
 80005e2:	e000      	b.n	80005e6 <_Z12EventLoopCppv+0xb2>
			break;
 80005e4:	bf00      	nop
	}
	count++;
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	3301      	adds	r3, #1
 80005ea:	607b      	str	r3, [r7, #4]
	HAL_Delay(1);
 80005ec:	2001      	movs	r0, #1
 80005ee:	f001 fcf3 	bl	8001fd8 <HAL_Delay>
	nRF24_payload[0] = count & 0xFF;
 80005f2:	e7c8      	b.n	8000586 <_Z12EventLoopCppv+0x52>
 80005f4:	20000170 	.word	0x20000170
 80005f8:	200001ac 	.word	0x200001ac
 80005fc:	40020000 	.word	0x40020000
 8000600:	200003e4 	.word	0x200003e4
 8000604:	20000288 	.word	0x20000288
 8000608:	2000016c 	.word	0x2000016c
 800060c:	0800051f 	.word	0x0800051f
 8000610:	200001d0 	.word	0x200001d0
 8000614:	20000000 	.word	0x20000000

08000618 <EventLoopC>:
	}
}

// Define all C function calls from main.c below
extern "C" {
void EventLoopC() {
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
	EventLoopCpp();
 800061c:	f7ff ff8a 	bl	8000534 <_Z12EventLoopCppv>
}
 8000620:	bf00      	nop
 8000622:	bd80      	pop	{r7, pc}

08000624 <_Z41__static_initialization_and_destruction_0ii>:
}
 8000624:	b580      	push	{r7, lr}
 8000626:	b084      	sub	sp, #16
 8000628:	af02      	add	r7, sp, #8
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	6039      	str	r1, [r7, #0]
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	2b01      	cmp	r3, #1
 8000632:	d11a      	bne.n	800066a <_Z41__static_initialization_and_destruction_0ii+0x46>
 8000634:	683b      	ldr	r3, [r7, #0]
 8000636:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800063a:	4293      	cmp	r3, r2
 800063c:	d115      	bne.n	800066a <_Z41__static_initialization_and_destruction_0ii+0x46>
Tm1638 tmDevice = Tm1638(&hspi1, TM_STB_GPIO_Port, TM_STB_Pin, TM_MOSI_GPIO_Port, TM_MOSI_Pin);
 800063e:	2380      	movs	r3, #128	@ 0x80
 8000640:	9301      	str	r3, [sp, #4]
 8000642:	4b11      	ldr	r3, [pc, #68]	@ (8000688 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8000644:	9300      	str	r3, [sp, #0]
 8000646:	2340      	movs	r3, #64	@ 0x40
 8000648:	4a0f      	ldr	r2, [pc, #60]	@ (8000688 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 800064a:	4910      	ldr	r1, [pc, #64]	@ (800068c <_Z41__static_initialization_and_destruction_0ii+0x68>)
 800064c:	4810      	ldr	r0, [pc, #64]	@ (8000690 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 800064e:	f000 fd6b 	bl	8001128 <_ZN6Tm1638C1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_t>
NRF24L nrfDevice = NRF24L(&hspi2, NRF_CE_GPIO_Port, NRF_CE_Pin, NRF_CSN_GPIO_Port, NRF_CSN_Pin);
 8000652:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000656:	9301      	str	r3, [sp, #4]
 8000658:	4b0e      	ldr	r3, [pc, #56]	@ (8000694 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 800065a:	9300      	str	r3, [sp, #0]
 800065c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000660:	4a0c      	ldr	r2, [pc, #48]	@ (8000694 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8000662:	490d      	ldr	r1, [pc, #52]	@ (8000698 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8000664:	480d      	ldr	r0, [pc, #52]	@ (800069c <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8000666:	f000 f943 	bl	80008f0 <_ZN6NRF24LC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_t>
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d107      	bne.n	8000680 <_Z41__static_initialization_and_destruction_0ii+0x5c>
 8000670:	683b      	ldr	r3, [r7, #0]
 8000672:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000676:	4293      	cmp	r3, r2
 8000678:	d102      	bne.n	8000680 <_Z41__static_initialization_and_destruction_0ii+0x5c>
 800067a:	4808      	ldr	r0, [pc, #32]	@ (800069c <_Z41__static_initialization_and_destruction_0ii+0x78>)
 800067c:	f000 f970 	bl	8000960 <_ZN6NRF24LD1Ev>
}
 8000680:	bf00      	nop
 8000682:	3708      	adds	r7, #8
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	40020000 	.word	0x40020000
 800068c:	20000330 	.word	0x20000330
 8000690:	20000170 	.word	0x20000170
 8000694:	40020400 	.word	0x40020400
 8000698:	20000388 	.word	0x20000388
 800069c:	200001ac 	.word	0x200001ac

080006a0 <_GLOBAL__sub_I_led_state>:
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
 80006a4:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80006a8:	2001      	movs	r0, #1
 80006aa:	f7ff ffbb 	bl	8000624 <_Z41__static_initialization_and_destruction_0ii>
 80006ae:	bd80      	pop	{r7, pc}

080006b0 <_GLOBAL__sub_D_led_state>:
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
 80006b4:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80006b8:	2000      	movs	r0, #0
 80006ba:	f7ff ffb3 	bl	8000624 <_Z41__static_initialization_and_destruction_0ii>
 80006be:	bd80      	pop	{r7, pc}

080006c0 <_ZN10Interrupts22Add_GPIO_EXTI_CallbackEtPFvtE>:
#include <Interrupts.hpp>

GPIO_EXTI_Handler Interrupts::GPIO_EXTI_Callbacks[16] = {nullptr};

void Interrupts::Add_GPIO_EXTI_Callback(uint16_t gpioPin, GPIO_EXTI_Handler handler)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	4603      	mov	r3, r0
 80006c8:	6039      	str	r1, [r7, #0]
 80006ca:	80fb      	strh	r3, [r7, #6]
	uint8_t index = Interrupts::PinToIndex(gpioPin);
 80006cc:	88fb      	ldrh	r3, [r7, #6]
 80006ce:	4618      	mov	r0, r3
 80006d0:	f000 f832 	bl	8000738 <_ZN10Interrupts10PinToIndexEt>
 80006d4:	4603      	mov	r3, r0
 80006d6:	73fb      	strb	r3, [r7, #15]
    if (index < 16)
 80006d8:	7bfb      	ldrb	r3, [r7, #15]
 80006da:	2b0f      	cmp	r3, #15
 80006dc:	d804      	bhi.n	80006e8 <_ZN10Interrupts22Add_GPIO_EXTI_CallbackEtPFvtE+0x28>
    {
    	GPIO_EXTI_Callbacks[index] = handler;
 80006de:	7bfb      	ldrb	r3, [r7, #15]
 80006e0:	4903      	ldr	r1, [pc, #12]	@ (80006f0 <_ZN10Interrupts22Add_GPIO_EXTI_CallbackEtPFvtE+0x30>)
 80006e2:	683a      	ldr	r2, [r7, #0]
 80006e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
}
 80006e8:	bf00      	nop
 80006ea:	3710      	adds	r7, #16
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	200001f0 	.word	0x200001f0

080006f4 <_ZN10Interrupts16Invoke_GPIO_EXTIEt>:
    {
    	GPIO_EXTI_Callbacks[index] = nullptr;
    }
}
void Interrupts::Invoke_GPIO_EXTI(uint16_t gpioPin)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b084      	sub	sp, #16
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	4603      	mov	r3, r0
 80006fc:	80fb      	strh	r3, [r7, #6]
	uint8_t index = Interrupts::PinToIndex(gpioPin);
 80006fe:	88fb      	ldrh	r3, [r7, #6]
 8000700:	4618      	mov	r0, r3
 8000702:	f000 f819 	bl	8000738 <_ZN10Interrupts10PinToIndexEt>
 8000706:	4603      	mov	r3, r0
 8000708:	73fb      	strb	r3, [r7, #15]
    if (index >= 0 && index < 16 && GPIO_EXTI_Callbacks[index]) {
 800070a:	7bfb      	ldrb	r3, [r7, #15]
 800070c:	2b0f      	cmp	r3, #15
 800070e:	d80c      	bhi.n	800072a <_ZN10Interrupts16Invoke_GPIO_EXTIEt+0x36>
 8000710:	7bfb      	ldrb	r3, [r7, #15]
 8000712:	4a08      	ldr	r2, [pc, #32]	@ (8000734 <_ZN10Interrupts16Invoke_GPIO_EXTIEt+0x40>)
 8000714:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000718:	2b00      	cmp	r3, #0
 800071a:	d006      	beq.n	800072a <_ZN10Interrupts16Invoke_GPIO_EXTIEt+0x36>
    	GPIO_EXTI_Callbacks[index](gpioPin);
 800071c:	7bfb      	ldrb	r3, [r7, #15]
 800071e:	4a05      	ldr	r2, [pc, #20]	@ (8000734 <_ZN10Interrupts16Invoke_GPIO_EXTIEt+0x40>)
 8000720:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000724:	88fa      	ldrh	r2, [r7, #6]
 8000726:	4610      	mov	r0, r2
 8000728:	4798      	blx	r3
    }
}
 800072a:	bf00      	nop
 800072c:	3710      	adds	r7, #16
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	200001f0 	.word	0x200001f0

08000738 <_ZN10Interrupts10PinToIndexEt>:


uint8_t Interrupts::PinToIndex(uint16_t n) {
 8000738:	b480      	push	{r7}
 800073a:	b085      	sub	sp, #20
 800073c:	af00      	add	r7, sp, #0
 800073e:	4603      	mov	r3, r0
 8000740:	80fb      	strh	r3, [r7, #6]
	uint8_t index = 0;
 8000742:	2300      	movs	r3, #0
 8000744:	73fb      	strb	r3, [r7, #15]
    while (n >>= 1) {
 8000746:	e002      	b.n	800074e <_ZN10Interrupts10PinToIndexEt+0x16>
        index++;
 8000748:	7bfb      	ldrb	r3, [r7, #15]
 800074a:	3301      	adds	r3, #1
 800074c:	73fb      	strb	r3, [r7, #15]
    while (n >>= 1) {
 800074e:	88fb      	ldrh	r3, [r7, #6]
 8000750:	085b      	lsrs	r3, r3, #1
 8000752:	80fb      	strh	r3, [r7, #6]
 8000754:	88fb      	ldrh	r3, [r7, #6]
 8000756:	2b00      	cmp	r3, #0
 8000758:	bf14      	ite	ne
 800075a:	2301      	movne	r3, #1
 800075c:	2300      	moveq	r3, #0
 800075e:	b2db      	uxtb	r3, r3
 8000760:	2b00      	cmp	r3, #0
 8000762:	d1f1      	bne.n	8000748 <_ZN10Interrupts10PinToIndexEt+0x10>
    }
    return index;
 8000764:	7bfb      	ldrb	r3, [r7, #15]
}
 8000766:	4618      	mov	r0, r3
 8000768:	3714      	adds	r7, #20
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr
	...

08000774 <_ZN3JoyC1EP17ADC_HandleTypeDefP17TIM_HandleTypeDefP12GPIO_TypeDeft>:
#include "Interrupts.hpp"

Joy* Joy::_instances[16] = {nullptr};
uint8_t Joy::_joyCounter = 0;

Joy::Joy(ADC_HandleTypeDef *hadc, TIM_HandleTypeDef *htim, GPIO_TypeDef *joyPort, uint16_t joyPin):
 8000774:	b580      	push	{r7, lr}
 8000776:	b084      	sub	sp, #16
 8000778:	af00      	add	r7, sp, #0
 800077a:	60f8      	str	r0, [r7, #12]
 800077c:	60b9      	str	r1, [r7, #8]
 800077e:	607a      	str	r2, [r7, #4]
 8000780:	603b      	str	r3, [r7, #0]
		onButtonChanged(nullptr), _hadc(hadc), _htim(htim), _joyPort(joyPort), _joyPin(joyPin)
 8000782:	4a21      	ldr	r2, [pc, #132]	@ (8000808 <_ZN3JoyC1EP17ADC_HandleTypeDefP17TIM_HandleTypeDefP12GPIO_TypeDeft+0x94>)
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	601a      	str	r2, [r3, #0]
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	2200      	movs	r2, #0
 800078c:	609a      	str	r2, [r3, #8]
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	68ba      	ldr	r2, [r7, #8]
 8000792:	60da      	str	r2, [r3, #12]
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	687a      	ldr	r2, [r7, #4]
 8000798:	611a      	str	r2, [r3, #16]
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	683a      	ldr	r2, [r7, #0]
 800079e:	615a      	str	r2, [r3, #20]
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	8b3a      	ldrh	r2, [r7, #24]
 80007a4:	831a      	strh	r2, [r3, #24]
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	2200      	movs	r2, #0
 80007aa:	835a      	strh	r2, [r3, #26]
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	2200      	movs	r2, #0
 80007b0:	839a      	strh	r2, [r3, #28]
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	2200      	movs	r2, #0
 80007b6:	83da      	strh	r2, [r3, #30]
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	2201      	movs	r2, #1
 80007bc:	f883 2020 	strb.w	r2, [r3, #32]
{
	_joyIndex = Joy::_joyCounter++;
 80007c0:	4b12      	ldr	r3, [pc, #72]	@ (800080c <_ZN3JoyC1EP17ADC_HandleTypeDefP17TIM_HandleTypeDefP12GPIO_TypeDeft+0x98>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	1c5a      	adds	r2, r3, #1
 80007c6:	b2d1      	uxtb	r1, r2
 80007c8:	4a10      	ldr	r2, [pc, #64]	@ (800080c <_ZN3JoyC1EP17ADC_HandleTypeDefP17TIM_HandleTypeDefP12GPIO_TypeDeft+0x98>)
 80007ca:	7011      	strb	r1, [r2, #0]
 80007cc:	68fa      	ldr	r2, [r7, #12]
 80007ce:	7113      	strb	r3, [r2, #4]
	_instances[_joyIndex] = this;
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	791b      	ldrb	r3, [r3, #4]
 80007d4:	4619      	mov	r1, r3
 80007d6:	4a0e      	ldr	r2, [pc, #56]	@ (8000810 <_ZN3JoyC1EP17ADC_HandleTypeDefP17TIM_HandleTypeDefP12GPIO_TypeDeft+0x9c>)
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	HAL_ADC_Start_DMA(hadc, (uint32_t*)_joyBuf, 2);
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	331a      	adds	r3, #26
 80007e2:	2202      	movs	r2, #2
 80007e4:	4619      	mov	r1, r3
 80007e6:	68b8      	ldr	r0, [r7, #8]
 80007e8:	f001 fd6e 	bl	80022c8 <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start(htim);
 80007ec:	6878      	ldr	r0, [r7, #4]
 80007ee:	f005 fc6d 	bl	80060cc <HAL_TIM_Base_Start>
	Interrupts::Add_GPIO_EXTI_Callback(_joyPin, OnButtonChange);
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	8b1b      	ldrh	r3, [r3, #24]
 80007f6:	4907      	ldr	r1, [pc, #28]	@ (8000814 <_ZN3JoyC1EP17ADC_HandleTypeDefP17TIM_HandleTypeDefP12GPIO_TypeDeft+0xa0>)
 80007f8:	4618      	mov	r0, r3
 80007fa:	f7ff ff61 	bl	80006c0 <_ZN10Interrupts22Add_GPIO_EXTI_CallbackEtPFvtE>
}
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	4618      	mov	r0, r3
 8000802:	3710      	adds	r7, #16
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	0800bbec 	.word	0x0800bbec
 800080c:	20000270 	.word	0x20000270
 8000810:	20000230 	.word	0x20000230
 8000814:	08000875 	.word	0x08000875

08000818 <_ZN3JoyD1Ev>:

Joy::~Joy() {
 8000818:	b480      	push	{r7}
 800081a:	b083      	sub	sp, #12
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
 8000820:	4a04      	ldr	r2, [pc, #16]	@ (8000834 <_ZN3JoyD1Ev+0x1c>)
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	601a      	str	r2, [r3, #0]
}
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	4618      	mov	r0, r3
 800082a:	370c      	adds	r7, #12
 800082c:	46bd      	mov	sp, r7
 800082e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000832:	4770      	bx	lr
 8000834:	0800bbec 	.word	0x0800bbec

08000838 <_ZN3JoyD0Ev>:
Joy::~Joy() {
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
}
 8000840:	6878      	ldr	r0, [r7, #4]
 8000842:	f7ff ffe9 	bl	8000818 <_ZN3JoyD1Ev>
 8000846:	2124      	movs	r1, #36	@ 0x24
 8000848:	6878      	ldr	r0, [r7, #4]
 800084a:	f00a ffc5 	bl	800b7d8 <_ZdlPvj>
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	4618      	mov	r0, r3
 8000852:	3708      	adds	r7, #8
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}

08000858 <_ZN3Joy21attachOnButtonChangedEPFvPS_E>:

void Joy::attachOnButtonChanged(ButtonChangedHandler handler)
{
 8000858:	b480      	push	{r7}
 800085a:	b083      	sub	sp, #12
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
 8000860:	6039      	str	r1, [r7, #0]
    onButtonChanged = handler;
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	683a      	ldr	r2, [r7, #0]
 8000866:	609a      	str	r2, [r3, #8]
}
 8000868:	bf00      	nop
 800086a:	370c      	adds	r7, #12
 800086c:	46bd      	mov	sp, r7
 800086e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000872:	4770      	bx	lr

08000874 <_ZN3Joy14OnButtonChangeEt>:
const uint16_t* Joy::getXYButton()
{
	return _joyBuf;
}
void Joy::OnButtonChange(uint16_t gpioPin)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b084      	sub	sp, #16
 8000878:	af00      	add	r7, sp, #0
 800087a:	4603      	mov	r3, r0
 800087c:	80fb      	strh	r3, [r7, #6]
	uint8_t index = 0;
 800087e:	2300      	movs	r3, #0
 8000880:	72fb      	strb	r3, [r7, #11]
	Joy *result = nullptr;
 8000882:	2300      	movs	r3, #0
 8000884:	60fb      	str	r3, [r7, #12]
	while(_instances[index] != nullptr)
 8000886:	e00d      	b.n	80008a4 <_ZN3Joy14OnButtonChangeEt+0x30>
	{
		if(_instances[index]->_joyPin == gpioPin)
 8000888:	7afb      	ldrb	r3, [r7, #11]
 800088a:	4a18      	ldr	r2, [pc, #96]	@ (80008ec <_ZN3Joy14OnButtonChangeEt+0x78>)
 800088c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000890:	8b1b      	ldrh	r3, [r3, #24]
 8000892:	88fa      	ldrh	r2, [r7, #6]
 8000894:	429a      	cmp	r2, r3
 8000896:	d105      	bne.n	80008a4 <_ZN3Joy14OnButtonChangeEt+0x30>
		{
			result = _instances[index];
 8000898:	7afb      	ldrb	r3, [r7, #11]
 800089a:	4a14      	ldr	r2, [pc, #80]	@ (80008ec <_ZN3Joy14OnButtonChangeEt+0x78>)
 800089c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008a0:	60fb      	str	r3, [r7, #12]
			break;
 80008a2:	e005      	b.n	80008b0 <_ZN3Joy14OnButtonChangeEt+0x3c>
	while(_instances[index] != nullptr)
 80008a4:	7afb      	ldrb	r3, [r7, #11]
 80008a6:	4a11      	ldr	r2, [pc, #68]	@ (80008ec <_ZN3Joy14OnButtonChangeEt+0x78>)
 80008a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d1eb      	bne.n	8000888 <_ZN3Joy14OnButtonChangeEt+0x14>
		}
	}

	if(result)
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d016      	beq.n	80008e4 <_ZN3Joy14OnButtonChangeEt+0x70>
	{
		GPIO_PinState ps = HAL_GPIO_ReadPin(result->_joyPort, result->_joyPin);
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	695a      	ldr	r2, [r3, #20]
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	8b1b      	ldrh	r3, [r3, #24]
 80008be:	4619      	mov	r1, r3
 80008c0:	4610      	mov	r0, r2
 80008c2:	f002 ff57 	bl	8003774 <HAL_GPIO_ReadPin>
 80008c6:	4603      	mov	r3, r0
 80008c8:	72bb      	strb	r3, [r7, #10]
		result->_joyBuf[2] = (ps == GPIO_PIN_SET ? 0 : 1);
 80008ca:	7abb      	ldrb	r3, [r7, #10]
 80008cc:	2b01      	cmp	r3, #1
 80008ce:	bf14      	ite	ne
 80008d0:	2301      	movne	r3, #1
 80008d2:	2300      	moveq	r3, #0
 80008d4:	b2db      	uxtb	r3, r3
 80008d6:	461a      	mov	r2, r3
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	83da      	strh	r2, [r3, #30]
		result->onButtonChanged(result);
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	689b      	ldr	r3, [r3, #8]
 80008e0:	68f8      	ldr	r0, [r7, #12]
 80008e2:	4798      	blx	r3
	}
}
 80008e4:	bf00      	nop
 80008e6:	3710      	adds	r7, #16
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	20000230 	.word	0x20000230

080008f0 <_ZN6NRF24LC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_t>:

// Functions to manage the nRF24L01+ transceiver

#define nRF24_WAIT_TIMEOUT         (uint32_t)100;//0x000FFFFF

NRF24L::NRF24L(SPI_HandleTypeDef *spi, GPIO_TypeDef* CEPort, uint16_t CEPin, GPIO_TypeDef* CSNPort, uint16_t CSNPin):
 80008f0:	b480      	push	{r7}
 80008f2:	b085      	sub	sp, #20
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	60f8      	str	r0, [r7, #12]
 80008f8:	60b9      	str	r1, [r7, #8]
 80008fa:	607a      	str	r2, [r7, #4]
 80008fc:	807b      	strh	r3, [r7, #2]
				_spi(spi),
				_CEPort(CEPort),
				_CEPin(CEPin),
				_CSNPort(CSNPort),
				_CSNPin(CSNPin)
 80008fe:	4a15      	ldr	r2, [pc, #84]	@ (8000954 <_ZN6NRF24LC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_t+0x64>)
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	601a      	str	r2, [r3, #0]
				_spi(spi),
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	68ba      	ldr	r2, [r7, #8]
 8000908:	605a      	str	r2, [r3, #4]
				_CEPort(CEPort),
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	687a      	ldr	r2, [r7, #4]
 800090e:	609a      	str	r2, [r3, #8]
				_CEPin(CEPin),
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	887a      	ldrh	r2, [r7, #2]
 8000914:	819a      	strh	r2, [r3, #12]
				_CSNPort(CSNPort),
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	69ba      	ldr	r2, [r7, #24]
 800091a:	611a      	str	r2, [r3, #16]
				_CSNPin(CSNPin)
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	8bba      	ldrh	r2, [r7, #28]
 8000920:	829a      	strh	r2, [r3, #20]
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	4a0c      	ldr	r2, [pc, #48]	@ (8000958 <_ZN6NRF24LC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_t+0x68>)
 8000926:	3316      	adds	r3, #22
 8000928:	6810      	ldr	r0, [r2, #0]
 800092a:	6018      	str	r0, [r3, #0]
 800092c:	8892      	ldrh	r2, [r2, #4]
 800092e:	809a      	strh	r2, [r3, #4]
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	4a0a      	ldr	r2, [pc, #40]	@ (800095c <_ZN6NRF24LC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_t+0x6c>)
 8000934:	331c      	adds	r3, #28
 8000936:	e892 0003 	ldmia.w	r2, {r0, r1}
 800093a:	6018      	str	r0, [r3, #0]
 800093c:	3304      	adds	r3, #4
 800093e:	8019      	strh	r1, [r3, #0]
 8000940:	3302      	adds	r3, #2
 8000942:	0c0a      	lsrs	r2, r1, #16
 8000944:	701a      	strb	r2, [r3, #0]
{}
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	4618      	mov	r0, r3
 800094a:	3714      	adds	r7, #20
 800094c:	46bd      	mov	sp, r7
 800094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000952:	4770      	bx	lr
 8000954:	0800bc00 	.word	0x0800bc00
 8000958:	0800bb5c 	.word	0x0800bb5c
 800095c:	0800bb64 	.word	0x0800bb64

08000960 <_ZN6NRF24LD1Ev>:

NRF24L::~NRF24L(){}
 8000960:	b480      	push	{r7}
 8000962:	b083      	sub	sp, #12
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
 8000968:	4a04      	ldr	r2, [pc, #16]	@ (800097c <_ZN6NRF24LD1Ev+0x1c>)
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	601a      	str	r2, [r3, #0]
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	4618      	mov	r0, r3
 8000972:	370c      	adds	r7, #12
 8000974:	46bd      	mov	sp, r7
 8000976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097a:	4770      	bx	lr
 800097c:	0800bc00 	.word	0x0800bc00

08000980 <_ZN6NRF24LD0Ev>:
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
 8000988:	6878      	ldr	r0, [r7, #4]
 800098a:	f7ff ffe9 	bl	8000960 <_ZN6NRF24LD1Ev>
 800098e:	2124      	movs	r1, #36	@ 0x24
 8000990:	6878      	ldr	r0, [r7, #4]
 8000992:	f00a ff21 	bl	800b7d8 <_ZdlPvj>
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	4618      	mov	r0, r3
 800099a:	3708      	adds	r7, #8
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}

080009a0 <_ZN6NRF24L10nRF24_CE_LEv>:


//static inline void Delay_ms(uint32_t ms) { HAL_Delay(ms); }

void NRF24L::nRF24_CE_L() {
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(_CEPort, _CEPin, GPIO_PIN_RESET);
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	6898      	ldr	r0, [r3, #8]
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	899b      	ldrh	r3, [r3, #12]
 80009b0:	2200      	movs	r2, #0
 80009b2:	4619      	mov	r1, r3
 80009b4:	f002 fef6 	bl	80037a4 <HAL_GPIO_WritePin>
}
 80009b8:	bf00      	nop
 80009ba:	3708      	adds	r7, #8
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}

080009c0 <_ZN6NRF24L10nRF24_CE_HEv>:

void NRF24L::nRF24_CE_H() {
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(_CEPort, _CEPin, GPIO_PIN_SET);
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	6898      	ldr	r0, [r3, #8]
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	899b      	ldrh	r3, [r3, #12]
 80009d0:	2201      	movs	r2, #1
 80009d2:	4619      	mov	r1, r3
 80009d4:	f002 fee6 	bl	80037a4 <HAL_GPIO_WritePin>
}
 80009d8:	bf00      	nop
 80009da:	3708      	adds	r7, #8
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}

080009e0 <_ZN6NRF24L11nRF24_CSN_LEv>:

void NRF24L::nRF24_CSN_L() {
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(_CSNPort, _CSNPin, GPIO_PIN_RESET);
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	6918      	ldr	r0, [r3, #16]
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	8a9b      	ldrh	r3, [r3, #20]
 80009f0:	2200      	movs	r2, #0
 80009f2:	4619      	mov	r1, r3
 80009f4:	f002 fed6 	bl	80037a4 <HAL_GPIO_WritePin>
}
 80009f8:	bf00      	nop
 80009fa:	3708      	adds	r7, #8
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}

08000a00 <_ZN6NRF24L11nRF24_CSN_HEv>:

void NRF24L::nRF24_CSN_H() {
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(_CSNPort, _CSNPin, GPIO_PIN_SET);
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	6918      	ldr	r0, [r3, #16]
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	8a9b      	ldrh	r3, [r3, #20]
 8000a10:	2201      	movs	r2, #1
 8000a12:	4619      	mov	r1, r3
 8000a14:	f002 fec6 	bl	80037a4 <HAL_GPIO_WritePin>
}
 8000a18:	bf00      	nop
 8000a1a:	3708      	adds	r7, #8
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}

08000a20 <_ZN6NRF24L11nRF24_LL_RWEh>:

uint8_t NRF24L::nRF24_LL_RW(uint8_t data) {
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b086      	sub	sp, #24
 8000a24:	af02      	add	r7, sp, #8
 8000a26:	6078      	str	r0, [r7, #4]
 8000a28:	460b      	mov	r3, r1
 8000a2a:	70fb      	strb	r3, [r7, #3]
    // Wait until TX buffer is empty
    uint8_t result;
    if(HAL_SPI_TransmitReceive(_spi, &data, &result, 1, 2000)!=HAL_OK) {
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	6858      	ldr	r0, [r3, #4]
 8000a30:	f107 020f 	add.w	r2, r7, #15
 8000a34:	1cf9      	adds	r1, r7, #3
 8000a36:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000a3a:	9300      	str	r3, [sp, #0]
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	f004 ff57 	bl	80058f0 <HAL_SPI_TransmitReceive>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	bf14      	ite	ne
 8000a48:	2301      	movne	r3, #1
 8000a4a:	2300      	moveq	r3, #0
 8000a4c:	b2db      	uxtb	r3, r3
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <_ZN6NRF24L11nRF24_LL_RWEh+0x36>
        Error_Handler();
 8000a52:	f000 fef9 	bl	8001848 <Error_Handler>
    };
    return result;
 8000a56:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a58:	4618      	mov	r0, r3
 8000a5a:	3710      	adds	r7, #16
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}

08000a60 <_ZN6NRF24L14TransmitPacketEPhh>:
// Function to transmit data packet
// input:
//   pBuf - pointer to the buffer with data to transmit
//   length - length of the data buffer in bytes
// return: one of nRF24_TX_xx values
NRF24L::TXResult NRF24L::TransmitPacket(uint8_t *pBuf, uint8_t length) {
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b086      	sub	sp, #24
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	60f8      	str	r0, [r7, #12]
 8000a68:	60b9      	str	r1, [r7, #8]
 8000a6a:	4613      	mov	r3, r2
 8000a6c:	71fb      	strb	r3, [r7, #7]
	volatile uint32_t wait = nRF24_WAIT_TIMEOUT
 8000a6e:	2364      	movs	r3, #100	@ 0x64
 8000a70:	613b      	str	r3, [r7, #16]
	;
	uint8_t status;
	// Deassert the CE pin (in case if it still high)
	nRF24_CE_L();
 8000a72:	68f8      	ldr	r0, [r7, #12]
 8000a74:	f7ff ff94 	bl	80009a0 <_ZN6NRF24L10nRF24_CE_LEv>
	// Transfer a data from the specified buffer to the TX FIFO
	WritePayload(pBuf, length);
 8000a78:	79fb      	ldrb	r3, [r7, #7]
 8000a7a:	461a      	mov	r2, r3
 8000a7c:	68b9      	ldr	r1, [r7, #8]
 8000a7e:	68f8      	ldr	r0, [r7, #12]
 8000a80:	f000 fb0e 	bl	80010a0 <_ZN6NRF24L12WritePayloadEPhh>
	// Start a transmission by asserting CE pin (must be held at least 10us)
	nRF24_CE_H();
 8000a84:	68f8      	ldr	r0, [r7, #12]
 8000a86:	f7ff ff9b 	bl	80009c0 <_ZN6NRF24L10nRF24_CE_HEv>
	// Poll the transceiver status register until one of the following flags will be set:
	//   TX_DS  - means the packet has been transmitted
	//   MAX_RT - means the maximum number of TX retransmits happened
	// note: this solution is far from perfect, better to use IRQ instead of polling the status
	do {
		status = GetStatus();
 8000a8a:	68f8      	ldr	r0, [r7, #12]
 8000a8c:	f000 fac9 	bl	8001022 <_ZN6NRF24L9GetStatusEv>
 8000a90:	4603      	mov	r3, r0
 8000a92:	75fb      	strb	r3, [r7, #23]
		if (status & (nRF24_FLAG_TX_DS | nRF24_FLAG_MAX_RT )) {
 8000a94:	7dfb      	ldrb	r3, [r7, #23]
 8000a96:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d10a      	bne.n	8000ab4 <_ZN6NRF24L14TransmitPacketEPhh+0x54>
			break;
		}
	} while (wait--);
 8000a9e:	693b      	ldr	r3, [r7, #16]
 8000aa0:	1e5a      	subs	r2, r3, #1
 8000aa2:	613a      	str	r2, [r7, #16]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	bf14      	ite	ne
 8000aa8:	2301      	movne	r3, #1
 8000aaa:	2300      	moveq	r3, #0
 8000aac:	b2db      	uxtb	r3, r3
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d1eb      	bne.n	8000a8a <_ZN6NRF24L14TransmitPacketEPhh+0x2a>
 8000ab2:	e000      	b.n	8000ab6 <_ZN6NRF24L14TransmitPacketEPhh+0x56>
			break;
 8000ab4:	bf00      	nop
	// Deassert the CE pin (Standby-II --> Standby-I)
	nRF24_CE_L();
 8000ab6:	68f8      	ldr	r0, [r7, #12]
 8000ab8:	f7ff ff72 	bl	80009a0 <_ZN6NRF24L10nRF24_CE_LEv>
	if (!wait) {
 8000abc:	693b      	ldr	r3, [r7, #16]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2301      	moveq	r3, #1
 8000ac4:	2300      	movne	r3, #0
 8000ac6:	b2db      	uxtb	r3, r3
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <_ZN6NRF24L14TransmitPacketEPhh+0x70>
		// Timeout
		return TX_TIMEOUT;
 8000acc:	2302      	movs	r3, #2
 8000ace:	e014      	b.n	8000afa <_ZN6NRF24L14TransmitPacketEPhh+0x9a>
	}
	// Clear pending IRQ flags
	ClearIRQFlags();
 8000ad0:	68f8      	ldr	r0, [r7, #12]
 8000ad2:	f000 facd 	bl	8001070 <_ZN6NRF24L13ClearIRQFlagsEv>
	if (status & nRF24_FLAG_MAX_RT) {
 8000ad6:	7dfb      	ldrb	r3, [r7, #23]
 8000ad8:	f003 0310 	and.w	r3, r3, #16
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <_ZN6NRF24L14TransmitPacketEPhh+0x84>
		// Auto retransmit counter exceeds the programmed maximum limit (FIFO is not removed)
		return TX_MAXRT;
 8000ae0:	2303      	movs	r3, #3
 8000ae2:	e00a      	b.n	8000afa <_ZN6NRF24L14TransmitPacketEPhh+0x9a>
	}
	if (status & nRF24_FLAG_TX_DS) {
 8000ae4:	7dfb      	ldrb	r3, [r7, #23]
 8000ae6:	f003 0320 	and.w	r3, r3, #32
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <_ZN6NRF24L14TransmitPacketEPhh+0x92>
		// Successful transmission
		return TX_SUCCESS;
 8000aee:	2301      	movs	r3, #1
 8000af0:	e003      	b.n	8000afa <_ZN6NRF24L14TransmitPacketEPhh+0x9a>
	}
	// Some banana happens, a payload remains in the TX FIFO, flush it
	FlushTX();
 8000af2:	68f8      	ldr	r0, [r7, #12]
 8000af4:	f000 faa2 	bl	800103c <_ZN6NRF24L7FlushTXEv>
	return TX_ERROR;
 8000af8:	2300      	movs	r3, #0
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	3718      	adds	r7, #24
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}

08000b02 <_ZN6NRF24L7ReadRegEh>:

// Read a register
// input:
//   reg - number of register to read
// return: value of register
uint8_t NRF24L::ReadReg(uint8_t reg) {
 8000b02:	b580      	push	{r7, lr}
 8000b04:	b084      	sub	sp, #16
 8000b06:	af00      	add	r7, sp, #0
 8000b08:	6078      	str	r0, [r7, #4]
 8000b0a:	460b      	mov	r3, r1
 8000b0c:	70fb      	strb	r3, [r7, #3]
	uint8_t value;

	nRF24_CSN_L();
 8000b0e:	6878      	ldr	r0, [r7, #4]
 8000b10:	f7ff ff66 	bl	80009e0 <_ZN6NRF24L11nRF24_CSN_LEv>
	nRF24_LL_RW(reg & nRF24_MASK_REG_MAP);
 8000b14:	78fb      	ldrb	r3, [r7, #3]
 8000b16:	f003 031f 	and.w	r3, r3, #31
 8000b1a:	b2db      	uxtb	r3, r3
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	6878      	ldr	r0, [r7, #4]
 8000b20:	f7ff ff7e 	bl	8000a20 <_ZN6NRF24L11nRF24_LL_RWEh>
	value = nRF24_LL_RW(nRF24_CMD_NOP);
 8000b24:	21ff      	movs	r1, #255	@ 0xff
 8000b26:	6878      	ldr	r0, [r7, #4]
 8000b28:	f7ff ff7a 	bl	8000a20 <_ZN6NRF24L11nRF24_LL_RWEh>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	73fb      	strb	r3, [r7, #15]
	nRF24_CSN_H();
 8000b30:	6878      	ldr	r0, [r7, #4]
 8000b32:	f7ff ff65 	bl	8000a00 <_ZN6NRF24L11nRF24_CSN_HEv>

	return value;
 8000b36:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3710      	adds	r7, #16
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}

08000b40 <_ZN6NRF24L8WriteRegEhh>:

// Write a new value to register
// input:
//   reg - number of register to write
//   value - value to write
void NRF24L::WriteReg(uint8_t reg, uint8_t value) {
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
 8000b48:	460b      	mov	r3, r1
 8000b4a:	70fb      	strb	r3, [r7, #3]
 8000b4c:	4613      	mov	r3, r2
 8000b4e:	70bb      	strb	r3, [r7, #2]
	nRF24_CSN_L();
 8000b50:	6878      	ldr	r0, [r7, #4]
 8000b52:	f7ff ff45 	bl	80009e0 <_ZN6NRF24L11nRF24_CSN_LEv>
	if (reg < nRF24_CMD_W_REGISTER) {
 8000b56:	78fb      	ldrb	r3, [r7, #3]
 8000b58:	2b1f      	cmp	r3, #31
 8000b5a:	d810      	bhi.n	8000b7e <_ZN6NRF24L8WriteRegEhh+0x3e>
		// This is a register access
		nRF24_LL_RW(nRF24_CMD_W_REGISTER | (reg & nRF24_MASK_REG_MAP ));
 8000b5c:	78fb      	ldrb	r3, [r7, #3]
 8000b5e:	f003 031f 	and.w	r3, r3, #31
 8000b62:	b2db      	uxtb	r3, r3
 8000b64:	f043 0320 	orr.w	r3, r3, #32
 8000b68:	b2db      	uxtb	r3, r3
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	6878      	ldr	r0, [r7, #4]
 8000b6e:	f7ff ff57 	bl	8000a20 <_ZN6NRF24L11nRF24_LL_RWEh>
		nRF24_LL_RW(value);
 8000b72:	78bb      	ldrb	r3, [r7, #2]
 8000b74:	4619      	mov	r1, r3
 8000b76:	6878      	ldr	r0, [r7, #4]
 8000b78:	f7ff ff52 	bl	8000a20 <_ZN6NRF24L11nRF24_LL_RWEh>
 8000b7c:	e015      	b.n	8000baa <_ZN6NRF24L8WriteRegEhh+0x6a>
	} else {
		// This is a single byte command or future command/register
		nRF24_LL_RW(reg);
 8000b7e:	78fb      	ldrb	r3, [r7, #3]
 8000b80:	4619      	mov	r1, r3
 8000b82:	6878      	ldr	r0, [r7, #4]
 8000b84:	f7ff ff4c 	bl	8000a20 <_ZN6NRF24L11nRF24_LL_RWEh>
		if ((reg != nRF24_CMD_FLUSH_TX ) && (reg != nRF24_CMD_FLUSH_RX )
 8000b88:	78fb      	ldrb	r3, [r7, #3]
 8000b8a:	2be1      	cmp	r3, #225	@ 0xe1
 8000b8c:	d00d      	beq.n	8000baa <_ZN6NRF24L8WriteRegEhh+0x6a>
 8000b8e:	78fb      	ldrb	r3, [r7, #3]
 8000b90:	2be2      	cmp	r3, #226	@ 0xe2
 8000b92:	d00a      	beq.n	8000baa <_ZN6NRF24L8WriteRegEhh+0x6a>
				&& (reg != nRF24_CMD_REUSE_TX_PL ) && (reg != nRF24_CMD_NOP )) {
 8000b94:	78fb      	ldrb	r3, [r7, #3]
 8000b96:	2be3      	cmp	r3, #227	@ 0xe3
 8000b98:	d007      	beq.n	8000baa <_ZN6NRF24L8WriteRegEhh+0x6a>
 8000b9a:	78fb      	ldrb	r3, [r7, #3]
 8000b9c:	2bff      	cmp	r3, #255	@ 0xff
 8000b9e:	d004      	beq.n	8000baa <_ZN6NRF24L8WriteRegEhh+0x6a>
			// Send register value
			nRF24_LL_RW(value);
 8000ba0:	78bb      	ldrb	r3, [r7, #2]
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	6878      	ldr	r0, [r7, #4]
 8000ba6:	f7ff ff3b 	bl	8000a20 <_ZN6NRF24L11nRF24_LL_RWEh>
		}
	}
	nRF24_CSN_H();
 8000baa:	6878      	ldr	r0, [r7, #4]
 8000bac:	f7ff ff28 	bl	8000a00 <_ZN6NRF24L11nRF24_CSN_HEv>
}
 8000bb0:	bf00      	nop
 8000bb2:	3708      	adds	r7, #8
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <_ZN6NRF24L9ReadMBRegEhPhh>:
// Read a multi-byte register
// input:
//   reg - number of register to read
//   pBuf - pointer to the buffer for register data
//   count - number of bytes to read
void NRF24L::ReadMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count) {
 8000bb8:	b590      	push	{r4, r7, lr}
 8000bba:	b085      	sub	sp, #20
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	60f8      	str	r0, [r7, #12]
 8000bc0:	607a      	str	r2, [r7, #4]
 8000bc2:	461a      	mov	r2, r3
 8000bc4:	460b      	mov	r3, r1
 8000bc6:	72fb      	strb	r3, [r7, #11]
 8000bc8:	4613      	mov	r3, r2
 8000bca:	72bb      	strb	r3, [r7, #10]
	nRF24_CSN_L();
 8000bcc:	68f8      	ldr	r0, [r7, #12]
 8000bce:	f7ff ff07 	bl	80009e0 <_ZN6NRF24L11nRF24_CSN_LEv>
	nRF24_LL_RW(reg);
 8000bd2:	7afb      	ldrb	r3, [r7, #11]
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	68f8      	ldr	r0, [r7, #12]
 8000bd8:	f7ff ff22 	bl	8000a20 <_ZN6NRF24L11nRF24_LL_RWEh>
	while (count--) {
 8000bdc:	e008      	b.n	8000bf0 <_ZN6NRF24L9ReadMBRegEhPhh+0x38>
		*pBuf++ = nRF24_LL_RW(nRF24_CMD_NOP);
 8000bde:	687c      	ldr	r4, [r7, #4]
 8000be0:	1c63      	adds	r3, r4, #1
 8000be2:	607b      	str	r3, [r7, #4]
 8000be4:	21ff      	movs	r1, #255	@ 0xff
 8000be6:	68f8      	ldr	r0, [r7, #12]
 8000be8:	f7ff ff1a 	bl	8000a20 <_ZN6NRF24L11nRF24_LL_RWEh>
 8000bec:	4603      	mov	r3, r0
 8000bee:	7023      	strb	r3, [r4, #0]
	while (count--) {
 8000bf0:	7abb      	ldrb	r3, [r7, #10]
 8000bf2:	1e5a      	subs	r2, r3, #1
 8000bf4:	72ba      	strb	r2, [r7, #10]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	bf14      	ite	ne
 8000bfa:	2301      	movne	r3, #1
 8000bfc:	2300      	moveq	r3, #0
 8000bfe:	b2db      	uxtb	r3, r3
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d1ec      	bne.n	8000bde <_ZN6NRF24L9ReadMBRegEhPhh+0x26>
	}
	nRF24_CSN_H();
 8000c04:	68f8      	ldr	r0, [r7, #12]
 8000c06:	f7ff fefb 	bl	8000a00 <_ZN6NRF24L11nRF24_CSN_HEv>
}
 8000c0a:	bf00      	nop
 8000c0c:	3714      	adds	r7, #20
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd90      	pop	{r4, r7, pc}

08000c12 <_ZN6NRF24L10WriteMBRegEhPhh>:
// Write a multi-byte register
// input:
//   reg - number of register to write
//   pBuf - pointer to the buffer with data to write
//   count - number of bytes to write
void NRF24L::WriteMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count) {
 8000c12:	b580      	push	{r7, lr}
 8000c14:	b084      	sub	sp, #16
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	60f8      	str	r0, [r7, #12]
 8000c1a:	607a      	str	r2, [r7, #4]
 8000c1c:	461a      	mov	r2, r3
 8000c1e:	460b      	mov	r3, r1
 8000c20:	72fb      	strb	r3, [r7, #11]
 8000c22:	4613      	mov	r3, r2
 8000c24:	72bb      	strb	r3, [r7, #10]
	nRF24_CSN_L();
 8000c26:	68f8      	ldr	r0, [r7, #12]
 8000c28:	f7ff feda 	bl	80009e0 <_ZN6NRF24L11nRF24_CSN_LEv>
	nRF24_LL_RW(reg);
 8000c2c:	7afb      	ldrb	r3, [r7, #11]
 8000c2e:	4619      	mov	r1, r3
 8000c30:	68f8      	ldr	r0, [r7, #12]
 8000c32:	f7ff fef5 	bl	8000a20 <_ZN6NRF24L11nRF24_LL_RWEh>
	while (count--) {
 8000c36:	e007      	b.n	8000c48 <_ZN6NRF24L10WriteMBRegEhPhh+0x36>
		nRF24_LL_RW(*pBuf++);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	1c5a      	adds	r2, r3, #1
 8000c3c:	607a      	str	r2, [r7, #4]
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	4619      	mov	r1, r3
 8000c42:	68f8      	ldr	r0, [r7, #12]
 8000c44:	f7ff feec 	bl	8000a20 <_ZN6NRF24L11nRF24_LL_RWEh>
	while (count--) {
 8000c48:	7abb      	ldrb	r3, [r7, #10]
 8000c4a:	1e5a      	subs	r2, r3, #1
 8000c4c:	72ba      	strb	r2, [r7, #10]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	bf14      	ite	ne
 8000c52:	2301      	movne	r3, #1
 8000c54:	2300      	moveq	r3, #0
 8000c56:	b2db      	uxtb	r3, r3
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d1ed      	bne.n	8000c38 <_ZN6NRF24L10WriteMBRegEhPhh+0x26>
	}
	nRF24_CSN_H();
 8000c5c:	68f8      	ldr	r0, [r7, #12]
 8000c5e:	f7ff fecf 	bl	8000a00 <_ZN6NRF24L11nRF24_CSN_HEv>
}
 8000c62:	bf00      	nop
 8000c64:	3710      	adds	r7, #16
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}

08000c6a <_ZN6NRF24L4InitEv>:

// Set transceiver to it's initial state
// note: RX/TX pipe addresses remains untouched
void NRF24L::Init(void) {
 8000c6a:	b580      	push	{r7, lr}
 8000c6c:	b082      	sub	sp, #8
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	6078      	str	r0, [r7, #4]
	// Write to registers their initial values
	WriteReg(nRF24_REG_CONFIG, 0x08);
 8000c72:	2208      	movs	r2, #8
 8000c74:	2100      	movs	r1, #0
 8000c76:	6878      	ldr	r0, [r7, #4]
 8000c78:	f7ff ff62 	bl	8000b40 <_ZN6NRF24L8WriteRegEhh>
	WriteReg(nRF24_REG_EN_AA, 0x3F);
 8000c7c:	223f      	movs	r2, #63	@ 0x3f
 8000c7e:	2101      	movs	r1, #1
 8000c80:	6878      	ldr	r0, [r7, #4]
 8000c82:	f7ff ff5d 	bl	8000b40 <_ZN6NRF24L8WriteRegEhh>
	WriteReg(nRF24_REG_EN_RXADDR, 0x03);
 8000c86:	2203      	movs	r2, #3
 8000c88:	2102      	movs	r1, #2
 8000c8a:	6878      	ldr	r0, [r7, #4]
 8000c8c:	f7ff ff58 	bl	8000b40 <_ZN6NRF24L8WriteRegEhh>
	WriteReg(nRF24_REG_SETUP_AW, 0x03);
 8000c90:	2203      	movs	r2, #3
 8000c92:	2103      	movs	r1, #3
 8000c94:	6878      	ldr	r0, [r7, #4]
 8000c96:	f7ff ff53 	bl	8000b40 <_ZN6NRF24L8WriteRegEhh>
	WriteReg(nRF24_REG_SETUP_RETR, 0x03);
 8000c9a:	2203      	movs	r2, #3
 8000c9c:	2104      	movs	r1, #4
 8000c9e:	6878      	ldr	r0, [r7, #4]
 8000ca0:	f7ff ff4e 	bl	8000b40 <_ZN6NRF24L8WriteRegEhh>
	WriteReg(nRF24_REG_RF_CH, 0x02);
 8000ca4:	2202      	movs	r2, #2
 8000ca6:	2105      	movs	r1, #5
 8000ca8:	6878      	ldr	r0, [r7, #4]
 8000caa:	f7ff ff49 	bl	8000b40 <_ZN6NRF24L8WriteRegEhh>
	WriteReg(nRF24_REG_RF_SETUP, 0x0E);
 8000cae:	220e      	movs	r2, #14
 8000cb0:	2106      	movs	r1, #6
 8000cb2:	6878      	ldr	r0, [r7, #4]
 8000cb4:	f7ff ff44 	bl	8000b40 <_ZN6NRF24L8WriteRegEhh>
	WriteReg(nRF24_REG_STATUS, 0x00);
 8000cb8:	2200      	movs	r2, #0
 8000cba:	2107      	movs	r1, #7
 8000cbc:	6878      	ldr	r0, [r7, #4]
 8000cbe:	f7ff ff3f 	bl	8000b40 <_ZN6NRF24L8WriteRegEhh>
	WriteReg(nRF24_REG_RX_PW_P0, 0x00);
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	2111      	movs	r1, #17
 8000cc6:	6878      	ldr	r0, [r7, #4]
 8000cc8:	f7ff ff3a 	bl	8000b40 <_ZN6NRF24L8WriteRegEhh>
	WriteReg(nRF24_REG_RX_PW_P1, 0x00);
 8000ccc:	2200      	movs	r2, #0
 8000cce:	2112      	movs	r1, #18
 8000cd0:	6878      	ldr	r0, [r7, #4]
 8000cd2:	f7ff ff35 	bl	8000b40 <_ZN6NRF24L8WriteRegEhh>
	WriteReg(nRF24_REG_RX_PW_P2, 0x00);
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	2113      	movs	r1, #19
 8000cda:	6878      	ldr	r0, [r7, #4]
 8000cdc:	f7ff ff30 	bl	8000b40 <_ZN6NRF24L8WriteRegEhh>
	WriteReg(nRF24_REG_RX_PW_P3, 0x00);
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	2114      	movs	r1, #20
 8000ce4:	6878      	ldr	r0, [r7, #4]
 8000ce6:	f7ff ff2b 	bl	8000b40 <_ZN6NRF24L8WriteRegEhh>
	WriteReg(nRF24_REG_RX_PW_P4, 0x00);
 8000cea:	2200      	movs	r2, #0
 8000cec:	2115      	movs	r1, #21
 8000cee:	6878      	ldr	r0, [r7, #4]
 8000cf0:	f7ff ff26 	bl	8000b40 <_ZN6NRF24L8WriteRegEhh>
	WriteReg(nRF24_REG_RX_PW_P5, 0x00);
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	2116      	movs	r1, #22
 8000cf8:	6878      	ldr	r0, [r7, #4]
 8000cfa:	f7ff ff21 	bl	8000b40 <_ZN6NRF24L8WriteRegEhh>
	WriteReg(nRF24_REG_DYNPD, 0x00);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	211c      	movs	r1, #28
 8000d02:	6878      	ldr	r0, [r7, #4]
 8000d04:	f7ff ff1c 	bl	8000b40 <_ZN6NRF24L8WriteRegEhh>
	WriteReg(nRF24_REG_FEATURE, 0x00);
 8000d08:	2200      	movs	r2, #0
 8000d0a:	211d      	movs	r1, #29
 8000d0c:	6878      	ldr	r0, [r7, #4]
 8000d0e:	f7ff ff17 	bl	8000b40 <_ZN6NRF24L8WriteRegEhh>

	// Clear the FIFO's
	FlushRX();
 8000d12:	6878      	ldr	r0, [r7, #4]
 8000d14:	f000 f99f 	bl	8001056 <_ZN6NRF24L7FlushRXEv>
	FlushTX();
 8000d18:	6878      	ldr	r0, [r7, #4]
 8000d1a:	f000 f98f 	bl	800103c <_ZN6NRF24L7FlushTXEv>

	// Clear any pending interrupt flags
	ClearIRQFlags();
 8000d1e:	6878      	ldr	r0, [r7, #4]
 8000d20:	f000 f9a6 	bl	8001070 <_ZN6NRF24L13ClearIRQFlagsEv>

	// Deassert CSN pin (chip release)
	nRF24_CSN_H();
 8000d24:	6878      	ldr	r0, [r7, #4]
 8000d26:	f7ff fe6b 	bl	8000a00 <_ZN6NRF24L11nRF24_CSN_HEv>
}
 8000d2a:	bf00      	nop
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
	...

08000d34 <_ZN6NRF24L5CheckEv>:

// Check if the nRF24L01 present
// return:
//   1 - nRF24L01 is online and responding
//   0 - received sequence differs from original
uint8_t NRF24L::Check(void) {
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b086      	sub	sp, #24
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
	uint8_t rxbuf[5];
	uint8_t i;
	uint8_t *ptr = (uint8_t*) nRF24_TEST_ADDR;
 8000d3c:	4b17      	ldr	r3, [pc, #92]	@ (8000d9c <_ZN6NRF24L5CheckEv+0x68>)
 8000d3e:	613b      	str	r3, [r7, #16]

	// Write test TX address and read TX_ADDR register
	WriteMBReg(nRF24_CMD_W_REGISTER | nRF24_REG_TX_ADDR, ptr, 5);
 8000d40:	2305      	movs	r3, #5
 8000d42:	693a      	ldr	r2, [r7, #16]
 8000d44:	2130      	movs	r1, #48	@ 0x30
 8000d46:	6878      	ldr	r0, [r7, #4]
 8000d48:	f7ff ff63 	bl	8000c12 <_ZN6NRF24L10WriteMBRegEhPhh>
	ReadMBReg(nRF24_CMD_R_REGISTER | nRF24_REG_TX_ADDR, rxbuf, 5);
 8000d4c:	f107 0208 	add.w	r2, r7, #8
 8000d50:	2305      	movs	r3, #5
 8000d52:	2110      	movs	r1, #16
 8000d54:	6878      	ldr	r0, [r7, #4]
 8000d56:	f7ff ff2f 	bl	8000bb8 <_ZN6NRF24L9ReadMBRegEhPhh>

	// Compare buffers, return error on first mismatch
	for (i = 0; i < 5; i++) {
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	75fb      	strb	r3, [r7, #23]
 8000d5e:	e014      	b.n	8000d8a <_ZN6NRF24L5CheckEv+0x56>
		if (rxbuf[i] != *ptr++)
 8000d60:	7dfb      	ldrb	r3, [r7, #23]
 8000d62:	3318      	adds	r3, #24
 8000d64:	443b      	add	r3, r7
 8000d66:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8000d6a:	693b      	ldr	r3, [r7, #16]
 8000d6c:	1c59      	adds	r1, r3, #1
 8000d6e:	6139      	str	r1, [r7, #16]
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	429a      	cmp	r2, r3
 8000d74:	bf14      	ite	ne
 8000d76:	2301      	movne	r3, #1
 8000d78:	2300      	moveq	r3, #0
 8000d7a:	b2db      	uxtb	r3, r3
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <_ZN6NRF24L5CheckEv+0x50>
			return 0;
 8000d80:	2300      	movs	r3, #0
 8000d82:	e006      	b.n	8000d92 <_ZN6NRF24L5CheckEv+0x5e>
	for (i = 0; i < 5; i++) {
 8000d84:	7dfb      	ldrb	r3, [r7, #23]
 8000d86:	3301      	adds	r3, #1
 8000d88:	75fb      	strb	r3, [r7, #23]
 8000d8a:	7dfb      	ldrb	r3, [r7, #23]
 8000d8c:	2b04      	cmp	r3, #4
 8000d8e:	d9e7      	bls.n	8000d60 <_ZN6NRF24L5CheckEv+0x2c>
	}

	return 1;
 8000d90:	2301      	movs	r3, #1
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3718      	adds	r7, #24
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	0800bb6c 	.word	0x0800bb6c

08000da0 <_ZN6NRF24L12SetPowerModeEh>:

// Control transceiver power mode
// input:
//   mode - new state of power mode, one of nRF24_PWR_xx values
void NRF24L::SetPowerMode(uint8_t mode) {
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
 8000da8:	460b      	mov	r3, r1
 8000daa:	70fb      	strb	r3, [r7, #3]
	uint8_t reg;

	reg = ReadReg(nRF24_REG_CONFIG);
 8000dac:	2100      	movs	r1, #0
 8000dae:	6878      	ldr	r0, [r7, #4]
 8000db0:	f7ff fea7 	bl	8000b02 <_ZN6NRF24L7ReadRegEh>
 8000db4:	4603      	mov	r3, r0
 8000db6:	73fb      	strb	r3, [r7, #15]
	if (mode == nRF24_PWR_UP) {
 8000db8:	78fb      	ldrb	r3, [r7, #3]
 8000dba:	2b02      	cmp	r3, #2
 8000dbc:	d104      	bne.n	8000dc8 <_ZN6NRF24L12SetPowerModeEh+0x28>
		// Set the PWR_UP bit of CONFIG register to wake the transceiver
		// It goes into Stanby-I mode with consumption about 26uA
		reg |= nRF24_CONFIG_PWR_UP;
 8000dbe:	7bfb      	ldrb	r3, [r7, #15]
 8000dc0:	f043 0302 	orr.w	r3, r3, #2
 8000dc4:	73fb      	strb	r3, [r7, #15]
 8000dc6:	e003      	b.n	8000dd0 <_ZN6NRF24L12SetPowerModeEh+0x30>
	} else {
		// Clear the PWR_UP bit of CONFIG register to put the transceiver
		// into power down mode with consumption about 900nA
		reg &= ~nRF24_CONFIG_PWR_UP;
 8000dc8:	7bfb      	ldrb	r3, [r7, #15]
 8000dca:	f023 0302 	bic.w	r3, r3, #2
 8000dce:	73fb      	strb	r3, [r7, #15]
	}
	WriteReg(nRF24_REG_CONFIG, reg);
 8000dd0:	7bfb      	ldrb	r3, [r7, #15]
 8000dd2:	461a      	mov	r2, r3
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	6878      	ldr	r0, [r7, #4]
 8000dd8:	f7ff feb2 	bl	8000b40 <_ZN6NRF24L8WriteRegEhh>
}
 8000ddc:	bf00      	nop
 8000dde:	3710      	adds	r7, #16
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}

08000de4 <_ZN6NRF24L18SetOperationalModeEh>:

// Set transceiver operational mode
// input:
//   mode - operational mode, one of nRF24_MODE_xx values
void NRF24L::SetOperationalMode(uint8_t mode) {
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
 8000dec:	460b      	mov	r3, r1
 8000dee:	70fb      	strb	r3, [r7, #3]
	uint8_t reg;

	// Configure PRIM_RX bit of the CONFIG register
	reg = ReadReg(nRF24_REG_CONFIG);
 8000df0:	2100      	movs	r1, #0
 8000df2:	6878      	ldr	r0, [r7, #4]
 8000df4:	f7ff fe85 	bl	8000b02 <_ZN6NRF24L7ReadRegEh>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_CONFIG_PRIM_RX;
 8000dfc:	7bfb      	ldrb	r3, [r7, #15]
 8000dfe:	f023 0301 	bic.w	r3, r3, #1
 8000e02:	73fb      	strb	r3, [r7, #15]
	reg |= (mode & nRF24_CONFIG_PRIM_RX );
 8000e04:	78fb      	ldrb	r3, [r7, #3]
 8000e06:	f003 0301 	and.w	r3, r3, #1
 8000e0a:	b2da      	uxtb	r2, r3
 8000e0c:	7bfb      	ldrb	r3, [r7, #15]
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	73fb      	strb	r3, [r7, #15]
	WriteReg(nRF24_REG_CONFIG, reg);
 8000e12:	7bfb      	ldrb	r3, [r7, #15]
 8000e14:	461a      	mov	r2, r3
 8000e16:	2100      	movs	r1, #0
 8000e18:	6878      	ldr	r0, [r7, #4]
 8000e1a:	f7ff fe91 	bl	8000b40 <_ZN6NRF24L8WriteRegEhh>
}
 8000e1e:	bf00      	nop
 8000e20:	3710      	adds	r7, #16
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}

08000e26 <_ZN6NRF24L12SetCRCSchemeEh>:
// Configure transceiver CRC scheme
// input:
//   scheme - CRC scheme, one of nRF24_CRC_xx values
// note: transceiver will forcibly turn on the CRC in case if auto acknowledgment
//       enabled for at least one RX pipe
void NRF24L::SetCRCScheme(uint8_t scheme) {
 8000e26:	b580      	push	{r7, lr}
 8000e28:	b084      	sub	sp, #16
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	6078      	str	r0, [r7, #4]
 8000e2e:	460b      	mov	r3, r1
 8000e30:	70fb      	strb	r3, [r7, #3]
	uint8_t reg;

	// Configure EN_CRC[3] and CRCO[2] bits of the CONFIG register
	reg = ReadReg(nRF24_REG_CONFIG);
 8000e32:	2100      	movs	r1, #0
 8000e34:	6878      	ldr	r0, [r7, #4]
 8000e36:	f7ff fe64 	bl	8000b02 <_ZN6NRF24L7ReadRegEh>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_CRC;
 8000e3e:	7bfb      	ldrb	r3, [r7, #15]
 8000e40:	f023 030c 	bic.w	r3, r3, #12
 8000e44:	73fb      	strb	r3, [r7, #15]
	reg |= (scheme & nRF24_MASK_CRC );
 8000e46:	78fb      	ldrb	r3, [r7, #3]
 8000e48:	f003 030c 	and.w	r3, r3, #12
 8000e4c:	b2da      	uxtb	r2, r3
 8000e4e:	7bfb      	ldrb	r3, [r7, #15]
 8000e50:	4313      	orrs	r3, r2
 8000e52:	73fb      	strb	r3, [r7, #15]
	WriteReg(nRF24_REG_CONFIG, reg);
 8000e54:	7bfb      	ldrb	r3, [r7, #15]
 8000e56:	461a      	mov	r2, r3
 8000e58:	2100      	movs	r1, #0
 8000e5a:	6878      	ldr	r0, [r7, #4]
 8000e5c:	f7ff fe70 	bl	8000b40 <_ZN6NRF24L8WriteRegEhh>
}
 8000e60:	bf00      	nop
 8000e62:	3710      	adds	r7, #16
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <_ZN6NRF24L12SetRFChannelEh>:
// Set frequency channel
// input:
//   channel - radio frequency channel, value from 0 to 127
// note: frequency will be (2400 + channel)MHz
// note: PLOS_CNT[7:4] bits of the OBSERVER_TX register will be reset
void NRF24L::SetRFChannel(uint8_t channel) {
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	460b      	mov	r3, r1
 8000e72:	70fb      	strb	r3, [r7, #3]
	WriteReg(nRF24_REG_RF_CH, channel);
 8000e74:	78fb      	ldrb	r3, [r7, #3]
 8000e76:	461a      	mov	r2, r3
 8000e78:	2105      	movs	r1, #5
 8000e7a:	6878      	ldr	r0, [r7, #4]
 8000e7c:	f7ff fe60 	bl	8000b40 <_ZN6NRF24L8WriteRegEhh>
}
 8000e80:	bf00      	nop
 8000e82:	3708      	adds	r7, #8
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}

08000e88 <_ZN6NRF24L12SetAddrWidthEh>:

// Set of address widths
// input:
//   addr_width - RX/TX address field width, value from 3 to 5
// note: this setting is common for all pipes
void NRF24L::SetAddrWidth(uint8_t addr_width) {
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
 8000e90:	460b      	mov	r3, r1
 8000e92:	70fb      	strb	r3, [r7, #3]
	WriteReg(nRF24_REG_SETUP_AW, addr_width - 2);
 8000e94:	78fb      	ldrb	r3, [r7, #3]
 8000e96:	3b02      	subs	r3, #2
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	461a      	mov	r2, r3
 8000e9c:	2103      	movs	r1, #3
 8000e9e:	6878      	ldr	r0, [r7, #4]
 8000ea0:	f7ff fe4e 	bl	8000b40 <_ZN6NRF24L8WriteRegEhh>
}
 8000ea4:	bf00      	nop
 8000ea6:	3708      	adds	r7, #8
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}

08000eac <_ZN6NRF24L7SetAddrEhPKh>:
// note: buffer length must be equal to current address width of transceiver
// note: for pipes[2..5] only first byte of address will be written because
//       other bytes of address equals to pipe1
// note: for pipes[2..5] only first byte of address will be written because
//       pipes 1-5 share the four most significant address bytes
void NRF24L::SetAddr(uint8_t pipe, const uint8_t *addr) {
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b086      	sub	sp, #24
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	60f8      	str	r0, [r7, #12]
 8000eb4:	460b      	mov	r3, r1
 8000eb6:	607a      	str	r2, [r7, #4]
 8000eb8:	72fb      	strb	r3, [r7, #11]
	uint8_t addr_width;

	// RX_ADDR_Px register
	switch (pipe) {
 8000eba:	7afb      	ldrb	r3, [r7, #11]
 8000ebc:	2b06      	cmp	r3, #6
 8000ebe:	d00a      	beq.n	8000ed6 <_ZN6NRF24L7SetAddrEhPKh+0x2a>
 8000ec0:	2b06      	cmp	r3, #6
 8000ec2:	dc42      	bgt.n	8000f4a <_ZN6NRF24L7SetAddrEhPKh+0x9e>
 8000ec4:	2b01      	cmp	r3, #1
 8000ec6:	dc02      	bgt.n	8000ece <_ZN6NRF24L7SetAddrEhPKh+0x22>
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	da04      	bge.n	8000ed6 <_ZN6NRF24L7SetAddrEhPKh+0x2a>
		// Write address LSBbyte (only first byte from the addr buffer)
		WriteReg(NRF24L::ADDR_REGS[pipe], *addr);
		break;
	default:
		// Incorrect pipe number -> do nothing
		break;
 8000ecc:	e03d      	b.n	8000f4a <_ZN6NRF24L7SetAddrEhPKh+0x9e>
 8000ece:	3b02      	subs	r3, #2
	switch (pipe) {
 8000ed0:	2b03      	cmp	r3, #3
 8000ed2:	d83a      	bhi.n	8000f4a <_ZN6NRF24L7SetAddrEhPKh+0x9e>
 8000ed4:	e02e      	b.n	8000f34 <_ZN6NRF24L7SetAddrEhPKh+0x88>
		addr_width = ReadReg(nRF24_REG_SETUP_AW) + 1;
 8000ed6:	2103      	movs	r1, #3
 8000ed8:	68f8      	ldr	r0, [r7, #12]
 8000eda:	f7ff fe12 	bl	8000b02 <_ZN6NRF24L7ReadRegEh>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	75fb      	strb	r3, [r7, #23]
		addr += addr_width;
 8000ee4:	7dfb      	ldrb	r3, [r7, #23]
 8000ee6:	687a      	ldr	r2, [r7, #4]
 8000ee8:	4413      	add	r3, r2
 8000eea:	607b      	str	r3, [r7, #4]
		nRF24_CSN_L();
 8000eec:	68f8      	ldr	r0, [r7, #12]
 8000eee:	f7ff fd77 	bl	80009e0 <_ZN6NRF24L11nRF24_CSN_LEv>
		nRF24_LL_RW(nRF24_CMD_W_REGISTER | NRF24L::ADDR_REGS[pipe]);
 8000ef2:	7afb      	ldrb	r3, [r7, #11]
 8000ef4:	68fa      	ldr	r2, [r7, #12]
 8000ef6:	4413      	add	r3, r2
 8000ef8:	7f1b      	ldrb	r3, [r3, #28]
 8000efa:	f043 0320 	orr.w	r3, r3, #32
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	4619      	mov	r1, r3
 8000f02:	68f8      	ldr	r0, [r7, #12]
 8000f04:	f7ff fd8c 	bl	8000a20 <_ZN6NRF24L11nRF24_LL_RWEh>
			nRF24_LL_RW(*addr--);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	1e5a      	subs	r2, r3, #1
 8000f0c:	607a      	str	r2, [r7, #4]
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	4619      	mov	r1, r3
 8000f12:	68f8      	ldr	r0, [r7, #12]
 8000f14:	f7ff fd84 	bl	8000a20 <_ZN6NRF24L11nRF24_LL_RWEh>
		} while (addr_width--);
 8000f18:	7dfb      	ldrb	r3, [r7, #23]
 8000f1a:	1e5a      	subs	r2, r3, #1
 8000f1c:	75fa      	strb	r2, [r7, #23]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	bf14      	ite	ne
 8000f22:	2301      	movne	r3, #1
 8000f24:	2300      	moveq	r3, #0
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d1ed      	bne.n	8000f08 <_ZN6NRF24L7SetAddrEhPKh+0x5c>
		nRF24_CSN_H();
 8000f2c:	68f8      	ldr	r0, [r7, #12]
 8000f2e:	f7ff fd67 	bl	8000a00 <_ZN6NRF24L11nRF24_CSN_HEv>
		break;
 8000f32:	e00b      	b.n	8000f4c <_ZN6NRF24L7SetAddrEhPKh+0xa0>
		WriteReg(NRF24L::ADDR_REGS[pipe], *addr);
 8000f34:	7afb      	ldrb	r3, [r7, #11]
 8000f36:	68fa      	ldr	r2, [r7, #12]
 8000f38:	4413      	add	r3, r2
 8000f3a:	7f19      	ldrb	r1, [r3, #28]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	461a      	mov	r2, r3
 8000f42:	68f8      	ldr	r0, [r7, #12]
 8000f44:	f7ff fdfc 	bl	8000b40 <_ZN6NRF24L8WriteRegEhh>
		break;
 8000f48:	e000      	b.n	8000f4c <_ZN6NRF24L7SetAddrEhPKh+0xa0>
		break;
 8000f4a:	bf00      	nop
	}
}
 8000f4c:	bf00      	nop
 8000f4e:	3718      	adds	r7, #24
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}

08000f54 <_ZN6NRF24L10SetTXPowerEh>:

// Configure RF output power in TX mode
// input:
//   tx_pwr - RF output power, one of nRF24_TXPWR_xx values
void NRF24L::SetTXPower(uint8_t tx_pwr) {
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b084      	sub	sp, #16
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
 8000f5c:	460b      	mov	r3, r1
 8000f5e:	70fb      	strb	r3, [r7, #3]
	uint8_t reg;

	// Configure RF_PWR[2:1] bits of the RF_SETUP register
	reg = ReadReg(nRF24_REG_RF_SETUP);
 8000f60:	2106      	movs	r1, #6
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	f7ff fdcd 	bl	8000b02 <_ZN6NRF24L7ReadRegEh>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_RF_PWR;
 8000f6c:	7bfb      	ldrb	r3, [r7, #15]
 8000f6e:	f023 0306 	bic.w	r3, r3, #6
 8000f72:	73fb      	strb	r3, [r7, #15]
	reg |= tx_pwr;
 8000f74:	7bfa      	ldrb	r2, [r7, #15]
 8000f76:	78fb      	ldrb	r3, [r7, #3]
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	73fb      	strb	r3, [r7, #15]
	WriteReg(nRF24_REG_RF_SETUP, reg);
 8000f7c:	7bfb      	ldrb	r3, [r7, #15]
 8000f7e:	461a      	mov	r2, r3
 8000f80:	2106      	movs	r1, #6
 8000f82:	6878      	ldr	r0, [r7, #4]
 8000f84:	f7ff fddc 	bl	8000b40 <_ZN6NRF24L8WriteRegEhh>
}
 8000f88:	bf00      	nop
 8000f8a:	3710      	adds	r7, #16
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}

08000f90 <_ZN6NRF24L11SetDataRateEh>:

// Configure transceiver data rate
// input:
//   data_rate - data rate, one of nRF24_DR_xx values
void NRF24L::SetDataRate(uint8_t data_rate) {
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	460b      	mov	r3, r1
 8000f9a:	70fb      	strb	r3, [r7, #3]
	uint8_t reg;

	// Configure RF_DR_LOW[5] and RF_DR_HIGH[3] bits of the RF_SETUP register
	reg = ReadReg(nRF24_REG_RF_SETUP);
 8000f9c:	2106      	movs	r1, #6
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	f7ff fdaf 	bl	8000b02 <_ZN6NRF24L7ReadRegEh>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_DATARATE;
 8000fa8:	7bfb      	ldrb	r3, [r7, #15]
 8000faa:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 8000fae:	73fb      	strb	r3, [r7, #15]
	reg |= data_rate;
 8000fb0:	7bfa      	ldrb	r2, [r7, #15]
 8000fb2:	78fb      	ldrb	r3, [r7, #3]
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	73fb      	strb	r3, [r7, #15]
	WriteReg(nRF24_REG_RF_SETUP, reg);
 8000fb8:	7bfb      	ldrb	r3, [r7, #15]
 8000fba:	461a      	mov	r2, r3
 8000fbc:	2106      	movs	r1, #6
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	f7ff fdbe 	bl	8000b40 <_ZN6NRF24L8WriteRegEhh>
}
 8000fc4:	bf00      	nop
 8000fc6:	3710      	adds	r7, #16
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <_ZN6NRF24L9DisableAAEh>:
}

// Disable the auto retransmit (a.k.a. enhanced ShockBurst) for one or all RX pipes
// input:
//   pipe - number of the RX pipe, value from 0 to 5, any other value will disable AA for all RX pipes
void NRF24L::DisableAA(uint8_t pipe) {
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	460b      	mov	r3, r1
 8000fd6:	70fb      	strb	r3, [r7, #3]
	uint8_t reg;

	if (pipe > 5) {
 8000fd8:	78fb      	ldrb	r3, [r7, #3]
 8000fda:	2b05      	cmp	r3, #5
 8000fdc:	d905      	bls.n	8000fea <_ZN6NRF24L9DisableAAEh+0x1e>
		// Disable Auto-ACK for ALL pipes
		WriteReg(nRF24_REG_EN_AA, 0x00);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	2101      	movs	r1, #1
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f7ff fdac 	bl	8000b40 <_ZN6NRF24L8WriteRegEhh>
		// Clear bit in the EN_AA register
		reg = ReadReg(nRF24_REG_EN_AA);
		reg &= ~(1 << pipe);
		WriteReg(nRF24_REG_EN_AA, reg);
	}
}
 8000fe8:	e017      	b.n	800101a <_ZN6NRF24L9DisableAAEh+0x4e>
		reg = ReadReg(nRF24_REG_EN_AA);
 8000fea:	2101      	movs	r1, #1
 8000fec:	6878      	ldr	r0, [r7, #4]
 8000fee:	f7ff fd88 	bl	8000b02 <_ZN6NRF24L7ReadRegEh>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	73fb      	strb	r3, [r7, #15]
		reg &= ~(1 << pipe);
 8000ff6:	78fb      	ldrb	r3, [r7, #3]
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffe:	b25b      	sxtb	r3, r3
 8001000:	43db      	mvns	r3, r3
 8001002:	b25a      	sxtb	r2, r3
 8001004:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001008:	4013      	ands	r3, r2
 800100a:	b25b      	sxtb	r3, r3
 800100c:	73fb      	strb	r3, [r7, #15]
		WriteReg(nRF24_REG_EN_AA, reg);
 800100e:	7bfb      	ldrb	r3, [r7, #15]
 8001010:	461a      	mov	r2, r3
 8001012:	2101      	movs	r1, #1
 8001014:	6878      	ldr	r0, [r7, #4]
 8001016:	f7ff fd93 	bl	8000b40 <_ZN6NRF24L8WriteRegEhh>
}
 800101a:	bf00      	nop
 800101c:	3710      	adds	r7, #16
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}

08001022 <_ZN6NRF24L9GetStatusEv>:

// Get value of the STATUS register
// return: value of STATUS register
uint8_t NRF24L::GetStatus(void) {
 8001022:	b580      	push	{r7, lr}
 8001024:	b082      	sub	sp, #8
 8001026:	af00      	add	r7, sp, #0
 8001028:	6078      	str	r0, [r7, #4]
	return ReadReg(nRF24_REG_STATUS);
 800102a:	2107      	movs	r1, #7
 800102c:	6878      	ldr	r0, [r7, #4]
 800102e:	f7ff fd68 	bl	8000b02 <_ZN6NRF24L7ReadRegEh>
 8001032:	4603      	mov	r3, r0
}
 8001034:	4618      	mov	r0, r3
 8001036:	3708      	adds	r7, #8
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}

0800103c <_ZN6NRF24L7FlushTXEv>:
	reg = ReadReg(nRF24_REG_RF_CH);
	WriteReg(nRF24_REG_RF_CH, reg);
}

// Flush the TX FIFO
void NRF24L::FlushTX(void) {
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
	WriteReg(nRF24_CMD_FLUSH_TX, nRF24_CMD_NOP);
 8001044:	22ff      	movs	r2, #255	@ 0xff
 8001046:	21e1      	movs	r1, #225	@ 0xe1
 8001048:	6878      	ldr	r0, [r7, #4]
 800104a:	f7ff fd79 	bl	8000b40 <_ZN6NRF24L8WriteRegEhh>
}
 800104e:	bf00      	nop
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}

08001056 <_ZN6NRF24L7FlushRXEv>:

// Flush the RX FIFO
void NRF24L::FlushRX(void) {
 8001056:	b580      	push	{r7, lr}
 8001058:	b082      	sub	sp, #8
 800105a:	af00      	add	r7, sp, #0
 800105c:	6078      	str	r0, [r7, #4]
	WriteReg(nRF24_CMD_FLUSH_RX, nRF24_CMD_NOP);
 800105e:	22ff      	movs	r2, #255	@ 0xff
 8001060:	21e2      	movs	r1, #226	@ 0xe2
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f7ff fd6c 	bl	8000b40 <_ZN6NRF24L8WriteRegEhh>
}
 8001068:	bf00      	nop
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}

08001070 <_ZN6NRF24L13ClearIRQFlagsEv>:

// Clear any pending IRQ flags
void NRF24L::ClearIRQFlags(void) {
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
	uint8_t reg;

	// Clear RX_DR, TX_DS and MAX_RT bits of the STATUS register
	reg = ReadReg(nRF24_REG_STATUS);
 8001078:	2107      	movs	r1, #7
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f7ff fd41 	bl	8000b02 <_ZN6NRF24L7ReadRegEh>
 8001080:	4603      	mov	r3, r0
 8001082:	73fb      	strb	r3, [r7, #15]
	reg |= nRF24_MASK_STATUS_IRQ;
 8001084:	7bfb      	ldrb	r3, [r7, #15]
 8001086:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 800108a:	73fb      	strb	r3, [r7, #15]
	WriteReg(nRF24_REG_STATUS, reg);
 800108c:	7bfb      	ldrb	r3, [r7, #15]
 800108e:	461a      	mov	r2, r3
 8001090:	2107      	movs	r1, #7
 8001092:	6878      	ldr	r0, [r7, #4]
 8001094:	f7ff fd54 	bl	8000b40 <_ZN6NRF24L8WriteRegEhh>
}
 8001098:	bf00      	nop
 800109a:	3710      	adds	r7, #16
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}

080010a0 <_ZN6NRF24L12WritePayloadEPhh>:

// Write TX payload
// input:
//   pBuf - pointer to the buffer with payload data
//   length - payload length in bytes
void NRF24L::WritePayload(uint8_t *pBuf, uint8_t length) {
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	60f8      	str	r0, [r7, #12]
 80010a8:	60b9      	str	r1, [r7, #8]
 80010aa:	4613      	mov	r3, r2
 80010ac:	71fb      	strb	r3, [r7, #7]
	WriteMBReg(nRF24_CMD_W_TX_PAYLOAD, pBuf, length);
 80010ae:	79fb      	ldrb	r3, [r7, #7]
 80010b0:	68ba      	ldr	r2, [r7, #8]
 80010b2:	21a0      	movs	r1, #160	@ 0xa0
 80010b4:	68f8      	ldr	r0, [r7, #12]
 80010b6:	f7ff fdac 	bl	8000c12 <_ZN6NRF24L10WriteMBRegEhPhh>
}
 80010ba:	bf00      	nop
 80010bc:	3710      	adds	r7, #16
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
	...

080010c4 <_ZN6NRF24L6InitTXEv>:
	}
	nRF24_CSN_H();

}

void NRF24L::InitTX() {
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
	// Disable ShockBurst for all RX pipes
	DisableAA(0xFF);
 80010cc:	21ff      	movs	r1, #255	@ 0xff
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f7ff ff7c 	bl	8000fcc <_ZN6NRF24L9DisableAAEh>
	// Set RF channel
	SetRFChannel(115);
 80010d4:	2173      	movs	r1, #115	@ 0x73
 80010d6:	6878      	ldr	r0, [r7, #4]
 80010d8:	f7ff fec6 	bl	8000e68 <_ZN6NRF24L12SetRFChannelEh>
	// Set data rate
	SetDataRate(nRF24_DR_250kbps);
 80010dc:	2120      	movs	r1, #32
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f7ff ff56 	bl	8000f90 <_ZN6NRF24L11SetDataRateEh>
	// Set CRC scheme
	SetCRCScheme(nRF24_CRC_2byte);
 80010e4:	210c      	movs	r1, #12
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f7ff fe9d 	bl	8000e26 <_ZN6NRF24L12SetCRCSchemeEh>
	// Set address width, its common for all pipes (RX and TX)
	SetAddrWidth(3);
 80010ec:	2103      	movs	r1, #3
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	f7ff feca 	bl	8000e88 <_ZN6NRF24L12SetAddrWidthEh>
	// Configure TX PIPE
	static const uint8_t nRF24_ADDR[] = { 0xE7, 0x1C, 0xE3 };
	SetAddr(nRF24_PIPETX, nRF24_ADDR); // program TX address
 80010f4:	4a0b      	ldr	r2, [pc, #44]	@ (8001124 <_ZN6NRF24L6InitTXEv+0x60>)
 80010f6:	2106      	movs	r1, #6
 80010f8:	6878      	ldr	r0, [r7, #4]
 80010fa:	f7ff fed7 	bl	8000eac <_ZN6NRF24L7SetAddrEhPKh>
	// Set TX power (maximum)
	SetTXPower(nRF24_TXPWR_0dBm);
 80010fe:	2106      	movs	r1, #6
 8001100:	6878      	ldr	r0, [r7, #4]
 8001102:	f7ff ff27 	bl	8000f54 <_ZN6NRF24L10SetTXPowerEh>
	// Set operational mode (PTX == transmitter)
	SetOperationalMode(nRF24_MODE_TX);
 8001106:	2100      	movs	r1, #0
 8001108:	6878      	ldr	r0, [r7, #4]
 800110a:	f7ff fe6b 	bl	8000de4 <_ZN6NRF24L18SetOperationalModeEh>
	// Clear any pending IRQ flags
	ClearIRQFlags();
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f7ff ffae 	bl	8001070 <_ZN6NRF24L13ClearIRQFlagsEv>
	// Wake the transceiver
	SetPowerMode(nRF24_PWR_UP);
 8001114:	2102      	movs	r1, #2
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	f7ff fe42 	bl	8000da0 <_ZN6NRF24L12SetPowerModeEh>
}
 800111c:	bf00      	nop
 800111e:	3708      	adds	r7, #8
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	0800bbf4 	.word	0x0800bbf4

08001128 <_ZN6Tm1638C1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_t>:
#define SPI_TIMEOUT 20

char spi_buf[17];
char button_buf[4];

Tm1638::Tm1638 (SPI_HandleTypeDef *spi,
 8001128:	b5f0      	push	{r4, r5, r6, r7, lr}
 800112a:	b085      	sub	sp, #20
 800112c:	af00      	add	r7, sp, #0
 800112e:	60f8      	str	r0, [r7, #12]
 8001130:	60b9      	str	r1, [r7, #8]
 8001132:	607a      	str	r2, [r7, #4]
 8001134:	807b      	strh	r3, [r7, #2]
		GPIO_TypeDef *stbPort,
		uint16_t stbPin,
		GPIO_TypeDef *mosiPort,
		uint16_t mosiPin):
    _spi(spi), _stbPort(stbPort), _stbPin(stbPin), _mosiPort(mosiPort), _mosiPin(mosiPin)
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	68ba      	ldr	r2, [r7, #8]
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	687a      	ldr	r2, [r7, #4]
 8001140:	605a      	str	r2, [r3, #4]
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	887a      	ldrh	r2, [r7, #2]
 8001146:	811a      	strh	r2, [r3, #8]
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800114c:	60da      	str	r2, [r3, #12]
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8001152:	821a      	strh	r2, [r3, #16]
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	2280      	movs	r2, #128	@ 0x80
 8001158:	749a      	strb	r2, [r3, #18]
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	2240      	movs	r2, #64	@ 0x40
 800115e:	74da      	strb	r2, [r3, #19]
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	2244      	movs	r2, #68	@ 0x44
 8001164:	751a      	strb	r2, [r3, #20]
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	22c0      	movs	r2, #192	@ 0xc0
 800116a:	755a      	strb	r2, [r3, #21]
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	4a0e      	ldr	r2, [pc, #56]	@ (80011a8 <_ZN6Tm1638C1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_t+0x80>)
 8001170:	4614      	mov	r4, r2
 8001172:	f103 0c16 	add.w	ip, r3, #22
 8001176:	f104 0e20 	add.w	lr, r4, #32
 800117a:	4665      	mov	r5, ip
 800117c:	4626      	mov	r6, r4
 800117e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001180:	6028      	str	r0, [r5, #0]
 8001182:	6069      	str	r1, [r5, #4]
 8001184:	60aa      	str	r2, [r5, #8]
 8001186:	60eb      	str	r3, [r5, #12]
 8001188:	3410      	adds	r4, #16
 800118a:	f10c 0c10 	add.w	ip, ip, #16
 800118e:	4574      	cmp	r4, lr
 8001190:	d1f3      	bne.n	800117a <_ZN6Tm1638C1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_t+0x52>
 8001192:	4663      	mov	r3, ip
 8001194:	4622      	mov	r2, r4
 8001196:	6810      	ldr	r0, [r2, #0]
 8001198:	6018      	str	r0, [r3, #0]
 800119a:	7912      	ldrb	r2, [r2, #4]
 800119c:	711a      	strb	r2, [r3, #4]
{
}
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	4618      	mov	r0, r3
 80011a2:	3714      	adds	r7, #20
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011a8:	0800bb74 	.word	0x0800bb74

080011ac <_ZN6Tm16384testEv>:

void Tm1638::test(){
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  turnOnFull();
 80011b4:	6878      	ldr	r0, [r7, #4]
 80011b6:	f000 f82f 	bl	8001218 <_ZN6Tm163810turnOnFullEv>
  clear();
 80011ba:	6878      	ldr	r0, [r7, #4]
 80011bc:	f000 f840 	bl	8001240 <_ZN6Tm16385clearEv>

  writeCharTo(0, 'L');
 80011c0:	224c      	movs	r2, #76	@ 0x4c
 80011c2:	2100      	movs	r1, #0
 80011c4:	6878      	ldr	r0, [r7, #4]
 80011c6:	f000 f875 	bl	80012b4 <_ZN6Tm163811writeCharToEhc>
  writeCharTo(1, 'e');
 80011ca:	2265      	movs	r2, #101	@ 0x65
 80011cc:	2101      	movs	r1, #1
 80011ce:	6878      	ldr	r0, [r7, #4]
 80011d0:	f000 f870 	bl	80012b4 <_ZN6Tm163811writeCharToEhc>
  writeCharTo(2, 'o');
 80011d4:	226f      	movs	r2, #111	@ 0x6f
 80011d6:	2102      	movs	r1, #2
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f000 f86b 	bl	80012b4 <_ZN6Tm163811writeCharToEhc>
  writeCharTo(3, 'n');
 80011de:	226e      	movs	r2, #110	@ 0x6e
 80011e0:	2103      	movs	r1, #3
 80011e2:	6878      	ldr	r0, [r7, #4]
 80011e4:	f000 f866 	bl	80012b4 <_ZN6Tm163811writeCharToEhc>

  writeCharTo(4,'E');
 80011e8:	2245      	movs	r2, #69	@ 0x45
 80011ea:	2104      	movs	r1, #4
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f000 f861 	bl	80012b4 <_ZN6Tm163811writeCharToEhc>
  writeCharTo(5,'m');
 80011f2:	226d      	movs	r2, #109	@ 0x6d
 80011f4:	2105      	movs	r1, #5
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f000 f85c 	bl	80012b4 <_ZN6Tm163811writeCharToEhc>
  writeCharTo(6,'m');
 80011fc:	226d      	movs	r2, #109	@ 0x6d
 80011fe:	2106      	movs	r1, #6
 8001200:	6878      	ldr	r0, [r7, #4]
 8001202:	f000 f857 	bl	80012b4 <_ZN6Tm163811writeCharToEhc>
  writeCharTo(7,'a');
 8001206:	2261      	movs	r2, #97	@ 0x61
 8001208:	2107      	movs	r1, #7
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f000 f852 	bl	80012b4 <_ZN6Tm163811writeCharToEhc>
}
 8001210:	bf00      	nop
 8001212:	3708      	adds	r7, #8
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}

08001218 <_ZN6Tm163810turnOnFullEv>:

void Tm1638::turnOnFull(){
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  uint8_t brightness = enable | 0x0F;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	7c9b      	ldrb	r3, [r3, #18]
 8001224:	f043 030f 	orr.w	r3, r3, #15
 8001228:	b2db      	uxtb	r3, r3
 800122a:	73fb      	strb	r3, [r7, #15]
  setMode(&brightness);
 800122c:	f107 030f 	add.w	r3, r7, #15
 8001230:	4619      	mov	r1, r3
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	f000 f87a 	bl	800132c <_ZN6Tm16387setModeEPKh>
}
 8001238:	bf00      	nop
 800123a:	3710      	adds	r7, #16
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}

08001240 <_ZN6Tm16385clearEv>:
void Tm1638::turnOn(uint8_t val){ // 0 to 15
  uint8_t brightness = enable | (val & 0x0F);
  setMode(&brightness);
}

void Tm1638::clear(){
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  setMode(&seriesOut);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	3313      	adds	r3, #19
 800124c:	4619      	mov	r1, r3
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f000 f86c 	bl	800132c <_ZN6Tm16387setModeEPKh>

  for(int i = 0; i < 18; i++) { spi_buf[i] = 0; }
 8001254:	2300      	movs	r3, #0
 8001256:	60fb      	str	r3, [r7, #12]
 8001258:	e007      	b.n	800126a <_ZN6Tm16385clearEv+0x2a>
 800125a:	4a15      	ldr	r2, [pc, #84]	@ (80012b0 <_ZN6Tm16385clearEv+0x70>)
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	4413      	add	r3, r2
 8001260:	2200      	movs	r2, #0
 8001262:	701a      	strb	r2, [r3, #0]
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	3301      	adds	r3, #1
 8001268:	60fb      	str	r3, [r7, #12]
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	2b11      	cmp	r3, #17
 800126e:	ddf4      	ble.n	800125a <_ZN6Tm16385clearEv+0x1a>
  spi_buf[0] = startAddr;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	7d5a      	ldrb	r2, [r3, #21]
 8001274:	4b0e      	ldr	r3, [pc, #56]	@ (80012b0 <_ZN6Tm16385clearEv+0x70>)
 8001276:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(_stbPort, _stbPin, GPIO_PIN_RESET);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6858      	ldr	r0, [r3, #4]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	891b      	ldrh	r3, [r3, #8]
 8001280:	2200      	movs	r2, #0
 8001282:	4619      	mov	r1, r3
 8001284:	f002 fa8e 	bl	80037a4 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(_spi, (uint8_t *)spi_buf, 17, SPI_TIMEOUT);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6818      	ldr	r0, [r3, #0]
 800128c:	2314      	movs	r3, #20
 800128e:	2211      	movs	r2, #17
 8001290:	4907      	ldr	r1, [pc, #28]	@ (80012b0 <_ZN6Tm16385clearEv+0x70>)
 8001292:	f004 f9ea 	bl	800566a <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(_stbPort, _stbPin, GPIO_PIN_SET);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6858      	ldr	r0, [r3, #4]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	891b      	ldrh	r3, [r3, #8]
 800129e:	2201      	movs	r2, #1
 80012a0:	4619      	mov	r1, r3
 80012a2:	f002 fa7f 	bl	80037a4 <HAL_GPIO_WritePin>
}
 80012a6:	bf00      	nop
 80012a8:	3710      	adds	r7, #16
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	20000274 	.word	0x20000274

080012b4 <_ZN6Tm163811writeCharToEhc>:

void Tm1638::writeCharTo(uint8_t pos, char val){
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	460b      	mov	r3, r1
 80012be:	70fb      	strb	r3, [r7, #3]
 80012c0:	4613      	mov	r3, r2
 80012c2:	70bb      	strb	r3, [r7, #2]
  char result = 0;
 80012c4:	2300      	movs	r3, #0
 80012c6:	73fb      	strb	r3, [r7, #15]
  if(val >= '0' && val <= '9')
 80012c8:	78bb      	ldrb	r3, [r7, #2]
 80012ca:	2b2f      	cmp	r3, #47	@ 0x2f
 80012cc:	d909      	bls.n	80012e2 <_ZN6Tm163811writeCharToEhc+0x2e>
 80012ce:	78bb      	ldrb	r3, [r7, #2]
 80012d0:	2b39      	cmp	r3, #57	@ 0x39
 80012d2:	d806      	bhi.n	80012e2 <_ZN6Tm163811writeCharToEhc+0x2e>
  {
    result = letterMap[0 + (val - '0')];
 80012d4:	78bb      	ldrb	r3, [r7, #2]
 80012d6:	3b30      	subs	r3, #48	@ 0x30
 80012d8:	687a      	ldr	r2, [r7, #4]
 80012da:	4413      	add	r3, r2
 80012dc:	7d9b      	ldrb	r3, [r3, #22]
 80012de:	73fb      	strb	r3, [r7, #15]
 80012e0:	e018      	b.n	8001314 <_ZN6Tm163811writeCharToEhc+0x60>
  }
  else if(val >= 'a' && val <= 'z')
 80012e2:	78bb      	ldrb	r3, [r7, #2]
 80012e4:	2b60      	cmp	r3, #96	@ 0x60
 80012e6:	d909      	bls.n	80012fc <_ZN6Tm163811writeCharToEhc+0x48>
 80012e8:	78bb      	ldrb	r3, [r7, #2]
 80012ea:	2b7a      	cmp	r3, #122	@ 0x7a
 80012ec:	d806      	bhi.n	80012fc <_ZN6Tm163811writeCharToEhc+0x48>
  {
    result = letterMap[10 + (val - 'a')];
 80012ee:	78bb      	ldrb	r3, [r7, #2]
 80012f0:	3b57      	subs	r3, #87	@ 0x57
 80012f2:	687a      	ldr	r2, [r7, #4]
 80012f4:	4413      	add	r3, r2
 80012f6:	7d9b      	ldrb	r3, [r3, #22]
 80012f8:	73fb      	strb	r3, [r7, #15]
 80012fa:	e00b      	b.n	8001314 <_ZN6Tm163811writeCharToEhc+0x60>
  }
  else if(val >= 'A' && val <= 'Z')
 80012fc:	78bb      	ldrb	r3, [r7, #2]
 80012fe:	2b40      	cmp	r3, #64	@ 0x40
 8001300:	d908      	bls.n	8001314 <_ZN6Tm163811writeCharToEhc+0x60>
 8001302:	78bb      	ldrb	r3, [r7, #2]
 8001304:	2b5a      	cmp	r3, #90	@ 0x5a
 8001306:	d805      	bhi.n	8001314 <_ZN6Tm163811writeCharToEhc+0x60>
  {
    result = letterMap[10 + (val - 'A')];
 8001308:	78bb      	ldrb	r3, [r7, #2]
 800130a:	3b37      	subs	r3, #55	@ 0x37
 800130c:	687a      	ldr	r2, [r7, #4]
 800130e:	4413      	add	r3, r2
 8001310:	7d9b      	ldrb	r3, [r3, #22]
 8001312:	73fb      	strb	r3, [r7, #15]
  }
  writeTo(pos * 2, result);
 8001314:	78fb      	ldrb	r3, [r7, #3]
 8001316:	005b      	lsls	r3, r3, #1
 8001318:	b2db      	uxtb	r3, r3
 800131a:	7bfa      	ldrb	r2, [r7, #15]
 800131c:	4619      	mov	r1, r3
 800131e:	6878      	ldr	r0, [r7, #4]
 8001320:	f000 f824 	bl	800136c <_ZN6Tm16387writeToEhh>
}
 8001324:	bf00      	nop
 8001326:	3710      	adds	r7, #16
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}

0800132c <_ZN6Tm16387setModeEPKh>:
  return result;
}

// private

void Tm1638::setMode(const uint8_t *mode){
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	6039      	str	r1, [r7, #0]
  HAL_GPIO_WritePin(_stbPort, _stbPin, GPIO_PIN_RESET);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6858      	ldr	r0, [r3, #4]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	891b      	ldrh	r3, [r3, #8]
 800133e:	2200      	movs	r2, #0
 8001340:	4619      	mov	r1, r3
 8001342:	f002 fa2f 	bl	80037a4 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(_spi, (uint8_t *)mode, 1, SPI_TIMEOUT);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6818      	ldr	r0, [r3, #0]
 800134a:	2314      	movs	r3, #20
 800134c:	2201      	movs	r2, #1
 800134e:	6839      	ldr	r1, [r7, #0]
 8001350:	f004 f98b 	bl	800566a <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(_stbPort, _stbPin, GPIO_PIN_SET);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6858      	ldr	r0, [r3, #4]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	891b      	ldrh	r3, [r3, #8]
 800135c:	2201      	movs	r2, #1
 800135e:	4619      	mov	r1, r3
 8001360:	f002 fa20 	bl	80037a4 <HAL_GPIO_WritePin>
}
 8001364:	bf00      	nop
 8001366:	3708      	adds	r7, #8
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}

0800136c <_ZN6Tm16387writeToEhh>:

void Tm1638::writeTo(uint8_t reg, uint8_t val){
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	460b      	mov	r3, r1
 8001376:	70fb      	strb	r3, [r7, #3]
 8001378:	4613      	mov	r3, r2
 800137a:	70bb      	strb	r3, [r7, #2]
  setMode(&charOut);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	3314      	adds	r3, #20
 8001380:	4619      	mov	r1, r3
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f7ff ffd2 	bl	800132c <_ZN6Tm16387setModeEPKh>
  spi_buf[0] = startAddr | reg;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	7d5a      	ldrb	r2, [r3, #21]
 800138c:	78fb      	ldrb	r3, [r7, #3]
 800138e:	4313      	orrs	r3, r2
 8001390:	b2da      	uxtb	r2, r3
 8001392:	4b10      	ldr	r3, [pc, #64]	@ (80013d4 <_ZN6Tm16387writeToEhh+0x68>)
 8001394:	701a      	strb	r2, [r3, #0]
  spi_buf[1] = val;
 8001396:	4a0f      	ldr	r2, [pc, #60]	@ (80013d4 <_ZN6Tm16387writeToEhh+0x68>)
 8001398:	78bb      	ldrb	r3, [r7, #2]
 800139a:	7053      	strb	r3, [r2, #1]

  HAL_GPIO_WritePin(_stbPort, _stbPin, GPIO_PIN_RESET);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6858      	ldr	r0, [r3, #4]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	891b      	ldrh	r3, [r3, #8]
 80013a4:	2200      	movs	r2, #0
 80013a6:	4619      	mov	r1, r3
 80013a8:	f002 f9fc 	bl	80037a4 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(_spi, (uint8_t *)spi_buf, 2, SPI_TIMEOUT);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6818      	ldr	r0, [r3, #0]
 80013b0:	2314      	movs	r3, #20
 80013b2:	2202      	movs	r2, #2
 80013b4:	4907      	ldr	r1, [pc, #28]	@ (80013d4 <_ZN6Tm16387writeToEhh+0x68>)
 80013b6:	f004 f958 	bl	800566a <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(_stbPort, _stbPin, GPIO_PIN_SET);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6858      	ldr	r0, [r3, #4]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	891b      	ldrh	r3, [r3, #8]
 80013c2:	2201      	movs	r2, #1
 80013c4:	4619      	mov	r1, r3
 80013c6:	f002 f9ed 	bl	80037a4 <HAL_GPIO_WritePin>
}
 80013ca:	bf00      	nop
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	20000274 	.word	0x20000274

080013d8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013de:	463b      	mov	r3, r7
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	605a      	str	r2, [r3, #4]
 80013e6:	609a      	str	r2, [r3, #8]
 80013e8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80013ea:	4b29      	ldr	r3, [pc, #164]	@ (8001490 <MX_ADC1_Init+0xb8>)
 80013ec:	4a29      	ldr	r2, [pc, #164]	@ (8001494 <MX_ADC1_Init+0xbc>)
 80013ee:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80013f0:	4b27      	ldr	r3, [pc, #156]	@ (8001490 <MX_ADC1_Init+0xb8>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80013f6:	4b26      	ldr	r3, [pc, #152]	@ (8001490 <MX_ADC1_Init+0xb8>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80013fc:	4b24      	ldr	r3, [pc, #144]	@ (8001490 <MX_ADC1_Init+0xb8>)
 80013fe:	2201      	movs	r2, #1
 8001400:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001402:	4b23      	ldr	r3, [pc, #140]	@ (8001490 <MX_ADC1_Init+0xb8>)
 8001404:	2201      	movs	r2, #1
 8001406:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001408:	4b21      	ldr	r3, [pc, #132]	@ (8001490 <MX_ADC1_Init+0xb8>)
 800140a:	2200      	movs	r2, #0
 800140c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING;
 8001410:	4b1f      	ldr	r3, [pc, #124]	@ (8001490 <MX_ADC1_Init+0xb8>)
 8001412:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8001416:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8001418:	4b1d      	ldr	r3, [pc, #116]	@ (8001490 <MX_ADC1_Init+0xb8>)
 800141a:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 800141e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001420:	4b1b      	ldr	r3, [pc, #108]	@ (8001490 <MX_ADC1_Init+0xb8>)
 8001422:	2200      	movs	r2, #0
 8001424:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8001426:	4b1a      	ldr	r3, [pc, #104]	@ (8001490 <MX_ADC1_Init+0xb8>)
 8001428:	2202      	movs	r2, #2
 800142a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800142c:	4b18      	ldr	r3, [pc, #96]	@ (8001490 <MX_ADC1_Init+0xb8>)
 800142e:	2201      	movs	r2, #1
 8001430:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001434:	4b16      	ldr	r3, [pc, #88]	@ (8001490 <MX_ADC1_Init+0xb8>)
 8001436:	2200      	movs	r2, #0
 8001438:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800143a:	4815      	ldr	r0, [pc, #84]	@ (8001490 <MX_ADC1_Init+0xb8>)
 800143c:	f000 fdf0 	bl	8002020 <HAL_ADC_Init>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8001446:	f000 f9ff 	bl	8001848 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800144a:	2301      	movs	r3, #1
 800144c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800144e:	2301      	movs	r3, #1
 8001450:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8001452:	2306      	movs	r3, #6
 8001454:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001456:	463b      	mov	r3, r7
 8001458:	4619      	mov	r1, r3
 800145a:	480d      	ldr	r0, [pc, #52]	@ (8001490 <MX_ADC1_Init+0xb8>)
 800145c:	f001 f838 	bl	80024d0 <HAL_ADC_ConfigChannel>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001466:	f000 f9ef 	bl	8001848 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800146a:	2302      	movs	r3, #2
 800146c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800146e:	2302      	movs	r3, #2
 8001470:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001472:	463b      	mov	r3, r7
 8001474:	4619      	mov	r1, r3
 8001476:	4806      	ldr	r0, [pc, #24]	@ (8001490 <MX_ADC1_Init+0xb8>)
 8001478:	f001 f82a 	bl	80024d0 <HAL_ADC_ConfigChannel>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8001482:	f000 f9e1 	bl	8001848 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001486:	bf00      	nop
 8001488:	3710      	adds	r7, #16
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	20000288 	.word	0x20000288
 8001494:	40012000 	.word	0x40012000

08001498 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b08a      	sub	sp, #40	@ 0x28
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a0:	f107 0314 	add.w	r3, r7, #20
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	605a      	str	r2, [r3, #4]
 80014aa:	609a      	str	r2, [r3, #8]
 80014ac:	60da      	str	r2, [r3, #12]
 80014ae:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a33      	ldr	r2, [pc, #204]	@ (8001584 <HAL_ADC_MspInit+0xec>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d15f      	bne.n	800157a <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80014ba:	2300      	movs	r3, #0
 80014bc:	613b      	str	r3, [r7, #16]
 80014be:	4b32      	ldr	r3, [pc, #200]	@ (8001588 <HAL_ADC_MspInit+0xf0>)
 80014c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014c2:	4a31      	ldr	r2, [pc, #196]	@ (8001588 <HAL_ADC_MspInit+0xf0>)
 80014c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80014ca:	4b2f      	ldr	r3, [pc, #188]	@ (8001588 <HAL_ADC_MspInit+0xf0>)
 80014cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014d2:	613b      	str	r3, [r7, #16]
 80014d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d6:	2300      	movs	r3, #0
 80014d8:	60fb      	str	r3, [r7, #12]
 80014da:	4b2b      	ldr	r3, [pc, #172]	@ (8001588 <HAL_ADC_MspInit+0xf0>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014de:	4a2a      	ldr	r2, [pc, #168]	@ (8001588 <HAL_ADC_MspInit+0xf0>)
 80014e0:	f043 0301 	orr.w	r3, r3, #1
 80014e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014e6:	4b28      	ldr	r3, [pc, #160]	@ (8001588 <HAL_ADC_MspInit+0xf0>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ea:	f003 0301 	and.w	r3, r3, #1
 80014ee:	60fb      	str	r3, [r7, #12]
 80014f0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = JOY_Y_Pin|JOY_X_Pin;
 80014f2:	2306      	movs	r3, #6
 80014f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014f6:	2303      	movs	r3, #3
 80014f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fa:	2300      	movs	r3, #0
 80014fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014fe:	f107 0314 	add.w	r3, r7, #20
 8001502:	4619      	mov	r1, r3
 8001504:	4821      	ldr	r0, [pc, #132]	@ (800158c <HAL_ADC_MspInit+0xf4>)
 8001506:	f001 ffb1 	bl	800346c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800150a:	4b21      	ldr	r3, [pc, #132]	@ (8001590 <HAL_ADC_MspInit+0xf8>)
 800150c:	4a21      	ldr	r2, [pc, #132]	@ (8001594 <HAL_ADC_MspInit+0xfc>)
 800150e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001510:	4b1f      	ldr	r3, [pc, #124]	@ (8001590 <HAL_ADC_MspInit+0xf8>)
 8001512:	2200      	movs	r2, #0
 8001514:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001516:	4b1e      	ldr	r3, [pc, #120]	@ (8001590 <HAL_ADC_MspInit+0xf8>)
 8001518:	2200      	movs	r2, #0
 800151a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800151c:	4b1c      	ldr	r3, [pc, #112]	@ (8001590 <HAL_ADC_MspInit+0xf8>)
 800151e:	2200      	movs	r2, #0
 8001520:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001522:	4b1b      	ldr	r3, [pc, #108]	@ (8001590 <HAL_ADC_MspInit+0xf8>)
 8001524:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001528:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800152a:	4b19      	ldr	r3, [pc, #100]	@ (8001590 <HAL_ADC_MspInit+0xf8>)
 800152c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001530:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001532:	4b17      	ldr	r3, [pc, #92]	@ (8001590 <HAL_ADC_MspInit+0xf8>)
 8001534:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001538:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800153a:	4b15      	ldr	r3, [pc, #84]	@ (8001590 <HAL_ADC_MspInit+0xf8>)
 800153c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001540:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001542:	4b13      	ldr	r3, [pc, #76]	@ (8001590 <HAL_ADC_MspInit+0xf8>)
 8001544:	2200      	movs	r2, #0
 8001546:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001548:	4b11      	ldr	r3, [pc, #68]	@ (8001590 <HAL_ADC_MspInit+0xf8>)
 800154a:	2200      	movs	r2, #0
 800154c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800154e:	4810      	ldr	r0, [pc, #64]	@ (8001590 <HAL_ADC_MspInit+0xf8>)
 8001550:	f001 fb8a 	bl	8002c68 <HAL_DMA_Init>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800155a:	f000 f975 	bl	8001848 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4a0b      	ldr	r2, [pc, #44]	@ (8001590 <HAL_ADC_MspInit+0xf8>)
 8001562:	639a      	str	r2, [r3, #56]	@ 0x38
 8001564:	4a0a      	ldr	r2, [pc, #40]	@ (8001590 <HAL_ADC_MspInit+0xf8>)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800156a:	2200      	movs	r2, #0
 800156c:	2100      	movs	r1, #0
 800156e:	2012      	movs	r0, #18
 8001570:	f001 fb43 	bl	8002bfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001574:	2012      	movs	r0, #18
 8001576:	f001 fb5c 	bl	8002c32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800157a:	bf00      	nop
 800157c:	3728      	adds	r7, #40	@ 0x28
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	40012000 	.word	0x40012000
 8001588:	40023800 	.word	0x40023800
 800158c:	40020000 	.word	0x40020000
 8001590:	200002d0 	.word	0x200002d0
 8001594:	40026410 	.word	0x40026410

08001598 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800159e:	2300      	movs	r3, #0
 80015a0:	607b      	str	r3, [r7, #4]
 80015a2:	4b0c      	ldr	r3, [pc, #48]	@ (80015d4 <MX_DMA_Init+0x3c>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015a6:	4a0b      	ldr	r2, [pc, #44]	@ (80015d4 <MX_DMA_Init+0x3c>)
 80015a8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80015ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ae:	4b09      	ldr	r3, [pc, #36]	@ (80015d4 <MX_DMA_Init+0x3c>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015b6:	607b      	str	r3, [r7, #4]
 80015b8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80015ba:	2200      	movs	r2, #0
 80015bc:	2100      	movs	r1, #0
 80015be:	2038      	movs	r0, #56	@ 0x38
 80015c0:	f001 fb1b 	bl	8002bfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80015c4:	2038      	movs	r0, #56	@ 0x38
 80015c6:	f001 fb34 	bl	8002c32 <HAL_NVIC_EnableIRQ>

}
 80015ca:	bf00      	nop
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	40023800 	.word	0x40023800

080015d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b08a      	sub	sp, #40	@ 0x28
 80015dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015de:	f107 0314 	add.w	r3, r7, #20
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	605a      	str	r2, [r3, #4]
 80015e8:	609a      	str	r2, [r3, #8]
 80015ea:	60da      	str	r2, [r3, #12]
 80015ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ee:	2300      	movs	r3, #0
 80015f0:	613b      	str	r3, [r7, #16]
 80015f2:	4b50      	ldr	r3, [pc, #320]	@ (8001734 <MX_GPIO_Init+0x15c>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f6:	4a4f      	ldr	r2, [pc, #316]	@ (8001734 <MX_GPIO_Init+0x15c>)
 80015f8:	f043 0304 	orr.w	r3, r3, #4
 80015fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80015fe:	4b4d      	ldr	r3, [pc, #308]	@ (8001734 <MX_GPIO_Init+0x15c>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001602:	f003 0304 	and.w	r3, r3, #4
 8001606:	613b      	str	r3, [r7, #16]
 8001608:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800160a:	2300      	movs	r3, #0
 800160c:	60fb      	str	r3, [r7, #12]
 800160e:	4b49      	ldr	r3, [pc, #292]	@ (8001734 <MX_GPIO_Init+0x15c>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001612:	4a48      	ldr	r2, [pc, #288]	@ (8001734 <MX_GPIO_Init+0x15c>)
 8001614:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001618:	6313      	str	r3, [r2, #48]	@ 0x30
 800161a:	4b46      	ldr	r3, [pc, #280]	@ (8001734 <MX_GPIO_Init+0x15c>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800161e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001622:	60fb      	str	r3, [r7, #12]
 8001624:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001626:	2300      	movs	r3, #0
 8001628:	60bb      	str	r3, [r7, #8]
 800162a:	4b42      	ldr	r3, [pc, #264]	@ (8001734 <MX_GPIO_Init+0x15c>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800162e:	4a41      	ldr	r2, [pc, #260]	@ (8001734 <MX_GPIO_Init+0x15c>)
 8001630:	f043 0301 	orr.w	r3, r3, #1
 8001634:	6313      	str	r3, [r2, #48]	@ 0x30
 8001636:	4b3f      	ldr	r3, [pc, #252]	@ (8001734 <MX_GPIO_Init+0x15c>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800163a:	f003 0301 	and.w	r3, r3, #1
 800163e:	60bb      	str	r3, [r7, #8]
 8001640:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001642:	2300      	movs	r3, #0
 8001644:	607b      	str	r3, [r7, #4]
 8001646:	4b3b      	ldr	r3, [pc, #236]	@ (8001734 <MX_GPIO_Init+0x15c>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800164a:	4a3a      	ldr	r2, [pc, #232]	@ (8001734 <MX_GPIO_Init+0x15c>)
 800164c:	f043 0302 	orr.w	r3, r3, #2
 8001650:	6313      	str	r3, [r2, #48]	@ 0x30
 8001652:	4b38      	ldr	r3, [pc, #224]	@ (8001734 <MX_GPIO_Init+0x15c>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001656:	f003 0302 	and.w	r3, r3, #2
 800165a:	607b      	str	r3, [r7, #4]
 800165c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800165e:	2200      	movs	r2, #0
 8001660:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001664:	4834      	ldr	r0, [pc, #208]	@ (8001738 <MX_GPIO_Init+0x160>)
 8001666:	f002 f89d 	bl	80037a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TM_STB_GPIO_Port, TM_STB_Pin, GPIO_PIN_RESET);
 800166a:	2200      	movs	r2, #0
 800166c:	2140      	movs	r1, #64	@ 0x40
 800166e:	4833      	ldr	r0, [pc, #204]	@ (800173c <MX_GPIO_Init+0x164>)
 8001670:	f002 f898 	bl	80037a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NRF_CE_Pin|NRF_CSN_Pin, GPIO_PIN_RESET);
 8001674:	2200      	movs	r2, #0
 8001676:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 800167a:	4831      	ldr	r0, [pc, #196]	@ (8001740 <MX_GPIO_Init+0x168>)
 800167c:	f002 f892 	bl	80037a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001680:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001684:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001686:	2301      	movs	r3, #1
 8001688:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168a:	2300      	movs	r3, #0
 800168c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168e:	2300      	movs	r3, #0
 8001690:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001692:	f107 0314 	add.w	r3, r7, #20
 8001696:	4619      	mov	r1, r3
 8001698:	4827      	ldr	r0, [pc, #156]	@ (8001738 <MX_GPIO_Init+0x160>)
 800169a:	f001 fee7 	bl	800346c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = JOY_BTN_Pin;
 800169e:	2301      	movs	r3, #1
 80016a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80016a2:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80016a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016a8:	2301      	movs	r3, #1
 80016aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(JOY_BTN_GPIO_Port, &GPIO_InitStruct);
 80016ac:	f107 0314 	add.w	r3, r7, #20
 80016b0:	4619      	mov	r1, r3
 80016b2:	4822      	ldr	r0, [pc, #136]	@ (800173c <MX_GPIO_Init+0x164>)
 80016b4:	f001 feda 	bl	800346c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TM_STB_Pin;
 80016b8:	2340      	movs	r3, #64	@ 0x40
 80016ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016bc:	2301      	movs	r3, #1
 80016be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c0:	2300      	movs	r3, #0
 80016c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c4:	2300      	movs	r3, #0
 80016c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TM_STB_GPIO_Port, &GPIO_InitStruct);
 80016c8:	f107 0314 	add.w	r3, r7, #20
 80016cc:	4619      	mov	r1, r3
 80016ce:	481b      	ldr	r0, [pc, #108]	@ (800173c <MX_GPIO_Init+0x164>)
 80016d0:	f001 fecc 	bl	800346c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF_IRQ_Pin;
 80016d4:	2304      	movs	r3, #4
 80016d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80016d8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80016dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016de:	2301      	movs	r3, #1
 80016e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF_IRQ_GPIO_Port, &GPIO_InitStruct);
 80016e2:	f107 0314 	add.w	r3, r7, #20
 80016e6:	4619      	mov	r1, r3
 80016e8:	4815      	ldr	r0, [pc, #84]	@ (8001740 <MX_GPIO_Init+0x168>)
 80016ea:	f001 febf 	bl	800346c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = NRF_CE_Pin|NRF_CSN_Pin;
 80016ee:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80016f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016f4:	2301      	movs	r3, #1
 80016f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f8:	2300      	movs	r3, #0
 80016fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016fc:	2300      	movs	r3, #0
 80016fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001700:	f107 0314 	add.w	r3, r7, #20
 8001704:	4619      	mov	r1, r3
 8001706:	480e      	ldr	r0, [pc, #56]	@ (8001740 <MX_GPIO_Init+0x168>)
 8001708:	f001 feb0 	bl	800346c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800170c:	2200      	movs	r2, #0
 800170e:	2100      	movs	r1, #0
 8001710:	2006      	movs	r0, #6
 8001712:	f001 fa72 	bl	8002bfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001716:	2006      	movs	r0, #6
 8001718:	f001 fa8b 	bl	8002c32 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800171c:	2200      	movs	r2, #0
 800171e:	2100      	movs	r1, #0
 8001720:	2008      	movs	r0, #8
 8001722:	f001 fa6a 	bl	8002bfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001726:	2008      	movs	r0, #8
 8001728:	f001 fa83 	bl	8002c32 <HAL_NVIC_EnableIRQ>

}
 800172c:	bf00      	nop
 800172e:	3728      	adds	r7, #40	@ 0x28
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	40023800 	.word	0x40023800
 8001738:	40020800 	.word	0x40020800
 800173c:	40020000 	.word	0x40020000
 8001740:	40020400 	.word	0x40020400

08001744 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001748:	f000 fbd4 	bl	8001ef4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800174c:	f000 f814 	bl	8001778 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001750:	f7ff ff42 	bl	80015d8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001754:	f7ff ff20 	bl	8001598 <MX_DMA_Init>
  MX_SPI2_Init();
 8001758:	f000 f8b4 	bl	80018c4 <MX_SPI2_Init>
  MX_SPI1_Init();
 800175c:	f000 f87a 	bl	8001854 <MX_SPI1_Init>
  MX_ADC1_Init();
 8001760:	f7ff fe3a 	bl	80013d8 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8001764:	f000 fb02 	bl	8001d6c <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 8001768:	f009 fb4c 	bl	800ae04 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 800176c:	f000 fa74 	bl	8001c58 <MX_TIM2_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  EventLoopC();
 8001770:	f7fe ff52 	bl	8000618 <EventLoopC>

  while (1)
 8001774:	bf00      	nop
 8001776:	e7fd      	b.n	8001774 <main+0x30>

08001778 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b094      	sub	sp, #80	@ 0x50
 800177c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800177e:	f107 0320 	add.w	r3, r7, #32
 8001782:	2230      	movs	r2, #48	@ 0x30
 8001784:	2100      	movs	r1, #0
 8001786:	4618      	mov	r0, r3
 8001788:	f00a f90a 	bl	800b9a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800178c:	f107 030c 	add.w	r3, r7, #12
 8001790:	2200      	movs	r2, #0
 8001792:	601a      	str	r2, [r3, #0]
 8001794:	605a      	str	r2, [r3, #4]
 8001796:	609a      	str	r2, [r3, #8]
 8001798:	60da      	str	r2, [r3, #12]
 800179a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800179c:	2300      	movs	r3, #0
 800179e:	60bb      	str	r3, [r7, #8]
 80017a0:	4b27      	ldr	r3, [pc, #156]	@ (8001840 <SystemClock_Config+0xc8>)
 80017a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017a4:	4a26      	ldr	r2, [pc, #152]	@ (8001840 <SystemClock_Config+0xc8>)
 80017a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017aa:	6413      	str	r3, [r2, #64]	@ 0x40
 80017ac:	4b24      	ldr	r3, [pc, #144]	@ (8001840 <SystemClock_Config+0xc8>)
 80017ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017b4:	60bb      	str	r3, [r7, #8]
 80017b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017b8:	2300      	movs	r3, #0
 80017ba:	607b      	str	r3, [r7, #4]
 80017bc:	4b21      	ldr	r3, [pc, #132]	@ (8001844 <SystemClock_Config+0xcc>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a20      	ldr	r2, [pc, #128]	@ (8001844 <SystemClock_Config+0xcc>)
 80017c2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80017c6:	6013      	str	r3, [r2, #0]
 80017c8:	4b1e      	ldr	r3, [pc, #120]	@ (8001844 <SystemClock_Config+0xcc>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80017d0:	607b      	str	r3, [r7, #4]
 80017d2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017d4:	2301      	movs	r3, #1
 80017d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017d8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80017dc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017de:	2302      	movs	r3, #2
 80017e0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017e2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80017e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 80017e8:	230f      	movs	r3, #15
 80017ea:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 80017ec:	2390      	movs	r3, #144	@ 0x90
 80017ee:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80017f0:	2304      	movs	r3, #4
 80017f2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80017f4:	2305      	movs	r3, #5
 80017f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017f8:	f107 0320 	add.w	r3, r7, #32
 80017fc:	4618      	mov	r0, r3
 80017fe:	f003 fa53 	bl	8004ca8 <HAL_RCC_OscConfig>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001808:	f000 f81e 	bl	8001848 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800180c:	230f      	movs	r3, #15
 800180e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001810:	2302      	movs	r3, #2
 8001812:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001814:	2300      	movs	r3, #0
 8001816:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001818:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800181c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800181e:	2300      	movs	r3, #0
 8001820:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001822:	f107 030c 	add.w	r3, r7, #12
 8001826:	2101      	movs	r1, #1
 8001828:	4618      	mov	r0, r3
 800182a:	f003 fcb5 	bl	8005198 <HAL_RCC_ClockConfig>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001834:	f000 f808 	bl	8001848 <Error_Handler>
  }
}
 8001838:	bf00      	nop
 800183a:	3750      	adds	r7, #80	@ 0x50
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	40023800 	.word	0x40023800
 8001844:	40007000 	.word	0x40007000

08001848 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800184c:	b672      	cpsid	i
}
 800184e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001850:	bf00      	nop
 8001852:	e7fd      	b.n	8001850 <Error_Handler+0x8>

08001854 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001858:	4b18      	ldr	r3, [pc, #96]	@ (80018bc <MX_SPI1_Init+0x68>)
 800185a:	4a19      	ldr	r2, [pc, #100]	@ (80018c0 <MX_SPI1_Init+0x6c>)
 800185c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800185e:	4b17      	ldr	r3, [pc, #92]	@ (80018bc <MX_SPI1_Init+0x68>)
 8001860:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001864:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8001866:	4b15      	ldr	r3, [pc, #84]	@ (80018bc <MX_SPI1_Init+0x68>)
 8001868:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800186c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800186e:	4b13      	ldr	r3, [pc, #76]	@ (80018bc <MX_SPI1_Init+0x68>)
 8001870:	2200      	movs	r2, #0
 8001872:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001874:	4b11      	ldr	r3, [pc, #68]	@ (80018bc <MX_SPI1_Init+0x68>)
 8001876:	2202      	movs	r2, #2
 8001878:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800187a:	4b10      	ldr	r3, [pc, #64]	@ (80018bc <MX_SPI1_Init+0x68>)
 800187c:	2201      	movs	r2, #1
 800187e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001880:	4b0e      	ldr	r3, [pc, #56]	@ (80018bc <MX_SPI1_Init+0x68>)
 8001882:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001886:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001888:	4b0c      	ldr	r3, [pc, #48]	@ (80018bc <MX_SPI1_Init+0x68>)
 800188a:	2220      	movs	r2, #32
 800188c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_LSB;
 800188e:	4b0b      	ldr	r3, [pc, #44]	@ (80018bc <MX_SPI1_Init+0x68>)
 8001890:	2280      	movs	r2, #128	@ 0x80
 8001892:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001894:	4b09      	ldr	r3, [pc, #36]	@ (80018bc <MX_SPI1_Init+0x68>)
 8001896:	2200      	movs	r2, #0
 8001898:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800189a:	4b08      	ldr	r3, [pc, #32]	@ (80018bc <MX_SPI1_Init+0x68>)
 800189c:	2200      	movs	r2, #0
 800189e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80018a0:	4b06      	ldr	r3, [pc, #24]	@ (80018bc <MX_SPI1_Init+0x68>)
 80018a2:	220a      	movs	r2, #10
 80018a4:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80018a6:	4805      	ldr	r0, [pc, #20]	@ (80018bc <MX_SPI1_Init+0x68>)
 80018a8:	f003 fe56 	bl	8005558 <HAL_SPI_Init>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 80018b2:	f7ff ffc9 	bl	8001848 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80018b6:	bf00      	nop
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	20000330 	.word	0x20000330
 80018c0:	40013000 	.word	0x40013000

080018c4 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80018c8:	4b17      	ldr	r3, [pc, #92]	@ (8001928 <MX_SPI2_Init+0x64>)
 80018ca:	4a18      	ldr	r2, [pc, #96]	@ (800192c <MX_SPI2_Init+0x68>)
 80018cc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80018ce:	4b16      	ldr	r3, [pc, #88]	@ (8001928 <MX_SPI2_Init+0x64>)
 80018d0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80018d4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80018d6:	4b14      	ldr	r3, [pc, #80]	@ (8001928 <MX_SPI2_Init+0x64>)
 80018d8:	2200      	movs	r2, #0
 80018da:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80018dc:	4b12      	ldr	r3, [pc, #72]	@ (8001928 <MX_SPI2_Init+0x64>)
 80018de:	2200      	movs	r2, #0
 80018e0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018e2:	4b11      	ldr	r3, [pc, #68]	@ (8001928 <MX_SPI2_Init+0x64>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001928 <MX_SPI2_Init+0x64>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80018ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001928 <MX_SPI2_Init+0x64>)
 80018f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80018f4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80018f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001928 <MX_SPI2_Init+0x64>)
 80018f8:	2238      	movs	r2, #56	@ 0x38
 80018fa:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018fc:	4b0a      	ldr	r3, [pc, #40]	@ (8001928 <MX_SPI2_Init+0x64>)
 80018fe:	2200      	movs	r2, #0
 8001900:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001902:	4b09      	ldr	r3, [pc, #36]	@ (8001928 <MX_SPI2_Init+0x64>)
 8001904:	2200      	movs	r2, #0
 8001906:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001908:	4b07      	ldr	r3, [pc, #28]	@ (8001928 <MX_SPI2_Init+0x64>)
 800190a:	2200      	movs	r2, #0
 800190c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 800190e:	4b06      	ldr	r3, [pc, #24]	@ (8001928 <MX_SPI2_Init+0x64>)
 8001910:	220a      	movs	r2, #10
 8001912:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001914:	4804      	ldr	r0, [pc, #16]	@ (8001928 <MX_SPI2_Init+0x64>)
 8001916:	f003 fe1f 	bl	8005558 <HAL_SPI_Init>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001920:	f7ff ff92 	bl	8001848 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001924:	bf00      	nop
 8001926:	bd80      	pop	{r7, pc}
 8001928:	20000388 	.word	0x20000388
 800192c:	40003800 	.word	0x40003800

08001930 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b08c      	sub	sp, #48	@ 0x30
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001938:	f107 031c 	add.w	r3, r7, #28
 800193c:	2200      	movs	r2, #0
 800193e:	601a      	str	r2, [r3, #0]
 8001940:	605a      	str	r2, [r3, #4]
 8001942:	609a      	str	r2, [r3, #8]
 8001944:	60da      	str	r2, [r3, #12]
 8001946:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a36      	ldr	r2, [pc, #216]	@ (8001a28 <HAL_SPI_MspInit+0xf8>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d12c      	bne.n	80019ac <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001952:	2300      	movs	r3, #0
 8001954:	61bb      	str	r3, [r7, #24]
 8001956:	4b35      	ldr	r3, [pc, #212]	@ (8001a2c <HAL_SPI_MspInit+0xfc>)
 8001958:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800195a:	4a34      	ldr	r2, [pc, #208]	@ (8001a2c <HAL_SPI_MspInit+0xfc>)
 800195c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001960:	6453      	str	r3, [r2, #68]	@ 0x44
 8001962:	4b32      	ldr	r3, [pc, #200]	@ (8001a2c <HAL_SPI_MspInit+0xfc>)
 8001964:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001966:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800196a:	61bb      	str	r3, [r7, #24]
 800196c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800196e:	2300      	movs	r3, #0
 8001970:	617b      	str	r3, [r7, #20]
 8001972:	4b2e      	ldr	r3, [pc, #184]	@ (8001a2c <HAL_SPI_MspInit+0xfc>)
 8001974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001976:	4a2d      	ldr	r2, [pc, #180]	@ (8001a2c <HAL_SPI_MspInit+0xfc>)
 8001978:	f043 0301 	orr.w	r3, r3, #1
 800197c:	6313      	str	r3, [r2, #48]	@ 0x30
 800197e:	4b2b      	ldr	r3, [pc, #172]	@ (8001a2c <HAL_SPI_MspInit+0xfc>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001982:	f003 0301 	and.w	r3, r3, #1
 8001986:	617b      	str	r3, [r7, #20]
 8001988:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = TM_SCK_Pin|TM_MOSI_Pin;
 800198a:	23a0      	movs	r3, #160	@ 0xa0
 800198c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800198e:	2302      	movs	r3, #2
 8001990:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001992:	2300      	movs	r3, #0
 8001994:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001996:	2302      	movs	r3, #2
 8001998:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800199a:	2305      	movs	r3, #5
 800199c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800199e:	f107 031c 	add.w	r3, r7, #28
 80019a2:	4619      	mov	r1, r3
 80019a4:	4822      	ldr	r0, [pc, #136]	@ (8001a30 <HAL_SPI_MspInit+0x100>)
 80019a6:	f001 fd61 	bl	800346c <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80019aa:	e039      	b.n	8001a20 <HAL_SPI_MspInit+0xf0>
  else if(spiHandle->Instance==SPI2)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a20      	ldr	r2, [pc, #128]	@ (8001a34 <HAL_SPI_MspInit+0x104>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d134      	bne.n	8001a20 <HAL_SPI_MspInit+0xf0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80019b6:	2300      	movs	r3, #0
 80019b8:	613b      	str	r3, [r7, #16]
 80019ba:	4b1c      	ldr	r3, [pc, #112]	@ (8001a2c <HAL_SPI_MspInit+0xfc>)
 80019bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019be:	4a1b      	ldr	r2, [pc, #108]	@ (8001a2c <HAL_SPI_MspInit+0xfc>)
 80019c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80019c6:	4b19      	ldr	r3, [pc, #100]	@ (8001a2c <HAL_SPI_MspInit+0xfc>)
 80019c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019ce:	613b      	str	r3, [r7, #16]
 80019d0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019d2:	2300      	movs	r3, #0
 80019d4:	60fb      	str	r3, [r7, #12]
 80019d6:	4b15      	ldr	r3, [pc, #84]	@ (8001a2c <HAL_SPI_MspInit+0xfc>)
 80019d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019da:	4a14      	ldr	r2, [pc, #80]	@ (8001a2c <HAL_SPI_MspInit+0xfc>)
 80019dc:	f043 0302 	orr.w	r3, r3, #2
 80019e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80019e2:	4b12      	ldr	r3, [pc, #72]	@ (8001a2c <HAL_SPI_MspInit+0xfc>)
 80019e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019e6:	f003 0302 	and.w	r3, r3, #2
 80019ea:	60fb      	str	r3, [r7, #12]
 80019ec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = NRF_SCK_Pin|NRF_MISO_Pin|NRF_MOSI_Pin;
 80019ee:	f44f 4344 	mov.w	r3, #50176	@ 0xc400
 80019f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f4:	2302      	movs	r3, #2
 80019f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f8:	2300      	movs	r3, #0
 80019fa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019fc:	2303      	movs	r3, #3
 80019fe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a00:	2305      	movs	r3, #5
 8001a02:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a04:	f107 031c 	add.w	r3, r7, #28
 8001a08:	4619      	mov	r1, r3
 8001a0a:	480b      	ldr	r0, [pc, #44]	@ (8001a38 <HAL_SPI_MspInit+0x108>)
 8001a0c:	f001 fd2e 	bl	800346c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001a10:	2200      	movs	r2, #0
 8001a12:	2100      	movs	r1, #0
 8001a14:	2024      	movs	r0, #36	@ 0x24
 8001a16:	f001 f8f0 	bl	8002bfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001a1a:	2024      	movs	r0, #36	@ 0x24
 8001a1c:	f001 f909 	bl	8002c32 <HAL_NVIC_EnableIRQ>
}
 8001a20:	bf00      	nop
 8001a22:	3730      	adds	r7, #48	@ 0x30
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	40013000 	.word	0x40013000
 8001a2c:	40023800 	.word	0x40023800
 8001a30:	40020000 	.word	0x40020000
 8001a34:	40003800 	.word	0x40003800
 8001a38:	40020400 	.word	0x40020400

08001a3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a42:	2300      	movs	r3, #0
 8001a44:	607b      	str	r3, [r7, #4]
 8001a46:	4b10      	ldr	r3, [pc, #64]	@ (8001a88 <HAL_MspInit+0x4c>)
 8001a48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a4a:	4a0f      	ldr	r2, [pc, #60]	@ (8001a88 <HAL_MspInit+0x4c>)
 8001a4c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a50:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a52:	4b0d      	ldr	r3, [pc, #52]	@ (8001a88 <HAL_MspInit+0x4c>)
 8001a54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a5a:	607b      	str	r3, [r7, #4]
 8001a5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a5e:	2300      	movs	r3, #0
 8001a60:	603b      	str	r3, [r7, #0]
 8001a62:	4b09      	ldr	r3, [pc, #36]	@ (8001a88 <HAL_MspInit+0x4c>)
 8001a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a66:	4a08      	ldr	r2, [pc, #32]	@ (8001a88 <HAL_MspInit+0x4c>)
 8001a68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a6e:	4b06      	ldr	r3, [pc, #24]	@ (8001a88 <HAL_MspInit+0x4c>)
 8001a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a76:	603b      	str	r3, [r7, #0]
 8001a78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a7a:	bf00      	nop
 8001a7c:	370c      	adds	r7, #12
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	40023800 	.word	0x40023800

08001a8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a90:	bf00      	nop
 8001a92:	e7fd      	b.n	8001a90 <NMI_Handler+0x4>

08001a94 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a98:	bf00      	nop
 8001a9a:	e7fd      	b.n	8001a98 <HardFault_Handler+0x4>

08001a9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001aa0:	bf00      	nop
 8001aa2:	e7fd      	b.n	8001aa0 <MemManage_Handler+0x4>

08001aa4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001aa8:	bf00      	nop
 8001aaa:	e7fd      	b.n	8001aa8 <BusFault_Handler+0x4>

08001aac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ab0:	bf00      	nop
 8001ab2:	e7fd      	b.n	8001ab0 <UsageFault_Handler+0x4>

08001ab4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ab8:	bf00      	nop
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr

08001ac2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ac6:	bf00      	nop
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ad4:	bf00      	nop
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr

08001ade <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ae2:	f000 fa59 	bl	8001f98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ae6:	bf00      	nop
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(JOY_BTN_Pin);
 8001aee:	2001      	movs	r0, #1
 8001af0:	f001 fe72 	bl	80037d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001af4:	bf00      	nop
 8001af6:	bd80      	pop	{r7, pc}

08001af8 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NRF_IRQ_Pin);
 8001afc:	2004      	movs	r0, #4
 8001afe:	f001 fe6b 	bl	80037d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001b02:	bf00      	nop
 8001b04:	bd80      	pop	{r7, pc}
	...

08001b08 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001b0c:	4802      	ldr	r0, [pc, #8]	@ (8001b18 <ADC_IRQHandler+0x10>)
 8001b0e:	f000 faca 	bl	80020a6 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001b12:	bf00      	nop
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	20000288 	.word	0x20000288

08001b1c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b20:	4802      	ldr	r0, [pc, #8]	@ (8001b2c <TIM2_IRQHandler+0x10>)
 8001b22:	f004 fb2d 	bl	8006180 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b26:	bf00      	nop
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	200003e4 	.word	0x200003e4

08001b30 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001b34:	4802      	ldr	r0, [pc, #8]	@ (8001b40 <SPI2_IRQHandler+0x10>)
 8001b36:	f004 f88b 	bl	8005c50 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001b3a:	bf00      	nop
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	20000388 	.word	0x20000388

08001b44 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001b48:	4802      	ldr	r0, [pc, #8]	@ (8001b54 <USART1_IRQHandler+0x10>)
 8001b4a:	f004 ffcf 	bl	8006aec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001b4e:	bf00      	nop
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	2000042c 	.word	0x2000042c

08001b58 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001b5c:	4802      	ldr	r0, [pc, #8]	@ (8001b68 <DMA2_Stream0_IRQHandler+0x10>)
 8001b5e:	f001 fa1b 	bl	8002f98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001b62:	bf00      	nop
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	200002d0 	.word	0x200002d0

08001b6c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001b70:	4802      	ldr	r0, [pc, #8]	@ (8001b7c <OTG_FS_IRQHandler+0x10>)
 8001b72:	f001 ff8d 	bl	8003a90 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001b76:	bf00      	nop
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	20001958 	.word	0x20001958

08001b80 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  return 1;
 8001b84:	2301      	movs	r3, #1
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr

08001b90 <_kill>:

int _kill(int pid, int sig)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b9a:	f009 ff5d 	bl	800ba58 <__errno>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2216      	movs	r2, #22
 8001ba2:	601a      	str	r2, [r3, #0]
  return -1;
 8001ba4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3708      	adds	r7, #8
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <_exit>:

void _exit (int status)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001bb8:	f04f 31ff 	mov.w	r1, #4294967295
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f7ff ffe7 	bl	8001b90 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001bc2:	bf00      	nop
 8001bc4:	e7fd      	b.n	8001bc2 <_exit+0x12>
	...

08001bc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b086      	sub	sp, #24
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bd0:	4a14      	ldr	r2, [pc, #80]	@ (8001c24 <_sbrk+0x5c>)
 8001bd2:	4b15      	ldr	r3, [pc, #84]	@ (8001c28 <_sbrk+0x60>)
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bdc:	4b13      	ldr	r3, [pc, #76]	@ (8001c2c <_sbrk+0x64>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d102      	bne.n	8001bea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001be4:	4b11      	ldr	r3, [pc, #68]	@ (8001c2c <_sbrk+0x64>)
 8001be6:	4a12      	ldr	r2, [pc, #72]	@ (8001c30 <_sbrk+0x68>)
 8001be8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bea:	4b10      	ldr	r3, [pc, #64]	@ (8001c2c <_sbrk+0x64>)
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4413      	add	r3, r2
 8001bf2:	693a      	ldr	r2, [r7, #16]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d207      	bcs.n	8001c08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bf8:	f009 ff2e 	bl	800ba58 <__errno>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	220c      	movs	r2, #12
 8001c00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c02:	f04f 33ff 	mov.w	r3, #4294967295
 8001c06:	e009      	b.n	8001c1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c08:	4b08      	ldr	r3, [pc, #32]	@ (8001c2c <_sbrk+0x64>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c0e:	4b07      	ldr	r3, [pc, #28]	@ (8001c2c <_sbrk+0x64>)
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4413      	add	r3, r2
 8001c16:	4a05      	ldr	r2, [pc, #20]	@ (8001c2c <_sbrk+0x64>)
 8001c18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3718      	adds	r7, #24
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	20020000 	.word	0x20020000
 8001c28:	00000400 	.word	0x00000400
 8001c2c:	200003e0 	.word	0x200003e0
 8001c30:	200021a8 	.word	0x200021a8

08001c34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c38:	4b06      	ldr	r3, [pc, #24]	@ (8001c54 <SystemInit+0x20>)
 8001c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c3e:	4a05      	ldr	r2, [pc, #20]	@ (8001c54 <SystemInit+0x20>)
 8001c40:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c44:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c48:	bf00      	nop
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	e000ed00 	.word	0xe000ed00

08001c58 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b08c      	sub	sp, #48	@ 0x30
 8001c5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c5e:	f107 0320 	add.w	r3, r7, #32
 8001c62:	2200      	movs	r2, #0
 8001c64:	601a      	str	r2, [r3, #0]
 8001c66:	605a      	str	r2, [r3, #4]
 8001c68:	609a      	str	r2, [r3, #8]
 8001c6a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001c6c:	f107 030c 	add.w	r3, r7, #12
 8001c70:	2200      	movs	r2, #0
 8001c72:	601a      	str	r2, [r3, #0]
 8001c74:	605a      	str	r2, [r3, #4]
 8001c76:	609a      	str	r2, [r3, #8]
 8001c78:	60da      	str	r2, [r3, #12]
 8001c7a:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c7c:	1d3b      	adds	r3, r7, #4
 8001c7e:	2200      	movs	r2, #0
 8001c80:	601a      	str	r2, [r3, #0]
 8001c82:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c84:	4b25      	ldr	r3, [pc, #148]	@ (8001d1c <MX_TIM2_Init+0xc4>)
 8001c86:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c8a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 60000-1;
 8001c8c:	4b23      	ldr	r3, [pc, #140]	@ (8001d1c <MX_TIM2_Init+0xc4>)
 8001c8e:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8001c92:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c94:	4b21      	ldr	r3, [pc, #132]	@ (8001d1c <MX_TIM2_Init+0xc4>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4000-1;
 8001c9a:	4b20      	ldr	r3, [pc, #128]	@ (8001d1c <MX_TIM2_Init+0xc4>)
 8001c9c:	f640 729f 	movw	r2, #3999	@ 0xf9f
 8001ca0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ca2:	4b1e      	ldr	r3, [pc, #120]	@ (8001d1c <MX_TIM2_Init+0xc4>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ca8:	4b1c      	ldr	r3, [pc, #112]	@ (8001d1c <MX_TIM2_Init+0xc4>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001cae:	481b      	ldr	r0, [pc, #108]	@ (8001d1c <MX_TIM2_Init+0xc4>)
 8001cb0:	f004 f9bc 	bl	800602c <HAL_TIM_Base_Init>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8001cba:	f7ff fdc5 	bl	8001848 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cbe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001cc2:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001cc4:	f107 0320 	add.w	r3, r7, #32
 8001cc8:	4619      	mov	r1, r3
 8001cca:	4814      	ldr	r0, [pc, #80]	@ (8001d1c <MX_TIM2_Init+0xc4>)
 8001ccc:	f004 fb48 	bl	8006360 <HAL_TIM_ConfigClockSource>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8001cd6:	f7ff fdb7 	bl	8001848 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8001ce2:	f107 030c 	add.w	r3, r7, #12
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	480c      	ldr	r0, [pc, #48]	@ (8001d1c <MX_TIM2_Init+0xc4>)
 8001cea:	f004 fc00 	bl	80064ee <HAL_TIM_SlaveConfigSynchro>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d001      	beq.n	8001cf8 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001cf4:	f7ff fda8 	bl	8001848 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001cf8:	2320      	movs	r3, #32
 8001cfa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d00:	1d3b      	adds	r3, r7, #4
 8001d02:	4619      	mov	r1, r3
 8001d04:	4805      	ldr	r0, [pc, #20]	@ (8001d1c <MX_TIM2_Init+0xc4>)
 8001d06:	f004 fe1f 	bl	8006948 <HAL_TIMEx_MasterConfigSynchronization>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d001      	beq.n	8001d14 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8001d10:	f7ff fd9a 	bl	8001848 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001d14:	bf00      	nop
 8001d16:	3730      	adds	r7, #48	@ 0x30
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	200003e4 	.word	0x200003e4

08001d20 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d30:	d115      	bne.n	8001d5e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d32:	2300      	movs	r3, #0
 8001d34:	60fb      	str	r3, [r7, #12]
 8001d36:	4b0c      	ldr	r3, [pc, #48]	@ (8001d68 <HAL_TIM_Base_MspInit+0x48>)
 8001d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d3a:	4a0b      	ldr	r2, [pc, #44]	@ (8001d68 <HAL_TIM_Base_MspInit+0x48>)
 8001d3c:	f043 0301 	orr.w	r3, r3, #1
 8001d40:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d42:	4b09      	ldr	r3, [pc, #36]	@ (8001d68 <HAL_TIM_Base_MspInit+0x48>)
 8001d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d46:	f003 0301 	and.w	r3, r3, #1
 8001d4a:	60fb      	str	r3, [r7, #12]
 8001d4c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001d4e:	2200      	movs	r2, #0
 8001d50:	2100      	movs	r1, #0
 8001d52:	201c      	movs	r0, #28
 8001d54:	f000 ff51 	bl	8002bfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001d58:	201c      	movs	r0, #28
 8001d5a:	f000 ff6a 	bl	8002c32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001d5e:	bf00      	nop
 8001d60:	3710      	adds	r7, #16
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	40023800 	.word	0x40023800

08001d6c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d70:	4b11      	ldr	r3, [pc, #68]	@ (8001db8 <MX_USART1_UART_Init+0x4c>)
 8001d72:	4a12      	ldr	r2, [pc, #72]	@ (8001dbc <MX_USART1_UART_Init+0x50>)
 8001d74:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001d76:	4b10      	ldr	r3, [pc, #64]	@ (8001db8 <MX_USART1_UART_Init+0x4c>)
 8001d78:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d7c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d7e:	4b0e      	ldr	r3, [pc, #56]	@ (8001db8 <MX_USART1_UART_Init+0x4c>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d84:	4b0c      	ldr	r3, [pc, #48]	@ (8001db8 <MX_USART1_UART_Init+0x4c>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d8a:	4b0b      	ldr	r3, [pc, #44]	@ (8001db8 <MX_USART1_UART_Init+0x4c>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d90:	4b09      	ldr	r3, [pc, #36]	@ (8001db8 <MX_USART1_UART_Init+0x4c>)
 8001d92:	220c      	movs	r2, #12
 8001d94:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d96:	4b08      	ldr	r3, [pc, #32]	@ (8001db8 <MX_USART1_UART_Init+0x4c>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d9c:	4b06      	ldr	r3, [pc, #24]	@ (8001db8 <MX_USART1_UART_Init+0x4c>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001da2:	4805      	ldr	r0, [pc, #20]	@ (8001db8 <MX_USART1_UART_Init+0x4c>)
 8001da4:	f004 fe52 	bl	8006a4c <HAL_UART_Init>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001dae:	f7ff fd4b 	bl	8001848 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001db2:	bf00      	nop
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	2000042c 	.word	0x2000042c
 8001dbc:	40011000 	.word	0x40011000

08001dc0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b08a      	sub	sp, #40	@ 0x28
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc8:	f107 0314 	add.w	r3, r7, #20
 8001dcc:	2200      	movs	r2, #0
 8001dce:	601a      	str	r2, [r3, #0]
 8001dd0:	605a      	str	r2, [r3, #4]
 8001dd2:	609a      	str	r2, [r3, #8]
 8001dd4:	60da      	str	r2, [r3, #12]
 8001dd6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a2c      	ldr	r2, [pc, #176]	@ (8001e90 <HAL_UART_MspInit+0xd0>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d152      	bne.n	8001e88 <HAL_UART_MspInit+0xc8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001de2:	2300      	movs	r3, #0
 8001de4:	613b      	str	r3, [r7, #16]
 8001de6:	4b2b      	ldr	r3, [pc, #172]	@ (8001e94 <HAL_UART_MspInit+0xd4>)
 8001de8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dea:	4a2a      	ldr	r2, [pc, #168]	@ (8001e94 <HAL_UART_MspInit+0xd4>)
 8001dec:	f043 0310 	orr.w	r3, r3, #16
 8001df0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001df2:	4b28      	ldr	r3, [pc, #160]	@ (8001e94 <HAL_UART_MspInit+0xd4>)
 8001df4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001df6:	f003 0310 	and.w	r3, r3, #16
 8001dfa:	613b      	str	r3, [r7, #16]
 8001dfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dfe:	2300      	movs	r3, #0
 8001e00:	60fb      	str	r3, [r7, #12]
 8001e02:	4b24      	ldr	r3, [pc, #144]	@ (8001e94 <HAL_UART_MspInit+0xd4>)
 8001e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e06:	4a23      	ldr	r2, [pc, #140]	@ (8001e94 <HAL_UART_MspInit+0xd4>)
 8001e08:	f043 0301 	orr.w	r3, r3, #1
 8001e0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e0e:	4b21      	ldr	r3, [pc, #132]	@ (8001e94 <HAL_UART_MspInit+0xd4>)
 8001e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e12:	f003 0301 	and.w	r3, r3, #1
 8001e16:	60fb      	str	r3, [r7, #12]
 8001e18:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	60bb      	str	r3, [r7, #8]
 8001e1e:	4b1d      	ldr	r3, [pc, #116]	@ (8001e94 <HAL_UART_MspInit+0xd4>)
 8001e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e22:	4a1c      	ldr	r2, [pc, #112]	@ (8001e94 <HAL_UART_MspInit+0xd4>)
 8001e24:	f043 0302 	orr.w	r3, r3, #2
 8001e28:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e2a:	4b1a      	ldr	r3, [pc, #104]	@ (8001e94 <HAL_UART_MspInit+0xd4>)
 8001e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e2e:	f003 0302 	and.w	r3, r3, #2
 8001e32:	60bb      	str	r3, [r7, #8]
 8001e34:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PB3     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001e36:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001e3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e3c:	2302      	movs	r3, #2
 8001e3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e40:	2300      	movs	r3, #0
 8001e42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e44:	2302      	movs	r3, #2
 8001e46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e48:	2307      	movs	r3, #7
 8001e4a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e4c:	f107 0314 	add.w	r3, r7, #20
 8001e50:	4619      	mov	r1, r3
 8001e52:	4811      	ldr	r0, [pc, #68]	@ (8001e98 <HAL_UART_MspInit+0xd8>)
 8001e54:	f001 fb0a 	bl	800346c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001e58:	2308      	movs	r3, #8
 8001e5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e60:	2300      	movs	r3, #0
 8001e62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e64:	2302      	movs	r3, #2
 8001e66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e68:	2307      	movs	r3, #7
 8001e6a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e6c:	f107 0314 	add.w	r3, r7, #20
 8001e70:	4619      	mov	r1, r3
 8001e72:	480a      	ldr	r0, [pc, #40]	@ (8001e9c <HAL_UART_MspInit+0xdc>)
 8001e74:	f001 fafa 	bl	800346c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001e78:	2200      	movs	r2, #0
 8001e7a:	2100      	movs	r1, #0
 8001e7c:	2025      	movs	r0, #37	@ 0x25
 8001e7e:	f000 febc 	bl	8002bfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001e82:	2025      	movs	r0, #37	@ 0x25
 8001e84:	f000 fed5 	bl	8002c32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001e88:	bf00      	nop
 8001e8a:	3728      	adds	r7, #40	@ 0x28
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	40011000 	.word	0x40011000
 8001e94:	40023800 	.word	0x40023800
 8001e98:	40020000 	.word	0x40020000
 8001e9c:	40020400 	.word	0x40020400

08001ea0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ea0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ed8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ea4:	f7ff fec6 	bl	8001c34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ea8:	480c      	ldr	r0, [pc, #48]	@ (8001edc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001eaa:	490d      	ldr	r1, [pc, #52]	@ (8001ee0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001eac:	4a0d      	ldr	r2, [pc, #52]	@ (8001ee4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001eae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001eb0:	e002      	b.n	8001eb8 <LoopCopyDataInit>

08001eb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001eb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001eb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eb6:	3304      	adds	r3, #4

08001eb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001eb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001eba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ebc:	d3f9      	bcc.n	8001eb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ebe:	4a0a      	ldr	r2, [pc, #40]	@ (8001ee8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ec0:	4c0a      	ldr	r4, [pc, #40]	@ (8001eec <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ec2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ec4:	e001      	b.n	8001eca <LoopFillZerobss>

08001ec6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ec6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ec8:	3204      	adds	r2, #4

08001eca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ecc:	d3fb      	bcc.n	8001ec6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ece:	f009 fdc9 	bl	800ba64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ed2:	f7ff fc37 	bl	8001744 <main>
  bx  lr    
 8001ed6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ed8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001edc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ee0:	20000150 	.word	0x20000150
  ldr r2, =_sidata
 8001ee4:	0800bc40 	.word	0x0800bc40
  ldr r2, =_sbss
 8001ee8:	20000150 	.word	0x20000150
  ldr r4, =_ebss
 8001eec:	200021a8 	.word	0x200021a8

08001ef0 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ef0:	e7fe      	b.n	8001ef0 <DMA1_Stream0_IRQHandler>
	...

08001ef4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ef8:	4b0e      	ldr	r3, [pc, #56]	@ (8001f34 <HAL_Init+0x40>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a0d      	ldr	r2, [pc, #52]	@ (8001f34 <HAL_Init+0x40>)
 8001efe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f04:	4b0b      	ldr	r3, [pc, #44]	@ (8001f34 <HAL_Init+0x40>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a0a      	ldr	r2, [pc, #40]	@ (8001f34 <HAL_Init+0x40>)
 8001f0a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f10:	4b08      	ldr	r3, [pc, #32]	@ (8001f34 <HAL_Init+0x40>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a07      	ldr	r2, [pc, #28]	@ (8001f34 <HAL_Init+0x40>)
 8001f16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f1c:	2003      	movs	r0, #3
 8001f1e:	f000 fe61 	bl	8002be4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f22:	200f      	movs	r0, #15
 8001f24:	f000 f808 	bl	8001f38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f28:	f7ff fd88 	bl	8001a3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f2c:	2300      	movs	r3, #0
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	40023c00 	.word	0x40023c00

08001f38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f40:	4b12      	ldr	r3, [pc, #72]	@ (8001f8c <HAL_InitTick+0x54>)
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	4b12      	ldr	r3, [pc, #72]	@ (8001f90 <HAL_InitTick+0x58>)
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	4619      	mov	r1, r3
 8001f4a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f52:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f56:	4618      	mov	r0, r3
 8001f58:	f000 fe79 	bl	8002c4e <HAL_SYSTICK_Config>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d001      	beq.n	8001f66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e00e      	b.n	8001f84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2b0f      	cmp	r3, #15
 8001f6a:	d80a      	bhi.n	8001f82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	6879      	ldr	r1, [r7, #4]
 8001f70:	f04f 30ff 	mov.w	r0, #4294967295
 8001f74:	f000 fe41 	bl	8002bfa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f78:	4a06      	ldr	r2, [pc, #24]	@ (8001f94 <HAL_InitTick+0x5c>)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	e000      	b.n	8001f84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3708      	adds	r7, #8
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	20000004 	.word	0x20000004
 8001f90:	2000000c 	.word	0x2000000c
 8001f94:	20000008 	.word	0x20000008

08001f98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f9c:	4b06      	ldr	r3, [pc, #24]	@ (8001fb8 <HAL_IncTick+0x20>)
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	4b06      	ldr	r3, [pc, #24]	@ (8001fbc <HAL_IncTick+0x24>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4413      	add	r3, r2
 8001fa8:	4a04      	ldr	r2, [pc, #16]	@ (8001fbc <HAL_IncTick+0x24>)
 8001faa:	6013      	str	r3, [r2, #0]
}
 8001fac:	bf00      	nop
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	2000000c 	.word	0x2000000c
 8001fbc:	20000474 	.word	0x20000474

08001fc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  return uwTick;
 8001fc4:	4b03      	ldr	r3, [pc, #12]	@ (8001fd4 <HAL_GetTick+0x14>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	20000474 	.word	0x20000474

08001fd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fe0:	f7ff ffee 	bl	8001fc0 <HAL_GetTick>
 8001fe4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ff0:	d005      	beq.n	8001ffe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ff2:	4b0a      	ldr	r3, [pc, #40]	@ (800201c <HAL_Delay+0x44>)
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	4413      	add	r3, r2
 8001ffc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ffe:	bf00      	nop
 8002000:	f7ff ffde 	bl	8001fc0 <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	68fa      	ldr	r2, [r7, #12]
 800200c:	429a      	cmp	r2, r3
 800200e:	d8f7      	bhi.n	8002000 <HAL_Delay+0x28>
  {
  }
}
 8002010:	bf00      	nop
 8002012:	bf00      	nop
 8002014:	3710      	adds	r7, #16
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	2000000c 	.word	0x2000000c

08002020 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002028:	2300      	movs	r3, #0
 800202a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d101      	bne.n	8002036 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e033      	b.n	800209e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800203a:	2b00      	cmp	r3, #0
 800203c:	d109      	bne.n	8002052 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f7ff fa2a 	bl	8001498 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2200      	movs	r2, #0
 8002048:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2200      	movs	r2, #0
 800204e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002056:	f003 0310 	and.w	r3, r3, #16
 800205a:	2b00      	cmp	r3, #0
 800205c:	d118      	bne.n	8002090 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002062:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002066:	f023 0302 	bic.w	r3, r3, #2
 800206a:	f043 0202 	orr.w	r2, r3, #2
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f000 fb5e 	bl	8002734 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002082:	f023 0303 	bic.w	r3, r3, #3
 8002086:	f043 0201 	orr.w	r2, r3, #1
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	641a      	str	r2, [r3, #64]	@ 0x40
 800208e:	e001      	b.n	8002094 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2200      	movs	r2, #0
 8002098:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800209c:	7bfb      	ldrb	r3, [r7, #15]
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3710      	adds	r7, #16
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}

080020a6 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80020a6:	b580      	push	{r7, lr}
 80020a8:	b086      	sub	sp, #24
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80020ae:	2300      	movs	r3, #0
 80020b0:	617b      	str	r3, [r7, #20]
 80020b2:	2300      	movs	r3, #0
 80020b4:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	f003 0302 	and.w	r3, r3, #2
 80020cc:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	f003 0320 	and.w	r3, r3, #32
 80020d4:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d049      	beq.n	8002170 <HAL_ADC_IRQHandler+0xca>
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d046      	beq.n	8002170 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e6:	f003 0310 	and.w	r3, r3, #16
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d105      	bne.n	80020fa <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d12b      	bne.n	8002160 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800210c:	2b00      	cmp	r3, #0
 800210e:	d127      	bne.n	8002160 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002116:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800211a:	2b00      	cmp	r3, #0
 800211c:	d006      	beq.n	800212c <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002128:	2b00      	cmp	r3, #0
 800212a:	d119      	bne.n	8002160 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	685a      	ldr	r2, [r3, #4]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f022 0220 	bic.w	r2, r2, #32
 800213a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002140:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800214c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d105      	bne.n	8002160 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002158:	f043 0201 	orr.w	r2, r3, #1
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	f7fe f9bb 	bl	80004dc <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f06f 0212 	mvn.w	r2, #18
 800216e:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	f003 0304 	and.w	r3, r3, #4
 8002176:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800217e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d057      	beq.n	8002236 <HAL_ADC_IRQHandler+0x190>
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d054      	beq.n	8002236 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002190:	f003 0310 	and.w	r3, r3, #16
 8002194:	2b00      	cmp	r3, #0
 8002196:	d105      	bne.n	80021a4 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800219c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d139      	bne.n	8002226 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021b8:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d006      	beq.n	80021ce <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d12b      	bne.n	8002226 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d124      	bne.n	8002226 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d11d      	bne.n	8002226 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d119      	bne.n	8002226 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	685a      	ldr	r2, [r3, #4]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002200:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002206:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002212:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002216:	2b00      	cmp	r3, #0
 8002218:	d105      	bne.n	8002226 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800221e:	f043 0201 	orr.w	r2, r3, #1
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f000 fc02 	bl	8002a30 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f06f 020c 	mvn.w	r2, #12
 8002234:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	f003 0301 	and.w	r3, r3, #1
 800223c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002244:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d017      	beq.n	800227c <HAL_ADC_IRQHandler+0x1d6>
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d014      	beq.n	800227c <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0301 	and.w	r3, r3, #1
 800225c:	2b01      	cmp	r3, #1
 800225e:	d10d      	bne.n	800227c <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002264:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	f000 f91b 	bl	80024a8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f06f 0201 	mvn.w	r2, #1
 800227a:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	f003 0320 	and.w	r3, r3, #32
 8002282:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800228a:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d015      	beq.n	80022be <HAL_ADC_IRQHandler+0x218>
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d012      	beq.n	80022be <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800229c:	f043 0202 	orr.w	r2, r3, #2
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f06f 0220 	mvn.w	r2, #32
 80022ac:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f000 f904 	bl	80024bc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f06f 0220 	mvn.w	r2, #32
 80022bc:	601a      	str	r2, [r3, #0]
  }
}
 80022be:	bf00      	nop
 80022c0:	3718      	adds	r7, #24
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
	...

080022c8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b086      	sub	sp, #24
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	60f8      	str	r0, [r7, #12]
 80022d0:	60b9      	str	r1, [r7, #8]
 80022d2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80022d4:	2300      	movs	r3, #0
 80022d6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d101      	bne.n	80022e6 <HAL_ADC_Start_DMA+0x1e>
 80022e2:	2302      	movs	r3, #2
 80022e4:	e0ce      	b.n	8002484 <HAL_ADC_Start_DMA+0x1bc>
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2201      	movs	r2, #1
 80022ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	f003 0301 	and.w	r3, r3, #1
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d018      	beq.n	800232e <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	689a      	ldr	r2, [r3, #8]
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f042 0201 	orr.w	r2, r2, #1
 800230a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800230c:	4b5f      	ldr	r3, [pc, #380]	@ (800248c <HAL_ADC_Start_DMA+0x1c4>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a5f      	ldr	r2, [pc, #380]	@ (8002490 <HAL_ADC_Start_DMA+0x1c8>)
 8002312:	fba2 2303 	umull	r2, r3, r2, r3
 8002316:	0c9a      	lsrs	r2, r3, #18
 8002318:	4613      	mov	r3, r2
 800231a:	005b      	lsls	r3, r3, #1
 800231c:	4413      	add	r3, r2
 800231e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002320:	e002      	b.n	8002328 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	3b01      	subs	r3, #1
 8002326:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d1f9      	bne.n	8002322 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002338:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800233c:	d107      	bne.n	800234e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	689a      	ldr	r2, [r3, #8]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800234c:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	f003 0301 	and.w	r3, r3, #1
 8002358:	2b01      	cmp	r3, #1
 800235a:	f040 8086 	bne.w	800246a <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002362:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002366:	f023 0301 	bic.w	r3, r3, #1
 800236a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800237c:	2b00      	cmp	r3, #0
 800237e:	d007      	beq.n	8002390 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002384:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002388:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002394:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002398:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800239c:	d106      	bne.n	80023ac <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023a2:	f023 0206 	bic.w	r2, r3, #6
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	645a      	str	r2, [r3, #68]	@ 0x44
 80023aa:	e002      	b.n	80023b2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2200      	movs	r2, #0
 80023b0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2200      	movs	r2, #0
 80023b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023ba:	4b36      	ldr	r3, [pc, #216]	@ (8002494 <HAL_ADC_Start_DMA+0x1cc>)
 80023bc:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023c2:	4a35      	ldr	r2, [pc, #212]	@ (8002498 <HAL_ADC_Start_DMA+0x1d0>)
 80023c4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023ca:	4a34      	ldr	r2, [pc, #208]	@ (800249c <HAL_ADC_Start_DMA+0x1d4>)
 80023cc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023d2:	4a33      	ldr	r2, [pc, #204]	@ (80024a0 <HAL_ADC_Start_DMA+0x1d8>)
 80023d4:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80023de:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	685a      	ldr	r2, [r3, #4]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80023ee:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	689a      	ldr	r2, [r3, #8]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80023fe:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	334c      	adds	r3, #76	@ 0x4c
 800240a:	4619      	mov	r1, r3
 800240c:	68ba      	ldr	r2, [r7, #8]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	f000 fcd8 	bl	8002dc4 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f003 031f 	and.w	r3, r3, #31
 800241c:	2b00      	cmp	r3, #0
 800241e:	d10f      	bne.n	8002440 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d129      	bne.n	8002482 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	689a      	ldr	r2, [r3, #8]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800243c:	609a      	str	r2, [r3, #8]
 800243e:	e020      	b.n	8002482 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a17      	ldr	r2, [pc, #92]	@ (80024a4 <HAL_ADC_Start_DMA+0x1dc>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d11b      	bne.n	8002482 <HAL_ADC_Start_DMA+0x1ba>
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d114      	bne.n	8002482 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	689a      	ldr	r2, [r3, #8]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002466:	609a      	str	r2, [r3, #8]
 8002468:	e00b      	b.n	8002482 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800246e:	f043 0210 	orr.w	r2, r3, #16
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800247a:	f043 0201 	orr.w	r2, r3, #1
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002482:	2300      	movs	r3, #0
}
 8002484:	4618      	mov	r0, r3
 8002486:	3718      	adds	r7, #24
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	20000004 	.word	0x20000004
 8002490:	431bde83 	.word	0x431bde83
 8002494:	40012300 	.word	0x40012300
 8002498:	0800292d 	.word	0x0800292d
 800249c:	080029e7 	.word	0x080029e7
 80024a0:	08002a03 	.word	0x08002a03
 80024a4:	40012000 	.word	0x40012000

080024a8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80024b0:	bf00      	nop
 80024b2:	370c      	adds	r7, #12
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80024c4:	bf00      	nop
 80024c6:	370c      	adds	r7, #12
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr

080024d0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b085      	sub	sp, #20
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80024da:	2300      	movs	r3, #0
 80024dc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d101      	bne.n	80024ec <HAL_ADC_ConfigChannel+0x1c>
 80024e8:	2302      	movs	r3, #2
 80024ea:	e113      	b.n	8002714 <HAL_ADC_ConfigChannel+0x244>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2201      	movs	r2, #1
 80024f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	2b09      	cmp	r3, #9
 80024fa:	d925      	bls.n	8002548 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	68d9      	ldr	r1, [r3, #12]
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	b29b      	uxth	r3, r3
 8002508:	461a      	mov	r2, r3
 800250a:	4613      	mov	r3, r2
 800250c:	005b      	lsls	r3, r3, #1
 800250e:	4413      	add	r3, r2
 8002510:	3b1e      	subs	r3, #30
 8002512:	2207      	movs	r2, #7
 8002514:	fa02 f303 	lsl.w	r3, r2, r3
 8002518:	43da      	mvns	r2, r3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	400a      	ands	r2, r1
 8002520:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	68d9      	ldr	r1, [r3, #12]
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	689a      	ldr	r2, [r3, #8]
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	b29b      	uxth	r3, r3
 8002532:	4618      	mov	r0, r3
 8002534:	4603      	mov	r3, r0
 8002536:	005b      	lsls	r3, r3, #1
 8002538:	4403      	add	r3, r0
 800253a:	3b1e      	subs	r3, #30
 800253c:	409a      	lsls	r2, r3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	430a      	orrs	r2, r1
 8002544:	60da      	str	r2, [r3, #12]
 8002546:	e022      	b.n	800258e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	6919      	ldr	r1, [r3, #16]
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	b29b      	uxth	r3, r3
 8002554:	461a      	mov	r2, r3
 8002556:	4613      	mov	r3, r2
 8002558:	005b      	lsls	r3, r3, #1
 800255a:	4413      	add	r3, r2
 800255c:	2207      	movs	r2, #7
 800255e:	fa02 f303 	lsl.w	r3, r2, r3
 8002562:	43da      	mvns	r2, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	400a      	ands	r2, r1
 800256a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	6919      	ldr	r1, [r3, #16]
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	689a      	ldr	r2, [r3, #8]
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	b29b      	uxth	r3, r3
 800257c:	4618      	mov	r0, r3
 800257e:	4603      	mov	r3, r0
 8002580:	005b      	lsls	r3, r3, #1
 8002582:	4403      	add	r3, r0
 8002584:	409a      	lsls	r2, r3
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	430a      	orrs	r2, r1
 800258c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	2b06      	cmp	r3, #6
 8002594:	d824      	bhi.n	80025e0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	685a      	ldr	r2, [r3, #4]
 80025a0:	4613      	mov	r3, r2
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	4413      	add	r3, r2
 80025a6:	3b05      	subs	r3, #5
 80025a8:	221f      	movs	r2, #31
 80025aa:	fa02 f303 	lsl.w	r3, r2, r3
 80025ae:	43da      	mvns	r2, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	400a      	ands	r2, r1
 80025b6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	4618      	mov	r0, r3
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	685a      	ldr	r2, [r3, #4]
 80025ca:	4613      	mov	r3, r2
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	4413      	add	r3, r2
 80025d0:	3b05      	subs	r3, #5
 80025d2:	fa00 f203 	lsl.w	r2, r0, r3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	430a      	orrs	r2, r1
 80025dc:	635a      	str	r2, [r3, #52]	@ 0x34
 80025de:	e04c      	b.n	800267a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	2b0c      	cmp	r3, #12
 80025e6:	d824      	bhi.n	8002632 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	685a      	ldr	r2, [r3, #4]
 80025f2:	4613      	mov	r3, r2
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	4413      	add	r3, r2
 80025f8:	3b23      	subs	r3, #35	@ 0x23
 80025fa:	221f      	movs	r2, #31
 80025fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002600:	43da      	mvns	r2, r3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	400a      	ands	r2, r1
 8002608:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	b29b      	uxth	r3, r3
 8002616:	4618      	mov	r0, r3
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	685a      	ldr	r2, [r3, #4]
 800261c:	4613      	mov	r3, r2
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	4413      	add	r3, r2
 8002622:	3b23      	subs	r3, #35	@ 0x23
 8002624:	fa00 f203 	lsl.w	r2, r0, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	430a      	orrs	r2, r1
 800262e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002630:	e023      	b.n	800267a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	685a      	ldr	r2, [r3, #4]
 800263c:	4613      	mov	r3, r2
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	4413      	add	r3, r2
 8002642:	3b41      	subs	r3, #65	@ 0x41
 8002644:	221f      	movs	r2, #31
 8002646:	fa02 f303 	lsl.w	r3, r2, r3
 800264a:	43da      	mvns	r2, r3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	400a      	ands	r2, r1
 8002652:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	b29b      	uxth	r3, r3
 8002660:	4618      	mov	r0, r3
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	685a      	ldr	r2, [r3, #4]
 8002666:	4613      	mov	r3, r2
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	4413      	add	r3, r2
 800266c:	3b41      	subs	r3, #65	@ 0x41
 800266e:	fa00 f203 	lsl.w	r2, r0, r3
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	430a      	orrs	r2, r1
 8002678:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800267a:	4b29      	ldr	r3, [pc, #164]	@ (8002720 <HAL_ADC_ConfigChannel+0x250>)
 800267c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a28      	ldr	r2, [pc, #160]	@ (8002724 <HAL_ADC_ConfigChannel+0x254>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d10f      	bne.n	80026a8 <HAL_ADC_ConfigChannel+0x1d8>
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	2b12      	cmp	r3, #18
 800268e:	d10b      	bne.n	80026a8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a1d      	ldr	r2, [pc, #116]	@ (8002724 <HAL_ADC_ConfigChannel+0x254>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d12b      	bne.n	800270a <HAL_ADC_ConfigChannel+0x23a>
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a1c      	ldr	r2, [pc, #112]	@ (8002728 <HAL_ADC_ConfigChannel+0x258>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d003      	beq.n	80026c4 <HAL_ADC_ConfigChannel+0x1f4>
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	2b11      	cmp	r3, #17
 80026c2:	d122      	bne.n	800270a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a11      	ldr	r2, [pc, #68]	@ (8002728 <HAL_ADC_ConfigChannel+0x258>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d111      	bne.n	800270a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80026e6:	4b11      	ldr	r3, [pc, #68]	@ (800272c <HAL_ADC_ConfigChannel+0x25c>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a11      	ldr	r2, [pc, #68]	@ (8002730 <HAL_ADC_ConfigChannel+0x260>)
 80026ec:	fba2 2303 	umull	r2, r3, r2, r3
 80026f0:	0c9a      	lsrs	r2, r3, #18
 80026f2:	4613      	mov	r3, r2
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	4413      	add	r3, r2
 80026f8:	005b      	lsls	r3, r3, #1
 80026fa:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80026fc:	e002      	b.n	8002704 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	3b01      	subs	r3, #1
 8002702:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d1f9      	bne.n	80026fe <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002712:	2300      	movs	r3, #0
}
 8002714:	4618      	mov	r0, r3
 8002716:	3714      	adds	r7, #20
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr
 8002720:	40012300 	.word	0x40012300
 8002724:	40012000 	.word	0x40012000
 8002728:	10000012 	.word	0x10000012
 800272c:	20000004 	.word	0x20000004
 8002730:	431bde83 	.word	0x431bde83

08002734 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002734:	b480      	push	{r7}
 8002736:	b085      	sub	sp, #20
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800273c:	4b79      	ldr	r3, [pc, #484]	@ (8002924 <ADC_Init+0x1f0>)
 800273e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	685a      	ldr	r2, [r3, #4]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	431a      	orrs	r2, r3
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	685a      	ldr	r2, [r3, #4]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002768:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	6859      	ldr	r1, [r3, #4]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	691b      	ldr	r3, [r3, #16]
 8002774:	021a      	lsls	r2, r3, #8
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	430a      	orrs	r2, r1
 800277c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	685a      	ldr	r2, [r3, #4]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800278c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	6859      	ldr	r1, [r3, #4]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	689a      	ldr	r2, [r3, #8]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	430a      	orrs	r2, r1
 800279e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	689a      	ldr	r2, [r3, #8]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80027ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	6899      	ldr	r1, [r3, #8]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	68da      	ldr	r2, [r3, #12]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	430a      	orrs	r2, r1
 80027c0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027c6:	4a58      	ldr	r2, [pc, #352]	@ (8002928 <ADC_Init+0x1f4>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d022      	beq.n	8002812 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	689a      	ldr	r2, [r3, #8]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80027da:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	6899      	ldr	r1, [r3, #8]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	430a      	orrs	r2, r1
 80027ec:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	689a      	ldr	r2, [r3, #8]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80027fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	6899      	ldr	r1, [r3, #8]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	430a      	orrs	r2, r1
 800280e:	609a      	str	r2, [r3, #8]
 8002810:	e00f      	b.n	8002832 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	689a      	ldr	r2, [r3, #8]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002820:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	689a      	ldr	r2, [r3, #8]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002830:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	689a      	ldr	r2, [r3, #8]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f022 0202 	bic.w	r2, r2, #2
 8002840:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	6899      	ldr	r1, [r3, #8]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	7e1b      	ldrb	r3, [r3, #24]
 800284c:	005a      	lsls	r2, r3, #1
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	430a      	orrs	r2, r1
 8002854:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f893 3020 	ldrb.w	r3, [r3, #32]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d01b      	beq.n	8002898 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	685a      	ldr	r2, [r3, #4]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800286e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	685a      	ldr	r2, [r3, #4]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800287e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	6859      	ldr	r1, [r3, #4]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800288a:	3b01      	subs	r3, #1
 800288c:	035a      	lsls	r2, r3, #13
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	430a      	orrs	r2, r1
 8002894:	605a      	str	r2, [r3, #4]
 8002896:	e007      	b.n	80028a8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	685a      	ldr	r2, [r3, #4]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80028a6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80028b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	69db      	ldr	r3, [r3, #28]
 80028c2:	3b01      	subs	r3, #1
 80028c4:	051a      	lsls	r2, r3, #20
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	430a      	orrs	r2, r1
 80028cc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	689a      	ldr	r2, [r3, #8]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80028dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	6899      	ldr	r1, [r3, #8]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80028ea:	025a      	lsls	r2, r3, #9
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	430a      	orrs	r2, r1
 80028f2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	689a      	ldr	r2, [r3, #8]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002902:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	6899      	ldr	r1, [r3, #8]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	695b      	ldr	r3, [r3, #20]
 800290e:	029a      	lsls	r2, r3, #10
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	430a      	orrs	r2, r1
 8002916:	609a      	str	r2, [r3, #8]
}
 8002918:	bf00      	nop
 800291a:	3714      	adds	r7, #20
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr
 8002924:	40012300 	.word	0x40012300
 8002928:	0f000001 	.word	0x0f000001

0800292c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b084      	sub	sp, #16
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002938:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800293e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002942:	2b00      	cmp	r3, #0
 8002944:	d13c      	bne.n	80029c0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800294a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800295c:	2b00      	cmp	r3, #0
 800295e:	d12b      	bne.n	80029b8 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002964:	2b00      	cmp	r3, #0
 8002966:	d127      	bne.n	80029b8 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800296e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002972:	2b00      	cmp	r3, #0
 8002974:	d006      	beq.n	8002984 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002980:	2b00      	cmp	r3, #0
 8002982:	d119      	bne.n	80029b8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	685a      	ldr	r2, [r3, #4]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f022 0220 	bic.w	r2, r2, #32
 8002992:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002998:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d105      	bne.n	80029b8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029b0:	f043 0201 	orr.w	r2, r3, #1
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80029b8:	68f8      	ldr	r0, [r7, #12]
 80029ba:	f7fd fd8f 	bl	80004dc <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80029be:	e00e      	b.n	80029de <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029c4:	f003 0310 	and.w	r3, r3, #16
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d003      	beq.n	80029d4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80029cc:	68f8      	ldr	r0, [r7, #12]
 80029ce:	f7ff fd75 	bl	80024bc <HAL_ADC_ErrorCallback>
}
 80029d2:	e004      	b.n	80029de <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	4798      	blx	r3
}
 80029de:	bf00      	nop
 80029e0:	3710      	adds	r7, #16
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}

080029e6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80029e6:	b580      	push	{r7, lr}
 80029e8:	b084      	sub	sp, #16
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029f2:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80029f4:	68f8      	ldr	r0, [r7, #12]
 80029f6:	f7fd fd67 	bl	80004c8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80029fa:	bf00      	nop
 80029fc:	3710      	adds	r7, #16
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002a02:	b580      	push	{r7, lr}
 8002a04:	b084      	sub	sp, #16
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a0e:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2240      	movs	r2, #64	@ 0x40
 8002a14:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a1a:	f043 0204 	orr.w	r2, r3, #4
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002a22:	68f8      	ldr	r0, [r7, #12]
 8002a24:	f7ff fd4a 	bl	80024bc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a28:	bf00      	nop
 8002a2a:	3710      	adds	r7, #16
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002a38:	bf00      	nop
 8002a3a:	370c      	adds	r7, #12
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr

08002a44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b085      	sub	sp, #20
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	f003 0307 	and.w	r3, r3, #7
 8002a52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a54:	4b0c      	ldr	r3, [pc, #48]	@ (8002a88 <__NVIC_SetPriorityGrouping+0x44>)
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a5a:	68ba      	ldr	r2, [r7, #8]
 8002a5c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a60:	4013      	ands	r3, r2
 8002a62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a6c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002a70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a76:	4a04      	ldr	r2, [pc, #16]	@ (8002a88 <__NVIC_SetPriorityGrouping+0x44>)
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	60d3      	str	r3, [r2, #12]
}
 8002a7c:	bf00      	nop
 8002a7e:	3714      	adds	r7, #20
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr
 8002a88:	e000ed00 	.word	0xe000ed00

08002a8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a90:	4b04      	ldr	r3, [pc, #16]	@ (8002aa4 <__NVIC_GetPriorityGrouping+0x18>)
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	0a1b      	lsrs	r3, r3, #8
 8002a96:	f003 0307 	and.w	r3, r3, #7
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr
 8002aa4:	e000ed00 	.word	0xe000ed00

08002aa8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	4603      	mov	r3, r0
 8002ab0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	db0b      	blt.n	8002ad2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002aba:	79fb      	ldrb	r3, [r7, #7]
 8002abc:	f003 021f 	and.w	r2, r3, #31
 8002ac0:	4907      	ldr	r1, [pc, #28]	@ (8002ae0 <__NVIC_EnableIRQ+0x38>)
 8002ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ac6:	095b      	lsrs	r3, r3, #5
 8002ac8:	2001      	movs	r0, #1
 8002aca:	fa00 f202 	lsl.w	r2, r0, r2
 8002ace:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002ad2:	bf00      	nop
 8002ad4:	370c      	adds	r7, #12
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr
 8002ade:	bf00      	nop
 8002ae0:	e000e100 	.word	0xe000e100

08002ae4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	4603      	mov	r3, r0
 8002aec:	6039      	str	r1, [r7, #0]
 8002aee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002af0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	db0a      	blt.n	8002b0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	b2da      	uxtb	r2, r3
 8002afc:	490c      	ldr	r1, [pc, #48]	@ (8002b30 <__NVIC_SetPriority+0x4c>)
 8002afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b02:	0112      	lsls	r2, r2, #4
 8002b04:	b2d2      	uxtb	r2, r2
 8002b06:	440b      	add	r3, r1
 8002b08:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b0c:	e00a      	b.n	8002b24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	b2da      	uxtb	r2, r3
 8002b12:	4908      	ldr	r1, [pc, #32]	@ (8002b34 <__NVIC_SetPriority+0x50>)
 8002b14:	79fb      	ldrb	r3, [r7, #7]
 8002b16:	f003 030f 	and.w	r3, r3, #15
 8002b1a:	3b04      	subs	r3, #4
 8002b1c:	0112      	lsls	r2, r2, #4
 8002b1e:	b2d2      	uxtb	r2, r2
 8002b20:	440b      	add	r3, r1
 8002b22:	761a      	strb	r2, [r3, #24]
}
 8002b24:	bf00      	nop
 8002b26:	370c      	adds	r7, #12
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr
 8002b30:	e000e100 	.word	0xe000e100
 8002b34:	e000ed00 	.word	0xe000ed00

08002b38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b089      	sub	sp, #36	@ 0x24
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	60f8      	str	r0, [r7, #12]
 8002b40:	60b9      	str	r1, [r7, #8]
 8002b42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f003 0307 	and.w	r3, r3, #7
 8002b4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	f1c3 0307 	rsb	r3, r3, #7
 8002b52:	2b04      	cmp	r3, #4
 8002b54:	bf28      	it	cs
 8002b56:	2304      	movcs	r3, #4
 8002b58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	3304      	adds	r3, #4
 8002b5e:	2b06      	cmp	r3, #6
 8002b60:	d902      	bls.n	8002b68 <NVIC_EncodePriority+0x30>
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	3b03      	subs	r3, #3
 8002b66:	e000      	b.n	8002b6a <NVIC_EncodePriority+0x32>
 8002b68:	2300      	movs	r3, #0
 8002b6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b6c:	f04f 32ff 	mov.w	r2, #4294967295
 8002b70:	69bb      	ldr	r3, [r7, #24]
 8002b72:	fa02 f303 	lsl.w	r3, r2, r3
 8002b76:	43da      	mvns	r2, r3
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	401a      	ands	r2, r3
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b80:	f04f 31ff 	mov.w	r1, #4294967295
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	fa01 f303 	lsl.w	r3, r1, r3
 8002b8a:	43d9      	mvns	r1, r3
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b90:	4313      	orrs	r3, r2
         );
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3724      	adds	r7, #36	@ 0x24
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr
	...

08002ba0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b082      	sub	sp, #8
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	3b01      	subs	r3, #1
 8002bac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002bb0:	d301      	bcc.n	8002bb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e00f      	b.n	8002bd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bb6:	4a0a      	ldr	r2, [pc, #40]	@ (8002be0 <SysTick_Config+0x40>)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	3b01      	subs	r3, #1
 8002bbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bbe:	210f      	movs	r1, #15
 8002bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8002bc4:	f7ff ff8e 	bl	8002ae4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bc8:	4b05      	ldr	r3, [pc, #20]	@ (8002be0 <SysTick_Config+0x40>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bce:	4b04      	ldr	r3, [pc, #16]	@ (8002be0 <SysTick_Config+0x40>)
 8002bd0:	2207      	movs	r2, #7
 8002bd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bd4:	2300      	movs	r3, #0
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3708      	adds	r7, #8
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	e000e010 	.word	0xe000e010

08002be4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b082      	sub	sp, #8
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f7ff ff29 	bl	8002a44 <__NVIC_SetPriorityGrouping>
}
 8002bf2:	bf00      	nop
 8002bf4:	3708      	adds	r7, #8
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}

08002bfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002bfa:	b580      	push	{r7, lr}
 8002bfc:	b086      	sub	sp, #24
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	4603      	mov	r3, r0
 8002c02:	60b9      	str	r1, [r7, #8]
 8002c04:	607a      	str	r2, [r7, #4]
 8002c06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c0c:	f7ff ff3e 	bl	8002a8c <__NVIC_GetPriorityGrouping>
 8002c10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	68b9      	ldr	r1, [r7, #8]
 8002c16:	6978      	ldr	r0, [r7, #20]
 8002c18:	f7ff ff8e 	bl	8002b38 <NVIC_EncodePriority>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c22:	4611      	mov	r1, r2
 8002c24:	4618      	mov	r0, r3
 8002c26:	f7ff ff5d 	bl	8002ae4 <__NVIC_SetPriority>
}
 8002c2a:	bf00      	nop
 8002c2c:	3718      	adds	r7, #24
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}

08002c32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c32:	b580      	push	{r7, lr}
 8002c34:	b082      	sub	sp, #8
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	4603      	mov	r3, r0
 8002c3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c40:	4618      	mov	r0, r3
 8002c42:	f7ff ff31 	bl	8002aa8 <__NVIC_EnableIRQ>
}
 8002c46:	bf00      	nop
 8002c48:	3708      	adds	r7, #8
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}

08002c4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c4e:	b580      	push	{r7, lr}
 8002c50:	b082      	sub	sp, #8
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f7ff ffa2 	bl	8002ba0 <SysTick_Config>
 8002c5c:	4603      	mov	r3, r0
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3708      	adds	r7, #8
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
	...

08002c68 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b086      	sub	sp, #24
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002c70:	2300      	movs	r3, #0
 8002c72:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002c74:	f7ff f9a4 	bl	8001fc0 <HAL_GetTick>
 8002c78:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d101      	bne.n	8002c84 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e099      	b.n	8002db8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2202      	movs	r2, #2
 8002c88:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f022 0201 	bic.w	r2, r2, #1
 8002ca2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ca4:	e00f      	b.n	8002cc6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ca6:	f7ff f98b 	bl	8001fc0 <HAL_GetTick>
 8002caa:	4602      	mov	r2, r0
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	1ad3      	subs	r3, r2, r3
 8002cb0:	2b05      	cmp	r3, #5
 8002cb2:	d908      	bls.n	8002cc6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2220      	movs	r2, #32
 8002cb8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2203      	movs	r2, #3
 8002cbe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e078      	b.n	8002db8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 0301 	and.w	r3, r3, #1
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d1e8      	bne.n	8002ca6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002cdc:	697a      	ldr	r2, [r7, #20]
 8002cde:	4b38      	ldr	r3, [pc, #224]	@ (8002dc0 <HAL_DMA_Init+0x158>)
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	685a      	ldr	r2, [r3, #4]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002cf2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	691b      	ldr	r3, [r3, #16]
 8002cf8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cfe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	699b      	ldr	r3, [r3, #24]
 8002d04:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d0a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6a1b      	ldr	r3, [r3, #32]
 8002d10:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d12:	697a      	ldr	r2, [r7, #20]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d1c:	2b04      	cmp	r3, #4
 8002d1e:	d107      	bne.n	8002d30 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	697a      	ldr	r2, [r7, #20]
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	697a      	ldr	r2, [r7, #20]
 8002d36:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	695b      	ldr	r3, [r3, #20]
 8002d3e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	f023 0307 	bic.w	r3, r3, #7
 8002d46:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d4c:	697a      	ldr	r2, [r7, #20]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d56:	2b04      	cmp	r3, #4
 8002d58:	d117      	bne.n	8002d8a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d5e:	697a      	ldr	r2, [r7, #20]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d00e      	beq.n	8002d8a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f000 fb01 	bl	8003374 <DMA_CheckFifoParam>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d008      	beq.n	8002d8a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2240      	movs	r2, #64	@ 0x40
 8002d7c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2201      	movs	r2, #1
 8002d82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002d86:	2301      	movs	r3, #1
 8002d88:	e016      	b.n	8002db8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	697a      	ldr	r2, [r7, #20]
 8002d90:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f000 fab8 	bl	8003308 <DMA_CalcBaseAndBitshift>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002da0:	223f      	movs	r2, #63	@ 0x3f
 8002da2:	409a      	lsls	r2, r3
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2201      	movs	r2, #1
 8002db2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002db6:	2300      	movs	r3, #0
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3718      	adds	r7, #24
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	f010803f 	.word	0xf010803f

08002dc4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b086      	sub	sp, #24
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	60f8      	str	r0, [r7, #12]
 8002dcc:	60b9      	str	r1, [r7, #8]
 8002dce:	607a      	str	r2, [r7, #4]
 8002dd0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dda:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d101      	bne.n	8002dea <HAL_DMA_Start_IT+0x26>
 8002de6:	2302      	movs	r3, #2
 8002de8:	e040      	b.n	8002e6c <HAL_DMA_Start_IT+0xa8>
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2201      	movs	r2, #1
 8002dee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d12f      	bne.n	8002e5e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2202      	movs	r2, #2
 8002e02:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	68b9      	ldr	r1, [r7, #8]
 8002e12:	68f8      	ldr	r0, [r7, #12]
 8002e14:	f000 fa4a 	bl	80032ac <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e1c:	223f      	movs	r2, #63	@ 0x3f
 8002e1e:	409a      	lsls	r2, r3
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f042 0216 	orr.w	r2, r2, #22
 8002e32:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d007      	beq.n	8002e4c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f042 0208 	orr.w	r2, r2, #8
 8002e4a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f042 0201 	orr.w	r2, r2, #1
 8002e5a:	601a      	str	r2, [r3, #0]
 8002e5c:	e005      	b.n	8002e6a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002e66:	2302      	movs	r3, #2
 8002e68:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002e6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3718      	adds	r7, #24
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e80:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002e82:	f7ff f89d 	bl	8001fc0 <HAL_GetTick>
 8002e86:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d008      	beq.n	8002ea6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2280      	movs	r2, #128	@ 0x80
 8002e98:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e052      	b.n	8002f4c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f022 0216 	bic.w	r2, r2, #22
 8002eb4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	695a      	ldr	r2, [r3, #20]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002ec4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d103      	bne.n	8002ed6 <HAL_DMA_Abort+0x62>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d007      	beq.n	8002ee6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f022 0208 	bic.w	r2, r2, #8
 8002ee4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f022 0201 	bic.w	r2, r2, #1
 8002ef4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ef6:	e013      	b.n	8002f20 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ef8:	f7ff f862 	bl	8001fc0 <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	2b05      	cmp	r3, #5
 8002f04:	d90c      	bls.n	8002f20 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2220      	movs	r2, #32
 8002f0a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2203      	movs	r2, #3
 8002f10:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	e015      	b.n	8002f4c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0301 	and.w	r3, r3, #1
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d1e4      	bne.n	8002ef8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f32:	223f      	movs	r2, #63	@ 0x3f
 8002f34:	409a      	lsls	r2, r3
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2200      	movs	r2, #0
 8002f46:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002f4a:	2300      	movs	r3, #0
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3710      	adds	r7, #16
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}

08002f54 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	2b02      	cmp	r3, #2
 8002f66:	d004      	beq.n	8002f72 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2280      	movs	r2, #128	@ 0x80
 8002f6c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e00c      	b.n	8002f8c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2205      	movs	r2, #5
 8002f76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f022 0201 	bic.w	r2, r2, #1
 8002f88:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002f8a:	2300      	movs	r3, #0
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	370c      	adds	r7, #12
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr

08002f98 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b086      	sub	sp, #24
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002fa4:	4b8e      	ldr	r3, [pc, #568]	@ (80031e0 <HAL_DMA_IRQHandler+0x248>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a8e      	ldr	r2, [pc, #568]	@ (80031e4 <HAL_DMA_IRQHandler+0x24c>)
 8002faa:	fba2 2303 	umull	r2, r3, r2, r3
 8002fae:	0a9b      	lsrs	r3, r3, #10
 8002fb0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fb6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fc2:	2208      	movs	r2, #8
 8002fc4:	409a      	lsls	r2, r3
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	4013      	ands	r3, r2
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d01a      	beq.n	8003004 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0304 	and.w	r3, r3, #4
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d013      	beq.n	8003004 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f022 0204 	bic.w	r2, r2, #4
 8002fea:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ff0:	2208      	movs	r2, #8
 8002ff2:	409a      	lsls	r2, r3
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ffc:	f043 0201 	orr.w	r2, r3, #1
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003008:	2201      	movs	r2, #1
 800300a:	409a      	lsls	r2, r3
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	4013      	ands	r3, r2
 8003010:	2b00      	cmp	r3, #0
 8003012:	d012      	beq.n	800303a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	695b      	ldr	r3, [r3, #20]
 800301a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800301e:	2b00      	cmp	r3, #0
 8003020:	d00b      	beq.n	800303a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003026:	2201      	movs	r2, #1
 8003028:	409a      	lsls	r2, r3
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003032:	f043 0202 	orr.w	r2, r3, #2
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800303e:	2204      	movs	r2, #4
 8003040:	409a      	lsls	r2, r3
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	4013      	ands	r3, r2
 8003046:	2b00      	cmp	r3, #0
 8003048:	d012      	beq.n	8003070 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 0302 	and.w	r3, r3, #2
 8003054:	2b00      	cmp	r3, #0
 8003056:	d00b      	beq.n	8003070 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800305c:	2204      	movs	r2, #4
 800305e:	409a      	lsls	r2, r3
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003068:	f043 0204 	orr.w	r2, r3, #4
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003074:	2210      	movs	r2, #16
 8003076:	409a      	lsls	r2, r3
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	4013      	ands	r3, r2
 800307c:	2b00      	cmp	r3, #0
 800307e:	d043      	beq.n	8003108 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0308 	and.w	r3, r3, #8
 800308a:	2b00      	cmp	r3, #0
 800308c:	d03c      	beq.n	8003108 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003092:	2210      	movs	r2, #16
 8003094:	409a      	lsls	r2, r3
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d018      	beq.n	80030da <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d108      	bne.n	80030c8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d024      	beq.n	8003108 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	4798      	blx	r3
 80030c6:	e01f      	b.n	8003108 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d01b      	beq.n	8003108 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030d4:	6878      	ldr	r0, [r7, #4]
 80030d6:	4798      	blx	r3
 80030d8:	e016      	b.n	8003108 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d107      	bne.n	80030f8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f022 0208 	bic.w	r2, r2, #8
 80030f6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d003      	beq.n	8003108 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800310c:	2220      	movs	r2, #32
 800310e:	409a      	lsls	r2, r3
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	4013      	ands	r3, r2
 8003114:	2b00      	cmp	r3, #0
 8003116:	f000 808f 	beq.w	8003238 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0310 	and.w	r3, r3, #16
 8003124:	2b00      	cmp	r3, #0
 8003126:	f000 8087 	beq.w	8003238 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800312e:	2220      	movs	r2, #32
 8003130:	409a      	lsls	r2, r3
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800313c:	b2db      	uxtb	r3, r3
 800313e:	2b05      	cmp	r3, #5
 8003140:	d136      	bne.n	80031b0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f022 0216 	bic.w	r2, r2, #22
 8003150:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	695a      	ldr	r2, [r3, #20]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003160:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003166:	2b00      	cmp	r3, #0
 8003168:	d103      	bne.n	8003172 <HAL_DMA_IRQHandler+0x1da>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800316e:	2b00      	cmp	r3, #0
 8003170:	d007      	beq.n	8003182 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f022 0208 	bic.w	r2, r2, #8
 8003180:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003186:	223f      	movs	r2, #63	@ 0x3f
 8003188:	409a      	lsls	r2, r3
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2201      	movs	r2, #1
 8003192:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d07e      	beq.n	80032a4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	4798      	blx	r3
        }
        return;
 80031ae:	e079      	b.n	80032a4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d01d      	beq.n	80031fa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d10d      	bne.n	80031e8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d031      	beq.n	8003238 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	4798      	blx	r3
 80031dc:	e02c      	b.n	8003238 <HAL_DMA_IRQHandler+0x2a0>
 80031de:	bf00      	nop
 80031e0:	20000004 	.word	0x20000004
 80031e4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d023      	beq.n	8003238 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	4798      	blx	r3
 80031f8:	e01e      	b.n	8003238 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003204:	2b00      	cmp	r3, #0
 8003206:	d10f      	bne.n	8003228 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f022 0210 	bic.w	r2, r2, #16
 8003216:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2201      	movs	r2, #1
 800321c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2200      	movs	r2, #0
 8003224:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800322c:	2b00      	cmp	r3, #0
 800322e:	d003      	beq.n	8003238 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800323c:	2b00      	cmp	r3, #0
 800323e:	d032      	beq.n	80032a6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003244:	f003 0301 	and.w	r3, r3, #1
 8003248:	2b00      	cmp	r3, #0
 800324a:	d022      	beq.n	8003292 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2205      	movs	r2, #5
 8003250:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f022 0201 	bic.w	r2, r2, #1
 8003262:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	3301      	adds	r3, #1
 8003268:	60bb      	str	r3, [r7, #8]
 800326a:	697a      	ldr	r2, [r7, #20]
 800326c:	429a      	cmp	r2, r3
 800326e:	d307      	bcc.n	8003280 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0301 	and.w	r3, r3, #1
 800327a:	2b00      	cmp	r3, #0
 800327c:	d1f2      	bne.n	8003264 <HAL_DMA_IRQHandler+0x2cc>
 800327e:	e000      	b.n	8003282 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003280:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2201      	movs	r2, #1
 8003286:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003296:	2b00      	cmp	r3, #0
 8003298:	d005      	beq.n	80032a6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	4798      	blx	r3
 80032a2:	e000      	b.n	80032a6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80032a4:	bf00      	nop
    }
  }
}
 80032a6:	3718      	adds	r7, #24
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}

080032ac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b085      	sub	sp, #20
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	60f8      	str	r0, [r7, #12]
 80032b4:	60b9      	str	r1, [r7, #8]
 80032b6:	607a      	str	r2, [r7, #4]
 80032b8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80032c8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	683a      	ldr	r2, [r7, #0]
 80032d0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	2b40      	cmp	r3, #64	@ 0x40
 80032d8:	d108      	bne.n	80032ec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	68ba      	ldr	r2, [r7, #8]
 80032e8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80032ea:	e007      	b.n	80032fc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	68ba      	ldr	r2, [r7, #8]
 80032f2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	60da      	str	r2, [r3, #12]
}
 80032fc:	bf00      	nop
 80032fe:	3714      	adds	r7, #20
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr

08003308 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003308:	b480      	push	{r7}
 800330a:	b085      	sub	sp, #20
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	b2db      	uxtb	r3, r3
 8003316:	3b10      	subs	r3, #16
 8003318:	4a14      	ldr	r2, [pc, #80]	@ (800336c <DMA_CalcBaseAndBitshift+0x64>)
 800331a:	fba2 2303 	umull	r2, r3, r2, r3
 800331e:	091b      	lsrs	r3, r3, #4
 8003320:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003322:	4a13      	ldr	r2, [pc, #76]	@ (8003370 <DMA_CalcBaseAndBitshift+0x68>)
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	4413      	add	r3, r2
 8003328:	781b      	ldrb	r3, [r3, #0]
 800332a:	461a      	mov	r2, r3
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2b03      	cmp	r3, #3
 8003334:	d909      	bls.n	800334a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800333e:	f023 0303 	bic.w	r3, r3, #3
 8003342:	1d1a      	adds	r2, r3, #4
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	659a      	str	r2, [r3, #88]	@ 0x58
 8003348:	e007      	b.n	800335a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003352:	f023 0303 	bic.w	r3, r3, #3
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800335e:	4618      	mov	r0, r3
 8003360:	3714      	adds	r7, #20
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr
 800336a:	bf00      	nop
 800336c:	aaaaaaab 	.word	0xaaaaaaab
 8003370:	0800bc20 	.word	0x0800bc20

08003374 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003374:	b480      	push	{r7}
 8003376:	b085      	sub	sp, #20
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800337c:	2300      	movs	r3, #0
 800337e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003384:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	699b      	ldr	r3, [r3, #24]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d11f      	bne.n	80033ce <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	2b03      	cmp	r3, #3
 8003392:	d856      	bhi.n	8003442 <DMA_CheckFifoParam+0xce>
 8003394:	a201      	add	r2, pc, #4	@ (adr r2, 800339c <DMA_CheckFifoParam+0x28>)
 8003396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800339a:	bf00      	nop
 800339c:	080033ad 	.word	0x080033ad
 80033a0:	080033bf 	.word	0x080033bf
 80033a4:	080033ad 	.word	0x080033ad
 80033a8:	08003443 	.word	0x08003443
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033b0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d046      	beq.n	8003446 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033bc:	e043      	b.n	8003446 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033c2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80033c6:	d140      	bne.n	800344a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033cc:	e03d      	b.n	800344a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	699b      	ldr	r3, [r3, #24]
 80033d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80033d6:	d121      	bne.n	800341c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	2b03      	cmp	r3, #3
 80033dc:	d837      	bhi.n	800344e <DMA_CheckFifoParam+0xda>
 80033de:	a201      	add	r2, pc, #4	@ (adr r2, 80033e4 <DMA_CheckFifoParam+0x70>)
 80033e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033e4:	080033f5 	.word	0x080033f5
 80033e8:	080033fb 	.word	0x080033fb
 80033ec:	080033f5 	.word	0x080033f5
 80033f0:	0800340d 	.word	0x0800340d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	73fb      	strb	r3, [r7, #15]
      break;
 80033f8:	e030      	b.n	800345c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033fe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d025      	beq.n	8003452 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800340a:	e022      	b.n	8003452 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003410:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003414:	d11f      	bne.n	8003456 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800341a:	e01c      	b.n	8003456 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	2b02      	cmp	r3, #2
 8003420:	d903      	bls.n	800342a <DMA_CheckFifoParam+0xb6>
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	2b03      	cmp	r3, #3
 8003426:	d003      	beq.n	8003430 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003428:	e018      	b.n	800345c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	73fb      	strb	r3, [r7, #15]
      break;
 800342e:	e015      	b.n	800345c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003434:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003438:	2b00      	cmp	r3, #0
 800343a:	d00e      	beq.n	800345a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	73fb      	strb	r3, [r7, #15]
      break;
 8003440:	e00b      	b.n	800345a <DMA_CheckFifoParam+0xe6>
      break;
 8003442:	bf00      	nop
 8003444:	e00a      	b.n	800345c <DMA_CheckFifoParam+0xe8>
      break;
 8003446:	bf00      	nop
 8003448:	e008      	b.n	800345c <DMA_CheckFifoParam+0xe8>
      break;
 800344a:	bf00      	nop
 800344c:	e006      	b.n	800345c <DMA_CheckFifoParam+0xe8>
      break;
 800344e:	bf00      	nop
 8003450:	e004      	b.n	800345c <DMA_CheckFifoParam+0xe8>
      break;
 8003452:	bf00      	nop
 8003454:	e002      	b.n	800345c <DMA_CheckFifoParam+0xe8>
      break;   
 8003456:	bf00      	nop
 8003458:	e000      	b.n	800345c <DMA_CheckFifoParam+0xe8>
      break;
 800345a:	bf00      	nop
    }
  } 
  
  return status; 
 800345c:	7bfb      	ldrb	r3, [r7, #15]
}
 800345e:	4618      	mov	r0, r3
 8003460:	3714      	adds	r7, #20
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr
 800346a:	bf00      	nop

0800346c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800346c:	b480      	push	{r7}
 800346e:	b089      	sub	sp, #36	@ 0x24
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003476:	2300      	movs	r3, #0
 8003478:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800347a:	2300      	movs	r3, #0
 800347c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800347e:	2300      	movs	r3, #0
 8003480:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003482:	2300      	movs	r3, #0
 8003484:	61fb      	str	r3, [r7, #28]
 8003486:	e159      	b.n	800373c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003488:	2201      	movs	r2, #1
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	fa02 f303 	lsl.w	r3, r2, r3
 8003490:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	697a      	ldr	r2, [r7, #20]
 8003498:	4013      	ands	r3, r2
 800349a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800349c:	693a      	ldr	r2, [r7, #16]
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	429a      	cmp	r2, r3
 80034a2:	f040 8148 	bne.w	8003736 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	f003 0303 	and.w	r3, r3, #3
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d005      	beq.n	80034be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80034ba:	2b02      	cmp	r3, #2
 80034bc:	d130      	bne.n	8003520 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80034c4:	69fb      	ldr	r3, [r7, #28]
 80034c6:	005b      	lsls	r3, r3, #1
 80034c8:	2203      	movs	r2, #3
 80034ca:	fa02 f303 	lsl.w	r3, r2, r3
 80034ce:	43db      	mvns	r3, r3
 80034d0:	69ba      	ldr	r2, [r7, #24]
 80034d2:	4013      	ands	r3, r2
 80034d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	68da      	ldr	r2, [r3, #12]
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	005b      	lsls	r3, r3, #1
 80034de:	fa02 f303 	lsl.w	r3, r2, r3
 80034e2:	69ba      	ldr	r2, [r7, #24]
 80034e4:	4313      	orrs	r3, r2
 80034e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	69ba      	ldr	r2, [r7, #24]
 80034ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80034f4:	2201      	movs	r2, #1
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	fa02 f303 	lsl.w	r3, r2, r3
 80034fc:	43db      	mvns	r3, r3
 80034fe:	69ba      	ldr	r2, [r7, #24]
 8003500:	4013      	ands	r3, r2
 8003502:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	091b      	lsrs	r3, r3, #4
 800350a:	f003 0201 	and.w	r2, r3, #1
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	fa02 f303 	lsl.w	r3, r2, r3
 8003514:	69ba      	ldr	r2, [r7, #24]
 8003516:	4313      	orrs	r3, r2
 8003518:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	69ba      	ldr	r2, [r7, #24]
 800351e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f003 0303 	and.w	r3, r3, #3
 8003528:	2b03      	cmp	r3, #3
 800352a:	d017      	beq.n	800355c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	005b      	lsls	r3, r3, #1
 8003536:	2203      	movs	r2, #3
 8003538:	fa02 f303 	lsl.w	r3, r2, r3
 800353c:	43db      	mvns	r3, r3
 800353e:	69ba      	ldr	r2, [r7, #24]
 8003540:	4013      	ands	r3, r2
 8003542:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	689a      	ldr	r2, [r3, #8]
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	005b      	lsls	r3, r3, #1
 800354c:	fa02 f303 	lsl.w	r3, r2, r3
 8003550:	69ba      	ldr	r2, [r7, #24]
 8003552:	4313      	orrs	r3, r2
 8003554:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	69ba      	ldr	r2, [r7, #24]
 800355a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	f003 0303 	and.w	r3, r3, #3
 8003564:	2b02      	cmp	r3, #2
 8003566:	d123      	bne.n	80035b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003568:	69fb      	ldr	r3, [r7, #28]
 800356a:	08da      	lsrs	r2, r3, #3
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	3208      	adds	r2, #8
 8003570:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003574:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003576:	69fb      	ldr	r3, [r7, #28]
 8003578:	f003 0307 	and.w	r3, r3, #7
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	220f      	movs	r2, #15
 8003580:	fa02 f303 	lsl.w	r3, r2, r3
 8003584:	43db      	mvns	r3, r3
 8003586:	69ba      	ldr	r2, [r7, #24]
 8003588:	4013      	ands	r3, r2
 800358a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	691a      	ldr	r2, [r3, #16]
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	f003 0307 	and.w	r3, r3, #7
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	fa02 f303 	lsl.w	r3, r2, r3
 800359c:	69ba      	ldr	r2, [r7, #24]
 800359e:	4313      	orrs	r3, r2
 80035a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	08da      	lsrs	r2, r3, #3
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	3208      	adds	r2, #8
 80035aa:	69b9      	ldr	r1, [r7, #24]
 80035ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	005b      	lsls	r3, r3, #1
 80035ba:	2203      	movs	r2, #3
 80035bc:	fa02 f303 	lsl.w	r3, r2, r3
 80035c0:	43db      	mvns	r3, r3
 80035c2:	69ba      	ldr	r2, [r7, #24]
 80035c4:	4013      	ands	r3, r2
 80035c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	f003 0203 	and.w	r2, r3, #3
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	005b      	lsls	r3, r3, #1
 80035d4:	fa02 f303 	lsl.w	r3, r2, r3
 80035d8:	69ba      	ldr	r2, [r7, #24]
 80035da:	4313      	orrs	r3, r2
 80035dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	69ba      	ldr	r2, [r7, #24]
 80035e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	f000 80a2 	beq.w	8003736 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035f2:	2300      	movs	r3, #0
 80035f4:	60fb      	str	r3, [r7, #12]
 80035f6:	4b57      	ldr	r3, [pc, #348]	@ (8003754 <HAL_GPIO_Init+0x2e8>)
 80035f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035fa:	4a56      	ldr	r2, [pc, #344]	@ (8003754 <HAL_GPIO_Init+0x2e8>)
 80035fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003600:	6453      	str	r3, [r2, #68]	@ 0x44
 8003602:	4b54      	ldr	r3, [pc, #336]	@ (8003754 <HAL_GPIO_Init+0x2e8>)
 8003604:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003606:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800360a:	60fb      	str	r3, [r7, #12]
 800360c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800360e:	4a52      	ldr	r2, [pc, #328]	@ (8003758 <HAL_GPIO_Init+0x2ec>)
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	089b      	lsrs	r3, r3, #2
 8003614:	3302      	adds	r3, #2
 8003616:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800361a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	f003 0303 	and.w	r3, r3, #3
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	220f      	movs	r2, #15
 8003626:	fa02 f303 	lsl.w	r3, r2, r3
 800362a:	43db      	mvns	r3, r3
 800362c:	69ba      	ldr	r2, [r7, #24]
 800362e:	4013      	ands	r3, r2
 8003630:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	4a49      	ldr	r2, [pc, #292]	@ (800375c <HAL_GPIO_Init+0x2f0>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d019      	beq.n	800366e <HAL_GPIO_Init+0x202>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4a48      	ldr	r2, [pc, #288]	@ (8003760 <HAL_GPIO_Init+0x2f4>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d013      	beq.n	800366a <HAL_GPIO_Init+0x1fe>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	4a47      	ldr	r2, [pc, #284]	@ (8003764 <HAL_GPIO_Init+0x2f8>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d00d      	beq.n	8003666 <HAL_GPIO_Init+0x1fa>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	4a46      	ldr	r2, [pc, #280]	@ (8003768 <HAL_GPIO_Init+0x2fc>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d007      	beq.n	8003662 <HAL_GPIO_Init+0x1f6>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4a45      	ldr	r2, [pc, #276]	@ (800376c <HAL_GPIO_Init+0x300>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d101      	bne.n	800365e <HAL_GPIO_Init+0x1f2>
 800365a:	2304      	movs	r3, #4
 800365c:	e008      	b.n	8003670 <HAL_GPIO_Init+0x204>
 800365e:	2307      	movs	r3, #7
 8003660:	e006      	b.n	8003670 <HAL_GPIO_Init+0x204>
 8003662:	2303      	movs	r3, #3
 8003664:	e004      	b.n	8003670 <HAL_GPIO_Init+0x204>
 8003666:	2302      	movs	r3, #2
 8003668:	e002      	b.n	8003670 <HAL_GPIO_Init+0x204>
 800366a:	2301      	movs	r3, #1
 800366c:	e000      	b.n	8003670 <HAL_GPIO_Init+0x204>
 800366e:	2300      	movs	r3, #0
 8003670:	69fa      	ldr	r2, [r7, #28]
 8003672:	f002 0203 	and.w	r2, r2, #3
 8003676:	0092      	lsls	r2, r2, #2
 8003678:	4093      	lsls	r3, r2
 800367a:	69ba      	ldr	r2, [r7, #24]
 800367c:	4313      	orrs	r3, r2
 800367e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003680:	4935      	ldr	r1, [pc, #212]	@ (8003758 <HAL_GPIO_Init+0x2ec>)
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	089b      	lsrs	r3, r3, #2
 8003686:	3302      	adds	r3, #2
 8003688:	69ba      	ldr	r2, [r7, #24]
 800368a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800368e:	4b38      	ldr	r3, [pc, #224]	@ (8003770 <HAL_GPIO_Init+0x304>)
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	43db      	mvns	r3, r3
 8003698:	69ba      	ldr	r2, [r7, #24]
 800369a:	4013      	ands	r3, r2
 800369c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d003      	beq.n	80036b2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80036aa:	69ba      	ldr	r2, [r7, #24]
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	4313      	orrs	r3, r2
 80036b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80036b2:	4a2f      	ldr	r2, [pc, #188]	@ (8003770 <HAL_GPIO_Init+0x304>)
 80036b4:	69bb      	ldr	r3, [r7, #24]
 80036b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80036b8:	4b2d      	ldr	r3, [pc, #180]	@ (8003770 <HAL_GPIO_Init+0x304>)
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	43db      	mvns	r3, r3
 80036c2:	69ba      	ldr	r2, [r7, #24]
 80036c4:	4013      	ands	r3, r2
 80036c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d003      	beq.n	80036dc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80036d4:	69ba      	ldr	r2, [r7, #24]
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	4313      	orrs	r3, r2
 80036da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80036dc:	4a24      	ldr	r2, [pc, #144]	@ (8003770 <HAL_GPIO_Init+0x304>)
 80036de:	69bb      	ldr	r3, [r7, #24]
 80036e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80036e2:	4b23      	ldr	r3, [pc, #140]	@ (8003770 <HAL_GPIO_Init+0x304>)
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	43db      	mvns	r3, r3
 80036ec:	69ba      	ldr	r2, [r7, #24]
 80036ee:	4013      	ands	r3, r2
 80036f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d003      	beq.n	8003706 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80036fe:	69ba      	ldr	r2, [r7, #24]
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	4313      	orrs	r3, r2
 8003704:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003706:	4a1a      	ldr	r2, [pc, #104]	@ (8003770 <HAL_GPIO_Init+0x304>)
 8003708:	69bb      	ldr	r3, [r7, #24]
 800370a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800370c:	4b18      	ldr	r3, [pc, #96]	@ (8003770 <HAL_GPIO_Init+0x304>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	43db      	mvns	r3, r3
 8003716:	69ba      	ldr	r2, [r7, #24]
 8003718:	4013      	ands	r3, r2
 800371a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003724:	2b00      	cmp	r3, #0
 8003726:	d003      	beq.n	8003730 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003728:	69ba      	ldr	r2, [r7, #24]
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	4313      	orrs	r3, r2
 800372e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003730:	4a0f      	ldr	r2, [pc, #60]	@ (8003770 <HAL_GPIO_Init+0x304>)
 8003732:	69bb      	ldr	r3, [r7, #24]
 8003734:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	3301      	adds	r3, #1
 800373a:	61fb      	str	r3, [r7, #28]
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	2b0f      	cmp	r3, #15
 8003740:	f67f aea2 	bls.w	8003488 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003744:	bf00      	nop
 8003746:	bf00      	nop
 8003748:	3724      	adds	r7, #36	@ 0x24
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr
 8003752:	bf00      	nop
 8003754:	40023800 	.word	0x40023800
 8003758:	40013800 	.word	0x40013800
 800375c:	40020000 	.word	0x40020000
 8003760:	40020400 	.word	0x40020400
 8003764:	40020800 	.word	0x40020800
 8003768:	40020c00 	.word	0x40020c00
 800376c:	40021000 	.word	0x40021000
 8003770:	40013c00 	.word	0x40013c00

08003774 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003774:	b480      	push	{r7}
 8003776:	b085      	sub	sp, #20
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	460b      	mov	r3, r1
 800377e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	691a      	ldr	r2, [r3, #16]
 8003784:	887b      	ldrh	r3, [r7, #2]
 8003786:	4013      	ands	r3, r2
 8003788:	2b00      	cmp	r3, #0
 800378a:	d002      	beq.n	8003792 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800378c:	2301      	movs	r3, #1
 800378e:	73fb      	strb	r3, [r7, #15]
 8003790:	e001      	b.n	8003796 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003792:	2300      	movs	r3, #0
 8003794:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003796:	7bfb      	ldrb	r3, [r7, #15]
}
 8003798:	4618      	mov	r0, r3
 800379a:	3714      	adds	r7, #20
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr

080037a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	460b      	mov	r3, r1
 80037ae:	807b      	strh	r3, [r7, #2]
 80037b0:	4613      	mov	r3, r2
 80037b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80037b4:	787b      	ldrb	r3, [r7, #1]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d003      	beq.n	80037c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80037ba:	887a      	ldrh	r2, [r7, #2]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80037c0:	e003      	b.n	80037ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80037c2:	887b      	ldrh	r3, [r7, #2]
 80037c4:	041a      	lsls	r2, r3, #16
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	619a      	str	r2, [r3, #24]
}
 80037ca:	bf00      	nop
 80037cc:	370c      	adds	r7, #12
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr
	...

080037d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b082      	sub	sp, #8
 80037dc:	af00      	add	r7, sp, #0
 80037de:	4603      	mov	r3, r0
 80037e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80037e2:	4b08      	ldr	r3, [pc, #32]	@ (8003804 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80037e4:	695a      	ldr	r2, [r3, #20]
 80037e6:	88fb      	ldrh	r3, [r7, #6]
 80037e8:	4013      	ands	r3, r2
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d006      	beq.n	80037fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80037ee:	4a05      	ldr	r2, [pc, #20]	@ (8003804 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80037f0:	88fb      	ldrh	r3, [r7, #6]
 80037f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80037f4:	88fb      	ldrh	r3, [r7, #6]
 80037f6:	4618      	mov	r0, r3
 80037f8:	f7fc fe7a 	bl	80004f0 <HAL_GPIO_EXTI_Callback>
  }
}
 80037fc:	bf00      	nop
 80037fe:	3708      	adds	r7, #8
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}
 8003804:	40013c00 	.word	0x40013c00

08003808 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b086      	sub	sp, #24
 800380c:	af02      	add	r7, sp, #8
 800380e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d101      	bne.n	800381a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e101      	b.n	8003a1e <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003826:	b2db      	uxtb	r3, r3
 8003828:	2b00      	cmp	r3, #0
 800382a:	d106      	bne.n	800383a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2200      	movs	r2, #0
 8003830:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f007 fcc5 	bl	800b1c4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2203      	movs	r2, #3
 800383e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003848:	d102      	bne.n	8003850 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2200      	movs	r2, #0
 800384e:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4618      	mov	r0, r3
 8003856:	f004 f924 	bl	8007aa2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6818      	ldr	r0, [r3, #0]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	7c1a      	ldrb	r2, [r3, #16]
 8003862:	f88d 2000 	strb.w	r2, [sp]
 8003866:	3304      	adds	r3, #4
 8003868:	cb0e      	ldmia	r3, {r1, r2, r3}
 800386a:	f004 f803 	bl	8007874 <USB_CoreInit>
 800386e:	4603      	mov	r3, r0
 8003870:	2b00      	cmp	r3, #0
 8003872:	d005      	beq.n	8003880 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2202      	movs	r2, #2
 8003878:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	e0ce      	b.n	8003a1e <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	2100      	movs	r1, #0
 8003886:	4618      	mov	r0, r3
 8003888:	f004 f91c 	bl	8007ac4 <USB_SetCurrentMode>
 800388c:	4603      	mov	r3, r0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d005      	beq.n	800389e <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2202      	movs	r2, #2
 8003896:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e0bf      	b.n	8003a1e <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800389e:	2300      	movs	r3, #0
 80038a0:	73fb      	strb	r3, [r7, #15]
 80038a2:	e04a      	b.n	800393a <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80038a4:	7bfa      	ldrb	r2, [r7, #15]
 80038a6:	6879      	ldr	r1, [r7, #4]
 80038a8:	4613      	mov	r3, r2
 80038aa:	00db      	lsls	r3, r3, #3
 80038ac:	4413      	add	r3, r2
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	440b      	add	r3, r1
 80038b2:	3315      	adds	r3, #21
 80038b4:	2201      	movs	r2, #1
 80038b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80038b8:	7bfa      	ldrb	r2, [r7, #15]
 80038ba:	6879      	ldr	r1, [r7, #4]
 80038bc:	4613      	mov	r3, r2
 80038be:	00db      	lsls	r3, r3, #3
 80038c0:	4413      	add	r3, r2
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	440b      	add	r3, r1
 80038c6:	3314      	adds	r3, #20
 80038c8:	7bfa      	ldrb	r2, [r7, #15]
 80038ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80038cc:	7bfa      	ldrb	r2, [r7, #15]
 80038ce:	7bfb      	ldrb	r3, [r7, #15]
 80038d0:	b298      	uxth	r0, r3
 80038d2:	6879      	ldr	r1, [r7, #4]
 80038d4:	4613      	mov	r3, r2
 80038d6:	00db      	lsls	r3, r3, #3
 80038d8:	4413      	add	r3, r2
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	440b      	add	r3, r1
 80038de:	332e      	adds	r3, #46	@ 0x2e
 80038e0:	4602      	mov	r2, r0
 80038e2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80038e4:	7bfa      	ldrb	r2, [r7, #15]
 80038e6:	6879      	ldr	r1, [r7, #4]
 80038e8:	4613      	mov	r3, r2
 80038ea:	00db      	lsls	r3, r3, #3
 80038ec:	4413      	add	r3, r2
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	440b      	add	r3, r1
 80038f2:	3318      	adds	r3, #24
 80038f4:	2200      	movs	r2, #0
 80038f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80038f8:	7bfa      	ldrb	r2, [r7, #15]
 80038fa:	6879      	ldr	r1, [r7, #4]
 80038fc:	4613      	mov	r3, r2
 80038fe:	00db      	lsls	r3, r3, #3
 8003900:	4413      	add	r3, r2
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	440b      	add	r3, r1
 8003906:	331c      	adds	r3, #28
 8003908:	2200      	movs	r2, #0
 800390a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800390c:	7bfa      	ldrb	r2, [r7, #15]
 800390e:	6879      	ldr	r1, [r7, #4]
 8003910:	4613      	mov	r3, r2
 8003912:	00db      	lsls	r3, r3, #3
 8003914:	4413      	add	r3, r2
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	440b      	add	r3, r1
 800391a:	3320      	adds	r3, #32
 800391c:	2200      	movs	r2, #0
 800391e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003920:	7bfa      	ldrb	r2, [r7, #15]
 8003922:	6879      	ldr	r1, [r7, #4]
 8003924:	4613      	mov	r3, r2
 8003926:	00db      	lsls	r3, r3, #3
 8003928:	4413      	add	r3, r2
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	440b      	add	r3, r1
 800392e:	3324      	adds	r3, #36	@ 0x24
 8003930:	2200      	movs	r2, #0
 8003932:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003934:	7bfb      	ldrb	r3, [r7, #15]
 8003936:	3301      	adds	r3, #1
 8003938:	73fb      	strb	r3, [r7, #15]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	791b      	ldrb	r3, [r3, #4]
 800393e:	7bfa      	ldrb	r2, [r7, #15]
 8003940:	429a      	cmp	r2, r3
 8003942:	d3af      	bcc.n	80038a4 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003944:	2300      	movs	r3, #0
 8003946:	73fb      	strb	r3, [r7, #15]
 8003948:	e044      	b.n	80039d4 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800394a:	7bfa      	ldrb	r2, [r7, #15]
 800394c:	6879      	ldr	r1, [r7, #4]
 800394e:	4613      	mov	r3, r2
 8003950:	00db      	lsls	r3, r3, #3
 8003952:	4413      	add	r3, r2
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	440b      	add	r3, r1
 8003958:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800395c:	2200      	movs	r2, #0
 800395e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003960:	7bfa      	ldrb	r2, [r7, #15]
 8003962:	6879      	ldr	r1, [r7, #4]
 8003964:	4613      	mov	r3, r2
 8003966:	00db      	lsls	r3, r3, #3
 8003968:	4413      	add	r3, r2
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	440b      	add	r3, r1
 800396e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003972:	7bfa      	ldrb	r2, [r7, #15]
 8003974:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003976:	7bfa      	ldrb	r2, [r7, #15]
 8003978:	6879      	ldr	r1, [r7, #4]
 800397a:	4613      	mov	r3, r2
 800397c:	00db      	lsls	r3, r3, #3
 800397e:	4413      	add	r3, r2
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	440b      	add	r3, r1
 8003984:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003988:	2200      	movs	r2, #0
 800398a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800398c:	7bfa      	ldrb	r2, [r7, #15]
 800398e:	6879      	ldr	r1, [r7, #4]
 8003990:	4613      	mov	r3, r2
 8003992:	00db      	lsls	r3, r3, #3
 8003994:	4413      	add	r3, r2
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	440b      	add	r3, r1
 800399a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800399e:	2200      	movs	r2, #0
 80039a0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80039a2:	7bfa      	ldrb	r2, [r7, #15]
 80039a4:	6879      	ldr	r1, [r7, #4]
 80039a6:	4613      	mov	r3, r2
 80039a8:	00db      	lsls	r3, r3, #3
 80039aa:	4413      	add	r3, r2
 80039ac:	009b      	lsls	r3, r3, #2
 80039ae:	440b      	add	r3, r1
 80039b0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80039b4:	2200      	movs	r2, #0
 80039b6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80039b8:	7bfa      	ldrb	r2, [r7, #15]
 80039ba:	6879      	ldr	r1, [r7, #4]
 80039bc:	4613      	mov	r3, r2
 80039be:	00db      	lsls	r3, r3, #3
 80039c0:	4413      	add	r3, r2
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	440b      	add	r3, r1
 80039c6:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80039ca:	2200      	movs	r2, #0
 80039cc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039ce:	7bfb      	ldrb	r3, [r7, #15]
 80039d0:	3301      	adds	r3, #1
 80039d2:	73fb      	strb	r3, [r7, #15]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	791b      	ldrb	r3, [r3, #4]
 80039d8:	7bfa      	ldrb	r2, [r7, #15]
 80039da:	429a      	cmp	r2, r3
 80039dc:	d3b5      	bcc.n	800394a <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6818      	ldr	r0, [r3, #0]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	7c1a      	ldrb	r2, [r3, #16]
 80039e6:	f88d 2000 	strb.w	r2, [sp]
 80039ea:	3304      	adds	r3, #4
 80039ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80039ee:	f004 f8b5 	bl	8007b5c <USB_DevInit>
 80039f2:	4603      	mov	r3, r0
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d005      	beq.n	8003a04 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2202      	movs	r2, #2
 80039fc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	e00c      	b.n	8003a1e <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2200      	movs	r2, #0
 8003a08:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4618      	mov	r0, r3
 8003a18:	f005 f8f9 	bl	8008c0e <USB_DevDisconnect>

  return HAL_OK;
 8003a1c:	2300      	movs	r3, #0
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3710      	adds	r7, #16
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}

08003a26 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003a26:	b580      	push	{r7, lr}
 8003a28:	b084      	sub	sp, #16
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d101      	bne.n	8003a42 <HAL_PCD_Start+0x1c>
 8003a3e:	2302      	movs	r3, #2
 8003a40:	e022      	b.n	8003a88 <HAL_PCD_Start+0x62>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2201      	movs	r2, #1
 8003a46:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	68db      	ldr	r3, [r3, #12]
 8003a4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d009      	beq.n	8003a6a <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d105      	bne.n	8003a6a <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a62:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f004 f806 	bl	8007a80 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f005 f8a7 	bl	8008bcc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003a86:	2300      	movs	r3, #0
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3710      	adds	r7, #16
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003a90:	b590      	push	{r4, r7, lr}
 8003a92:	b08d      	sub	sp, #52	@ 0x34
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a9e:	6a3b      	ldr	r3, [r7, #32]
 8003aa0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f005 f965 	bl	8008d76 <USB_GetMode>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	f040 848c 	bne.w	80043cc <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f005 f8c9 	bl	8008c50 <USB_ReadInterrupts>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	f000 8482 	beq.w	80043ca <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003ac6:	69fb      	ldr	r3, [r7, #28]
 8003ac8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	0a1b      	lsrs	r3, r3, #8
 8003ad0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f005 f8b6 	bl	8008c50 <USB_ReadInterrupts>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	f003 0302 	and.w	r3, r3, #2
 8003aea:	2b02      	cmp	r3, #2
 8003aec:	d107      	bne.n	8003afe <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	695a      	ldr	r2, [r3, #20]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f002 0202 	and.w	r2, r2, #2
 8003afc:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4618      	mov	r0, r3
 8003b04:	f005 f8a4 	bl	8008c50 <USB_ReadInterrupts>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	f003 0310 	and.w	r3, r3, #16
 8003b0e:	2b10      	cmp	r3, #16
 8003b10:	d161      	bne.n	8003bd6 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	699a      	ldr	r2, [r3, #24]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f022 0210 	bic.w	r2, r2, #16
 8003b20:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003b22:	6a3b      	ldr	r3, [r7, #32]
 8003b24:	6a1b      	ldr	r3, [r3, #32]
 8003b26:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	f003 020f 	and.w	r2, r3, #15
 8003b2e:	4613      	mov	r3, r2
 8003b30:	00db      	lsls	r3, r3, #3
 8003b32:	4413      	add	r3, r2
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	4413      	add	r3, r2
 8003b3e:	3304      	adds	r3, #4
 8003b40:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003b42:	69bb      	ldr	r3, [r7, #24]
 8003b44:	0c5b      	lsrs	r3, r3, #17
 8003b46:	f003 030f 	and.w	r3, r3, #15
 8003b4a:	2b02      	cmp	r3, #2
 8003b4c:	d124      	bne.n	8003b98 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003b4e:	69ba      	ldr	r2, [r7, #24]
 8003b50:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003b54:	4013      	ands	r3, r2
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d035      	beq.n	8003bc6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003b5e:	69bb      	ldr	r3, [r7, #24]
 8003b60:	091b      	lsrs	r3, r3, #4
 8003b62:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003b64:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	6a38      	ldr	r0, [r7, #32]
 8003b6e:	f004 fedb 	bl	8008928 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	68da      	ldr	r2, [r3, #12]
 8003b76:	69bb      	ldr	r3, [r7, #24]
 8003b78:	091b      	lsrs	r3, r3, #4
 8003b7a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b7e:	441a      	add	r2, r3
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	695a      	ldr	r2, [r3, #20]
 8003b88:	69bb      	ldr	r3, [r7, #24]
 8003b8a:	091b      	lsrs	r3, r3, #4
 8003b8c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b90:	441a      	add	r2, r3
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	615a      	str	r2, [r3, #20]
 8003b96:	e016      	b.n	8003bc6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003b98:	69bb      	ldr	r3, [r7, #24]
 8003b9a:	0c5b      	lsrs	r3, r3, #17
 8003b9c:	f003 030f 	and.w	r3, r3, #15
 8003ba0:	2b06      	cmp	r3, #6
 8003ba2:	d110      	bne.n	8003bc6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003baa:	2208      	movs	r2, #8
 8003bac:	4619      	mov	r1, r3
 8003bae:	6a38      	ldr	r0, [r7, #32]
 8003bb0:	f004 feba 	bl	8008928 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	695a      	ldr	r2, [r3, #20]
 8003bb8:	69bb      	ldr	r3, [r7, #24]
 8003bba:	091b      	lsrs	r3, r3, #4
 8003bbc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003bc0:	441a      	add	r2, r3
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	699a      	ldr	r2, [r3, #24]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f042 0210 	orr.w	r2, r2, #16
 8003bd4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f005 f838 	bl	8008c50 <USB_ReadInterrupts>
 8003be0:	4603      	mov	r3, r0
 8003be2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003be6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003bea:	f040 80a7 	bne.w	8003d3c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f005 f83d 	bl	8008c76 <USB_ReadDevAllOutEpInterrupt>
 8003bfc:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003bfe:	e099      	b.n	8003d34 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003c00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c02:	f003 0301 	and.w	r3, r3, #1
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	f000 808e 	beq.w	8003d28 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c12:	b2d2      	uxtb	r2, r2
 8003c14:	4611      	mov	r1, r2
 8003c16:	4618      	mov	r0, r3
 8003c18:	f005 f861 	bl	8008cde <USB_ReadDevOutEPInterrupt>
 8003c1c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	f003 0301 	and.w	r3, r3, #1
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d00c      	beq.n	8003c42 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c2a:	015a      	lsls	r2, r3, #5
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	4413      	add	r3, r2
 8003c30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c34:	461a      	mov	r2, r3
 8003c36:	2301      	movs	r3, #1
 8003c38:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003c3a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	f000 fea1 	bl	8004984 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	f003 0308 	and.w	r3, r3, #8
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d00c      	beq.n	8003c66 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c4e:	015a      	lsls	r2, r3, #5
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	4413      	add	r3, r2
 8003c54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c58:	461a      	mov	r2, r3
 8003c5a:	2308      	movs	r3, #8
 8003c5c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003c5e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	f000 ff77 	bl	8004b54 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	f003 0310 	and.w	r3, r3, #16
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d008      	beq.n	8003c82 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c72:	015a      	lsls	r2, r3, #5
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	4413      	add	r3, r2
 8003c78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	2310      	movs	r3, #16
 8003c80:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	f003 0302 	and.w	r3, r3, #2
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d030      	beq.n	8003cee <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003c8c:	6a3b      	ldr	r3, [r7, #32]
 8003c8e:	695b      	ldr	r3, [r3, #20]
 8003c90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c94:	2b80      	cmp	r3, #128	@ 0x80
 8003c96:	d109      	bne.n	8003cac <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003c98:	69fb      	ldr	r3, [r7, #28]
 8003c9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	69fa      	ldr	r2, [r7, #28]
 8003ca2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003ca6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003caa:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003cac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cae:	4613      	mov	r3, r2
 8003cb0:	00db      	lsls	r3, r3, #3
 8003cb2:	4413      	add	r3, r2
 8003cb4:	009b      	lsls	r3, r3, #2
 8003cb6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	4413      	add	r3, r2
 8003cbe:	3304      	adds	r3, #4
 8003cc0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	78db      	ldrb	r3, [r3, #3]
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d108      	bne.n	8003cdc <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cd2:	b2db      	uxtb	r3, r3
 8003cd4:	4619      	mov	r1, r3
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f007 fb70 	bl	800b3bc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cde:	015a      	lsls	r2, r3, #5
 8003ce0:	69fb      	ldr	r3, [r7, #28]
 8003ce2:	4413      	add	r3, r2
 8003ce4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ce8:	461a      	mov	r2, r3
 8003cea:	2302      	movs	r3, #2
 8003cec:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	f003 0320 	and.w	r3, r3, #32
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d008      	beq.n	8003d0a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cfa:	015a      	lsls	r2, r3, #5
 8003cfc:	69fb      	ldr	r3, [r7, #28]
 8003cfe:	4413      	add	r3, r2
 8003d00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d04:	461a      	mov	r2, r3
 8003d06:	2320      	movs	r3, #32
 8003d08:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d009      	beq.n	8003d28 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d16:	015a      	lsls	r2, r3, #5
 8003d18:	69fb      	ldr	r3, [r7, #28]
 8003d1a:	4413      	add	r3, r2
 8003d1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d20:	461a      	mov	r2, r3
 8003d22:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003d26:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d2a:	3301      	adds	r3, #1
 8003d2c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003d2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d30:	085b      	lsrs	r3, r3, #1
 8003d32:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003d34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	f47f af62 	bne.w	8003c00 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4618      	mov	r0, r3
 8003d42:	f004 ff85 	bl	8008c50 <USB_ReadInterrupts>
 8003d46:	4603      	mov	r3, r0
 8003d48:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003d4c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003d50:	f040 80db 	bne.w	8003f0a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f004 ffa6 	bl	8008caa <USB_ReadDevAllInEpInterrupt>
 8003d5e:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003d60:	2300      	movs	r3, #0
 8003d62:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003d64:	e0cd      	b.n	8003f02 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003d66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d68:	f003 0301 	and.w	r3, r3, #1
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	f000 80c2 	beq.w	8003ef6 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d78:	b2d2      	uxtb	r2, r2
 8003d7a:	4611      	mov	r1, r2
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f004 ffcc 	bl	8008d1a <USB_ReadDevInEPInterrupt>
 8003d82:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	f003 0301 	and.w	r3, r3, #1
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d057      	beq.n	8003e3e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d90:	f003 030f 	and.w	r3, r3, #15
 8003d94:	2201      	movs	r2, #1
 8003d96:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003d9c:	69fb      	ldr	r3, [r7, #28]
 8003d9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003da2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	43db      	mvns	r3, r3
 8003da8:	69f9      	ldr	r1, [r7, #28]
 8003daa:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003dae:	4013      	ands	r3, r2
 8003db0:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003db4:	015a      	lsls	r2, r3, #5
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	4413      	add	r3, r2
 8003dba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	799b      	ldrb	r3, [r3, #6]
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d132      	bne.n	8003e32 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003dcc:	6879      	ldr	r1, [r7, #4]
 8003dce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dd0:	4613      	mov	r3, r2
 8003dd2:	00db      	lsls	r3, r3, #3
 8003dd4:	4413      	add	r3, r2
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	440b      	add	r3, r1
 8003dda:	3320      	adds	r3, #32
 8003ddc:	6819      	ldr	r1, [r3, #0]
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003de2:	4613      	mov	r3, r2
 8003de4:	00db      	lsls	r3, r3, #3
 8003de6:	4413      	add	r3, r2
 8003de8:	009b      	lsls	r3, r3, #2
 8003dea:	4403      	add	r3, r0
 8003dec:	331c      	adds	r3, #28
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4419      	add	r1, r3
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003df6:	4613      	mov	r3, r2
 8003df8:	00db      	lsls	r3, r3, #3
 8003dfa:	4413      	add	r3, r2
 8003dfc:	009b      	lsls	r3, r3, #2
 8003dfe:	4403      	add	r3, r0
 8003e00:	3320      	adds	r3, #32
 8003e02:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d113      	bne.n	8003e32 <HAL_PCD_IRQHandler+0x3a2>
 8003e0a:	6879      	ldr	r1, [r7, #4]
 8003e0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e0e:	4613      	mov	r3, r2
 8003e10:	00db      	lsls	r3, r3, #3
 8003e12:	4413      	add	r3, r2
 8003e14:	009b      	lsls	r3, r3, #2
 8003e16:	440b      	add	r3, r1
 8003e18:	3324      	adds	r3, #36	@ 0x24
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d108      	bne.n	8003e32 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6818      	ldr	r0, [r3, #0]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	2101      	movs	r1, #1
 8003e2e:	f004 ffd3 	bl	8008dd8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e34:	b2db      	uxtb	r3, r3
 8003e36:	4619      	mov	r1, r3
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f007 fa44 	bl	800b2c6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	f003 0308 	and.w	r3, r3, #8
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d008      	beq.n	8003e5a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e4a:	015a      	lsls	r2, r3, #5
 8003e4c:	69fb      	ldr	r3, [r7, #28]
 8003e4e:	4413      	add	r3, r2
 8003e50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e54:	461a      	mov	r2, r3
 8003e56:	2308      	movs	r3, #8
 8003e58:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	f003 0310 	and.w	r3, r3, #16
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d008      	beq.n	8003e76 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e66:	015a      	lsls	r2, r3, #5
 8003e68:	69fb      	ldr	r3, [r7, #28]
 8003e6a:	4413      	add	r3, r2
 8003e6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e70:	461a      	mov	r2, r3
 8003e72:	2310      	movs	r3, #16
 8003e74:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d008      	beq.n	8003e92 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e82:	015a      	lsls	r2, r3, #5
 8003e84:	69fb      	ldr	r3, [r7, #28]
 8003e86:	4413      	add	r3, r2
 8003e88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e8c:	461a      	mov	r2, r3
 8003e8e:	2340      	movs	r3, #64	@ 0x40
 8003e90:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	f003 0302 	and.w	r3, r3, #2
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d023      	beq.n	8003ee4 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003e9c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003e9e:	6a38      	ldr	r0, [r7, #32]
 8003ea0:	f003 ffc0 	bl	8007e24 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003ea4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ea6:	4613      	mov	r3, r2
 8003ea8:	00db      	lsls	r3, r3, #3
 8003eaa:	4413      	add	r3, r2
 8003eac:	009b      	lsls	r3, r3, #2
 8003eae:	3310      	adds	r3, #16
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	4413      	add	r3, r2
 8003eb4:	3304      	adds	r3, #4
 8003eb6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	78db      	ldrb	r3, [r3, #3]
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d108      	bne.n	8003ed2 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	4619      	mov	r1, r3
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f007 fa87 	bl	800b3e0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ed4:	015a      	lsls	r2, r3, #5
 8003ed6:	69fb      	ldr	r3, [r7, #28]
 8003ed8:	4413      	add	r3, r2
 8003eda:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ede:	461a      	mov	r2, r3
 8003ee0:	2302      	movs	r3, #2
 8003ee2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d003      	beq.n	8003ef6 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003eee:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	f000 fcbb 	bl	800486c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ef8:	3301      	adds	r3, #1
 8003efa:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003efc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003efe:	085b      	lsrs	r3, r3, #1
 8003f00:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003f02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	f47f af2e 	bne.w	8003d66 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f004 fe9e 	bl	8008c50 <USB_ReadInterrupts>
 8003f14:	4603      	mov	r3, r0
 8003f16:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003f1a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003f1e:	d122      	bne.n	8003f66 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003f20:	69fb      	ldr	r3, [r7, #28]
 8003f22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	69fa      	ldr	r2, [r7, #28]
 8003f2a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003f2e:	f023 0301 	bic.w	r3, r3, #1
 8003f32:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d108      	bne.n	8003f50 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2200      	movs	r2, #0
 8003f42:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003f46:	2100      	movs	r1, #0
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f000 fea1 	bl	8004c90 <HAL_PCDEx_LPM_Callback>
 8003f4e:	e002      	b.n	8003f56 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	f007 fa25 	bl	800b3a0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	695a      	ldr	r2, [r3, #20]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003f64:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f004 fe70 	bl	8008c50 <USB_ReadInterrupts>
 8003f70:	4603      	mov	r3, r0
 8003f72:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f76:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f7a:	d112      	bne.n	8003fa2 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003f7c:	69fb      	ldr	r3, [r7, #28]
 8003f7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	f003 0301 	and.w	r3, r3, #1
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d102      	bne.n	8003f92 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	f007 f9e1 	bl	800b354 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	695a      	ldr	r2, [r3, #20]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003fa0:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f004 fe52 	bl	8008c50 <USB_ReadInterrupts>
 8003fac:	4603      	mov	r3, r0
 8003fae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003fb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fb6:	f040 80b7 	bne.w	8004128 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003fba:	69fb      	ldr	r3, [r7, #28]
 8003fbc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	69fa      	ldr	r2, [r7, #28]
 8003fc4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003fc8:	f023 0301 	bic.w	r3, r3, #1
 8003fcc:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	2110      	movs	r1, #16
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f003 ff25 	bl	8007e24 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fda:	2300      	movs	r3, #0
 8003fdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003fde:	e046      	b.n	800406e <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003fe0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fe2:	015a      	lsls	r2, r3, #5
 8003fe4:	69fb      	ldr	r3, [r7, #28]
 8003fe6:	4413      	add	r3, r2
 8003fe8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fec:	461a      	mov	r2, r3
 8003fee:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003ff2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003ff4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ff6:	015a      	lsls	r2, r3, #5
 8003ff8:	69fb      	ldr	r3, [r7, #28]
 8003ffa:	4413      	add	r3, r2
 8003ffc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004004:	0151      	lsls	r1, r2, #5
 8004006:	69fa      	ldr	r2, [r7, #28]
 8004008:	440a      	add	r2, r1
 800400a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800400e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004012:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004014:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004016:	015a      	lsls	r2, r3, #5
 8004018:	69fb      	ldr	r3, [r7, #28]
 800401a:	4413      	add	r3, r2
 800401c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004020:	461a      	mov	r2, r3
 8004022:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004026:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004028:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800402a:	015a      	lsls	r2, r3, #5
 800402c:	69fb      	ldr	r3, [r7, #28]
 800402e:	4413      	add	r3, r2
 8004030:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004038:	0151      	lsls	r1, r2, #5
 800403a:	69fa      	ldr	r2, [r7, #28]
 800403c:	440a      	add	r2, r1
 800403e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004042:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004046:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004048:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800404a:	015a      	lsls	r2, r3, #5
 800404c:	69fb      	ldr	r3, [r7, #28]
 800404e:	4413      	add	r3, r2
 8004050:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004058:	0151      	lsls	r1, r2, #5
 800405a:	69fa      	ldr	r2, [r7, #28]
 800405c:	440a      	add	r2, r1
 800405e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004062:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004066:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004068:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800406a:	3301      	adds	r3, #1
 800406c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	791b      	ldrb	r3, [r3, #4]
 8004072:	461a      	mov	r2, r3
 8004074:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004076:	4293      	cmp	r3, r2
 8004078:	d3b2      	bcc.n	8003fe0 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800407a:	69fb      	ldr	r3, [r7, #28]
 800407c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004080:	69db      	ldr	r3, [r3, #28]
 8004082:	69fa      	ldr	r2, [r7, #28]
 8004084:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004088:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800408c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	7bdb      	ldrb	r3, [r3, #15]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d016      	beq.n	80040c4 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004096:	69fb      	ldr	r3, [r7, #28]
 8004098:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800409c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040a0:	69fa      	ldr	r2, [r7, #28]
 80040a2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80040a6:	f043 030b 	orr.w	r3, r3, #11
 80040aa:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040b6:	69fa      	ldr	r2, [r7, #28]
 80040b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80040bc:	f043 030b 	orr.w	r3, r3, #11
 80040c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80040c2:	e015      	b.n	80040f0 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040ca:	695b      	ldr	r3, [r3, #20]
 80040cc:	69fa      	ldr	r2, [r7, #28]
 80040ce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80040d2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80040d6:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80040da:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80040dc:	69fb      	ldr	r3, [r7, #28]
 80040de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040e2:	691b      	ldr	r3, [r3, #16]
 80040e4:	69fa      	ldr	r2, [r7, #28]
 80040e6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80040ea:	f043 030b 	orr.w	r3, r3, #11
 80040ee:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80040f0:	69fb      	ldr	r3, [r7, #28]
 80040f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	69fa      	ldr	r2, [r7, #28]
 80040fa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80040fe:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004102:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6818      	ldr	r0, [r3, #0]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004112:	461a      	mov	r2, r3
 8004114:	f004 fe60 	bl	8008dd8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	695a      	ldr	r2, [r3, #20]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8004126:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4618      	mov	r0, r3
 800412e:	f004 fd8f 	bl	8008c50 <USB_ReadInterrupts>
 8004132:	4603      	mov	r3, r0
 8004134:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004138:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800413c:	d123      	bne.n	8004186 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4618      	mov	r0, r3
 8004144:	f004 fe25 	bl	8008d92 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4618      	mov	r0, r3
 800414e:	f003 fee2 	bl	8007f16 <USB_GetDevSpeed>
 8004152:	4603      	mov	r3, r0
 8004154:	461a      	mov	r2, r3
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681c      	ldr	r4, [r3, #0]
 800415e:	f001 f9c7 	bl	80054f0 <HAL_RCC_GetHCLKFreq>
 8004162:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004168:	461a      	mov	r2, r3
 800416a:	4620      	mov	r0, r4
 800416c:	f003 fbe6 	bl	800793c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f007 f8d0 	bl	800b316 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	695a      	ldr	r2, [r3, #20]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8004184:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4618      	mov	r0, r3
 800418c:	f004 fd60 	bl	8008c50 <USB_ReadInterrupts>
 8004190:	4603      	mov	r3, r0
 8004192:	f003 0308 	and.w	r3, r3, #8
 8004196:	2b08      	cmp	r3, #8
 8004198:	d10a      	bne.n	80041b0 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f007 f8ad 	bl	800b2fa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	695a      	ldr	r2, [r3, #20]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f002 0208 	and.w	r2, r2, #8
 80041ae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4618      	mov	r0, r3
 80041b6:	f004 fd4b 	bl	8008c50 <USB_ReadInterrupts>
 80041ba:	4603      	mov	r3, r0
 80041bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041c0:	2b80      	cmp	r3, #128	@ 0x80
 80041c2:	d123      	bne.n	800420c <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80041c4:	6a3b      	ldr	r3, [r7, #32]
 80041c6:	699b      	ldr	r3, [r3, #24]
 80041c8:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80041cc:	6a3b      	ldr	r3, [r7, #32]
 80041ce:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80041d0:	2301      	movs	r3, #1
 80041d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80041d4:	e014      	b.n	8004200 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80041d6:	6879      	ldr	r1, [r7, #4]
 80041d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041da:	4613      	mov	r3, r2
 80041dc:	00db      	lsls	r3, r3, #3
 80041de:	4413      	add	r3, r2
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	440b      	add	r3, r1
 80041e4:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80041e8:	781b      	ldrb	r3, [r3, #0]
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d105      	bne.n	80041fa <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80041ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041f0:	b2db      	uxtb	r3, r3
 80041f2:	4619      	mov	r1, r3
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f000 fb08 	bl	800480a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80041fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041fc:	3301      	adds	r3, #1
 80041fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	791b      	ldrb	r3, [r3, #4]
 8004204:	461a      	mov	r2, r3
 8004206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004208:	4293      	cmp	r3, r2
 800420a:	d3e4      	bcc.n	80041d6 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4618      	mov	r0, r3
 8004212:	f004 fd1d 	bl	8008c50 <USB_ReadInterrupts>
 8004216:	4603      	mov	r3, r0
 8004218:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800421c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004220:	d13c      	bne.n	800429c <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004222:	2301      	movs	r3, #1
 8004224:	627b      	str	r3, [r7, #36]	@ 0x24
 8004226:	e02b      	b.n	8004280 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800422a:	015a      	lsls	r2, r3, #5
 800422c:	69fb      	ldr	r3, [r7, #28]
 800422e:	4413      	add	r3, r2
 8004230:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004238:	6879      	ldr	r1, [r7, #4]
 800423a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800423c:	4613      	mov	r3, r2
 800423e:	00db      	lsls	r3, r3, #3
 8004240:	4413      	add	r3, r2
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	440b      	add	r3, r1
 8004246:	3318      	adds	r3, #24
 8004248:	781b      	ldrb	r3, [r3, #0]
 800424a:	2b01      	cmp	r3, #1
 800424c:	d115      	bne.n	800427a <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800424e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004250:	2b00      	cmp	r3, #0
 8004252:	da12      	bge.n	800427a <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004254:	6879      	ldr	r1, [r7, #4]
 8004256:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004258:	4613      	mov	r3, r2
 800425a:	00db      	lsls	r3, r3, #3
 800425c:	4413      	add	r3, r2
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	440b      	add	r3, r1
 8004262:	3317      	adds	r3, #23
 8004264:	2201      	movs	r2, #1
 8004266:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800426a:	b2db      	uxtb	r3, r3
 800426c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004270:	b2db      	uxtb	r3, r3
 8004272:	4619      	mov	r1, r3
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	f000 fac8 	bl	800480a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800427a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800427c:	3301      	adds	r3, #1
 800427e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	791b      	ldrb	r3, [r3, #4]
 8004284:	461a      	mov	r2, r3
 8004286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004288:	4293      	cmp	r3, r2
 800428a:	d3cd      	bcc.n	8004228 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	695a      	ldr	r2, [r3, #20]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800429a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4618      	mov	r0, r3
 80042a2:	f004 fcd5 	bl	8008c50 <USB_ReadInterrupts>
 80042a6:	4603      	mov	r3, r0
 80042a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80042ac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80042b0:	d156      	bne.n	8004360 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80042b2:	2301      	movs	r3, #1
 80042b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80042b6:	e045      	b.n	8004344 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80042b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ba:	015a      	lsls	r2, r3, #5
 80042bc:	69fb      	ldr	r3, [r7, #28]
 80042be:	4413      	add	r3, r2
 80042c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80042c8:	6879      	ldr	r1, [r7, #4]
 80042ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042cc:	4613      	mov	r3, r2
 80042ce:	00db      	lsls	r3, r3, #3
 80042d0:	4413      	add	r3, r2
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	440b      	add	r3, r1
 80042d6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80042da:	781b      	ldrb	r3, [r3, #0]
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d12e      	bne.n	800433e <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80042e0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	da2b      	bge.n	800433e <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80042e6:	69bb      	ldr	r3, [r7, #24]
 80042e8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80042f2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d121      	bne.n	800433e <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80042fa:	6879      	ldr	r1, [r7, #4]
 80042fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042fe:	4613      	mov	r3, r2
 8004300:	00db      	lsls	r3, r3, #3
 8004302:	4413      	add	r3, r2
 8004304:	009b      	lsls	r3, r3, #2
 8004306:	440b      	add	r3, r1
 8004308:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800430c:	2201      	movs	r2, #1
 800430e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004310:	6a3b      	ldr	r3, [r7, #32]
 8004312:	699b      	ldr	r3, [r3, #24]
 8004314:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004318:	6a3b      	ldr	r3, [r7, #32]
 800431a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800431c:	6a3b      	ldr	r3, [r7, #32]
 800431e:	695b      	ldr	r3, [r3, #20]
 8004320:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004324:	2b00      	cmp	r3, #0
 8004326:	d10a      	bne.n	800433e <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004328:	69fb      	ldr	r3, [r7, #28]
 800432a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	69fa      	ldr	r2, [r7, #28]
 8004332:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004336:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800433a:	6053      	str	r3, [r2, #4]
            break;
 800433c:	e008      	b.n	8004350 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800433e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004340:	3301      	adds	r3, #1
 8004342:	627b      	str	r3, [r7, #36]	@ 0x24
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	791b      	ldrb	r3, [r3, #4]
 8004348:	461a      	mov	r2, r3
 800434a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800434c:	4293      	cmp	r3, r2
 800434e:	d3b3      	bcc.n	80042b8 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	695a      	ldr	r2, [r3, #20]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800435e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4618      	mov	r0, r3
 8004366:	f004 fc73 	bl	8008c50 <USB_ReadInterrupts>
 800436a:	4603      	mov	r3, r0
 800436c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004370:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004374:	d10a      	bne.n	800438c <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f007 f844 	bl	800b404 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	695a      	ldr	r2, [r3, #20]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800438a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4618      	mov	r0, r3
 8004392:	f004 fc5d 	bl	8008c50 <USB_ReadInterrupts>
 8004396:	4603      	mov	r3, r0
 8004398:	f003 0304 	and.w	r3, r3, #4
 800439c:	2b04      	cmp	r3, #4
 800439e:	d115      	bne.n	80043cc <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80043a8:	69bb      	ldr	r3, [r7, #24]
 80043aa:	f003 0304 	and.w	r3, r3, #4
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d002      	beq.n	80043b8 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f007 f834 	bl	800b420 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	6859      	ldr	r1, [r3, #4]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	69ba      	ldr	r2, [r7, #24]
 80043c4:	430a      	orrs	r2, r1
 80043c6:	605a      	str	r2, [r3, #4]
 80043c8:	e000      	b.n	80043cc <HAL_PCD_IRQHandler+0x93c>
      return;
 80043ca:	bf00      	nop
    }
  }
}
 80043cc:	3734      	adds	r7, #52	@ 0x34
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd90      	pop	{r4, r7, pc}

080043d2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80043d2:	b580      	push	{r7, lr}
 80043d4:	b082      	sub	sp, #8
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	6078      	str	r0, [r7, #4]
 80043da:	460b      	mov	r3, r1
 80043dc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d101      	bne.n	80043ec <HAL_PCD_SetAddress+0x1a>
 80043e8:	2302      	movs	r3, #2
 80043ea:	e012      	b.n	8004412 <HAL_PCD_SetAddress+0x40>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	78fa      	ldrb	r2, [r7, #3]
 80043f8:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	78fa      	ldrb	r2, [r7, #3]
 8004400:	4611      	mov	r1, r2
 8004402:	4618      	mov	r0, r3
 8004404:	f004 fbbc 	bl	8008b80 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2200      	movs	r2, #0
 800440c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004410:	2300      	movs	r3, #0
}
 8004412:	4618      	mov	r0, r3
 8004414:	3708      	adds	r7, #8
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}

0800441a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800441a:	b580      	push	{r7, lr}
 800441c:	b084      	sub	sp, #16
 800441e:	af00      	add	r7, sp, #0
 8004420:	6078      	str	r0, [r7, #4]
 8004422:	4608      	mov	r0, r1
 8004424:	4611      	mov	r1, r2
 8004426:	461a      	mov	r2, r3
 8004428:	4603      	mov	r3, r0
 800442a:	70fb      	strb	r3, [r7, #3]
 800442c:	460b      	mov	r3, r1
 800442e:	803b      	strh	r3, [r7, #0]
 8004430:	4613      	mov	r3, r2
 8004432:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004434:	2300      	movs	r3, #0
 8004436:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004438:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800443c:	2b00      	cmp	r3, #0
 800443e:	da0f      	bge.n	8004460 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004440:	78fb      	ldrb	r3, [r7, #3]
 8004442:	f003 020f 	and.w	r2, r3, #15
 8004446:	4613      	mov	r3, r2
 8004448:	00db      	lsls	r3, r3, #3
 800444a:	4413      	add	r3, r2
 800444c:	009b      	lsls	r3, r3, #2
 800444e:	3310      	adds	r3, #16
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	4413      	add	r3, r2
 8004454:	3304      	adds	r3, #4
 8004456:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2201      	movs	r2, #1
 800445c:	705a      	strb	r2, [r3, #1]
 800445e:	e00f      	b.n	8004480 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004460:	78fb      	ldrb	r3, [r7, #3]
 8004462:	f003 020f 	and.w	r2, r3, #15
 8004466:	4613      	mov	r3, r2
 8004468:	00db      	lsls	r3, r3, #3
 800446a:	4413      	add	r3, r2
 800446c:	009b      	lsls	r3, r3, #2
 800446e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	4413      	add	r3, r2
 8004476:	3304      	adds	r3, #4
 8004478:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2200      	movs	r2, #0
 800447e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004480:	78fb      	ldrb	r3, [r7, #3]
 8004482:	f003 030f 	and.w	r3, r3, #15
 8004486:	b2da      	uxtb	r2, r3
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800448c:	883a      	ldrh	r2, [r7, #0]
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	78ba      	ldrb	r2, [r7, #2]
 8004496:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	785b      	ldrb	r3, [r3, #1]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d004      	beq.n	80044aa <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	781b      	ldrb	r3, [r3, #0]
 80044a4:	461a      	mov	r2, r3
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80044aa:	78bb      	ldrb	r3, [r7, #2]
 80044ac:	2b02      	cmp	r3, #2
 80044ae:	d102      	bne.n	80044b6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2200      	movs	r2, #0
 80044b4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d101      	bne.n	80044c4 <HAL_PCD_EP_Open+0xaa>
 80044c0:	2302      	movs	r3, #2
 80044c2:	e00e      	b.n	80044e2 <HAL_PCD_EP_Open+0xc8>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2201      	movs	r2, #1
 80044c8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	68f9      	ldr	r1, [r7, #12]
 80044d2:	4618      	mov	r0, r3
 80044d4:	f003 fd44 	bl	8007f60 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2200      	movs	r2, #0
 80044dc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80044e0:	7afb      	ldrb	r3, [r7, #11]
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3710      	adds	r7, #16
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}

080044ea <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80044ea:	b580      	push	{r7, lr}
 80044ec:	b084      	sub	sp, #16
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	6078      	str	r0, [r7, #4]
 80044f2:	460b      	mov	r3, r1
 80044f4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80044f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	da0f      	bge.n	800451e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80044fe:	78fb      	ldrb	r3, [r7, #3]
 8004500:	f003 020f 	and.w	r2, r3, #15
 8004504:	4613      	mov	r3, r2
 8004506:	00db      	lsls	r3, r3, #3
 8004508:	4413      	add	r3, r2
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	3310      	adds	r3, #16
 800450e:	687a      	ldr	r2, [r7, #4]
 8004510:	4413      	add	r3, r2
 8004512:	3304      	adds	r3, #4
 8004514:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2201      	movs	r2, #1
 800451a:	705a      	strb	r2, [r3, #1]
 800451c:	e00f      	b.n	800453e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800451e:	78fb      	ldrb	r3, [r7, #3]
 8004520:	f003 020f 	and.w	r2, r3, #15
 8004524:	4613      	mov	r3, r2
 8004526:	00db      	lsls	r3, r3, #3
 8004528:	4413      	add	r3, r2
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004530:	687a      	ldr	r2, [r7, #4]
 8004532:	4413      	add	r3, r2
 8004534:	3304      	adds	r3, #4
 8004536:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2200      	movs	r2, #0
 800453c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800453e:	78fb      	ldrb	r3, [r7, #3]
 8004540:	f003 030f 	and.w	r3, r3, #15
 8004544:	b2da      	uxtb	r2, r3
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004550:	2b01      	cmp	r3, #1
 8004552:	d101      	bne.n	8004558 <HAL_PCD_EP_Close+0x6e>
 8004554:	2302      	movs	r3, #2
 8004556:	e00e      	b.n	8004576 <HAL_PCD_EP_Close+0x8c>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	68f9      	ldr	r1, [r7, #12]
 8004566:	4618      	mov	r0, r3
 8004568:	f003 fd82 	bl	8008070 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2200      	movs	r2, #0
 8004570:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8004574:	2300      	movs	r3, #0
}
 8004576:	4618      	mov	r0, r3
 8004578:	3710      	adds	r7, #16
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}

0800457e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800457e:	b580      	push	{r7, lr}
 8004580:	b086      	sub	sp, #24
 8004582:	af00      	add	r7, sp, #0
 8004584:	60f8      	str	r0, [r7, #12]
 8004586:	607a      	str	r2, [r7, #4]
 8004588:	603b      	str	r3, [r7, #0]
 800458a:	460b      	mov	r3, r1
 800458c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800458e:	7afb      	ldrb	r3, [r7, #11]
 8004590:	f003 020f 	and.w	r2, r3, #15
 8004594:	4613      	mov	r3, r2
 8004596:	00db      	lsls	r3, r3, #3
 8004598:	4413      	add	r3, r2
 800459a:	009b      	lsls	r3, r3, #2
 800459c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80045a0:	68fa      	ldr	r2, [r7, #12]
 80045a2:	4413      	add	r3, r2
 80045a4:	3304      	adds	r3, #4
 80045a6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	687a      	ldr	r2, [r7, #4]
 80045ac:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	683a      	ldr	r2, [r7, #0]
 80045b2:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	2200      	movs	r2, #0
 80045b8:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	2200      	movs	r2, #0
 80045be:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80045c0:	7afb      	ldrb	r3, [r7, #11]
 80045c2:	f003 030f 	and.w	r3, r3, #15
 80045c6:	b2da      	uxtb	r2, r3
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	799b      	ldrb	r3, [r3, #6]
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d102      	bne.n	80045da <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80045d4:	687a      	ldr	r2, [r7, #4]
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	6818      	ldr	r0, [r3, #0]
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	799b      	ldrb	r3, [r3, #6]
 80045e2:	461a      	mov	r2, r3
 80045e4:	6979      	ldr	r1, [r7, #20]
 80045e6:	f003 fe1f 	bl	8008228 <USB_EPStartXfer>

  return HAL_OK;
 80045ea:	2300      	movs	r3, #0
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	3718      	adds	r7, #24
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}

080045f4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b083      	sub	sp, #12
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	460b      	mov	r3, r1
 80045fe:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004600:	78fb      	ldrb	r3, [r7, #3]
 8004602:	f003 020f 	and.w	r2, r3, #15
 8004606:	6879      	ldr	r1, [r7, #4]
 8004608:	4613      	mov	r3, r2
 800460a:	00db      	lsls	r3, r3, #3
 800460c:	4413      	add	r3, r2
 800460e:	009b      	lsls	r3, r3, #2
 8004610:	440b      	add	r3, r1
 8004612:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8004616:	681b      	ldr	r3, [r3, #0]
}
 8004618:	4618      	mov	r0, r3
 800461a:	370c      	adds	r7, #12
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr

08004624 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b086      	sub	sp, #24
 8004628:	af00      	add	r7, sp, #0
 800462a:	60f8      	str	r0, [r7, #12]
 800462c:	607a      	str	r2, [r7, #4]
 800462e:	603b      	str	r3, [r7, #0]
 8004630:	460b      	mov	r3, r1
 8004632:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004634:	7afb      	ldrb	r3, [r7, #11]
 8004636:	f003 020f 	and.w	r2, r3, #15
 800463a:	4613      	mov	r3, r2
 800463c:	00db      	lsls	r3, r3, #3
 800463e:	4413      	add	r3, r2
 8004640:	009b      	lsls	r3, r3, #2
 8004642:	3310      	adds	r3, #16
 8004644:	68fa      	ldr	r2, [r7, #12]
 8004646:	4413      	add	r3, r2
 8004648:	3304      	adds	r3, #4
 800464a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	683a      	ldr	r2, [r7, #0]
 8004656:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	2200      	movs	r2, #0
 800465c:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	2201      	movs	r2, #1
 8004662:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004664:	7afb      	ldrb	r3, [r7, #11]
 8004666:	f003 030f 	and.w	r3, r3, #15
 800466a:	b2da      	uxtb	r2, r3
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	799b      	ldrb	r3, [r3, #6]
 8004674:	2b01      	cmp	r3, #1
 8004676:	d102      	bne.n	800467e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004678:	687a      	ldr	r2, [r7, #4]
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6818      	ldr	r0, [r3, #0]
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	799b      	ldrb	r3, [r3, #6]
 8004686:	461a      	mov	r2, r3
 8004688:	6979      	ldr	r1, [r7, #20]
 800468a:	f003 fdcd 	bl	8008228 <USB_EPStartXfer>

  return HAL_OK;
 800468e:	2300      	movs	r3, #0
}
 8004690:	4618      	mov	r0, r3
 8004692:	3718      	adds	r7, #24
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}

08004698 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b084      	sub	sp, #16
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
 80046a0:	460b      	mov	r3, r1
 80046a2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80046a4:	78fb      	ldrb	r3, [r7, #3]
 80046a6:	f003 030f 	and.w	r3, r3, #15
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	7912      	ldrb	r2, [r2, #4]
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d901      	bls.n	80046b6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e04f      	b.n	8004756 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80046b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	da0f      	bge.n	80046de <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80046be:	78fb      	ldrb	r3, [r7, #3]
 80046c0:	f003 020f 	and.w	r2, r3, #15
 80046c4:	4613      	mov	r3, r2
 80046c6:	00db      	lsls	r3, r3, #3
 80046c8:	4413      	add	r3, r2
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	3310      	adds	r3, #16
 80046ce:	687a      	ldr	r2, [r7, #4]
 80046d0:	4413      	add	r3, r2
 80046d2:	3304      	adds	r3, #4
 80046d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2201      	movs	r2, #1
 80046da:	705a      	strb	r2, [r3, #1]
 80046dc:	e00d      	b.n	80046fa <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80046de:	78fa      	ldrb	r2, [r7, #3]
 80046e0:	4613      	mov	r3, r2
 80046e2:	00db      	lsls	r3, r3, #3
 80046e4:	4413      	add	r3, r2
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80046ec:	687a      	ldr	r2, [r7, #4]
 80046ee:	4413      	add	r3, r2
 80046f0:	3304      	adds	r3, #4
 80046f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2200      	movs	r2, #0
 80046f8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2201      	movs	r2, #1
 80046fe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004700:	78fb      	ldrb	r3, [r7, #3]
 8004702:	f003 030f 	and.w	r3, r3, #15
 8004706:	b2da      	uxtb	r2, r3
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004712:	2b01      	cmp	r3, #1
 8004714:	d101      	bne.n	800471a <HAL_PCD_EP_SetStall+0x82>
 8004716:	2302      	movs	r3, #2
 8004718:	e01d      	b.n	8004756 <HAL_PCD_EP_SetStall+0xbe>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2201      	movs	r2, #1
 800471e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	68f9      	ldr	r1, [r7, #12]
 8004728:	4618      	mov	r0, r3
 800472a:	f004 f955 	bl	80089d8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800472e:	78fb      	ldrb	r3, [r7, #3]
 8004730:	f003 030f 	and.w	r3, r3, #15
 8004734:	2b00      	cmp	r3, #0
 8004736:	d109      	bne.n	800474c <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6818      	ldr	r0, [r3, #0]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	7999      	ldrb	r1, [r3, #6]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004746:	461a      	mov	r2, r3
 8004748:	f004 fb46 	bl	8008dd8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2200      	movs	r2, #0
 8004750:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004754:	2300      	movs	r3, #0
}
 8004756:	4618      	mov	r0, r3
 8004758:	3710      	adds	r7, #16
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}

0800475e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800475e:	b580      	push	{r7, lr}
 8004760:	b084      	sub	sp, #16
 8004762:	af00      	add	r7, sp, #0
 8004764:	6078      	str	r0, [r7, #4]
 8004766:	460b      	mov	r3, r1
 8004768:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800476a:	78fb      	ldrb	r3, [r7, #3]
 800476c:	f003 030f 	and.w	r3, r3, #15
 8004770:	687a      	ldr	r2, [r7, #4]
 8004772:	7912      	ldrb	r2, [r2, #4]
 8004774:	4293      	cmp	r3, r2
 8004776:	d901      	bls.n	800477c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	e042      	b.n	8004802 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800477c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004780:	2b00      	cmp	r3, #0
 8004782:	da0f      	bge.n	80047a4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004784:	78fb      	ldrb	r3, [r7, #3]
 8004786:	f003 020f 	and.w	r2, r3, #15
 800478a:	4613      	mov	r3, r2
 800478c:	00db      	lsls	r3, r3, #3
 800478e:	4413      	add	r3, r2
 8004790:	009b      	lsls	r3, r3, #2
 8004792:	3310      	adds	r3, #16
 8004794:	687a      	ldr	r2, [r7, #4]
 8004796:	4413      	add	r3, r2
 8004798:	3304      	adds	r3, #4
 800479a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2201      	movs	r2, #1
 80047a0:	705a      	strb	r2, [r3, #1]
 80047a2:	e00f      	b.n	80047c4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80047a4:	78fb      	ldrb	r3, [r7, #3]
 80047a6:	f003 020f 	and.w	r2, r3, #15
 80047aa:	4613      	mov	r3, r2
 80047ac:	00db      	lsls	r3, r3, #3
 80047ae:	4413      	add	r3, r2
 80047b0:	009b      	lsls	r3, r3, #2
 80047b2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	4413      	add	r3, r2
 80047ba:	3304      	adds	r3, #4
 80047bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2200      	movs	r2, #0
 80047c2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2200      	movs	r2, #0
 80047c8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80047ca:	78fb      	ldrb	r3, [r7, #3]
 80047cc:	f003 030f 	and.w	r3, r3, #15
 80047d0:	b2da      	uxtb	r2, r3
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d101      	bne.n	80047e4 <HAL_PCD_EP_ClrStall+0x86>
 80047e0:	2302      	movs	r3, #2
 80047e2:	e00e      	b.n	8004802 <HAL_PCD_EP_ClrStall+0xa4>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2201      	movs	r2, #1
 80047e8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	68f9      	ldr	r1, [r7, #12]
 80047f2:	4618      	mov	r0, r3
 80047f4:	f004 f95e 	bl	8008ab4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2200      	movs	r2, #0
 80047fc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004800:	2300      	movs	r3, #0
}
 8004802:	4618      	mov	r0, r3
 8004804:	3710      	adds	r7, #16
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}

0800480a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800480a:	b580      	push	{r7, lr}
 800480c:	b084      	sub	sp, #16
 800480e:	af00      	add	r7, sp, #0
 8004810:	6078      	str	r0, [r7, #4]
 8004812:	460b      	mov	r3, r1
 8004814:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004816:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800481a:	2b00      	cmp	r3, #0
 800481c:	da0c      	bge.n	8004838 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800481e:	78fb      	ldrb	r3, [r7, #3]
 8004820:	f003 020f 	and.w	r2, r3, #15
 8004824:	4613      	mov	r3, r2
 8004826:	00db      	lsls	r3, r3, #3
 8004828:	4413      	add	r3, r2
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	3310      	adds	r3, #16
 800482e:	687a      	ldr	r2, [r7, #4]
 8004830:	4413      	add	r3, r2
 8004832:	3304      	adds	r3, #4
 8004834:	60fb      	str	r3, [r7, #12]
 8004836:	e00c      	b.n	8004852 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004838:	78fb      	ldrb	r3, [r7, #3]
 800483a:	f003 020f 	and.w	r2, r3, #15
 800483e:	4613      	mov	r3, r2
 8004840:	00db      	lsls	r3, r3, #3
 8004842:	4413      	add	r3, r2
 8004844:	009b      	lsls	r3, r3, #2
 8004846:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800484a:	687a      	ldr	r2, [r7, #4]
 800484c:	4413      	add	r3, r2
 800484e:	3304      	adds	r3, #4
 8004850:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	68f9      	ldr	r1, [r7, #12]
 8004858:	4618      	mov	r0, r3
 800485a:	f003 ff7d 	bl	8008758 <USB_EPStopXfer>
 800485e:	4603      	mov	r3, r0
 8004860:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004862:	7afb      	ldrb	r3, [r7, #11]
}
 8004864:	4618      	mov	r0, r3
 8004866:	3710      	adds	r7, #16
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}

0800486c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b08a      	sub	sp, #40	@ 0x28
 8004870:	af02      	add	r7, sp, #8
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004880:	683a      	ldr	r2, [r7, #0]
 8004882:	4613      	mov	r3, r2
 8004884:	00db      	lsls	r3, r3, #3
 8004886:	4413      	add	r3, r2
 8004888:	009b      	lsls	r3, r3, #2
 800488a:	3310      	adds	r3, #16
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	4413      	add	r3, r2
 8004890:	3304      	adds	r3, #4
 8004892:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	695a      	ldr	r2, [r3, #20]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	691b      	ldr	r3, [r3, #16]
 800489c:	429a      	cmp	r2, r3
 800489e:	d901      	bls.n	80048a4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	e06b      	b.n	800497c <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	691a      	ldr	r2, [r3, #16]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	695b      	ldr	r3, [r3, #20]
 80048ac:	1ad3      	subs	r3, r2, r3
 80048ae:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	69fa      	ldr	r2, [r7, #28]
 80048b6:	429a      	cmp	r2, r3
 80048b8:	d902      	bls.n	80048c0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80048c0:	69fb      	ldr	r3, [r7, #28]
 80048c2:	3303      	adds	r3, #3
 80048c4:	089b      	lsrs	r3, r3, #2
 80048c6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80048c8:	e02a      	b.n	8004920 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	691a      	ldr	r2, [r3, #16]
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	695b      	ldr	r3, [r3, #20]
 80048d2:	1ad3      	subs	r3, r2, r3
 80048d4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	69fa      	ldr	r2, [r7, #28]
 80048dc:	429a      	cmp	r2, r3
 80048de:	d902      	bls.n	80048e6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80048e6:	69fb      	ldr	r3, [r7, #28]
 80048e8:	3303      	adds	r3, #3
 80048ea:	089b      	lsrs	r3, r3, #2
 80048ec:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	68d9      	ldr	r1, [r3, #12]
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	b2da      	uxtb	r2, r3
 80048f6:	69fb      	ldr	r3, [r7, #28]
 80048f8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80048fe:	9300      	str	r3, [sp, #0]
 8004900:	4603      	mov	r3, r0
 8004902:	6978      	ldr	r0, [r7, #20]
 8004904:	f003 ffd2 	bl	80088ac <USB_WritePacket>

    ep->xfer_buff  += len;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	68da      	ldr	r2, [r3, #12]
 800490c:	69fb      	ldr	r3, [r7, #28]
 800490e:	441a      	add	r2, r3
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	695a      	ldr	r2, [r3, #20]
 8004918:	69fb      	ldr	r3, [r7, #28]
 800491a:	441a      	add	r2, r3
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	015a      	lsls	r2, r3, #5
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	4413      	add	r3, r2
 8004928:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800492c:	699b      	ldr	r3, [r3, #24]
 800492e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004930:	69ba      	ldr	r2, [r7, #24]
 8004932:	429a      	cmp	r2, r3
 8004934:	d809      	bhi.n	800494a <PCD_WriteEmptyTxFifo+0xde>
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	695a      	ldr	r2, [r3, #20]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800493e:	429a      	cmp	r2, r3
 8004940:	d203      	bcs.n	800494a <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	691b      	ldr	r3, [r3, #16]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d1bf      	bne.n	80048ca <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	691a      	ldr	r2, [r3, #16]
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	695b      	ldr	r3, [r3, #20]
 8004952:	429a      	cmp	r2, r3
 8004954:	d811      	bhi.n	800497a <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	f003 030f 	and.w	r3, r3, #15
 800495c:	2201      	movs	r2, #1
 800495e:	fa02 f303 	lsl.w	r3, r2, r3
 8004962:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800496a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	43db      	mvns	r3, r3
 8004970:	6939      	ldr	r1, [r7, #16]
 8004972:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004976:	4013      	ands	r3, r2
 8004978:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800497a:	2300      	movs	r3, #0
}
 800497c:	4618      	mov	r0, r3
 800497e:	3720      	adds	r7, #32
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}

08004984 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b088      	sub	sp, #32
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
 800498c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004994:	69fb      	ldr	r3, [r7, #28]
 8004996:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004998:	69fb      	ldr	r3, [r7, #28]
 800499a:	333c      	adds	r3, #60	@ 0x3c
 800499c:	3304      	adds	r3, #4
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	015a      	lsls	r2, r3, #5
 80049a6:	69bb      	ldr	r3, [r7, #24]
 80049a8:	4413      	add	r3, r2
 80049aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	799b      	ldrb	r3, [r3, #6]
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d17b      	bne.n	8004ab2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	f003 0308 	and.w	r3, r3, #8
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d015      	beq.n	80049f0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	4a61      	ldr	r2, [pc, #388]	@ (8004b4c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	f240 80b9 	bls.w	8004b40 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	f000 80b3 	beq.w	8004b40 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	015a      	lsls	r2, r3, #5
 80049de:	69bb      	ldr	r3, [r7, #24]
 80049e0:	4413      	add	r3, r2
 80049e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049e6:	461a      	mov	r2, r3
 80049e8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80049ec:	6093      	str	r3, [r2, #8]
 80049ee:	e0a7      	b.n	8004b40 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	f003 0320 	and.w	r3, r3, #32
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d009      	beq.n	8004a0e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	015a      	lsls	r2, r3, #5
 80049fe:	69bb      	ldr	r3, [r7, #24]
 8004a00:	4413      	add	r3, r2
 8004a02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a06:	461a      	mov	r2, r3
 8004a08:	2320      	movs	r3, #32
 8004a0a:	6093      	str	r3, [r2, #8]
 8004a0c:	e098      	b.n	8004b40 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	f040 8093 	bne.w	8004b40 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	4a4b      	ldr	r2, [pc, #300]	@ (8004b4c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d90f      	bls.n	8004a42 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d00a      	beq.n	8004a42 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	015a      	lsls	r2, r3, #5
 8004a30:	69bb      	ldr	r3, [r7, #24]
 8004a32:	4413      	add	r3, r2
 8004a34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a38:	461a      	mov	r2, r3
 8004a3a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a3e:	6093      	str	r3, [r2, #8]
 8004a40:	e07e      	b.n	8004b40 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004a42:	683a      	ldr	r2, [r7, #0]
 8004a44:	4613      	mov	r3, r2
 8004a46:	00db      	lsls	r3, r3, #3
 8004a48:	4413      	add	r3, r2
 8004a4a:	009b      	lsls	r3, r3, #2
 8004a4c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004a50:	687a      	ldr	r2, [r7, #4]
 8004a52:	4413      	add	r3, r2
 8004a54:	3304      	adds	r3, #4
 8004a56:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	6a1a      	ldr	r2, [r3, #32]
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	0159      	lsls	r1, r3, #5
 8004a60:	69bb      	ldr	r3, [r7, #24]
 8004a62:	440b      	add	r3, r1
 8004a64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a68:	691b      	ldr	r3, [r3, #16]
 8004a6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a6e:	1ad2      	subs	r2, r2, r3
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d114      	bne.n	8004aa4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	691b      	ldr	r3, [r3, #16]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d109      	bne.n	8004a96 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6818      	ldr	r0, [r3, #0]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004a8c:	461a      	mov	r2, r3
 8004a8e:	2101      	movs	r1, #1
 8004a90:	f004 f9a2 	bl	8008dd8 <USB_EP0_OutStart>
 8004a94:	e006      	b.n	8004aa4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	68da      	ldr	r2, [r3, #12]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	695b      	ldr	r3, [r3, #20]
 8004a9e:	441a      	add	r2, r3
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	b2db      	uxtb	r3, r3
 8004aa8:	4619      	mov	r1, r3
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f006 fbf0 	bl	800b290 <HAL_PCD_DataOutStageCallback>
 8004ab0:	e046      	b.n	8004b40 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	4a26      	ldr	r2, [pc, #152]	@ (8004b50 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d124      	bne.n	8004b04 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d00a      	beq.n	8004ada <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	015a      	lsls	r2, r3, #5
 8004ac8:	69bb      	ldr	r3, [r7, #24]
 8004aca:	4413      	add	r3, r2
 8004acc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ad0:	461a      	mov	r2, r3
 8004ad2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ad6:	6093      	str	r3, [r2, #8]
 8004ad8:	e032      	b.n	8004b40 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	f003 0320 	and.w	r3, r3, #32
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d008      	beq.n	8004af6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	015a      	lsls	r2, r3, #5
 8004ae8:	69bb      	ldr	r3, [r7, #24]
 8004aea:	4413      	add	r3, r2
 8004aec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004af0:	461a      	mov	r2, r3
 8004af2:	2320      	movs	r3, #32
 8004af4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	b2db      	uxtb	r3, r3
 8004afa:	4619      	mov	r1, r3
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	f006 fbc7 	bl	800b290 <HAL_PCD_DataOutStageCallback>
 8004b02:	e01d      	b.n	8004b40 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d114      	bne.n	8004b34 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004b0a:	6879      	ldr	r1, [r7, #4]
 8004b0c:	683a      	ldr	r2, [r7, #0]
 8004b0e:	4613      	mov	r3, r2
 8004b10:	00db      	lsls	r3, r3, #3
 8004b12:	4413      	add	r3, r2
 8004b14:	009b      	lsls	r3, r3, #2
 8004b16:	440b      	add	r3, r1
 8004b18:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d108      	bne.n	8004b34 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6818      	ldr	r0, [r3, #0]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	2100      	movs	r1, #0
 8004b30:	f004 f952 	bl	8008dd8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	b2db      	uxtb	r3, r3
 8004b38:	4619      	mov	r1, r3
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f006 fba8 	bl	800b290 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004b40:	2300      	movs	r3, #0
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3720      	adds	r7, #32
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}
 8004b4a:	bf00      	nop
 8004b4c:	4f54300a 	.word	0x4f54300a
 8004b50:	4f54310a 	.word	0x4f54310a

08004b54 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b086      	sub	sp, #24
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	333c      	adds	r3, #60	@ 0x3c
 8004b6c:	3304      	adds	r3, #4
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	015a      	lsls	r2, r3, #5
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	4413      	add	r3, r2
 8004b7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	4a15      	ldr	r2, [pc, #84]	@ (8004bdc <PCD_EP_OutSetupPacket_int+0x88>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d90e      	bls.n	8004ba8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d009      	beq.n	8004ba8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	015a      	lsls	r2, r3, #5
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	4413      	add	r3, r2
 8004b9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ba0:	461a      	mov	r2, r3
 8004ba2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ba6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004ba8:	6878      	ldr	r0, [r7, #4]
 8004baa:	f006 fb5f 	bl	800b26c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	4a0a      	ldr	r2, [pc, #40]	@ (8004bdc <PCD_EP_OutSetupPacket_int+0x88>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d90c      	bls.n	8004bd0 <PCD_EP_OutSetupPacket_int+0x7c>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	799b      	ldrb	r3, [r3, #6]
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	d108      	bne.n	8004bd0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6818      	ldr	r0, [r3, #0]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004bc8:	461a      	mov	r2, r3
 8004bca:	2101      	movs	r1, #1
 8004bcc:	f004 f904 	bl	8008dd8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004bd0:	2300      	movs	r3, #0
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3718      	adds	r7, #24
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
 8004bda:	bf00      	nop
 8004bdc:	4f54300a 	.word	0x4f54300a

08004be0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b085      	sub	sp, #20
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	460b      	mov	r3, r1
 8004bea:	70fb      	strb	r3, [r7, #3]
 8004bec:	4613      	mov	r3, r2
 8004bee:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bf6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004bf8:	78fb      	ldrb	r3, [r7, #3]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d107      	bne.n	8004c0e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004bfe:	883b      	ldrh	r3, [r7, #0]
 8004c00:	0419      	lsls	r1, r3, #16
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	68ba      	ldr	r2, [r7, #8]
 8004c08:	430a      	orrs	r2, r1
 8004c0a:	629a      	str	r2, [r3, #40]	@ 0x28
 8004c0c:	e028      	b.n	8004c60 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c14:	0c1b      	lsrs	r3, r3, #16
 8004c16:	68ba      	ldr	r2, [r7, #8]
 8004c18:	4413      	add	r3, r2
 8004c1a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	73fb      	strb	r3, [r7, #15]
 8004c20:	e00d      	b.n	8004c3e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	7bfb      	ldrb	r3, [r7, #15]
 8004c28:	3340      	adds	r3, #64	@ 0x40
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	4413      	add	r3, r2
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	0c1b      	lsrs	r3, r3, #16
 8004c32:	68ba      	ldr	r2, [r7, #8]
 8004c34:	4413      	add	r3, r2
 8004c36:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004c38:	7bfb      	ldrb	r3, [r7, #15]
 8004c3a:	3301      	adds	r3, #1
 8004c3c:	73fb      	strb	r3, [r7, #15]
 8004c3e:	7bfa      	ldrb	r2, [r7, #15]
 8004c40:	78fb      	ldrb	r3, [r7, #3]
 8004c42:	3b01      	subs	r3, #1
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d3ec      	bcc.n	8004c22 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004c48:	883b      	ldrh	r3, [r7, #0]
 8004c4a:	0418      	lsls	r0, r3, #16
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6819      	ldr	r1, [r3, #0]
 8004c50:	78fb      	ldrb	r3, [r7, #3]
 8004c52:	3b01      	subs	r3, #1
 8004c54:	68ba      	ldr	r2, [r7, #8]
 8004c56:	4302      	orrs	r2, r0
 8004c58:	3340      	adds	r3, #64	@ 0x40
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	440b      	add	r3, r1
 8004c5e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004c60:	2300      	movs	r3, #0
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3714      	adds	r7, #20
 8004c66:	46bd      	mov	sp, r7
 8004c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6c:	4770      	bx	lr

08004c6e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004c6e:	b480      	push	{r7}
 8004c70:	b083      	sub	sp, #12
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	6078      	str	r0, [r7, #4]
 8004c76:	460b      	mov	r3, r1
 8004c78:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	887a      	ldrh	r2, [r7, #2]
 8004c80:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004c82:	2300      	movs	r3, #0
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	370c      	adds	r7, #12
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr

08004c90 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b083      	sub	sp, #12
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	460b      	mov	r3, r1
 8004c9a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004c9c:	bf00      	nop
 8004c9e:	370c      	adds	r7, #12
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca6:	4770      	bx	lr

08004ca8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b086      	sub	sp, #24
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d101      	bne.n	8004cba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e267      	b.n	800518a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f003 0301 	and.w	r3, r3, #1
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d075      	beq.n	8004db2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004cc6:	4b88      	ldr	r3, [pc, #544]	@ (8004ee8 <HAL_RCC_OscConfig+0x240>)
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	f003 030c 	and.w	r3, r3, #12
 8004cce:	2b04      	cmp	r3, #4
 8004cd0:	d00c      	beq.n	8004cec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004cd2:	4b85      	ldr	r3, [pc, #532]	@ (8004ee8 <HAL_RCC_OscConfig+0x240>)
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004cda:	2b08      	cmp	r3, #8
 8004cdc:	d112      	bne.n	8004d04 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004cde:	4b82      	ldr	r3, [pc, #520]	@ (8004ee8 <HAL_RCC_OscConfig+0x240>)
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ce6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004cea:	d10b      	bne.n	8004d04 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cec:	4b7e      	ldr	r3, [pc, #504]	@ (8004ee8 <HAL_RCC_OscConfig+0x240>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d05b      	beq.n	8004db0 <HAL_RCC_OscConfig+0x108>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d157      	bne.n	8004db0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	e242      	b.n	800518a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d0c:	d106      	bne.n	8004d1c <HAL_RCC_OscConfig+0x74>
 8004d0e:	4b76      	ldr	r3, [pc, #472]	@ (8004ee8 <HAL_RCC_OscConfig+0x240>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a75      	ldr	r2, [pc, #468]	@ (8004ee8 <HAL_RCC_OscConfig+0x240>)
 8004d14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d18:	6013      	str	r3, [r2, #0]
 8004d1a:	e01d      	b.n	8004d58 <HAL_RCC_OscConfig+0xb0>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004d24:	d10c      	bne.n	8004d40 <HAL_RCC_OscConfig+0x98>
 8004d26:	4b70      	ldr	r3, [pc, #448]	@ (8004ee8 <HAL_RCC_OscConfig+0x240>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a6f      	ldr	r2, [pc, #444]	@ (8004ee8 <HAL_RCC_OscConfig+0x240>)
 8004d2c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d30:	6013      	str	r3, [r2, #0]
 8004d32:	4b6d      	ldr	r3, [pc, #436]	@ (8004ee8 <HAL_RCC_OscConfig+0x240>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a6c      	ldr	r2, [pc, #432]	@ (8004ee8 <HAL_RCC_OscConfig+0x240>)
 8004d38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d3c:	6013      	str	r3, [r2, #0]
 8004d3e:	e00b      	b.n	8004d58 <HAL_RCC_OscConfig+0xb0>
 8004d40:	4b69      	ldr	r3, [pc, #420]	@ (8004ee8 <HAL_RCC_OscConfig+0x240>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a68      	ldr	r2, [pc, #416]	@ (8004ee8 <HAL_RCC_OscConfig+0x240>)
 8004d46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d4a:	6013      	str	r3, [r2, #0]
 8004d4c:	4b66      	ldr	r3, [pc, #408]	@ (8004ee8 <HAL_RCC_OscConfig+0x240>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a65      	ldr	r2, [pc, #404]	@ (8004ee8 <HAL_RCC_OscConfig+0x240>)
 8004d52:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d013      	beq.n	8004d88 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d60:	f7fd f92e 	bl	8001fc0 <HAL_GetTick>
 8004d64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d66:	e008      	b.n	8004d7a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d68:	f7fd f92a 	bl	8001fc0 <HAL_GetTick>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	1ad3      	subs	r3, r2, r3
 8004d72:	2b64      	cmp	r3, #100	@ 0x64
 8004d74:	d901      	bls.n	8004d7a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004d76:	2303      	movs	r3, #3
 8004d78:	e207      	b.n	800518a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d7a:	4b5b      	ldr	r3, [pc, #364]	@ (8004ee8 <HAL_RCC_OscConfig+0x240>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d0f0      	beq.n	8004d68 <HAL_RCC_OscConfig+0xc0>
 8004d86:	e014      	b.n	8004db2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d88:	f7fd f91a 	bl	8001fc0 <HAL_GetTick>
 8004d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d8e:	e008      	b.n	8004da2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d90:	f7fd f916 	bl	8001fc0 <HAL_GetTick>
 8004d94:	4602      	mov	r2, r0
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	1ad3      	subs	r3, r2, r3
 8004d9a:	2b64      	cmp	r3, #100	@ 0x64
 8004d9c:	d901      	bls.n	8004da2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d9e:	2303      	movs	r3, #3
 8004da0:	e1f3      	b.n	800518a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004da2:	4b51      	ldr	r3, [pc, #324]	@ (8004ee8 <HAL_RCC_OscConfig+0x240>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d1f0      	bne.n	8004d90 <HAL_RCC_OscConfig+0xe8>
 8004dae:	e000      	b.n	8004db2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004db0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f003 0302 	and.w	r3, r3, #2
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d063      	beq.n	8004e86 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004dbe:	4b4a      	ldr	r3, [pc, #296]	@ (8004ee8 <HAL_RCC_OscConfig+0x240>)
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	f003 030c 	and.w	r3, r3, #12
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d00b      	beq.n	8004de2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004dca:	4b47      	ldr	r3, [pc, #284]	@ (8004ee8 <HAL_RCC_OscConfig+0x240>)
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004dd2:	2b08      	cmp	r3, #8
 8004dd4:	d11c      	bne.n	8004e10 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004dd6:	4b44      	ldr	r3, [pc, #272]	@ (8004ee8 <HAL_RCC_OscConfig+0x240>)
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d116      	bne.n	8004e10 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004de2:	4b41      	ldr	r3, [pc, #260]	@ (8004ee8 <HAL_RCC_OscConfig+0x240>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f003 0302 	and.w	r3, r3, #2
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d005      	beq.n	8004dfa <HAL_RCC_OscConfig+0x152>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	68db      	ldr	r3, [r3, #12]
 8004df2:	2b01      	cmp	r3, #1
 8004df4:	d001      	beq.n	8004dfa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	e1c7      	b.n	800518a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dfa:	4b3b      	ldr	r3, [pc, #236]	@ (8004ee8 <HAL_RCC_OscConfig+0x240>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	691b      	ldr	r3, [r3, #16]
 8004e06:	00db      	lsls	r3, r3, #3
 8004e08:	4937      	ldr	r1, [pc, #220]	@ (8004ee8 <HAL_RCC_OscConfig+0x240>)
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e0e:	e03a      	b.n	8004e86 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d020      	beq.n	8004e5a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e18:	4b34      	ldr	r3, [pc, #208]	@ (8004eec <HAL_RCC_OscConfig+0x244>)
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e1e:	f7fd f8cf 	bl	8001fc0 <HAL_GetTick>
 8004e22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e24:	e008      	b.n	8004e38 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e26:	f7fd f8cb 	bl	8001fc0 <HAL_GetTick>
 8004e2a:	4602      	mov	r2, r0
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	1ad3      	subs	r3, r2, r3
 8004e30:	2b02      	cmp	r3, #2
 8004e32:	d901      	bls.n	8004e38 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004e34:	2303      	movs	r3, #3
 8004e36:	e1a8      	b.n	800518a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e38:	4b2b      	ldr	r3, [pc, #172]	@ (8004ee8 <HAL_RCC_OscConfig+0x240>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f003 0302 	and.w	r3, r3, #2
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d0f0      	beq.n	8004e26 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e44:	4b28      	ldr	r3, [pc, #160]	@ (8004ee8 <HAL_RCC_OscConfig+0x240>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	691b      	ldr	r3, [r3, #16]
 8004e50:	00db      	lsls	r3, r3, #3
 8004e52:	4925      	ldr	r1, [pc, #148]	@ (8004ee8 <HAL_RCC_OscConfig+0x240>)
 8004e54:	4313      	orrs	r3, r2
 8004e56:	600b      	str	r3, [r1, #0]
 8004e58:	e015      	b.n	8004e86 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e5a:	4b24      	ldr	r3, [pc, #144]	@ (8004eec <HAL_RCC_OscConfig+0x244>)
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e60:	f7fd f8ae 	bl	8001fc0 <HAL_GetTick>
 8004e64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e66:	e008      	b.n	8004e7a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e68:	f7fd f8aa 	bl	8001fc0 <HAL_GetTick>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	1ad3      	subs	r3, r2, r3
 8004e72:	2b02      	cmp	r3, #2
 8004e74:	d901      	bls.n	8004e7a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004e76:	2303      	movs	r3, #3
 8004e78:	e187      	b.n	800518a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e7a:	4b1b      	ldr	r3, [pc, #108]	@ (8004ee8 <HAL_RCC_OscConfig+0x240>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f003 0302 	and.w	r3, r3, #2
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d1f0      	bne.n	8004e68 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f003 0308 	and.w	r3, r3, #8
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d036      	beq.n	8004f00 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	695b      	ldr	r3, [r3, #20]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d016      	beq.n	8004ec8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e9a:	4b15      	ldr	r3, [pc, #84]	@ (8004ef0 <HAL_RCC_OscConfig+0x248>)
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ea0:	f7fd f88e 	bl	8001fc0 <HAL_GetTick>
 8004ea4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ea6:	e008      	b.n	8004eba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ea8:	f7fd f88a 	bl	8001fc0 <HAL_GetTick>
 8004eac:	4602      	mov	r2, r0
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	1ad3      	subs	r3, r2, r3
 8004eb2:	2b02      	cmp	r3, #2
 8004eb4:	d901      	bls.n	8004eba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004eb6:	2303      	movs	r3, #3
 8004eb8:	e167      	b.n	800518a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004eba:	4b0b      	ldr	r3, [pc, #44]	@ (8004ee8 <HAL_RCC_OscConfig+0x240>)
 8004ebc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ebe:	f003 0302 	and.w	r3, r3, #2
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d0f0      	beq.n	8004ea8 <HAL_RCC_OscConfig+0x200>
 8004ec6:	e01b      	b.n	8004f00 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ec8:	4b09      	ldr	r3, [pc, #36]	@ (8004ef0 <HAL_RCC_OscConfig+0x248>)
 8004eca:	2200      	movs	r2, #0
 8004ecc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ece:	f7fd f877 	bl	8001fc0 <HAL_GetTick>
 8004ed2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ed4:	e00e      	b.n	8004ef4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ed6:	f7fd f873 	bl	8001fc0 <HAL_GetTick>
 8004eda:	4602      	mov	r2, r0
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	1ad3      	subs	r3, r2, r3
 8004ee0:	2b02      	cmp	r3, #2
 8004ee2:	d907      	bls.n	8004ef4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004ee4:	2303      	movs	r3, #3
 8004ee6:	e150      	b.n	800518a <HAL_RCC_OscConfig+0x4e2>
 8004ee8:	40023800 	.word	0x40023800
 8004eec:	42470000 	.word	0x42470000
 8004ef0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ef4:	4b88      	ldr	r3, [pc, #544]	@ (8005118 <HAL_RCC_OscConfig+0x470>)
 8004ef6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ef8:	f003 0302 	and.w	r3, r3, #2
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d1ea      	bne.n	8004ed6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 0304 	and.w	r3, r3, #4
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	f000 8097 	beq.w	800503c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f12:	4b81      	ldr	r3, [pc, #516]	@ (8005118 <HAL_RCC_OscConfig+0x470>)
 8004f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d10f      	bne.n	8004f3e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f1e:	2300      	movs	r3, #0
 8004f20:	60bb      	str	r3, [r7, #8]
 8004f22:	4b7d      	ldr	r3, [pc, #500]	@ (8005118 <HAL_RCC_OscConfig+0x470>)
 8004f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f26:	4a7c      	ldr	r2, [pc, #496]	@ (8005118 <HAL_RCC_OscConfig+0x470>)
 8004f28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8004f2e:	4b7a      	ldr	r3, [pc, #488]	@ (8005118 <HAL_RCC_OscConfig+0x470>)
 8004f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f36:	60bb      	str	r3, [r7, #8]
 8004f38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f3e:	4b77      	ldr	r3, [pc, #476]	@ (800511c <HAL_RCC_OscConfig+0x474>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d118      	bne.n	8004f7c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f4a:	4b74      	ldr	r3, [pc, #464]	@ (800511c <HAL_RCC_OscConfig+0x474>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a73      	ldr	r2, [pc, #460]	@ (800511c <HAL_RCC_OscConfig+0x474>)
 8004f50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f56:	f7fd f833 	bl	8001fc0 <HAL_GetTick>
 8004f5a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f5c:	e008      	b.n	8004f70 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f5e:	f7fd f82f 	bl	8001fc0 <HAL_GetTick>
 8004f62:	4602      	mov	r2, r0
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	1ad3      	subs	r3, r2, r3
 8004f68:	2b02      	cmp	r3, #2
 8004f6a:	d901      	bls.n	8004f70 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004f6c:	2303      	movs	r3, #3
 8004f6e:	e10c      	b.n	800518a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f70:	4b6a      	ldr	r3, [pc, #424]	@ (800511c <HAL_RCC_OscConfig+0x474>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d0f0      	beq.n	8004f5e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d106      	bne.n	8004f92 <HAL_RCC_OscConfig+0x2ea>
 8004f84:	4b64      	ldr	r3, [pc, #400]	@ (8005118 <HAL_RCC_OscConfig+0x470>)
 8004f86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f88:	4a63      	ldr	r2, [pc, #396]	@ (8005118 <HAL_RCC_OscConfig+0x470>)
 8004f8a:	f043 0301 	orr.w	r3, r3, #1
 8004f8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f90:	e01c      	b.n	8004fcc <HAL_RCC_OscConfig+0x324>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	2b05      	cmp	r3, #5
 8004f98:	d10c      	bne.n	8004fb4 <HAL_RCC_OscConfig+0x30c>
 8004f9a:	4b5f      	ldr	r3, [pc, #380]	@ (8005118 <HAL_RCC_OscConfig+0x470>)
 8004f9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f9e:	4a5e      	ldr	r2, [pc, #376]	@ (8005118 <HAL_RCC_OscConfig+0x470>)
 8004fa0:	f043 0304 	orr.w	r3, r3, #4
 8004fa4:	6713      	str	r3, [r2, #112]	@ 0x70
 8004fa6:	4b5c      	ldr	r3, [pc, #368]	@ (8005118 <HAL_RCC_OscConfig+0x470>)
 8004fa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004faa:	4a5b      	ldr	r2, [pc, #364]	@ (8005118 <HAL_RCC_OscConfig+0x470>)
 8004fac:	f043 0301 	orr.w	r3, r3, #1
 8004fb0:	6713      	str	r3, [r2, #112]	@ 0x70
 8004fb2:	e00b      	b.n	8004fcc <HAL_RCC_OscConfig+0x324>
 8004fb4:	4b58      	ldr	r3, [pc, #352]	@ (8005118 <HAL_RCC_OscConfig+0x470>)
 8004fb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fb8:	4a57      	ldr	r2, [pc, #348]	@ (8005118 <HAL_RCC_OscConfig+0x470>)
 8004fba:	f023 0301 	bic.w	r3, r3, #1
 8004fbe:	6713      	str	r3, [r2, #112]	@ 0x70
 8004fc0:	4b55      	ldr	r3, [pc, #340]	@ (8005118 <HAL_RCC_OscConfig+0x470>)
 8004fc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fc4:	4a54      	ldr	r2, [pc, #336]	@ (8005118 <HAL_RCC_OscConfig+0x470>)
 8004fc6:	f023 0304 	bic.w	r3, r3, #4
 8004fca:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	689b      	ldr	r3, [r3, #8]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d015      	beq.n	8005000 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fd4:	f7fc fff4 	bl	8001fc0 <HAL_GetTick>
 8004fd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fda:	e00a      	b.n	8004ff2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fdc:	f7fc fff0 	bl	8001fc0 <HAL_GetTick>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	1ad3      	subs	r3, r2, r3
 8004fe6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d901      	bls.n	8004ff2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004fee:	2303      	movs	r3, #3
 8004ff0:	e0cb      	b.n	800518a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ff2:	4b49      	ldr	r3, [pc, #292]	@ (8005118 <HAL_RCC_OscConfig+0x470>)
 8004ff4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ff6:	f003 0302 	and.w	r3, r3, #2
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d0ee      	beq.n	8004fdc <HAL_RCC_OscConfig+0x334>
 8004ffe:	e014      	b.n	800502a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005000:	f7fc ffde 	bl	8001fc0 <HAL_GetTick>
 8005004:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005006:	e00a      	b.n	800501e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005008:	f7fc ffda 	bl	8001fc0 <HAL_GetTick>
 800500c:	4602      	mov	r2, r0
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	1ad3      	subs	r3, r2, r3
 8005012:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005016:	4293      	cmp	r3, r2
 8005018:	d901      	bls.n	800501e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800501a:	2303      	movs	r3, #3
 800501c:	e0b5      	b.n	800518a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800501e:	4b3e      	ldr	r3, [pc, #248]	@ (8005118 <HAL_RCC_OscConfig+0x470>)
 8005020:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005022:	f003 0302 	and.w	r3, r3, #2
 8005026:	2b00      	cmp	r3, #0
 8005028:	d1ee      	bne.n	8005008 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800502a:	7dfb      	ldrb	r3, [r7, #23]
 800502c:	2b01      	cmp	r3, #1
 800502e:	d105      	bne.n	800503c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005030:	4b39      	ldr	r3, [pc, #228]	@ (8005118 <HAL_RCC_OscConfig+0x470>)
 8005032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005034:	4a38      	ldr	r2, [pc, #224]	@ (8005118 <HAL_RCC_OscConfig+0x470>)
 8005036:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800503a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	699b      	ldr	r3, [r3, #24]
 8005040:	2b00      	cmp	r3, #0
 8005042:	f000 80a1 	beq.w	8005188 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005046:	4b34      	ldr	r3, [pc, #208]	@ (8005118 <HAL_RCC_OscConfig+0x470>)
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	f003 030c 	and.w	r3, r3, #12
 800504e:	2b08      	cmp	r3, #8
 8005050:	d05c      	beq.n	800510c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	699b      	ldr	r3, [r3, #24]
 8005056:	2b02      	cmp	r3, #2
 8005058:	d141      	bne.n	80050de <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800505a:	4b31      	ldr	r3, [pc, #196]	@ (8005120 <HAL_RCC_OscConfig+0x478>)
 800505c:	2200      	movs	r2, #0
 800505e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005060:	f7fc ffae 	bl	8001fc0 <HAL_GetTick>
 8005064:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005066:	e008      	b.n	800507a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005068:	f7fc ffaa 	bl	8001fc0 <HAL_GetTick>
 800506c:	4602      	mov	r2, r0
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	1ad3      	subs	r3, r2, r3
 8005072:	2b02      	cmp	r3, #2
 8005074:	d901      	bls.n	800507a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005076:	2303      	movs	r3, #3
 8005078:	e087      	b.n	800518a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800507a:	4b27      	ldr	r3, [pc, #156]	@ (8005118 <HAL_RCC_OscConfig+0x470>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005082:	2b00      	cmp	r3, #0
 8005084:	d1f0      	bne.n	8005068 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	69da      	ldr	r2, [r3, #28]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6a1b      	ldr	r3, [r3, #32]
 800508e:	431a      	orrs	r2, r3
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005094:	019b      	lsls	r3, r3, #6
 8005096:	431a      	orrs	r2, r3
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800509c:	085b      	lsrs	r3, r3, #1
 800509e:	3b01      	subs	r3, #1
 80050a0:	041b      	lsls	r3, r3, #16
 80050a2:	431a      	orrs	r2, r3
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050a8:	061b      	lsls	r3, r3, #24
 80050aa:	491b      	ldr	r1, [pc, #108]	@ (8005118 <HAL_RCC_OscConfig+0x470>)
 80050ac:	4313      	orrs	r3, r2
 80050ae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80050b0:	4b1b      	ldr	r3, [pc, #108]	@ (8005120 <HAL_RCC_OscConfig+0x478>)
 80050b2:	2201      	movs	r2, #1
 80050b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050b6:	f7fc ff83 	bl	8001fc0 <HAL_GetTick>
 80050ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050bc:	e008      	b.n	80050d0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050be:	f7fc ff7f 	bl	8001fc0 <HAL_GetTick>
 80050c2:	4602      	mov	r2, r0
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	1ad3      	subs	r3, r2, r3
 80050c8:	2b02      	cmp	r3, #2
 80050ca:	d901      	bls.n	80050d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80050cc:	2303      	movs	r3, #3
 80050ce:	e05c      	b.n	800518a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050d0:	4b11      	ldr	r3, [pc, #68]	@ (8005118 <HAL_RCC_OscConfig+0x470>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d0f0      	beq.n	80050be <HAL_RCC_OscConfig+0x416>
 80050dc:	e054      	b.n	8005188 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050de:	4b10      	ldr	r3, [pc, #64]	@ (8005120 <HAL_RCC_OscConfig+0x478>)
 80050e0:	2200      	movs	r2, #0
 80050e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050e4:	f7fc ff6c 	bl	8001fc0 <HAL_GetTick>
 80050e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050ea:	e008      	b.n	80050fe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050ec:	f7fc ff68 	bl	8001fc0 <HAL_GetTick>
 80050f0:	4602      	mov	r2, r0
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	2b02      	cmp	r3, #2
 80050f8:	d901      	bls.n	80050fe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80050fa:	2303      	movs	r3, #3
 80050fc:	e045      	b.n	800518a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050fe:	4b06      	ldr	r3, [pc, #24]	@ (8005118 <HAL_RCC_OscConfig+0x470>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005106:	2b00      	cmp	r3, #0
 8005108:	d1f0      	bne.n	80050ec <HAL_RCC_OscConfig+0x444>
 800510a:	e03d      	b.n	8005188 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	699b      	ldr	r3, [r3, #24]
 8005110:	2b01      	cmp	r3, #1
 8005112:	d107      	bne.n	8005124 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	e038      	b.n	800518a <HAL_RCC_OscConfig+0x4e2>
 8005118:	40023800 	.word	0x40023800
 800511c:	40007000 	.word	0x40007000
 8005120:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005124:	4b1b      	ldr	r3, [pc, #108]	@ (8005194 <HAL_RCC_OscConfig+0x4ec>)
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	699b      	ldr	r3, [r3, #24]
 800512e:	2b01      	cmp	r3, #1
 8005130:	d028      	beq.n	8005184 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800513c:	429a      	cmp	r2, r3
 800513e:	d121      	bne.n	8005184 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800514a:	429a      	cmp	r2, r3
 800514c:	d11a      	bne.n	8005184 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800514e:	68fa      	ldr	r2, [r7, #12]
 8005150:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005154:	4013      	ands	r3, r2
 8005156:	687a      	ldr	r2, [r7, #4]
 8005158:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800515a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800515c:	4293      	cmp	r3, r2
 800515e:	d111      	bne.n	8005184 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800516a:	085b      	lsrs	r3, r3, #1
 800516c:	3b01      	subs	r3, #1
 800516e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005170:	429a      	cmp	r2, r3
 8005172:	d107      	bne.n	8005184 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800517e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005180:	429a      	cmp	r2, r3
 8005182:	d001      	beq.n	8005188 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005184:	2301      	movs	r3, #1
 8005186:	e000      	b.n	800518a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005188:	2300      	movs	r3, #0
}
 800518a:	4618      	mov	r0, r3
 800518c:	3718      	adds	r7, #24
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}
 8005192:	bf00      	nop
 8005194:	40023800 	.word	0x40023800

08005198 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b084      	sub	sp, #16
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
 80051a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d101      	bne.n	80051ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	e0cc      	b.n	8005346 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80051ac:	4b68      	ldr	r3, [pc, #416]	@ (8005350 <HAL_RCC_ClockConfig+0x1b8>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 0307 	and.w	r3, r3, #7
 80051b4:	683a      	ldr	r2, [r7, #0]
 80051b6:	429a      	cmp	r2, r3
 80051b8:	d90c      	bls.n	80051d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051ba:	4b65      	ldr	r3, [pc, #404]	@ (8005350 <HAL_RCC_ClockConfig+0x1b8>)
 80051bc:	683a      	ldr	r2, [r7, #0]
 80051be:	b2d2      	uxtb	r2, r2
 80051c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051c2:	4b63      	ldr	r3, [pc, #396]	@ (8005350 <HAL_RCC_ClockConfig+0x1b8>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f003 0307 	and.w	r3, r3, #7
 80051ca:	683a      	ldr	r2, [r7, #0]
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d001      	beq.n	80051d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80051d0:	2301      	movs	r3, #1
 80051d2:	e0b8      	b.n	8005346 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f003 0302 	and.w	r3, r3, #2
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d020      	beq.n	8005222 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f003 0304 	and.w	r3, r3, #4
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d005      	beq.n	80051f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80051ec:	4b59      	ldr	r3, [pc, #356]	@ (8005354 <HAL_RCC_ClockConfig+0x1bc>)
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	4a58      	ldr	r2, [pc, #352]	@ (8005354 <HAL_RCC_ClockConfig+0x1bc>)
 80051f2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80051f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f003 0308 	and.w	r3, r3, #8
 8005200:	2b00      	cmp	r3, #0
 8005202:	d005      	beq.n	8005210 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005204:	4b53      	ldr	r3, [pc, #332]	@ (8005354 <HAL_RCC_ClockConfig+0x1bc>)
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	4a52      	ldr	r2, [pc, #328]	@ (8005354 <HAL_RCC_ClockConfig+0x1bc>)
 800520a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800520e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005210:	4b50      	ldr	r3, [pc, #320]	@ (8005354 <HAL_RCC_ClockConfig+0x1bc>)
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	494d      	ldr	r1, [pc, #308]	@ (8005354 <HAL_RCC_ClockConfig+0x1bc>)
 800521e:	4313      	orrs	r3, r2
 8005220:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f003 0301 	and.w	r3, r3, #1
 800522a:	2b00      	cmp	r3, #0
 800522c:	d044      	beq.n	80052b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	2b01      	cmp	r3, #1
 8005234:	d107      	bne.n	8005246 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005236:	4b47      	ldr	r3, [pc, #284]	@ (8005354 <HAL_RCC_ClockConfig+0x1bc>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800523e:	2b00      	cmp	r3, #0
 8005240:	d119      	bne.n	8005276 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	e07f      	b.n	8005346 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	2b02      	cmp	r3, #2
 800524c:	d003      	beq.n	8005256 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005252:	2b03      	cmp	r3, #3
 8005254:	d107      	bne.n	8005266 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005256:	4b3f      	ldr	r3, [pc, #252]	@ (8005354 <HAL_RCC_ClockConfig+0x1bc>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800525e:	2b00      	cmp	r3, #0
 8005260:	d109      	bne.n	8005276 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	e06f      	b.n	8005346 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005266:	4b3b      	ldr	r3, [pc, #236]	@ (8005354 <HAL_RCC_ClockConfig+0x1bc>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f003 0302 	and.w	r3, r3, #2
 800526e:	2b00      	cmp	r3, #0
 8005270:	d101      	bne.n	8005276 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	e067      	b.n	8005346 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005276:	4b37      	ldr	r3, [pc, #220]	@ (8005354 <HAL_RCC_ClockConfig+0x1bc>)
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	f023 0203 	bic.w	r2, r3, #3
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	4934      	ldr	r1, [pc, #208]	@ (8005354 <HAL_RCC_ClockConfig+0x1bc>)
 8005284:	4313      	orrs	r3, r2
 8005286:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005288:	f7fc fe9a 	bl	8001fc0 <HAL_GetTick>
 800528c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800528e:	e00a      	b.n	80052a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005290:	f7fc fe96 	bl	8001fc0 <HAL_GetTick>
 8005294:	4602      	mov	r2, r0
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	1ad3      	subs	r3, r2, r3
 800529a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800529e:	4293      	cmp	r3, r2
 80052a0:	d901      	bls.n	80052a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80052a2:	2303      	movs	r3, #3
 80052a4:	e04f      	b.n	8005346 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052a6:	4b2b      	ldr	r3, [pc, #172]	@ (8005354 <HAL_RCC_ClockConfig+0x1bc>)
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	f003 020c 	and.w	r2, r3, #12
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	009b      	lsls	r3, r3, #2
 80052b4:	429a      	cmp	r2, r3
 80052b6:	d1eb      	bne.n	8005290 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80052b8:	4b25      	ldr	r3, [pc, #148]	@ (8005350 <HAL_RCC_ClockConfig+0x1b8>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f003 0307 	and.w	r3, r3, #7
 80052c0:	683a      	ldr	r2, [r7, #0]
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d20c      	bcs.n	80052e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052c6:	4b22      	ldr	r3, [pc, #136]	@ (8005350 <HAL_RCC_ClockConfig+0x1b8>)
 80052c8:	683a      	ldr	r2, [r7, #0]
 80052ca:	b2d2      	uxtb	r2, r2
 80052cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052ce:	4b20      	ldr	r3, [pc, #128]	@ (8005350 <HAL_RCC_ClockConfig+0x1b8>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f003 0307 	and.w	r3, r3, #7
 80052d6:	683a      	ldr	r2, [r7, #0]
 80052d8:	429a      	cmp	r2, r3
 80052da:	d001      	beq.n	80052e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80052dc:	2301      	movs	r3, #1
 80052de:	e032      	b.n	8005346 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f003 0304 	and.w	r3, r3, #4
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d008      	beq.n	80052fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052ec:	4b19      	ldr	r3, [pc, #100]	@ (8005354 <HAL_RCC_ClockConfig+0x1bc>)
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	68db      	ldr	r3, [r3, #12]
 80052f8:	4916      	ldr	r1, [pc, #88]	@ (8005354 <HAL_RCC_ClockConfig+0x1bc>)
 80052fa:	4313      	orrs	r3, r2
 80052fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f003 0308 	and.w	r3, r3, #8
 8005306:	2b00      	cmp	r3, #0
 8005308:	d009      	beq.n	800531e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800530a:	4b12      	ldr	r3, [pc, #72]	@ (8005354 <HAL_RCC_ClockConfig+0x1bc>)
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	691b      	ldr	r3, [r3, #16]
 8005316:	00db      	lsls	r3, r3, #3
 8005318:	490e      	ldr	r1, [pc, #56]	@ (8005354 <HAL_RCC_ClockConfig+0x1bc>)
 800531a:	4313      	orrs	r3, r2
 800531c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800531e:	f000 f821 	bl	8005364 <HAL_RCC_GetSysClockFreq>
 8005322:	4602      	mov	r2, r0
 8005324:	4b0b      	ldr	r3, [pc, #44]	@ (8005354 <HAL_RCC_ClockConfig+0x1bc>)
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	091b      	lsrs	r3, r3, #4
 800532a:	f003 030f 	and.w	r3, r3, #15
 800532e:	490a      	ldr	r1, [pc, #40]	@ (8005358 <HAL_RCC_ClockConfig+0x1c0>)
 8005330:	5ccb      	ldrb	r3, [r1, r3]
 8005332:	fa22 f303 	lsr.w	r3, r2, r3
 8005336:	4a09      	ldr	r2, [pc, #36]	@ (800535c <HAL_RCC_ClockConfig+0x1c4>)
 8005338:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800533a:	4b09      	ldr	r3, [pc, #36]	@ (8005360 <HAL_RCC_ClockConfig+0x1c8>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4618      	mov	r0, r3
 8005340:	f7fc fdfa 	bl	8001f38 <HAL_InitTick>

  return HAL_OK;
 8005344:	2300      	movs	r3, #0
}
 8005346:	4618      	mov	r0, r3
 8005348:	3710      	adds	r7, #16
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}
 800534e:	bf00      	nop
 8005350:	40023c00 	.word	0x40023c00
 8005354:	40023800 	.word	0x40023800
 8005358:	0800bc08 	.word	0x0800bc08
 800535c:	20000004 	.word	0x20000004
 8005360:	20000008 	.word	0x20000008

08005364 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005364:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005368:	b090      	sub	sp, #64	@ 0x40
 800536a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800536c:	2300      	movs	r3, #0
 800536e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005370:	2300      	movs	r3, #0
 8005372:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005374:	2300      	movs	r3, #0
 8005376:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8005378:	2300      	movs	r3, #0
 800537a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800537c:	4b59      	ldr	r3, [pc, #356]	@ (80054e4 <HAL_RCC_GetSysClockFreq+0x180>)
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	f003 030c 	and.w	r3, r3, #12
 8005384:	2b08      	cmp	r3, #8
 8005386:	d00d      	beq.n	80053a4 <HAL_RCC_GetSysClockFreq+0x40>
 8005388:	2b08      	cmp	r3, #8
 800538a:	f200 80a1 	bhi.w	80054d0 <HAL_RCC_GetSysClockFreq+0x16c>
 800538e:	2b00      	cmp	r3, #0
 8005390:	d002      	beq.n	8005398 <HAL_RCC_GetSysClockFreq+0x34>
 8005392:	2b04      	cmp	r3, #4
 8005394:	d003      	beq.n	800539e <HAL_RCC_GetSysClockFreq+0x3a>
 8005396:	e09b      	b.n	80054d0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005398:	4b53      	ldr	r3, [pc, #332]	@ (80054e8 <HAL_RCC_GetSysClockFreq+0x184>)
 800539a:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 800539c:	e09b      	b.n	80054d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800539e:	4b53      	ldr	r3, [pc, #332]	@ (80054ec <HAL_RCC_GetSysClockFreq+0x188>)
 80053a0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80053a2:	e098      	b.n	80054d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80053a4:	4b4f      	ldr	r3, [pc, #316]	@ (80054e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80053ac:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80053ae:	4b4d      	ldr	r3, [pc, #308]	@ (80054e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d028      	beq.n	800540c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053ba:	4b4a      	ldr	r3, [pc, #296]	@ (80054e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	099b      	lsrs	r3, r3, #6
 80053c0:	2200      	movs	r2, #0
 80053c2:	623b      	str	r3, [r7, #32]
 80053c4:	627a      	str	r2, [r7, #36]	@ 0x24
 80053c6:	6a3b      	ldr	r3, [r7, #32]
 80053c8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80053cc:	2100      	movs	r1, #0
 80053ce:	4b47      	ldr	r3, [pc, #284]	@ (80054ec <HAL_RCC_GetSysClockFreq+0x188>)
 80053d0:	fb03 f201 	mul.w	r2, r3, r1
 80053d4:	2300      	movs	r3, #0
 80053d6:	fb00 f303 	mul.w	r3, r0, r3
 80053da:	4413      	add	r3, r2
 80053dc:	4a43      	ldr	r2, [pc, #268]	@ (80054ec <HAL_RCC_GetSysClockFreq+0x188>)
 80053de:	fba0 1202 	umull	r1, r2, r0, r2
 80053e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80053e4:	460a      	mov	r2, r1
 80053e6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80053e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80053ea:	4413      	add	r3, r2
 80053ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80053ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053f0:	2200      	movs	r2, #0
 80053f2:	61bb      	str	r3, [r7, #24]
 80053f4:	61fa      	str	r2, [r7, #28]
 80053f6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80053fa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80053fe:	f7fa feeb 	bl	80001d8 <__aeabi_uldivmod>
 8005402:	4602      	mov	r2, r0
 8005404:	460b      	mov	r3, r1
 8005406:	4613      	mov	r3, r2
 8005408:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800540a:	e053      	b.n	80054b4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800540c:	4b35      	ldr	r3, [pc, #212]	@ (80054e4 <HAL_RCC_GetSysClockFreq+0x180>)
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	099b      	lsrs	r3, r3, #6
 8005412:	2200      	movs	r2, #0
 8005414:	613b      	str	r3, [r7, #16]
 8005416:	617a      	str	r2, [r7, #20]
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800541e:	f04f 0b00 	mov.w	fp, #0
 8005422:	4652      	mov	r2, sl
 8005424:	465b      	mov	r3, fp
 8005426:	f04f 0000 	mov.w	r0, #0
 800542a:	f04f 0100 	mov.w	r1, #0
 800542e:	0159      	lsls	r1, r3, #5
 8005430:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005434:	0150      	lsls	r0, r2, #5
 8005436:	4602      	mov	r2, r0
 8005438:	460b      	mov	r3, r1
 800543a:	ebb2 080a 	subs.w	r8, r2, sl
 800543e:	eb63 090b 	sbc.w	r9, r3, fp
 8005442:	f04f 0200 	mov.w	r2, #0
 8005446:	f04f 0300 	mov.w	r3, #0
 800544a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800544e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005452:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005456:	ebb2 0408 	subs.w	r4, r2, r8
 800545a:	eb63 0509 	sbc.w	r5, r3, r9
 800545e:	f04f 0200 	mov.w	r2, #0
 8005462:	f04f 0300 	mov.w	r3, #0
 8005466:	00eb      	lsls	r3, r5, #3
 8005468:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800546c:	00e2      	lsls	r2, r4, #3
 800546e:	4614      	mov	r4, r2
 8005470:	461d      	mov	r5, r3
 8005472:	eb14 030a 	adds.w	r3, r4, sl
 8005476:	603b      	str	r3, [r7, #0]
 8005478:	eb45 030b 	adc.w	r3, r5, fp
 800547c:	607b      	str	r3, [r7, #4]
 800547e:	f04f 0200 	mov.w	r2, #0
 8005482:	f04f 0300 	mov.w	r3, #0
 8005486:	e9d7 4500 	ldrd	r4, r5, [r7]
 800548a:	4629      	mov	r1, r5
 800548c:	028b      	lsls	r3, r1, #10
 800548e:	4621      	mov	r1, r4
 8005490:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005494:	4621      	mov	r1, r4
 8005496:	028a      	lsls	r2, r1, #10
 8005498:	4610      	mov	r0, r2
 800549a:	4619      	mov	r1, r3
 800549c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800549e:	2200      	movs	r2, #0
 80054a0:	60bb      	str	r3, [r7, #8]
 80054a2:	60fa      	str	r2, [r7, #12]
 80054a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80054a8:	f7fa fe96 	bl	80001d8 <__aeabi_uldivmod>
 80054ac:	4602      	mov	r2, r0
 80054ae:	460b      	mov	r3, r1
 80054b0:	4613      	mov	r3, r2
 80054b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80054b4:	4b0b      	ldr	r3, [pc, #44]	@ (80054e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	0c1b      	lsrs	r3, r3, #16
 80054ba:	f003 0303 	and.w	r3, r3, #3
 80054be:	3301      	adds	r3, #1
 80054c0:	005b      	lsls	r3, r3, #1
 80054c2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 80054c4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80054c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80054cc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80054ce:	e002      	b.n	80054d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80054d0:	4b05      	ldr	r3, [pc, #20]	@ (80054e8 <HAL_RCC_GetSysClockFreq+0x184>)
 80054d2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80054d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80054d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80054d8:	4618      	mov	r0, r3
 80054da:	3740      	adds	r7, #64	@ 0x40
 80054dc:	46bd      	mov	sp, r7
 80054de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054e2:	bf00      	nop
 80054e4:	40023800 	.word	0x40023800
 80054e8:	00f42400 	.word	0x00f42400
 80054ec:	017d7840 	.word	0x017d7840

080054f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054f0:	b480      	push	{r7}
 80054f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80054f4:	4b03      	ldr	r3, [pc, #12]	@ (8005504 <HAL_RCC_GetHCLKFreq+0x14>)
 80054f6:	681b      	ldr	r3, [r3, #0]
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	46bd      	mov	sp, r7
 80054fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005500:	4770      	bx	lr
 8005502:	bf00      	nop
 8005504:	20000004 	.word	0x20000004

08005508 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800550c:	f7ff fff0 	bl	80054f0 <HAL_RCC_GetHCLKFreq>
 8005510:	4602      	mov	r2, r0
 8005512:	4b05      	ldr	r3, [pc, #20]	@ (8005528 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	0a9b      	lsrs	r3, r3, #10
 8005518:	f003 0307 	and.w	r3, r3, #7
 800551c:	4903      	ldr	r1, [pc, #12]	@ (800552c <HAL_RCC_GetPCLK1Freq+0x24>)
 800551e:	5ccb      	ldrb	r3, [r1, r3]
 8005520:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005524:	4618      	mov	r0, r3
 8005526:	bd80      	pop	{r7, pc}
 8005528:	40023800 	.word	0x40023800
 800552c:	0800bc18 	.word	0x0800bc18

08005530 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005534:	f7ff ffdc 	bl	80054f0 <HAL_RCC_GetHCLKFreq>
 8005538:	4602      	mov	r2, r0
 800553a:	4b05      	ldr	r3, [pc, #20]	@ (8005550 <HAL_RCC_GetPCLK2Freq+0x20>)
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	0b5b      	lsrs	r3, r3, #13
 8005540:	f003 0307 	and.w	r3, r3, #7
 8005544:	4903      	ldr	r1, [pc, #12]	@ (8005554 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005546:	5ccb      	ldrb	r3, [r1, r3]
 8005548:	fa22 f303 	lsr.w	r3, r2, r3
}
 800554c:	4618      	mov	r0, r3
 800554e:	bd80      	pop	{r7, pc}
 8005550:	40023800 	.word	0x40023800
 8005554:	0800bc18 	.word	0x0800bc18

08005558 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b082      	sub	sp, #8
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d101      	bne.n	800556a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005566:	2301      	movs	r3, #1
 8005568:	e07b      	b.n	8005662 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800556e:	2b00      	cmp	r3, #0
 8005570:	d108      	bne.n	8005584 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800557a:	d009      	beq.n	8005590 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2200      	movs	r2, #0
 8005580:	61da      	str	r2, [r3, #28]
 8005582:	e005      	b.n	8005590 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2200      	movs	r2, #0
 8005588:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2200      	movs	r2, #0
 800558e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2200      	movs	r2, #0
 8005594:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800559c:	b2db      	uxtb	r3, r3
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d106      	bne.n	80055b0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2200      	movs	r2, #0
 80055a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f7fc f9c0 	bl	8001930 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2202      	movs	r2, #2
 80055b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	681a      	ldr	r2, [r3, #0]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80055c6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	689b      	ldr	r3, [r3, #8]
 80055d4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80055d8:	431a      	orrs	r2, r3
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	68db      	ldr	r3, [r3, #12]
 80055de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80055e2:	431a      	orrs	r2, r3
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	691b      	ldr	r3, [r3, #16]
 80055e8:	f003 0302 	and.w	r3, r3, #2
 80055ec:	431a      	orrs	r2, r3
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	695b      	ldr	r3, [r3, #20]
 80055f2:	f003 0301 	and.w	r3, r3, #1
 80055f6:	431a      	orrs	r2, r3
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	699b      	ldr	r3, [r3, #24]
 80055fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005600:	431a      	orrs	r2, r3
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	69db      	ldr	r3, [r3, #28]
 8005606:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800560a:	431a      	orrs	r2, r3
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6a1b      	ldr	r3, [r3, #32]
 8005610:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005614:	ea42 0103 	orr.w	r1, r2, r3
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800561c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	430a      	orrs	r2, r1
 8005626:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	699b      	ldr	r3, [r3, #24]
 800562c:	0c1b      	lsrs	r3, r3, #16
 800562e:	f003 0104 	and.w	r1, r3, #4
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005636:	f003 0210 	and.w	r2, r3, #16
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	430a      	orrs	r2, r1
 8005640:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	69da      	ldr	r2, [r3, #28]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005650:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2200      	movs	r2, #0
 8005656:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2201      	movs	r2, #1
 800565c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005660:	2300      	movs	r3, #0
}
 8005662:	4618      	mov	r0, r3
 8005664:	3708      	adds	r7, #8
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}

0800566a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800566a:	b580      	push	{r7, lr}
 800566c:	b088      	sub	sp, #32
 800566e:	af00      	add	r7, sp, #0
 8005670:	60f8      	str	r0, [r7, #12]
 8005672:	60b9      	str	r1, [r7, #8]
 8005674:	603b      	str	r3, [r7, #0]
 8005676:	4613      	mov	r3, r2
 8005678:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800567a:	2300      	movs	r3, #0
 800567c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005684:	2b01      	cmp	r3, #1
 8005686:	d101      	bne.n	800568c <HAL_SPI_Transmit+0x22>
 8005688:	2302      	movs	r3, #2
 800568a:	e12d      	b.n	80058e8 <HAL_SPI_Transmit+0x27e>
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2201      	movs	r2, #1
 8005690:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005694:	f7fc fc94 	bl	8001fc0 <HAL_GetTick>
 8005698:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800569a:	88fb      	ldrh	r3, [r7, #6]
 800569c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80056a4:	b2db      	uxtb	r3, r3
 80056a6:	2b01      	cmp	r3, #1
 80056a8:	d002      	beq.n	80056b0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80056aa:	2302      	movs	r3, #2
 80056ac:	77fb      	strb	r3, [r7, #31]
    goto error;
 80056ae:	e116      	b.n	80058de <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d002      	beq.n	80056bc <HAL_SPI_Transmit+0x52>
 80056b6:	88fb      	ldrh	r3, [r7, #6]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d102      	bne.n	80056c2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80056bc:	2301      	movs	r3, #1
 80056be:	77fb      	strb	r3, [r7, #31]
    goto error;
 80056c0:	e10d      	b.n	80058de <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2203      	movs	r2, #3
 80056c6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2200      	movs	r2, #0
 80056ce:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	68ba      	ldr	r2, [r7, #8]
 80056d4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	88fa      	ldrh	r2, [r7, #6]
 80056da:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	88fa      	ldrh	r2, [r7, #6]
 80056e0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2200      	movs	r2, #0
 80056e6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2200      	movs	r2, #0
 80056ec:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2200      	movs	r2, #0
 80056f2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2200      	movs	r2, #0
 80056f8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2200      	movs	r2, #0
 80056fe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005708:	d10f      	bne.n	800572a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005718:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005728:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005734:	2b40      	cmp	r3, #64	@ 0x40
 8005736:	d007      	beq.n	8005748 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005746:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	68db      	ldr	r3, [r3, #12]
 800574c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005750:	d14f      	bne.n	80057f2 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d002      	beq.n	8005760 <HAL_SPI_Transmit+0xf6>
 800575a:	8afb      	ldrh	r3, [r7, #22]
 800575c:	2b01      	cmp	r3, #1
 800575e:	d142      	bne.n	80057e6 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005764:	881a      	ldrh	r2, [r3, #0]
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005770:	1c9a      	adds	r2, r3, #2
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800577a:	b29b      	uxth	r3, r3
 800577c:	3b01      	subs	r3, #1
 800577e:	b29a      	uxth	r2, r3
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005784:	e02f      	b.n	80057e6 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	f003 0302 	and.w	r3, r3, #2
 8005790:	2b02      	cmp	r3, #2
 8005792:	d112      	bne.n	80057ba <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005798:	881a      	ldrh	r2, [r3, #0]
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057a4:	1c9a      	adds	r2, r3, #2
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80057ae:	b29b      	uxth	r3, r3
 80057b0:	3b01      	subs	r3, #1
 80057b2:	b29a      	uxth	r2, r3
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	86da      	strh	r2, [r3, #54]	@ 0x36
 80057b8:	e015      	b.n	80057e6 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80057ba:	f7fc fc01 	bl	8001fc0 <HAL_GetTick>
 80057be:	4602      	mov	r2, r0
 80057c0:	69bb      	ldr	r3, [r7, #24]
 80057c2:	1ad3      	subs	r3, r2, r3
 80057c4:	683a      	ldr	r2, [r7, #0]
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d803      	bhi.n	80057d2 <HAL_SPI_Transmit+0x168>
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057d0:	d102      	bne.n	80057d8 <HAL_SPI_Transmit+0x16e>
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d106      	bne.n	80057e6 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80057d8:	2303      	movs	r3, #3
 80057da:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2201      	movs	r2, #1
 80057e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80057e4:	e07b      	b.n	80058de <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80057ea:	b29b      	uxth	r3, r3
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d1ca      	bne.n	8005786 <HAL_SPI_Transmit+0x11c>
 80057f0:	e050      	b.n	8005894 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d002      	beq.n	8005800 <HAL_SPI_Transmit+0x196>
 80057fa:	8afb      	ldrh	r3, [r7, #22]
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	d144      	bne.n	800588a <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	330c      	adds	r3, #12
 800580a:	7812      	ldrb	r2, [r2, #0]
 800580c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005812:	1c5a      	adds	r2, r3, #1
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800581c:	b29b      	uxth	r3, r3
 800581e:	3b01      	subs	r3, #1
 8005820:	b29a      	uxth	r2, r3
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005826:	e030      	b.n	800588a <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	f003 0302 	and.w	r3, r3, #2
 8005832:	2b02      	cmp	r3, #2
 8005834:	d113      	bne.n	800585e <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	330c      	adds	r3, #12
 8005840:	7812      	ldrb	r2, [r2, #0]
 8005842:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005848:	1c5a      	adds	r2, r3, #1
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005852:	b29b      	uxth	r3, r3
 8005854:	3b01      	subs	r3, #1
 8005856:	b29a      	uxth	r2, r3
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800585c:	e015      	b.n	800588a <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800585e:	f7fc fbaf 	bl	8001fc0 <HAL_GetTick>
 8005862:	4602      	mov	r2, r0
 8005864:	69bb      	ldr	r3, [r7, #24]
 8005866:	1ad3      	subs	r3, r2, r3
 8005868:	683a      	ldr	r2, [r7, #0]
 800586a:	429a      	cmp	r2, r3
 800586c:	d803      	bhi.n	8005876 <HAL_SPI_Transmit+0x20c>
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005874:	d102      	bne.n	800587c <HAL_SPI_Transmit+0x212>
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d106      	bne.n	800588a <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800587c:	2303      	movs	r3, #3
 800587e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2201      	movs	r2, #1
 8005884:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8005888:	e029      	b.n	80058de <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800588e:	b29b      	uxth	r3, r3
 8005890:	2b00      	cmp	r3, #0
 8005892:	d1c9      	bne.n	8005828 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005894:	69ba      	ldr	r2, [r7, #24]
 8005896:	6839      	ldr	r1, [r7, #0]
 8005898:	68f8      	ldr	r0, [r7, #12]
 800589a:	f000 fb73 	bl	8005f84 <SPI_EndRxTxTransaction>
 800589e:	4603      	mov	r3, r0
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d002      	beq.n	80058aa <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2220      	movs	r2, #32
 80058a8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d10a      	bne.n	80058c8 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80058b2:	2300      	movs	r3, #0
 80058b4:	613b      	str	r3, [r7, #16]
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	68db      	ldr	r3, [r3, #12]
 80058bc:	613b      	str	r3, [r7, #16]
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	689b      	ldr	r3, [r3, #8]
 80058c4:	613b      	str	r3, [r7, #16]
 80058c6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d002      	beq.n	80058d6 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80058d0:	2301      	movs	r3, #1
 80058d2:	77fb      	strb	r3, [r7, #31]
 80058d4:	e003      	b.n	80058de <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2201      	movs	r2, #1
 80058da:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2200      	movs	r2, #0
 80058e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80058e6:	7ffb      	ldrb	r3, [r7, #31]
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	3720      	adds	r7, #32
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}

080058f0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b08c      	sub	sp, #48	@ 0x30
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	60f8      	str	r0, [r7, #12]
 80058f8:	60b9      	str	r1, [r7, #8]
 80058fa:	607a      	str	r2, [r7, #4]
 80058fc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80058fe:	2301      	movs	r3, #1
 8005900:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005902:	2300      	movs	r3, #0
 8005904:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800590e:	2b01      	cmp	r3, #1
 8005910:	d101      	bne.n	8005916 <HAL_SPI_TransmitReceive+0x26>
 8005912:	2302      	movs	r3, #2
 8005914:	e198      	b.n	8005c48 <HAL_SPI_TransmitReceive+0x358>
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	2201      	movs	r2, #1
 800591a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800591e:	f7fc fb4f 	bl	8001fc0 <HAL_GetTick>
 8005922:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800592a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005934:	887b      	ldrh	r3, [r7, #2]
 8005936:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005938:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800593c:	2b01      	cmp	r3, #1
 800593e:	d00f      	beq.n	8005960 <HAL_SPI_TransmitReceive+0x70>
 8005940:	69fb      	ldr	r3, [r7, #28]
 8005942:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005946:	d107      	bne.n	8005958 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	689b      	ldr	r3, [r3, #8]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d103      	bne.n	8005958 <HAL_SPI_TransmitReceive+0x68>
 8005950:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005954:	2b04      	cmp	r3, #4
 8005956:	d003      	beq.n	8005960 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005958:	2302      	movs	r3, #2
 800595a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800595e:	e16d      	b.n	8005c3c <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d005      	beq.n	8005972 <HAL_SPI_TransmitReceive+0x82>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d002      	beq.n	8005972 <HAL_SPI_TransmitReceive+0x82>
 800596c:	887b      	ldrh	r3, [r7, #2]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d103      	bne.n	800597a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005972:	2301      	movs	r3, #1
 8005974:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8005978:	e160      	b.n	8005c3c <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005980:	b2db      	uxtb	r3, r3
 8005982:	2b04      	cmp	r3, #4
 8005984:	d003      	beq.n	800598e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	2205      	movs	r2, #5
 800598a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2200      	movs	r2, #0
 8005992:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	687a      	ldr	r2, [r7, #4]
 8005998:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	887a      	ldrh	r2, [r7, #2]
 800599e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	887a      	ldrh	r2, [r7, #2]
 80059a4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	68ba      	ldr	r2, [r7, #8]
 80059aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	887a      	ldrh	r2, [r7, #2]
 80059b0:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	887a      	ldrh	r2, [r7, #2]
 80059b6:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2200      	movs	r2, #0
 80059bc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2200      	movs	r2, #0
 80059c2:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059ce:	2b40      	cmp	r3, #64	@ 0x40
 80059d0:	d007      	beq.n	80059e2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	681a      	ldr	r2, [r3, #0]
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80059e0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	68db      	ldr	r3, [r3, #12]
 80059e6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80059ea:	d17c      	bne.n	8005ae6 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d002      	beq.n	80059fa <HAL_SPI_TransmitReceive+0x10a>
 80059f4:	8b7b      	ldrh	r3, [r7, #26]
 80059f6:	2b01      	cmp	r3, #1
 80059f8:	d16a      	bne.n	8005ad0 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059fe:	881a      	ldrh	r2, [r3, #0]
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a0a:	1c9a      	adds	r2, r3, #2
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	3b01      	subs	r3, #1
 8005a18:	b29a      	uxth	r2, r3
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a1e:	e057      	b.n	8005ad0 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	f003 0302 	and.w	r3, r3, #2
 8005a2a:	2b02      	cmp	r3, #2
 8005a2c:	d11b      	bne.n	8005a66 <HAL_SPI_TransmitReceive+0x176>
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a32:	b29b      	uxth	r3, r3
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d016      	beq.n	8005a66 <HAL_SPI_TransmitReceive+0x176>
 8005a38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a3a:	2b01      	cmp	r3, #1
 8005a3c:	d113      	bne.n	8005a66 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a42:	881a      	ldrh	r2, [r3, #0]
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a4e:	1c9a      	adds	r2, r3, #2
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	3b01      	subs	r3, #1
 8005a5c:	b29a      	uxth	r2, r3
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005a62:	2300      	movs	r3, #0
 8005a64:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	689b      	ldr	r3, [r3, #8]
 8005a6c:	f003 0301 	and.w	r3, r3, #1
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d119      	bne.n	8005aa8 <HAL_SPI_TransmitReceive+0x1b8>
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d014      	beq.n	8005aa8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	68da      	ldr	r2, [r3, #12]
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a88:	b292      	uxth	r2, r2
 8005a8a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a90:	1c9a      	adds	r2, r3, #2
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a9a:	b29b      	uxth	r3, r3
 8005a9c:	3b01      	subs	r3, #1
 8005a9e:	b29a      	uxth	r2, r3
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005aa8:	f7fc fa8a 	bl	8001fc0 <HAL_GetTick>
 8005aac:	4602      	mov	r2, r0
 8005aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ab0:	1ad3      	subs	r3, r2, r3
 8005ab2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005ab4:	429a      	cmp	r2, r3
 8005ab6:	d80b      	bhi.n	8005ad0 <HAL_SPI_TransmitReceive+0x1e0>
 8005ab8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005aba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005abe:	d007      	beq.n	8005ad0 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8005ac0:	2303      	movs	r3, #3
 8005ac2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2201      	movs	r2, #1
 8005aca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8005ace:	e0b5      	b.n	8005c3c <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005ad4:	b29b      	uxth	r3, r3
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d1a2      	bne.n	8005a20 <HAL_SPI_TransmitReceive+0x130>
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ade:	b29b      	uxth	r3, r3
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d19d      	bne.n	8005a20 <HAL_SPI_TransmitReceive+0x130>
 8005ae4:	e080      	b.n	8005be8 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d002      	beq.n	8005af4 <HAL_SPI_TransmitReceive+0x204>
 8005aee:	8b7b      	ldrh	r3, [r7, #26]
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d16f      	bne.n	8005bd4 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	330c      	adds	r3, #12
 8005afe:	7812      	ldrb	r2, [r2, #0]
 8005b00:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b06:	1c5a      	adds	r2, r3, #1
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b10:	b29b      	uxth	r3, r3
 8005b12:	3b01      	subs	r3, #1
 8005b14:	b29a      	uxth	r2, r3
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b1a:	e05b      	b.n	8005bd4 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	f003 0302 	and.w	r3, r3, #2
 8005b26:	2b02      	cmp	r3, #2
 8005b28:	d11c      	bne.n	8005b64 <HAL_SPI_TransmitReceive+0x274>
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b2e:	b29b      	uxth	r3, r3
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d017      	beq.n	8005b64 <HAL_SPI_TransmitReceive+0x274>
 8005b34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b36:	2b01      	cmp	r3, #1
 8005b38:	d114      	bne.n	8005b64 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	330c      	adds	r3, #12
 8005b44:	7812      	ldrb	r2, [r2, #0]
 8005b46:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b4c:	1c5a      	adds	r2, r3, #1
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b56:	b29b      	uxth	r3, r3
 8005b58:	3b01      	subs	r3, #1
 8005b5a:	b29a      	uxth	r2, r3
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005b60:	2300      	movs	r3, #0
 8005b62:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	f003 0301 	and.w	r3, r3, #1
 8005b6e:	2b01      	cmp	r3, #1
 8005b70:	d119      	bne.n	8005ba6 <HAL_SPI_TransmitReceive+0x2b6>
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b76:	b29b      	uxth	r3, r3
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d014      	beq.n	8005ba6 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	68da      	ldr	r2, [r3, #12]
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b86:	b2d2      	uxtb	r2, r2
 8005b88:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b8e:	1c5a      	adds	r2, r3, #1
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b98:	b29b      	uxth	r3, r3
 8005b9a:	3b01      	subs	r3, #1
 8005b9c:	b29a      	uxth	r2, r3
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005ba6:	f7fc fa0b 	bl	8001fc0 <HAL_GetTick>
 8005baa:	4602      	mov	r2, r0
 8005bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bae:	1ad3      	subs	r3, r2, r3
 8005bb0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005bb2:	429a      	cmp	r2, r3
 8005bb4:	d803      	bhi.n	8005bbe <HAL_SPI_TransmitReceive+0x2ce>
 8005bb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bbc:	d102      	bne.n	8005bc4 <HAL_SPI_TransmitReceive+0x2d4>
 8005bbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d107      	bne.n	8005bd4 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8005bc4:	2303      	movs	r3, #3
 8005bc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2201      	movs	r2, #1
 8005bce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8005bd2:	e033      	b.n	8005c3c <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005bd8:	b29b      	uxth	r3, r3
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d19e      	bne.n	8005b1c <HAL_SPI_TransmitReceive+0x22c>
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005be2:	b29b      	uxth	r3, r3
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d199      	bne.n	8005b1c <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005be8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005bea:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005bec:	68f8      	ldr	r0, [r7, #12]
 8005bee:	f000 f9c9 	bl	8005f84 <SPI_EndRxTxTransaction>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d006      	beq.n	8005c06 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2220      	movs	r2, #32
 8005c02:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8005c04:	e01a      	b.n	8005c3c <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	689b      	ldr	r3, [r3, #8]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d10a      	bne.n	8005c24 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c0e:	2300      	movs	r3, #0
 8005c10:	617b      	str	r3, [r7, #20]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	68db      	ldr	r3, [r3, #12]
 8005c18:	617b      	str	r3, [r7, #20]
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	617b      	str	r3, [r7, #20]
 8005c22:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d003      	beq.n	8005c34 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c32:	e003      	b.n	8005c3c <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2201      	movs	r2, #1
 8005c38:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8005c44:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	3730      	adds	r7, #48	@ 0x30
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}

08005c50 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b088      	sub	sp, #32
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	689b      	ldr	r3, [r3, #8]
 8005c66:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005c68:	69bb      	ldr	r3, [r7, #24]
 8005c6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d10e      	bne.n	8005c90 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005c72:	69bb      	ldr	r3, [r7, #24]
 8005c74:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d009      	beq.n	8005c90 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005c7c:	69fb      	ldr	r3, [r7, #28]
 8005c7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d004      	beq.n	8005c90 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	4798      	blx	r3
    return;
 8005c8e:	e0ce      	b.n	8005e2e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005c90:	69bb      	ldr	r3, [r7, #24]
 8005c92:	f003 0302 	and.w	r3, r3, #2
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d009      	beq.n	8005cae <HAL_SPI_IRQHandler+0x5e>
 8005c9a:	69fb      	ldr	r3, [r7, #28]
 8005c9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d004      	beq.n	8005cae <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	4798      	blx	r3
    return;
 8005cac:	e0bf      	b.n	8005e2e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005cae:	69bb      	ldr	r3, [r7, #24]
 8005cb0:	f003 0320 	and.w	r3, r3, #32
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d10a      	bne.n	8005cce <HAL_SPI_IRQHandler+0x7e>
 8005cb8:	69bb      	ldr	r3, [r7, #24]
 8005cba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d105      	bne.n	8005cce <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005cc2:	69bb      	ldr	r3, [r7, #24]
 8005cc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	f000 80b0 	beq.w	8005e2e <HAL_SPI_IRQHandler+0x1de>
 8005cce:	69fb      	ldr	r3, [r7, #28]
 8005cd0:	f003 0320 	and.w	r3, r3, #32
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	f000 80aa 	beq.w	8005e2e <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005cda:	69bb      	ldr	r3, [r7, #24]
 8005cdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d023      	beq.n	8005d2c <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005cea:	b2db      	uxtb	r3, r3
 8005cec:	2b03      	cmp	r3, #3
 8005cee:	d011      	beq.n	8005d14 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cf4:	f043 0204 	orr.w	r2, r3, #4
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	617b      	str	r3, [r7, #20]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	68db      	ldr	r3, [r3, #12]
 8005d06:	617b      	str	r3, [r7, #20]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	617b      	str	r3, [r7, #20]
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	e00b      	b.n	8005d2c <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005d14:	2300      	movs	r3, #0
 8005d16:	613b      	str	r3, [r7, #16]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	68db      	ldr	r3, [r3, #12]
 8005d1e:	613b      	str	r3, [r7, #16]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	689b      	ldr	r3, [r3, #8]
 8005d26:	613b      	str	r3, [r7, #16]
 8005d28:	693b      	ldr	r3, [r7, #16]
        return;
 8005d2a:	e080      	b.n	8005e2e <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005d2c:	69bb      	ldr	r3, [r7, #24]
 8005d2e:	f003 0320 	and.w	r3, r3, #32
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d014      	beq.n	8005d60 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d3a:	f043 0201 	orr.w	r2, r3, #1
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005d42:	2300      	movs	r3, #0
 8005d44:	60fb      	str	r3, [r7, #12]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	60fb      	str	r3, [r7, #12]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	681a      	ldr	r2, [r3, #0]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005d5c:	601a      	str	r2, [r3, #0]
 8005d5e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005d60:	69bb      	ldr	r3, [r7, #24]
 8005d62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d00c      	beq.n	8005d84 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d6e:	f043 0208 	orr.w	r2, r3, #8
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005d76:	2300      	movs	r3, #0
 8005d78:	60bb      	str	r3, [r7, #8]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	60bb      	str	r3, [r7, #8]
 8005d82:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d04f      	beq.n	8005e2c <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	685a      	ldr	r2, [r3, #4]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005d9a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2201      	movs	r2, #1
 8005da0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005da4:	69fb      	ldr	r3, [r7, #28]
 8005da6:	f003 0302 	and.w	r3, r3, #2
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d104      	bne.n	8005db8 <HAL_SPI_IRQHandler+0x168>
 8005dae:	69fb      	ldr	r3, [r7, #28]
 8005db0:	f003 0301 	and.w	r3, r3, #1
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d034      	beq.n	8005e22 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	685a      	ldr	r2, [r3, #4]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f022 0203 	bic.w	r2, r2, #3
 8005dc6:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d011      	beq.n	8005df4 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005dd4:	4a17      	ldr	r2, [pc, #92]	@ (8005e34 <HAL_SPI_IRQHandler+0x1e4>)
 8005dd6:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ddc:	4618      	mov	r0, r3
 8005dde:	f7fd f8b9 	bl	8002f54 <HAL_DMA_Abort_IT>
 8005de2:	4603      	mov	r3, r0
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d005      	beq.n	8005df4 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dec:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d016      	beq.n	8005e2a <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e00:	4a0c      	ldr	r2, [pc, #48]	@ (8005e34 <HAL_SPI_IRQHandler+0x1e4>)
 8005e02:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e08:	4618      	mov	r0, r3
 8005e0a:	f7fd f8a3 	bl	8002f54 <HAL_DMA_Abort_IT>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d00a      	beq.n	8005e2a <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e18:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8005e20:	e003      	b.n	8005e2a <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f000 f808 	bl	8005e38 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005e28:	e000      	b.n	8005e2c <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8005e2a:	bf00      	nop
    return;
 8005e2c:	bf00      	nop
  }
}
 8005e2e:	3720      	adds	r7, #32
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bd80      	pop	{r7, pc}
 8005e34:	08005e4d 	.word	0x08005e4d

08005e38 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b083      	sub	sp, #12
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005e40:	bf00      	nop
 8005e42:	370c      	adds	r7, #12
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr

08005e4c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b084      	sub	sp, #16
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e58:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	2200      	movs	r2, #0
 8005e64:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005e66:	68f8      	ldr	r0, [r7, #12]
 8005e68:	f7ff ffe6 	bl	8005e38 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005e6c:	bf00      	nop
 8005e6e:	3710      	adds	r7, #16
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd80      	pop	{r7, pc}

08005e74 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b088      	sub	sp, #32
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	60f8      	str	r0, [r7, #12]
 8005e7c:	60b9      	str	r1, [r7, #8]
 8005e7e:	603b      	str	r3, [r7, #0]
 8005e80:	4613      	mov	r3, r2
 8005e82:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005e84:	f7fc f89c 	bl	8001fc0 <HAL_GetTick>
 8005e88:	4602      	mov	r2, r0
 8005e8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e8c:	1a9b      	subs	r3, r3, r2
 8005e8e:	683a      	ldr	r2, [r7, #0]
 8005e90:	4413      	add	r3, r2
 8005e92:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005e94:	f7fc f894 	bl	8001fc0 <HAL_GetTick>
 8005e98:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005e9a:	4b39      	ldr	r3, [pc, #228]	@ (8005f80 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	015b      	lsls	r3, r3, #5
 8005ea0:	0d1b      	lsrs	r3, r3, #20
 8005ea2:	69fa      	ldr	r2, [r7, #28]
 8005ea4:	fb02 f303 	mul.w	r3, r2, r3
 8005ea8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005eaa:	e054      	b.n	8005f56 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eb2:	d050      	beq.n	8005f56 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005eb4:	f7fc f884 	bl	8001fc0 <HAL_GetTick>
 8005eb8:	4602      	mov	r2, r0
 8005eba:	69bb      	ldr	r3, [r7, #24]
 8005ebc:	1ad3      	subs	r3, r2, r3
 8005ebe:	69fa      	ldr	r2, [r7, #28]
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	d902      	bls.n	8005eca <SPI_WaitFlagStateUntilTimeout+0x56>
 8005ec4:	69fb      	ldr	r3, [r7, #28]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d13d      	bne.n	8005f46 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	685a      	ldr	r2, [r3, #4]
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005ed8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005ee2:	d111      	bne.n	8005f08 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005eec:	d004      	beq.n	8005ef8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	689b      	ldr	r3, [r3, #8]
 8005ef2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ef6:	d107      	bne.n	8005f08 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	681a      	ldr	r2, [r3, #0]
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005f06:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f0c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f10:	d10f      	bne.n	8005f32 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	681a      	ldr	r2, [r3, #0]
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005f20:	601a      	str	r2, [r3, #0]
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	681a      	ldr	r2, [r3, #0]
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005f30:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2201      	movs	r2, #1
 8005f36:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005f42:	2303      	movs	r3, #3
 8005f44:	e017      	b.n	8005f76 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d101      	bne.n	8005f50 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	3b01      	subs	r3, #1
 8005f54:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	689a      	ldr	r2, [r3, #8]
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	4013      	ands	r3, r2
 8005f60:	68ba      	ldr	r2, [r7, #8]
 8005f62:	429a      	cmp	r2, r3
 8005f64:	bf0c      	ite	eq
 8005f66:	2301      	moveq	r3, #1
 8005f68:	2300      	movne	r3, #0
 8005f6a:	b2db      	uxtb	r3, r3
 8005f6c:	461a      	mov	r2, r3
 8005f6e:	79fb      	ldrb	r3, [r7, #7]
 8005f70:	429a      	cmp	r2, r3
 8005f72:	d19b      	bne.n	8005eac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005f74:	2300      	movs	r3, #0
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3720      	adds	r7, #32
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}
 8005f7e:	bf00      	nop
 8005f80:	20000004 	.word	0x20000004

08005f84 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b088      	sub	sp, #32
 8005f88:	af02      	add	r7, sp, #8
 8005f8a:	60f8      	str	r0, [r7, #12]
 8005f8c:	60b9      	str	r1, [r7, #8]
 8005f8e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	9300      	str	r3, [sp, #0]
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	2201      	movs	r2, #1
 8005f98:	2102      	movs	r1, #2
 8005f9a:	68f8      	ldr	r0, [r7, #12]
 8005f9c:	f7ff ff6a 	bl	8005e74 <SPI_WaitFlagStateUntilTimeout>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d007      	beq.n	8005fb6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005faa:	f043 0220 	orr.w	r2, r3, #32
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005fb2:	2303      	movs	r3, #3
 8005fb4:	e032      	b.n	800601c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005fb6:	4b1b      	ldr	r3, [pc, #108]	@ (8006024 <SPI_EndRxTxTransaction+0xa0>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a1b      	ldr	r2, [pc, #108]	@ (8006028 <SPI_EndRxTxTransaction+0xa4>)
 8005fbc:	fba2 2303 	umull	r2, r3, r2, r3
 8005fc0:	0d5b      	lsrs	r3, r3, #21
 8005fc2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005fc6:	fb02 f303 	mul.w	r3, r2, r3
 8005fca:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005fd4:	d112      	bne.n	8005ffc <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	9300      	str	r3, [sp, #0]
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	2180      	movs	r1, #128	@ 0x80
 8005fe0:	68f8      	ldr	r0, [r7, #12]
 8005fe2:	f7ff ff47 	bl	8005e74 <SPI_WaitFlagStateUntilTimeout>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d016      	beq.n	800601a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ff0:	f043 0220 	orr.w	r2, r3, #32
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005ff8:	2303      	movs	r3, #3
 8005ffa:	e00f      	b.n	800601c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d00a      	beq.n	8006018 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	3b01      	subs	r3, #1
 8006006:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	689b      	ldr	r3, [r3, #8]
 800600e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006012:	2b80      	cmp	r3, #128	@ 0x80
 8006014:	d0f2      	beq.n	8005ffc <SPI_EndRxTxTransaction+0x78>
 8006016:	e000      	b.n	800601a <SPI_EndRxTxTransaction+0x96>
        break;
 8006018:	bf00      	nop
  }

  return HAL_OK;
 800601a:	2300      	movs	r3, #0
}
 800601c:	4618      	mov	r0, r3
 800601e:	3718      	adds	r7, #24
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}
 8006024:	20000004 	.word	0x20000004
 8006028:	165e9f81 	.word	0x165e9f81

0800602c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b082      	sub	sp, #8
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d101      	bne.n	800603e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800603a:	2301      	movs	r3, #1
 800603c:	e041      	b.n	80060c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006044:	b2db      	uxtb	r3, r3
 8006046:	2b00      	cmp	r3, #0
 8006048:	d106      	bne.n	8006058 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2200      	movs	r2, #0
 800604e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f7fb fe64 	bl	8001d20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2202      	movs	r2, #2
 800605c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681a      	ldr	r2, [r3, #0]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	3304      	adds	r3, #4
 8006068:	4619      	mov	r1, r3
 800606a:	4610      	mov	r0, r2
 800606c:	f000 fab4 	bl	80065d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2201      	movs	r2, #1
 8006074:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2201      	movs	r2, #1
 800607c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2201      	movs	r2, #1
 8006084:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2201      	movs	r2, #1
 800608c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2201      	movs	r2, #1
 8006094:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2201      	movs	r2, #1
 800609c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2201      	movs	r2, #1
 80060a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2201      	movs	r2, #1
 80060ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2201      	movs	r2, #1
 80060b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2201      	movs	r2, #1
 80060bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80060c0:	2300      	movs	r3, #0
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	3708      	adds	r7, #8
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}
	...

080060cc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b085      	sub	sp, #20
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80060da:	b2db      	uxtb	r3, r3
 80060dc:	2b01      	cmp	r3, #1
 80060de:	d001      	beq.n	80060e4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80060e0:	2301      	movs	r3, #1
 80060e2:	e03c      	b.n	800615e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2202      	movs	r2, #2
 80060e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a1e      	ldr	r2, [pc, #120]	@ (800616c <HAL_TIM_Base_Start+0xa0>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d018      	beq.n	8006128 <HAL_TIM_Base_Start+0x5c>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060fe:	d013      	beq.n	8006128 <HAL_TIM_Base_Start+0x5c>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a1a      	ldr	r2, [pc, #104]	@ (8006170 <HAL_TIM_Base_Start+0xa4>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d00e      	beq.n	8006128 <HAL_TIM_Base_Start+0x5c>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a19      	ldr	r2, [pc, #100]	@ (8006174 <HAL_TIM_Base_Start+0xa8>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d009      	beq.n	8006128 <HAL_TIM_Base_Start+0x5c>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a17      	ldr	r2, [pc, #92]	@ (8006178 <HAL_TIM_Base_Start+0xac>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d004      	beq.n	8006128 <HAL_TIM_Base_Start+0x5c>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a16      	ldr	r2, [pc, #88]	@ (800617c <HAL_TIM_Base_Start+0xb0>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d111      	bne.n	800614c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	689b      	ldr	r3, [r3, #8]
 800612e:	f003 0307 	and.w	r3, r3, #7
 8006132:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2b06      	cmp	r3, #6
 8006138:	d010      	beq.n	800615c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	681a      	ldr	r2, [r3, #0]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f042 0201 	orr.w	r2, r2, #1
 8006148:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800614a:	e007      	b.n	800615c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	681a      	ldr	r2, [r3, #0]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f042 0201 	orr.w	r2, r2, #1
 800615a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800615c:	2300      	movs	r3, #0
}
 800615e:	4618      	mov	r0, r3
 8006160:	3714      	adds	r7, #20
 8006162:	46bd      	mov	sp, r7
 8006164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006168:	4770      	bx	lr
 800616a:	bf00      	nop
 800616c:	40010000 	.word	0x40010000
 8006170:	40000400 	.word	0x40000400
 8006174:	40000800 	.word	0x40000800
 8006178:	40000c00 	.word	0x40000c00
 800617c:	40014000 	.word	0x40014000

08006180 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b084      	sub	sp, #16
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	68db      	ldr	r3, [r3, #12]
 800618e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	691b      	ldr	r3, [r3, #16]
 8006196:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	f003 0302 	and.w	r3, r3, #2
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d020      	beq.n	80061e4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	f003 0302 	and.w	r3, r3, #2
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d01b      	beq.n	80061e4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f06f 0202 	mvn.w	r2, #2
 80061b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2201      	movs	r2, #1
 80061ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	699b      	ldr	r3, [r3, #24]
 80061c2:	f003 0303 	and.w	r3, r3, #3
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d003      	beq.n	80061d2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f000 f9e5 	bl	800659a <HAL_TIM_IC_CaptureCallback>
 80061d0:	e005      	b.n	80061de <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f000 f9d7 	bl	8006586 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061d8:	6878      	ldr	r0, [r7, #4]
 80061da:	f000 f9e8 	bl	80065ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2200      	movs	r2, #0
 80061e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	f003 0304 	and.w	r3, r3, #4
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d020      	beq.n	8006230 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	f003 0304 	and.w	r3, r3, #4
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d01b      	beq.n	8006230 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f06f 0204 	mvn.w	r2, #4
 8006200:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2202      	movs	r2, #2
 8006206:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	699b      	ldr	r3, [r3, #24]
 800620e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006212:	2b00      	cmp	r3, #0
 8006214:	d003      	beq.n	800621e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f000 f9bf 	bl	800659a <HAL_TIM_IC_CaptureCallback>
 800621c:	e005      	b.n	800622a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f000 f9b1 	bl	8006586 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	f000 f9c2 	bl	80065ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2200      	movs	r2, #0
 800622e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	f003 0308 	and.w	r3, r3, #8
 8006236:	2b00      	cmp	r3, #0
 8006238:	d020      	beq.n	800627c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	f003 0308 	and.w	r3, r3, #8
 8006240:	2b00      	cmp	r3, #0
 8006242:	d01b      	beq.n	800627c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f06f 0208 	mvn.w	r2, #8
 800624c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2204      	movs	r2, #4
 8006252:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	69db      	ldr	r3, [r3, #28]
 800625a:	f003 0303 	and.w	r3, r3, #3
 800625e:	2b00      	cmp	r3, #0
 8006260:	d003      	beq.n	800626a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f000 f999 	bl	800659a <HAL_TIM_IC_CaptureCallback>
 8006268:	e005      	b.n	8006276 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f000 f98b 	bl	8006586 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f000 f99c 	bl	80065ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2200      	movs	r2, #0
 800627a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	f003 0310 	and.w	r3, r3, #16
 8006282:	2b00      	cmp	r3, #0
 8006284:	d020      	beq.n	80062c8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	f003 0310 	and.w	r3, r3, #16
 800628c:	2b00      	cmp	r3, #0
 800628e:	d01b      	beq.n	80062c8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f06f 0210 	mvn.w	r2, #16
 8006298:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2208      	movs	r2, #8
 800629e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	69db      	ldr	r3, [r3, #28]
 80062a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d003      	beq.n	80062b6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f000 f973 	bl	800659a <HAL_TIM_IC_CaptureCallback>
 80062b4:	e005      	b.n	80062c2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f000 f965 	bl	8006586 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	f000 f976 	bl	80065ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2200      	movs	r2, #0
 80062c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	f003 0301 	and.w	r3, r3, #1
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d00c      	beq.n	80062ec <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	f003 0301 	and.w	r3, r3, #1
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d007      	beq.n	80062ec <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f06f 0201 	mvn.w	r2, #1
 80062e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f000 f943 	bl	8006572 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d00c      	beq.n	8006310 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d007      	beq.n	8006310 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006308:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f000 fb94 	bl	8006a38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006316:	2b00      	cmp	r3, #0
 8006318:	d00c      	beq.n	8006334 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006320:	2b00      	cmp	r3, #0
 8006322:	d007      	beq.n	8006334 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800632c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f000 f947 	bl	80065c2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	f003 0320 	and.w	r3, r3, #32
 800633a:	2b00      	cmp	r3, #0
 800633c:	d00c      	beq.n	8006358 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	f003 0320 	and.w	r3, r3, #32
 8006344:	2b00      	cmp	r3, #0
 8006346:	d007      	beq.n	8006358 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f06f 0220 	mvn.w	r2, #32
 8006350:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f000 fb66 	bl	8006a24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006358:	bf00      	nop
 800635a:	3710      	adds	r7, #16
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}

08006360 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b084      	sub	sp, #16
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800636a:	2300      	movs	r3, #0
 800636c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006374:	2b01      	cmp	r3, #1
 8006376:	d101      	bne.n	800637c <HAL_TIM_ConfigClockSource+0x1c>
 8006378:	2302      	movs	r3, #2
 800637a:	e0b4      	b.n	80064e6 <HAL_TIM_ConfigClockSource+0x186>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2201      	movs	r2, #1
 8006380:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2202      	movs	r2, #2
 8006388:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	689b      	ldr	r3, [r3, #8]
 8006392:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800639a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80063a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	68ba      	ldr	r2, [r7, #8]
 80063aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80063b4:	d03e      	beq.n	8006434 <HAL_TIM_ConfigClockSource+0xd4>
 80063b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80063ba:	f200 8087 	bhi.w	80064cc <HAL_TIM_ConfigClockSource+0x16c>
 80063be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063c2:	f000 8086 	beq.w	80064d2 <HAL_TIM_ConfigClockSource+0x172>
 80063c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063ca:	d87f      	bhi.n	80064cc <HAL_TIM_ConfigClockSource+0x16c>
 80063cc:	2b70      	cmp	r3, #112	@ 0x70
 80063ce:	d01a      	beq.n	8006406 <HAL_TIM_ConfigClockSource+0xa6>
 80063d0:	2b70      	cmp	r3, #112	@ 0x70
 80063d2:	d87b      	bhi.n	80064cc <HAL_TIM_ConfigClockSource+0x16c>
 80063d4:	2b60      	cmp	r3, #96	@ 0x60
 80063d6:	d050      	beq.n	800647a <HAL_TIM_ConfigClockSource+0x11a>
 80063d8:	2b60      	cmp	r3, #96	@ 0x60
 80063da:	d877      	bhi.n	80064cc <HAL_TIM_ConfigClockSource+0x16c>
 80063dc:	2b50      	cmp	r3, #80	@ 0x50
 80063de:	d03c      	beq.n	800645a <HAL_TIM_ConfigClockSource+0xfa>
 80063e0:	2b50      	cmp	r3, #80	@ 0x50
 80063e2:	d873      	bhi.n	80064cc <HAL_TIM_ConfigClockSource+0x16c>
 80063e4:	2b40      	cmp	r3, #64	@ 0x40
 80063e6:	d058      	beq.n	800649a <HAL_TIM_ConfigClockSource+0x13a>
 80063e8:	2b40      	cmp	r3, #64	@ 0x40
 80063ea:	d86f      	bhi.n	80064cc <HAL_TIM_ConfigClockSource+0x16c>
 80063ec:	2b30      	cmp	r3, #48	@ 0x30
 80063ee:	d064      	beq.n	80064ba <HAL_TIM_ConfigClockSource+0x15a>
 80063f0:	2b30      	cmp	r3, #48	@ 0x30
 80063f2:	d86b      	bhi.n	80064cc <HAL_TIM_ConfigClockSource+0x16c>
 80063f4:	2b20      	cmp	r3, #32
 80063f6:	d060      	beq.n	80064ba <HAL_TIM_ConfigClockSource+0x15a>
 80063f8:	2b20      	cmp	r3, #32
 80063fa:	d867      	bhi.n	80064cc <HAL_TIM_ConfigClockSource+0x16c>
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d05c      	beq.n	80064ba <HAL_TIM_ConfigClockSource+0x15a>
 8006400:	2b10      	cmp	r3, #16
 8006402:	d05a      	beq.n	80064ba <HAL_TIM_ConfigClockSource+0x15a>
 8006404:	e062      	b.n	80064cc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006416:	f000 fa76 	bl	8006906 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	689b      	ldr	r3, [r3, #8]
 8006420:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006428:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	68ba      	ldr	r2, [r7, #8]
 8006430:	609a      	str	r2, [r3, #8]
      break;
 8006432:	e04f      	b.n	80064d4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006444:	f000 fa5f 	bl	8006906 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	689a      	ldr	r2, [r3, #8]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006456:	609a      	str	r2, [r3, #8]
      break;
 8006458:	e03c      	b.n	80064d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006466:	461a      	mov	r2, r3
 8006468:	f000 f9d3 	bl	8006812 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	2150      	movs	r1, #80	@ 0x50
 8006472:	4618      	mov	r0, r3
 8006474:	f000 fa2c 	bl	80068d0 <TIM_ITRx_SetConfig>
      break;
 8006478:	e02c      	b.n	80064d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006486:	461a      	mov	r2, r3
 8006488:	f000 f9f2 	bl	8006870 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	2160      	movs	r1, #96	@ 0x60
 8006492:	4618      	mov	r0, r3
 8006494:	f000 fa1c 	bl	80068d0 <TIM_ITRx_SetConfig>
      break;
 8006498:	e01c      	b.n	80064d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80064a6:	461a      	mov	r2, r3
 80064a8:	f000 f9b3 	bl	8006812 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	2140      	movs	r1, #64	@ 0x40
 80064b2:	4618      	mov	r0, r3
 80064b4:	f000 fa0c 	bl	80068d0 <TIM_ITRx_SetConfig>
      break;
 80064b8:	e00c      	b.n	80064d4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681a      	ldr	r2, [r3, #0]
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4619      	mov	r1, r3
 80064c4:	4610      	mov	r0, r2
 80064c6:	f000 fa03 	bl	80068d0 <TIM_ITRx_SetConfig>
      break;
 80064ca:	e003      	b.n	80064d4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80064cc:	2301      	movs	r3, #1
 80064ce:	73fb      	strb	r3, [r7, #15]
      break;
 80064d0:	e000      	b.n	80064d4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80064d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2201      	movs	r2, #1
 80064d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2200      	movs	r2, #0
 80064e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80064e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	3710      	adds	r7, #16
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}

080064ee <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80064ee:	b580      	push	{r7, lr}
 80064f0:	b082      	sub	sp, #8
 80064f2:	af00      	add	r7, sp, #0
 80064f4:	6078      	str	r0, [r7, #4]
 80064f6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80064fe:	2b01      	cmp	r3, #1
 8006500:	d101      	bne.n	8006506 <HAL_TIM_SlaveConfigSynchro+0x18>
 8006502:	2302      	movs	r3, #2
 8006504:	e031      	b.n	800656a <HAL_TIM_SlaveConfigSynchro+0x7c>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2201      	movs	r2, #1
 800650a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2202      	movs	r2, #2
 8006512:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8006516:	6839      	ldr	r1, [r7, #0]
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	f000 f8e9 	bl	80066f0 <TIM_SlaveTimer_SetConfig>
 800651e:	4603      	mov	r3, r0
 8006520:	2b00      	cmp	r3, #0
 8006522:	d009      	beq.n	8006538 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2201      	movs	r2, #1
 8006528:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2200      	movs	r2, #0
 8006530:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8006534:	2301      	movs	r3, #1
 8006536:	e018      	b.n	800656a <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	68da      	ldr	r2, [r3, #12]
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006546:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	68da      	ldr	r2, [r3, #12]
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006556:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2201      	movs	r2, #1
 800655c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2200      	movs	r2, #0
 8006564:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006568:	2300      	movs	r3, #0
}
 800656a:	4618      	mov	r0, r3
 800656c:	3708      	adds	r7, #8
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}

08006572 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006572:	b480      	push	{r7}
 8006574:	b083      	sub	sp, #12
 8006576:	af00      	add	r7, sp, #0
 8006578:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800657a:	bf00      	nop
 800657c:	370c      	adds	r7, #12
 800657e:	46bd      	mov	sp, r7
 8006580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006584:	4770      	bx	lr

08006586 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006586:	b480      	push	{r7}
 8006588:	b083      	sub	sp, #12
 800658a:	af00      	add	r7, sp, #0
 800658c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800658e:	bf00      	nop
 8006590:	370c      	adds	r7, #12
 8006592:	46bd      	mov	sp, r7
 8006594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006598:	4770      	bx	lr

0800659a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800659a:	b480      	push	{r7}
 800659c:	b083      	sub	sp, #12
 800659e:	af00      	add	r7, sp, #0
 80065a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80065a2:	bf00      	nop
 80065a4:	370c      	adds	r7, #12
 80065a6:	46bd      	mov	sp, r7
 80065a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ac:	4770      	bx	lr

080065ae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80065ae:	b480      	push	{r7}
 80065b0:	b083      	sub	sp, #12
 80065b2:	af00      	add	r7, sp, #0
 80065b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80065b6:	bf00      	nop
 80065b8:	370c      	adds	r7, #12
 80065ba:	46bd      	mov	sp, r7
 80065bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c0:	4770      	bx	lr

080065c2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80065c2:	b480      	push	{r7}
 80065c4:	b083      	sub	sp, #12
 80065c6:	af00      	add	r7, sp, #0
 80065c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80065ca:	bf00      	nop
 80065cc:	370c      	adds	r7, #12
 80065ce:	46bd      	mov	sp, r7
 80065d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d4:	4770      	bx	lr
	...

080065d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80065d8:	b480      	push	{r7}
 80065da:	b085      	sub	sp, #20
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
 80065e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	4a3a      	ldr	r2, [pc, #232]	@ (80066d4 <TIM_Base_SetConfig+0xfc>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d00f      	beq.n	8006610 <TIM_Base_SetConfig+0x38>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065f6:	d00b      	beq.n	8006610 <TIM_Base_SetConfig+0x38>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	4a37      	ldr	r2, [pc, #220]	@ (80066d8 <TIM_Base_SetConfig+0x100>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d007      	beq.n	8006610 <TIM_Base_SetConfig+0x38>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	4a36      	ldr	r2, [pc, #216]	@ (80066dc <TIM_Base_SetConfig+0x104>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d003      	beq.n	8006610 <TIM_Base_SetConfig+0x38>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	4a35      	ldr	r2, [pc, #212]	@ (80066e0 <TIM_Base_SetConfig+0x108>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d108      	bne.n	8006622 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006616:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	685b      	ldr	r3, [r3, #4]
 800661c:	68fa      	ldr	r2, [r7, #12]
 800661e:	4313      	orrs	r3, r2
 8006620:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	4a2b      	ldr	r2, [pc, #172]	@ (80066d4 <TIM_Base_SetConfig+0xfc>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d01b      	beq.n	8006662 <TIM_Base_SetConfig+0x8a>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006630:	d017      	beq.n	8006662 <TIM_Base_SetConfig+0x8a>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	4a28      	ldr	r2, [pc, #160]	@ (80066d8 <TIM_Base_SetConfig+0x100>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d013      	beq.n	8006662 <TIM_Base_SetConfig+0x8a>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	4a27      	ldr	r2, [pc, #156]	@ (80066dc <TIM_Base_SetConfig+0x104>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d00f      	beq.n	8006662 <TIM_Base_SetConfig+0x8a>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	4a26      	ldr	r2, [pc, #152]	@ (80066e0 <TIM_Base_SetConfig+0x108>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d00b      	beq.n	8006662 <TIM_Base_SetConfig+0x8a>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	4a25      	ldr	r2, [pc, #148]	@ (80066e4 <TIM_Base_SetConfig+0x10c>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d007      	beq.n	8006662 <TIM_Base_SetConfig+0x8a>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	4a24      	ldr	r2, [pc, #144]	@ (80066e8 <TIM_Base_SetConfig+0x110>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d003      	beq.n	8006662 <TIM_Base_SetConfig+0x8a>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	4a23      	ldr	r2, [pc, #140]	@ (80066ec <TIM_Base_SetConfig+0x114>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d108      	bne.n	8006674 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006668:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	68db      	ldr	r3, [r3, #12]
 800666e:	68fa      	ldr	r2, [r7, #12]
 8006670:	4313      	orrs	r3, r2
 8006672:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	695b      	ldr	r3, [r3, #20]
 800667e:	4313      	orrs	r3, r2
 8006680:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	68fa      	ldr	r2, [r7, #12]
 8006686:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	689a      	ldr	r2, [r3, #8]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	681a      	ldr	r2, [r3, #0]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	4a0e      	ldr	r2, [pc, #56]	@ (80066d4 <TIM_Base_SetConfig+0xfc>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d103      	bne.n	80066a8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	691a      	ldr	r2, [r3, #16]
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2201      	movs	r2, #1
 80066ac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	691b      	ldr	r3, [r3, #16]
 80066b2:	f003 0301 	and.w	r3, r3, #1
 80066b6:	2b01      	cmp	r3, #1
 80066b8:	d105      	bne.n	80066c6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	691b      	ldr	r3, [r3, #16]
 80066be:	f023 0201 	bic.w	r2, r3, #1
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	611a      	str	r2, [r3, #16]
  }
}
 80066c6:	bf00      	nop
 80066c8:	3714      	adds	r7, #20
 80066ca:	46bd      	mov	sp, r7
 80066cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d0:	4770      	bx	lr
 80066d2:	bf00      	nop
 80066d4:	40010000 	.word	0x40010000
 80066d8:	40000400 	.word	0x40000400
 80066dc:	40000800 	.word	0x40000800
 80066e0:	40000c00 	.word	0x40000c00
 80066e4:	40014000 	.word	0x40014000
 80066e8:	40014400 	.word	0x40014400
 80066ec:	40014800 	.word	0x40014800

080066f0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b086      	sub	sp, #24
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80066fa:	2300      	movs	r3, #0
 80066fc:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	689b      	ldr	r3, [r3, #8]
 8006704:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800670c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	693a      	ldr	r2, [r7, #16]
 8006714:	4313      	orrs	r3, r2
 8006716:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8006718:	693b      	ldr	r3, [r7, #16]
 800671a:	f023 0307 	bic.w	r3, r3, #7
 800671e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	693a      	ldr	r2, [r7, #16]
 8006726:	4313      	orrs	r3, r2
 8006728:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	693a      	ldr	r2, [r7, #16]
 8006730:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	685b      	ldr	r3, [r3, #4]
 8006736:	2b70      	cmp	r3, #112	@ 0x70
 8006738:	d01a      	beq.n	8006770 <TIM_SlaveTimer_SetConfig+0x80>
 800673a:	2b70      	cmp	r3, #112	@ 0x70
 800673c:	d860      	bhi.n	8006800 <TIM_SlaveTimer_SetConfig+0x110>
 800673e:	2b60      	cmp	r3, #96	@ 0x60
 8006740:	d054      	beq.n	80067ec <TIM_SlaveTimer_SetConfig+0xfc>
 8006742:	2b60      	cmp	r3, #96	@ 0x60
 8006744:	d85c      	bhi.n	8006800 <TIM_SlaveTimer_SetConfig+0x110>
 8006746:	2b50      	cmp	r3, #80	@ 0x50
 8006748:	d046      	beq.n	80067d8 <TIM_SlaveTimer_SetConfig+0xe8>
 800674a:	2b50      	cmp	r3, #80	@ 0x50
 800674c:	d858      	bhi.n	8006800 <TIM_SlaveTimer_SetConfig+0x110>
 800674e:	2b40      	cmp	r3, #64	@ 0x40
 8006750:	d019      	beq.n	8006786 <TIM_SlaveTimer_SetConfig+0x96>
 8006752:	2b40      	cmp	r3, #64	@ 0x40
 8006754:	d854      	bhi.n	8006800 <TIM_SlaveTimer_SetConfig+0x110>
 8006756:	2b30      	cmp	r3, #48	@ 0x30
 8006758:	d055      	beq.n	8006806 <TIM_SlaveTimer_SetConfig+0x116>
 800675a:	2b30      	cmp	r3, #48	@ 0x30
 800675c:	d850      	bhi.n	8006800 <TIM_SlaveTimer_SetConfig+0x110>
 800675e:	2b20      	cmp	r3, #32
 8006760:	d051      	beq.n	8006806 <TIM_SlaveTimer_SetConfig+0x116>
 8006762:	2b20      	cmp	r3, #32
 8006764:	d84c      	bhi.n	8006800 <TIM_SlaveTimer_SetConfig+0x110>
 8006766:	2b00      	cmp	r3, #0
 8006768:	d04d      	beq.n	8006806 <TIM_SlaveTimer_SetConfig+0x116>
 800676a:	2b10      	cmp	r3, #16
 800676c:	d04b      	beq.n	8006806 <TIM_SlaveTimer_SetConfig+0x116>
 800676e:	e047      	b.n	8006800 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8006780:	f000 f8c1 	bl	8006906 <TIM_ETR_SetConfig>
      break;
 8006784:	e040      	b.n	8006808 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	2b05      	cmp	r3, #5
 800678c:	d101      	bne.n	8006792 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 800678e:	2301      	movs	r3, #1
 8006790:	e03b      	b.n	800680a <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	6a1b      	ldr	r3, [r3, #32]
 8006798:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	6a1a      	ldr	r2, [r3, #32]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f022 0201 	bic.w	r2, r2, #1
 80067a8:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	699b      	ldr	r3, [r3, #24]
 80067b0:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80067b8:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	691b      	ldr	r3, [r3, #16]
 80067be:	011b      	lsls	r3, r3, #4
 80067c0:	68ba      	ldr	r2, [r7, #8]
 80067c2:	4313      	orrs	r3, r2
 80067c4:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	68ba      	ldr	r2, [r7, #8]
 80067cc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	68fa      	ldr	r2, [r7, #12]
 80067d4:	621a      	str	r2, [r3, #32]
      break;
 80067d6:	e017      	b.n	8006808 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80067e4:	461a      	mov	r2, r3
 80067e6:	f000 f814 	bl	8006812 <TIM_TI1_ConfigInputStage>
      break;
 80067ea:	e00d      	b.n	8006808 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80067f8:	461a      	mov	r2, r3
 80067fa:	f000 f839 	bl	8006870 <TIM_TI2_ConfigInputStage>
      break;
 80067fe:	e003      	b.n	8006808 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8006800:	2301      	movs	r3, #1
 8006802:	75fb      	strb	r3, [r7, #23]
      break;
 8006804:	e000      	b.n	8006808 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8006806:	bf00      	nop
  }

  return status;
 8006808:	7dfb      	ldrb	r3, [r7, #23]
}
 800680a:	4618      	mov	r0, r3
 800680c:	3718      	adds	r7, #24
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}

08006812 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006812:	b480      	push	{r7}
 8006814:	b087      	sub	sp, #28
 8006816:	af00      	add	r7, sp, #0
 8006818:	60f8      	str	r0, [r7, #12]
 800681a:	60b9      	str	r1, [r7, #8]
 800681c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	6a1b      	ldr	r3, [r3, #32]
 8006822:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	6a1b      	ldr	r3, [r3, #32]
 8006828:	f023 0201 	bic.w	r2, r3, #1
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	699b      	ldr	r3, [r3, #24]
 8006834:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800683c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	011b      	lsls	r3, r3, #4
 8006842:	693a      	ldr	r2, [r7, #16]
 8006844:	4313      	orrs	r3, r2
 8006846:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	f023 030a 	bic.w	r3, r3, #10
 800684e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006850:	697a      	ldr	r2, [r7, #20]
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	4313      	orrs	r3, r2
 8006856:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	693a      	ldr	r2, [r7, #16]
 800685c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	697a      	ldr	r2, [r7, #20]
 8006862:	621a      	str	r2, [r3, #32]
}
 8006864:	bf00      	nop
 8006866:	371c      	adds	r7, #28
 8006868:	46bd      	mov	sp, r7
 800686a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686e:	4770      	bx	lr

08006870 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006870:	b480      	push	{r7}
 8006872:	b087      	sub	sp, #28
 8006874:	af00      	add	r7, sp, #0
 8006876:	60f8      	str	r0, [r7, #12]
 8006878:	60b9      	str	r1, [r7, #8]
 800687a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	6a1b      	ldr	r3, [r3, #32]
 8006880:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	6a1b      	ldr	r3, [r3, #32]
 8006886:	f023 0210 	bic.w	r2, r3, #16
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	699b      	ldr	r3, [r3, #24]
 8006892:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006894:	693b      	ldr	r3, [r7, #16]
 8006896:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800689a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	031b      	lsls	r3, r3, #12
 80068a0:	693a      	ldr	r2, [r7, #16]
 80068a2:	4313      	orrs	r3, r2
 80068a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80068ac:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	011b      	lsls	r3, r3, #4
 80068b2:	697a      	ldr	r2, [r7, #20]
 80068b4:	4313      	orrs	r3, r2
 80068b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	693a      	ldr	r2, [r7, #16]
 80068bc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	697a      	ldr	r2, [r7, #20]
 80068c2:	621a      	str	r2, [r3, #32]
}
 80068c4:	bf00      	nop
 80068c6:	371c      	adds	r7, #28
 80068c8:	46bd      	mov	sp, r7
 80068ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ce:	4770      	bx	lr

080068d0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80068d0:	b480      	push	{r7}
 80068d2:	b085      	sub	sp, #20
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
 80068d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	689b      	ldr	r3, [r3, #8]
 80068de:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068e6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80068e8:	683a      	ldr	r2, [r7, #0]
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	4313      	orrs	r3, r2
 80068ee:	f043 0307 	orr.w	r3, r3, #7
 80068f2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	68fa      	ldr	r2, [r7, #12]
 80068f8:	609a      	str	r2, [r3, #8]
}
 80068fa:	bf00      	nop
 80068fc:	3714      	adds	r7, #20
 80068fe:	46bd      	mov	sp, r7
 8006900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006904:	4770      	bx	lr

08006906 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006906:	b480      	push	{r7}
 8006908:	b087      	sub	sp, #28
 800690a:	af00      	add	r7, sp, #0
 800690c:	60f8      	str	r0, [r7, #12]
 800690e:	60b9      	str	r1, [r7, #8]
 8006910:	607a      	str	r2, [r7, #4]
 8006912:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	689b      	ldr	r3, [r3, #8]
 8006918:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006920:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	021a      	lsls	r2, r3, #8
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	431a      	orrs	r2, r3
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	4313      	orrs	r3, r2
 800692e:	697a      	ldr	r2, [r7, #20]
 8006930:	4313      	orrs	r3, r2
 8006932:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	697a      	ldr	r2, [r7, #20]
 8006938:	609a      	str	r2, [r3, #8]
}
 800693a:	bf00      	nop
 800693c:	371c      	adds	r7, #28
 800693e:	46bd      	mov	sp, r7
 8006940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006944:	4770      	bx	lr
	...

08006948 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006948:	b480      	push	{r7}
 800694a:	b085      	sub	sp, #20
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
 8006950:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006958:	2b01      	cmp	r3, #1
 800695a:	d101      	bne.n	8006960 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800695c:	2302      	movs	r3, #2
 800695e:	e050      	b.n	8006a02 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2201      	movs	r2, #1
 8006964:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2202      	movs	r2, #2
 800696c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	689b      	ldr	r3, [r3, #8]
 800697e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006986:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	68fa      	ldr	r2, [r7, #12]
 800698e:	4313      	orrs	r3, r2
 8006990:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	68fa      	ldr	r2, [r7, #12]
 8006998:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a1c      	ldr	r2, [pc, #112]	@ (8006a10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d018      	beq.n	80069d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069ac:	d013      	beq.n	80069d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4a18      	ldr	r2, [pc, #96]	@ (8006a14 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d00e      	beq.n	80069d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a16      	ldr	r2, [pc, #88]	@ (8006a18 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d009      	beq.n	80069d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a15      	ldr	r2, [pc, #84]	@ (8006a1c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d004      	beq.n	80069d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a13      	ldr	r2, [pc, #76]	@ (8006a20 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d10c      	bne.n	80069f0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80069dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	685b      	ldr	r3, [r3, #4]
 80069e2:	68ba      	ldr	r2, [r7, #8]
 80069e4:	4313      	orrs	r3, r2
 80069e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	68ba      	ldr	r2, [r7, #8]
 80069ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2201      	movs	r2, #1
 80069f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2200      	movs	r2, #0
 80069fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006a00:	2300      	movs	r3, #0
}
 8006a02:	4618      	mov	r0, r3
 8006a04:	3714      	adds	r7, #20
 8006a06:	46bd      	mov	sp, r7
 8006a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0c:	4770      	bx	lr
 8006a0e:	bf00      	nop
 8006a10:	40010000 	.word	0x40010000
 8006a14:	40000400 	.word	0x40000400
 8006a18:	40000800 	.word	0x40000800
 8006a1c:	40000c00 	.word	0x40000c00
 8006a20:	40014000 	.word	0x40014000

08006a24 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006a24:	b480      	push	{r7}
 8006a26:	b083      	sub	sp, #12
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006a2c:	bf00      	nop
 8006a2e:	370c      	adds	r7, #12
 8006a30:	46bd      	mov	sp, r7
 8006a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a36:	4770      	bx	lr

08006a38 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b083      	sub	sp, #12
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006a40:	bf00      	nop
 8006a42:	370c      	adds	r7, #12
 8006a44:	46bd      	mov	sp, r7
 8006a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4a:	4770      	bx	lr

08006a4c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b082      	sub	sp, #8
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d101      	bne.n	8006a5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	e042      	b.n	8006ae4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a64:	b2db      	uxtb	r3, r3
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d106      	bne.n	8006a78 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f7fb f9a4 	bl	8001dc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2224      	movs	r2, #36	@ 0x24
 8006a7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	68da      	ldr	r2, [r3, #12]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006a8e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f000 fc7b 	bl	800738c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	691a      	ldr	r2, [r3, #16]
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006aa4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	695a      	ldr	r2, [r3, #20]
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006ab4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	68da      	ldr	r2, [r3, #12]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006ac4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2220      	movs	r2, #32
 8006ad0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2220      	movs	r2, #32
 8006ad8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006ae2:	2300      	movs	r3, #0
}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	3708      	adds	r7, #8
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}

08006aec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b0ba      	sub	sp, #232	@ 0xe8
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	68db      	ldr	r3, [r3, #12]
 8006b04:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	695b      	ldr	r3, [r3, #20]
 8006b0e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006b12:	2300      	movs	r3, #0
 8006b14:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006b18:	2300      	movs	r3, #0
 8006b1a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006b1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b22:	f003 030f 	and.w	r3, r3, #15
 8006b26:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006b2a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d10f      	bne.n	8006b52 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006b32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b36:	f003 0320 	and.w	r3, r3, #32
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d009      	beq.n	8006b52 <HAL_UART_IRQHandler+0x66>
 8006b3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b42:	f003 0320 	and.w	r3, r3, #32
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d003      	beq.n	8006b52 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f000 fb5f 	bl	800720e <UART_Receive_IT>
      return;
 8006b50:	e25b      	b.n	800700a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006b52:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	f000 80de 	beq.w	8006d18 <HAL_UART_IRQHandler+0x22c>
 8006b5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006b60:	f003 0301 	and.w	r3, r3, #1
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d106      	bne.n	8006b76 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006b68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b6c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	f000 80d1 	beq.w	8006d18 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006b76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b7a:	f003 0301 	and.w	r3, r3, #1
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d00b      	beq.n	8006b9a <HAL_UART_IRQHandler+0xae>
 8006b82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d005      	beq.n	8006b9a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b92:	f043 0201 	orr.w	r2, r3, #1
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006b9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b9e:	f003 0304 	and.w	r3, r3, #4
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d00b      	beq.n	8006bbe <HAL_UART_IRQHandler+0xd2>
 8006ba6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006baa:	f003 0301 	and.w	r3, r3, #1
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d005      	beq.n	8006bbe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bb6:	f043 0202 	orr.w	r2, r3, #2
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006bbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006bc2:	f003 0302 	and.w	r3, r3, #2
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d00b      	beq.n	8006be2 <HAL_UART_IRQHandler+0xf6>
 8006bca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006bce:	f003 0301 	and.w	r3, r3, #1
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d005      	beq.n	8006be2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bda:	f043 0204 	orr.w	r2, r3, #4
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006be2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006be6:	f003 0308 	and.w	r3, r3, #8
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d011      	beq.n	8006c12 <HAL_UART_IRQHandler+0x126>
 8006bee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006bf2:	f003 0320 	and.w	r3, r3, #32
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d105      	bne.n	8006c06 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006bfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006bfe:	f003 0301 	and.w	r3, r3, #1
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d005      	beq.n	8006c12 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c0a:	f043 0208 	orr.w	r2, r3, #8
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	f000 81f2 	beq.w	8007000 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006c1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c20:	f003 0320 	and.w	r3, r3, #32
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d008      	beq.n	8006c3a <HAL_UART_IRQHandler+0x14e>
 8006c28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c2c:	f003 0320 	and.w	r3, r3, #32
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d002      	beq.n	8006c3a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f000 faea 	bl	800720e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	695b      	ldr	r3, [r3, #20]
 8006c40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c44:	2b40      	cmp	r3, #64	@ 0x40
 8006c46:	bf0c      	ite	eq
 8006c48:	2301      	moveq	r3, #1
 8006c4a:	2300      	movne	r3, #0
 8006c4c:	b2db      	uxtb	r3, r3
 8006c4e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c56:	f003 0308 	and.w	r3, r3, #8
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d103      	bne.n	8006c66 <HAL_UART_IRQHandler+0x17a>
 8006c5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d04f      	beq.n	8006d06 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f000 f9f2 	bl	8007050 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	695b      	ldr	r3, [r3, #20]
 8006c72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c76:	2b40      	cmp	r3, #64	@ 0x40
 8006c78:	d141      	bne.n	8006cfe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	3314      	adds	r3, #20
 8006c80:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c84:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006c88:	e853 3f00 	ldrex	r3, [r3]
 8006c8c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006c90:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006c94:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c98:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	3314      	adds	r3, #20
 8006ca2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006ca6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006caa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006cb2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006cb6:	e841 2300 	strex	r3, r2, [r1]
 8006cba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006cbe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d1d9      	bne.n	8006c7a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d013      	beq.n	8006cf6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cd2:	4a7e      	ldr	r2, [pc, #504]	@ (8006ecc <HAL_UART_IRQHandler+0x3e0>)
 8006cd4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f7fc f93a 	bl	8002f54 <HAL_DMA_Abort_IT>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d016      	beq.n	8006d14 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006cec:	687a      	ldr	r2, [r7, #4]
 8006cee:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006cf0:	4610      	mov	r0, r2
 8006cf2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cf4:	e00e      	b.n	8006d14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f000 f994 	bl	8007024 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cfc:	e00a      	b.n	8006d14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f000 f990 	bl	8007024 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d04:	e006      	b.n	8006d14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f000 f98c 	bl	8007024 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006d12:	e175      	b.n	8007000 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d14:	bf00      	nop
    return;
 8006d16:	e173      	b.n	8007000 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d1c:	2b01      	cmp	r3, #1
 8006d1e:	f040 814f 	bne.w	8006fc0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006d22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d26:	f003 0310 	and.w	r3, r3, #16
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	f000 8148 	beq.w	8006fc0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006d30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d34:	f003 0310 	and.w	r3, r3, #16
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	f000 8141 	beq.w	8006fc0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006d3e:	2300      	movs	r3, #0
 8006d40:	60bb      	str	r3, [r7, #8]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	60bb      	str	r3, [r7, #8]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	685b      	ldr	r3, [r3, #4]
 8006d50:	60bb      	str	r3, [r7, #8]
 8006d52:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	695b      	ldr	r3, [r3, #20]
 8006d5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d5e:	2b40      	cmp	r3, #64	@ 0x40
 8006d60:	f040 80b6 	bne.w	8006ed0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006d70:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	f000 8145 	beq.w	8007004 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006d7e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006d82:	429a      	cmp	r2, r3
 8006d84:	f080 813e 	bcs.w	8007004 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006d8e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d94:	69db      	ldr	r3, [r3, #28]
 8006d96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d9a:	f000 8088 	beq.w	8006eae <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	330c      	adds	r3, #12
 8006da4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006da8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006dac:	e853 3f00 	ldrex	r3, [r3]
 8006db0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006db4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006db8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006dbc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	330c      	adds	r3, #12
 8006dc6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006dca:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006dce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dd2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006dd6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006dda:	e841 2300 	strex	r3, r2, [r1]
 8006dde:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006de2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d1d9      	bne.n	8006d9e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	3314      	adds	r3, #20
 8006df0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006df2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006df4:	e853 3f00 	ldrex	r3, [r3]
 8006df8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006dfa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006dfc:	f023 0301 	bic.w	r3, r3, #1
 8006e00:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	3314      	adds	r3, #20
 8006e0a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006e0e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006e12:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e14:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006e16:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006e1a:	e841 2300 	strex	r3, r2, [r1]
 8006e1e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006e20:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d1e1      	bne.n	8006dea <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	3314      	adds	r3, #20
 8006e2c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e2e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006e30:	e853 3f00 	ldrex	r3, [r3]
 8006e34:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006e36:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006e38:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e3c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	3314      	adds	r3, #20
 8006e46:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006e4a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006e4c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e4e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006e50:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006e52:	e841 2300 	strex	r3, r2, [r1]
 8006e56:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006e58:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d1e3      	bne.n	8006e26 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2220      	movs	r2, #32
 8006e62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	330c      	adds	r3, #12
 8006e72:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e76:	e853 3f00 	ldrex	r3, [r3]
 8006e7a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006e7c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006e7e:	f023 0310 	bic.w	r3, r3, #16
 8006e82:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	330c      	adds	r3, #12
 8006e8c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006e90:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006e92:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e94:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006e96:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006e98:	e841 2300 	strex	r3, r2, [r1]
 8006e9c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006e9e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d1e3      	bne.n	8006e6c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	f7fb ffe3 	bl	8002e74 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2202      	movs	r2, #2
 8006eb2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006ebc:	b29b      	uxth	r3, r3
 8006ebe:	1ad3      	subs	r3, r2, r3
 8006ec0:	b29b      	uxth	r3, r3
 8006ec2:	4619      	mov	r1, r3
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f000 f8b7 	bl	8007038 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006eca:	e09b      	b.n	8007004 <HAL_UART_IRQHandler+0x518>
 8006ecc:	08007117 	.word	0x08007117
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006ed8:	b29b      	uxth	r3, r3
 8006eda:	1ad3      	subs	r3, r2, r3
 8006edc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006ee4:	b29b      	uxth	r3, r3
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	f000 808e 	beq.w	8007008 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006eec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	f000 8089 	beq.w	8007008 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	330c      	adds	r3, #12
 8006efc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006efe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f00:	e853 3f00 	ldrex	r3, [r3]
 8006f04:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006f06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f08:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006f0c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	330c      	adds	r3, #12
 8006f16:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006f1a:	647a      	str	r2, [r7, #68]	@ 0x44
 8006f1c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f1e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006f20:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006f22:	e841 2300 	strex	r3, r2, [r1]
 8006f26:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006f28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d1e3      	bne.n	8006ef6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	3314      	adds	r3, #20
 8006f34:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f38:	e853 3f00 	ldrex	r3, [r3]
 8006f3c:	623b      	str	r3, [r7, #32]
   return(result);
 8006f3e:	6a3b      	ldr	r3, [r7, #32]
 8006f40:	f023 0301 	bic.w	r3, r3, #1
 8006f44:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	3314      	adds	r3, #20
 8006f4e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006f52:	633a      	str	r2, [r7, #48]	@ 0x30
 8006f54:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f56:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006f58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f5a:	e841 2300 	strex	r3, r2, [r1]
 8006f5e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006f60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d1e3      	bne.n	8006f2e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2220      	movs	r2, #32
 8006f6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2200      	movs	r2, #0
 8006f72:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	330c      	adds	r3, #12
 8006f7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f7c:	693b      	ldr	r3, [r7, #16]
 8006f7e:	e853 3f00 	ldrex	r3, [r3]
 8006f82:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f023 0310 	bic.w	r3, r3, #16
 8006f8a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	330c      	adds	r3, #12
 8006f94:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006f98:	61fa      	str	r2, [r7, #28]
 8006f9a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f9c:	69b9      	ldr	r1, [r7, #24]
 8006f9e:	69fa      	ldr	r2, [r7, #28]
 8006fa0:	e841 2300 	strex	r3, r2, [r1]
 8006fa4:	617b      	str	r3, [r7, #20]
   return(result);
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d1e3      	bne.n	8006f74 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2202      	movs	r2, #2
 8006fb0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006fb2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006fb6:	4619      	mov	r1, r3
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f000 f83d 	bl	8007038 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006fbe:	e023      	b.n	8007008 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006fc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006fc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d009      	beq.n	8006fe0 <HAL_UART_IRQHandler+0x4f4>
 8006fcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006fd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d003      	beq.n	8006fe0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f000 f8b0 	bl	800713e <UART_Transmit_IT>
    return;
 8006fde:	e014      	b.n	800700a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006fe0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006fe4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d00e      	beq.n	800700a <HAL_UART_IRQHandler+0x51e>
 8006fec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ff0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d008      	beq.n	800700a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f000 f8f0 	bl	80071de <UART_EndTransmit_IT>
    return;
 8006ffe:	e004      	b.n	800700a <HAL_UART_IRQHandler+0x51e>
    return;
 8007000:	bf00      	nop
 8007002:	e002      	b.n	800700a <HAL_UART_IRQHandler+0x51e>
      return;
 8007004:	bf00      	nop
 8007006:	e000      	b.n	800700a <HAL_UART_IRQHandler+0x51e>
      return;
 8007008:	bf00      	nop
  }
}
 800700a:	37e8      	adds	r7, #232	@ 0xe8
 800700c:	46bd      	mov	sp, r7
 800700e:	bd80      	pop	{r7, pc}

08007010 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007010:	b480      	push	{r7}
 8007012:	b083      	sub	sp, #12
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007018:	bf00      	nop
 800701a:	370c      	adds	r7, #12
 800701c:	46bd      	mov	sp, r7
 800701e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007022:	4770      	bx	lr

08007024 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007024:	b480      	push	{r7}
 8007026:	b083      	sub	sp, #12
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800702c:	bf00      	nop
 800702e:	370c      	adds	r7, #12
 8007030:	46bd      	mov	sp, r7
 8007032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007036:	4770      	bx	lr

08007038 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007038:	b480      	push	{r7}
 800703a:	b083      	sub	sp, #12
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
 8007040:	460b      	mov	r3, r1
 8007042:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007044:	bf00      	nop
 8007046:	370c      	adds	r7, #12
 8007048:	46bd      	mov	sp, r7
 800704a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704e:	4770      	bx	lr

08007050 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007050:	b480      	push	{r7}
 8007052:	b095      	sub	sp, #84	@ 0x54
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	330c      	adds	r3, #12
 800705e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007060:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007062:	e853 3f00 	ldrex	r3, [r3]
 8007066:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800706a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800706e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	330c      	adds	r3, #12
 8007076:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007078:	643a      	str	r2, [r7, #64]	@ 0x40
 800707a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800707c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800707e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007080:	e841 2300 	strex	r3, r2, [r1]
 8007084:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007086:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007088:	2b00      	cmp	r3, #0
 800708a:	d1e5      	bne.n	8007058 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	3314      	adds	r3, #20
 8007092:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007094:	6a3b      	ldr	r3, [r7, #32]
 8007096:	e853 3f00 	ldrex	r3, [r3]
 800709a:	61fb      	str	r3, [r7, #28]
   return(result);
 800709c:	69fb      	ldr	r3, [r7, #28]
 800709e:	f023 0301 	bic.w	r3, r3, #1
 80070a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	3314      	adds	r3, #20
 80070aa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80070ac:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80070ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070b0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80070b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80070b4:	e841 2300 	strex	r3, r2, [r1]
 80070b8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80070ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d1e5      	bne.n	800708c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070c4:	2b01      	cmp	r3, #1
 80070c6:	d119      	bne.n	80070fc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	330c      	adds	r3, #12
 80070ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	e853 3f00 	ldrex	r3, [r3]
 80070d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	f023 0310 	bic.w	r3, r3, #16
 80070de:	647b      	str	r3, [r7, #68]	@ 0x44
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	330c      	adds	r3, #12
 80070e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80070e8:	61ba      	str	r2, [r7, #24]
 80070ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ec:	6979      	ldr	r1, [r7, #20]
 80070ee:	69ba      	ldr	r2, [r7, #24]
 80070f0:	e841 2300 	strex	r3, r2, [r1]
 80070f4:	613b      	str	r3, [r7, #16]
   return(result);
 80070f6:	693b      	ldr	r3, [r7, #16]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d1e5      	bne.n	80070c8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2220      	movs	r2, #32
 8007100:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2200      	movs	r2, #0
 8007108:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800710a:	bf00      	nop
 800710c:	3754      	adds	r7, #84	@ 0x54
 800710e:	46bd      	mov	sp, r7
 8007110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007114:	4770      	bx	lr

08007116 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007116:	b580      	push	{r7, lr}
 8007118:	b084      	sub	sp, #16
 800711a:	af00      	add	r7, sp, #0
 800711c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007122:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	2200      	movs	r2, #0
 8007128:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	2200      	movs	r2, #0
 800712e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007130:	68f8      	ldr	r0, [r7, #12]
 8007132:	f7ff ff77 	bl	8007024 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007136:	bf00      	nop
 8007138:	3710      	adds	r7, #16
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}

0800713e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800713e:	b480      	push	{r7}
 8007140:	b085      	sub	sp, #20
 8007142:	af00      	add	r7, sp, #0
 8007144:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800714c:	b2db      	uxtb	r3, r3
 800714e:	2b21      	cmp	r3, #33	@ 0x21
 8007150:	d13e      	bne.n	80071d0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	689b      	ldr	r3, [r3, #8]
 8007156:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800715a:	d114      	bne.n	8007186 <UART_Transmit_IT+0x48>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	691b      	ldr	r3, [r3, #16]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d110      	bne.n	8007186 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6a1b      	ldr	r3, [r3, #32]
 8007168:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	881b      	ldrh	r3, [r3, #0]
 800716e:	461a      	mov	r2, r3
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007178:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6a1b      	ldr	r3, [r3, #32]
 800717e:	1c9a      	adds	r2, r3, #2
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	621a      	str	r2, [r3, #32]
 8007184:	e008      	b.n	8007198 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6a1b      	ldr	r3, [r3, #32]
 800718a:	1c59      	adds	r1, r3, #1
 800718c:	687a      	ldr	r2, [r7, #4]
 800718e:	6211      	str	r1, [r2, #32]
 8007190:	781a      	ldrb	r2, [r3, #0]
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800719c:	b29b      	uxth	r3, r3
 800719e:	3b01      	subs	r3, #1
 80071a0:	b29b      	uxth	r3, r3
 80071a2:	687a      	ldr	r2, [r7, #4]
 80071a4:	4619      	mov	r1, r3
 80071a6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d10f      	bne.n	80071cc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	68da      	ldr	r2, [r3, #12]
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80071ba:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	68da      	ldr	r2, [r3, #12]
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80071ca:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80071cc:	2300      	movs	r3, #0
 80071ce:	e000      	b.n	80071d2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80071d0:	2302      	movs	r3, #2
  }
}
 80071d2:	4618      	mov	r0, r3
 80071d4:	3714      	adds	r7, #20
 80071d6:	46bd      	mov	sp, r7
 80071d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071dc:	4770      	bx	lr

080071de <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80071de:	b580      	push	{r7, lr}
 80071e0:	b082      	sub	sp, #8
 80071e2:	af00      	add	r7, sp, #0
 80071e4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	68da      	ldr	r2, [r3, #12]
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80071f4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2220      	movs	r2, #32
 80071fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f7ff ff06 	bl	8007010 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007204:	2300      	movs	r3, #0
}
 8007206:	4618      	mov	r0, r3
 8007208:	3708      	adds	r7, #8
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}

0800720e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800720e:	b580      	push	{r7, lr}
 8007210:	b08c      	sub	sp, #48	@ 0x30
 8007212:	af00      	add	r7, sp, #0
 8007214:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800721c:	b2db      	uxtb	r3, r3
 800721e:	2b22      	cmp	r3, #34	@ 0x22
 8007220:	f040 80ae 	bne.w	8007380 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	689b      	ldr	r3, [r3, #8]
 8007228:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800722c:	d117      	bne.n	800725e <UART_Receive_IT+0x50>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	691b      	ldr	r3, [r3, #16]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d113      	bne.n	800725e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007236:	2300      	movs	r3, #0
 8007238:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800723e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	685b      	ldr	r3, [r3, #4]
 8007246:	b29b      	uxth	r3, r3
 8007248:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800724c:	b29a      	uxth	r2, r3
 800724e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007250:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007256:	1c9a      	adds	r2, r3, #2
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	629a      	str	r2, [r3, #40]	@ 0x28
 800725c:	e026      	b.n	80072ac <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007262:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8007264:	2300      	movs	r3, #0
 8007266:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	689b      	ldr	r3, [r3, #8]
 800726c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007270:	d007      	beq.n	8007282 <UART_Receive_IT+0x74>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	689b      	ldr	r3, [r3, #8]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d10a      	bne.n	8007290 <UART_Receive_IT+0x82>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	691b      	ldr	r3, [r3, #16]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d106      	bne.n	8007290 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	685b      	ldr	r3, [r3, #4]
 8007288:	b2da      	uxtb	r2, r3
 800728a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800728c:	701a      	strb	r2, [r3, #0]
 800728e:	e008      	b.n	80072a2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	685b      	ldr	r3, [r3, #4]
 8007296:	b2db      	uxtb	r3, r3
 8007298:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800729c:	b2da      	uxtb	r2, r3
 800729e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072a0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072a6:	1c5a      	adds	r2, r3, #1
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80072b0:	b29b      	uxth	r3, r3
 80072b2:	3b01      	subs	r3, #1
 80072b4:	b29b      	uxth	r3, r3
 80072b6:	687a      	ldr	r2, [r7, #4]
 80072b8:	4619      	mov	r1, r3
 80072ba:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d15d      	bne.n	800737c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	68da      	ldr	r2, [r3, #12]
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f022 0220 	bic.w	r2, r2, #32
 80072ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	68da      	ldr	r2, [r3, #12]
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80072de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	695a      	ldr	r2, [r3, #20]
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f022 0201 	bic.w	r2, r2, #1
 80072ee:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2220      	movs	r2, #32
 80072f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2200      	movs	r2, #0
 80072fc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007302:	2b01      	cmp	r3, #1
 8007304:	d135      	bne.n	8007372 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2200      	movs	r2, #0
 800730a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	330c      	adds	r3, #12
 8007312:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007314:	697b      	ldr	r3, [r7, #20]
 8007316:	e853 3f00 	ldrex	r3, [r3]
 800731a:	613b      	str	r3, [r7, #16]
   return(result);
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	f023 0310 	bic.w	r3, r3, #16
 8007322:	627b      	str	r3, [r7, #36]	@ 0x24
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	330c      	adds	r3, #12
 800732a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800732c:	623a      	str	r2, [r7, #32]
 800732e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007330:	69f9      	ldr	r1, [r7, #28]
 8007332:	6a3a      	ldr	r2, [r7, #32]
 8007334:	e841 2300 	strex	r3, r2, [r1]
 8007338:	61bb      	str	r3, [r7, #24]
   return(result);
 800733a:	69bb      	ldr	r3, [r7, #24]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d1e5      	bne.n	800730c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f003 0310 	and.w	r3, r3, #16
 800734a:	2b10      	cmp	r3, #16
 800734c:	d10a      	bne.n	8007364 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800734e:	2300      	movs	r3, #0
 8007350:	60fb      	str	r3, [r7, #12]
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	60fb      	str	r3, [r7, #12]
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	685b      	ldr	r3, [r3, #4]
 8007360:	60fb      	str	r3, [r7, #12]
 8007362:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007368:	4619      	mov	r1, r3
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f7ff fe64 	bl	8007038 <HAL_UARTEx_RxEventCallback>
 8007370:	e002      	b.n	8007378 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f7f9 f8c9 	bl	800050a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007378:	2300      	movs	r3, #0
 800737a:	e002      	b.n	8007382 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800737c:	2300      	movs	r3, #0
 800737e:	e000      	b.n	8007382 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007380:	2302      	movs	r3, #2
  }
}
 8007382:	4618      	mov	r0, r3
 8007384:	3730      	adds	r7, #48	@ 0x30
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}
	...

0800738c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800738c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007390:	b0c0      	sub	sp, #256	@ 0x100
 8007392:	af00      	add	r7, sp, #0
 8007394:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	691b      	ldr	r3, [r3, #16]
 80073a0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80073a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073a8:	68d9      	ldr	r1, [r3, #12]
 80073aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073ae:	681a      	ldr	r2, [r3, #0]
 80073b0:	ea40 0301 	orr.w	r3, r0, r1
 80073b4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80073b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073ba:	689a      	ldr	r2, [r3, #8]
 80073bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073c0:	691b      	ldr	r3, [r3, #16]
 80073c2:	431a      	orrs	r2, r3
 80073c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073c8:	695b      	ldr	r3, [r3, #20]
 80073ca:	431a      	orrs	r2, r3
 80073cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073d0:	69db      	ldr	r3, [r3, #28]
 80073d2:	4313      	orrs	r3, r2
 80073d4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80073d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	68db      	ldr	r3, [r3, #12]
 80073e0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80073e4:	f021 010c 	bic.w	r1, r1, #12
 80073e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073ec:	681a      	ldr	r2, [r3, #0]
 80073ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80073f2:	430b      	orrs	r3, r1
 80073f4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80073f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	695b      	ldr	r3, [r3, #20]
 80073fe:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007402:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007406:	6999      	ldr	r1, [r3, #24]
 8007408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800740c:	681a      	ldr	r2, [r3, #0]
 800740e:	ea40 0301 	orr.w	r3, r0, r1
 8007412:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007418:	681a      	ldr	r2, [r3, #0]
 800741a:	4b8f      	ldr	r3, [pc, #572]	@ (8007658 <UART_SetConfig+0x2cc>)
 800741c:	429a      	cmp	r2, r3
 800741e:	d005      	beq.n	800742c <UART_SetConfig+0xa0>
 8007420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007424:	681a      	ldr	r2, [r3, #0]
 8007426:	4b8d      	ldr	r3, [pc, #564]	@ (800765c <UART_SetConfig+0x2d0>)
 8007428:	429a      	cmp	r2, r3
 800742a:	d104      	bne.n	8007436 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800742c:	f7fe f880 	bl	8005530 <HAL_RCC_GetPCLK2Freq>
 8007430:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007434:	e003      	b.n	800743e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007436:	f7fe f867 	bl	8005508 <HAL_RCC_GetPCLK1Freq>
 800743a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800743e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007442:	69db      	ldr	r3, [r3, #28]
 8007444:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007448:	f040 810c 	bne.w	8007664 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800744c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007450:	2200      	movs	r2, #0
 8007452:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007456:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800745a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800745e:	4622      	mov	r2, r4
 8007460:	462b      	mov	r3, r5
 8007462:	1891      	adds	r1, r2, r2
 8007464:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007466:	415b      	adcs	r3, r3
 8007468:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800746a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800746e:	4621      	mov	r1, r4
 8007470:	eb12 0801 	adds.w	r8, r2, r1
 8007474:	4629      	mov	r1, r5
 8007476:	eb43 0901 	adc.w	r9, r3, r1
 800747a:	f04f 0200 	mov.w	r2, #0
 800747e:	f04f 0300 	mov.w	r3, #0
 8007482:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007486:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800748a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800748e:	4690      	mov	r8, r2
 8007490:	4699      	mov	r9, r3
 8007492:	4623      	mov	r3, r4
 8007494:	eb18 0303 	adds.w	r3, r8, r3
 8007498:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800749c:	462b      	mov	r3, r5
 800749e:	eb49 0303 	adc.w	r3, r9, r3
 80074a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80074a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074aa:	685b      	ldr	r3, [r3, #4]
 80074ac:	2200      	movs	r2, #0
 80074ae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80074b2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80074b6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80074ba:	460b      	mov	r3, r1
 80074bc:	18db      	adds	r3, r3, r3
 80074be:	653b      	str	r3, [r7, #80]	@ 0x50
 80074c0:	4613      	mov	r3, r2
 80074c2:	eb42 0303 	adc.w	r3, r2, r3
 80074c6:	657b      	str	r3, [r7, #84]	@ 0x54
 80074c8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80074cc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80074d0:	f7f8 fe82 	bl	80001d8 <__aeabi_uldivmod>
 80074d4:	4602      	mov	r2, r0
 80074d6:	460b      	mov	r3, r1
 80074d8:	4b61      	ldr	r3, [pc, #388]	@ (8007660 <UART_SetConfig+0x2d4>)
 80074da:	fba3 2302 	umull	r2, r3, r3, r2
 80074de:	095b      	lsrs	r3, r3, #5
 80074e0:	011c      	lsls	r4, r3, #4
 80074e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80074e6:	2200      	movs	r2, #0
 80074e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80074ec:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80074f0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80074f4:	4642      	mov	r2, r8
 80074f6:	464b      	mov	r3, r9
 80074f8:	1891      	adds	r1, r2, r2
 80074fa:	64b9      	str	r1, [r7, #72]	@ 0x48
 80074fc:	415b      	adcs	r3, r3
 80074fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007500:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007504:	4641      	mov	r1, r8
 8007506:	eb12 0a01 	adds.w	sl, r2, r1
 800750a:	4649      	mov	r1, r9
 800750c:	eb43 0b01 	adc.w	fp, r3, r1
 8007510:	f04f 0200 	mov.w	r2, #0
 8007514:	f04f 0300 	mov.w	r3, #0
 8007518:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800751c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007520:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007524:	4692      	mov	sl, r2
 8007526:	469b      	mov	fp, r3
 8007528:	4643      	mov	r3, r8
 800752a:	eb1a 0303 	adds.w	r3, sl, r3
 800752e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007532:	464b      	mov	r3, r9
 8007534:	eb4b 0303 	adc.w	r3, fp, r3
 8007538:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800753c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007540:	685b      	ldr	r3, [r3, #4]
 8007542:	2200      	movs	r2, #0
 8007544:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007548:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800754c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007550:	460b      	mov	r3, r1
 8007552:	18db      	adds	r3, r3, r3
 8007554:	643b      	str	r3, [r7, #64]	@ 0x40
 8007556:	4613      	mov	r3, r2
 8007558:	eb42 0303 	adc.w	r3, r2, r3
 800755c:	647b      	str	r3, [r7, #68]	@ 0x44
 800755e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007562:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007566:	f7f8 fe37 	bl	80001d8 <__aeabi_uldivmod>
 800756a:	4602      	mov	r2, r0
 800756c:	460b      	mov	r3, r1
 800756e:	4611      	mov	r1, r2
 8007570:	4b3b      	ldr	r3, [pc, #236]	@ (8007660 <UART_SetConfig+0x2d4>)
 8007572:	fba3 2301 	umull	r2, r3, r3, r1
 8007576:	095b      	lsrs	r3, r3, #5
 8007578:	2264      	movs	r2, #100	@ 0x64
 800757a:	fb02 f303 	mul.w	r3, r2, r3
 800757e:	1acb      	subs	r3, r1, r3
 8007580:	00db      	lsls	r3, r3, #3
 8007582:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007586:	4b36      	ldr	r3, [pc, #216]	@ (8007660 <UART_SetConfig+0x2d4>)
 8007588:	fba3 2302 	umull	r2, r3, r3, r2
 800758c:	095b      	lsrs	r3, r3, #5
 800758e:	005b      	lsls	r3, r3, #1
 8007590:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007594:	441c      	add	r4, r3
 8007596:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800759a:	2200      	movs	r2, #0
 800759c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80075a0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80075a4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80075a8:	4642      	mov	r2, r8
 80075aa:	464b      	mov	r3, r9
 80075ac:	1891      	adds	r1, r2, r2
 80075ae:	63b9      	str	r1, [r7, #56]	@ 0x38
 80075b0:	415b      	adcs	r3, r3
 80075b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80075b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80075b8:	4641      	mov	r1, r8
 80075ba:	1851      	adds	r1, r2, r1
 80075bc:	6339      	str	r1, [r7, #48]	@ 0x30
 80075be:	4649      	mov	r1, r9
 80075c0:	414b      	adcs	r3, r1
 80075c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80075c4:	f04f 0200 	mov.w	r2, #0
 80075c8:	f04f 0300 	mov.w	r3, #0
 80075cc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80075d0:	4659      	mov	r1, fp
 80075d2:	00cb      	lsls	r3, r1, #3
 80075d4:	4651      	mov	r1, sl
 80075d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80075da:	4651      	mov	r1, sl
 80075dc:	00ca      	lsls	r2, r1, #3
 80075de:	4610      	mov	r0, r2
 80075e0:	4619      	mov	r1, r3
 80075e2:	4603      	mov	r3, r0
 80075e4:	4642      	mov	r2, r8
 80075e6:	189b      	adds	r3, r3, r2
 80075e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80075ec:	464b      	mov	r3, r9
 80075ee:	460a      	mov	r2, r1
 80075f0:	eb42 0303 	adc.w	r3, r2, r3
 80075f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80075f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075fc:	685b      	ldr	r3, [r3, #4]
 80075fe:	2200      	movs	r2, #0
 8007600:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007604:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007608:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800760c:	460b      	mov	r3, r1
 800760e:	18db      	adds	r3, r3, r3
 8007610:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007612:	4613      	mov	r3, r2
 8007614:	eb42 0303 	adc.w	r3, r2, r3
 8007618:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800761a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800761e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007622:	f7f8 fdd9 	bl	80001d8 <__aeabi_uldivmod>
 8007626:	4602      	mov	r2, r0
 8007628:	460b      	mov	r3, r1
 800762a:	4b0d      	ldr	r3, [pc, #52]	@ (8007660 <UART_SetConfig+0x2d4>)
 800762c:	fba3 1302 	umull	r1, r3, r3, r2
 8007630:	095b      	lsrs	r3, r3, #5
 8007632:	2164      	movs	r1, #100	@ 0x64
 8007634:	fb01 f303 	mul.w	r3, r1, r3
 8007638:	1ad3      	subs	r3, r2, r3
 800763a:	00db      	lsls	r3, r3, #3
 800763c:	3332      	adds	r3, #50	@ 0x32
 800763e:	4a08      	ldr	r2, [pc, #32]	@ (8007660 <UART_SetConfig+0x2d4>)
 8007640:	fba2 2303 	umull	r2, r3, r2, r3
 8007644:	095b      	lsrs	r3, r3, #5
 8007646:	f003 0207 	and.w	r2, r3, #7
 800764a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4422      	add	r2, r4
 8007652:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007654:	e106      	b.n	8007864 <UART_SetConfig+0x4d8>
 8007656:	bf00      	nop
 8007658:	40011000 	.word	0x40011000
 800765c:	40011400 	.word	0x40011400
 8007660:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007664:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007668:	2200      	movs	r2, #0
 800766a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800766e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007672:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007676:	4642      	mov	r2, r8
 8007678:	464b      	mov	r3, r9
 800767a:	1891      	adds	r1, r2, r2
 800767c:	6239      	str	r1, [r7, #32]
 800767e:	415b      	adcs	r3, r3
 8007680:	627b      	str	r3, [r7, #36]	@ 0x24
 8007682:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007686:	4641      	mov	r1, r8
 8007688:	1854      	adds	r4, r2, r1
 800768a:	4649      	mov	r1, r9
 800768c:	eb43 0501 	adc.w	r5, r3, r1
 8007690:	f04f 0200 	mov.w	r2, #0
 8007694:	f04f 0300 	mov.w	r3, #0
 8007698:	00eb      	lsls	r3, r5, #3
 800769a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800769e:	00e2      	lsls	r2, r4, #3
 80076a0:	4614      	mov	r4, r2
 80076a2:	461d      	mov	r5, r3
 80076a4:	4643      	mov	r3, r8
 80076a6:	18e3      	adds	r3, r4, r3
 80076a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80076ac:	464b      	mov	r3, r9
 80076ae:	eb45 0303 	adc.w	r3, r5, r3
 80076b2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80076b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076ba:	685b      	ldr	r3, [r3, #4]
 80076bc:	2200      	movs	r2, #0
 80076be:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80076c2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80076c6:	f04f 0200 	mov.w	r2, #0
 80076ca:	f04f 0300 	mov.w	r3, #0
 80076ce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80076d2:	4629      	mov	r1, r5
 80076d4:	008b      	lsls	r3, r1, #2
 80076d6:	4621      	mov	r1, r4
 80076d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80076dc:	4621      	mov	r1, r4
 80076de:	008a      	lsls	r2, r1, #2
 80076e0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80076e4:	f7f8 fd78 	bl	80001d8 <__aeabi_uldivmod>
 80076e8:	4602      	mov	r2, r0
 80076ea:	460b      	mov	r3, r1
 80076ec:	4b60      	ldr	r3, [pc, #384]	@ (8007870 <UART_SetConfig+0x4e4>)
 80076ee:	fba3 2302 	umull	r2, r3, r3, r2
 80076f2:	095b      	lsrs	r3, r3, #5
 80076f4:	011c      	lsls	r4, r3, #4
 80076f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80076fa:	2200      	movs	r2, #0
 80076fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007700:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007704:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007708:	4642      	mov	r2, r8
 800770a:	464b      	mov	r3, r9
 800770c:	1891      	adds	r1, r2, r2
 800770e:	61b9      	str	r1, [r7, #24]
 8007710:	415b      	adcs	r3, r3
 8007712:	61fb      	str	r3, [r7, #28]
 8007714:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007718:	4641      	mov	r1, r8
 800771a:	1851      	adds	r1, r2, r1
 800771c:	6139      	str	r1, [r7, #16]
 800771e:	4649      	mov	r1, r9
 8007720:	414b      	adcs	r3, r1
 8007722:	617b      	str	r3, [r7, #20]
 8007724:	f04f 0200 	mov.w	r2, #0
 8007728:	f04f 0300 	mov.w	r3, #0
 800772c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007730:	4659      	mov	r1, fp
 8007732:	00cb      	lsls	r3, r1, #3
 8007734:	4651      	mov	r1, sl
 8007736:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800773a:	4651      	mov	r1, sl
 800773c:	00ca      	lsls	r2, r1, #3
 800773e:	4610      	mov	r0, r2
 8007740:	4619      	mov	r1, r3
 8007742:	4603      	mov	r3, r0
 8007744:	4642      	mov	r2, r8
 8007746:	189b      	adds	r3, r3, r2
 8007748:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800774c:	464b      	mov	r3, r9
 800774e:	460a      	mov	r2, r1
 8007750:	eb42 0303 	adc.w	r3, r2, r3
 8007754:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800775c:	685b      	ldr	r3, [r3, #4]
 800775e:	2200      	movs	r2, #0
 8007760:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007762:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007764:	f04f 0200 	mov.w	r2, #0
 8007768:	f04f 0300 	mov.w	r3, #0
 800776c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007770:	4649      	mov	r1, r9
 8007772:	008b      	lsls	r3, r1, #2
 8007774:	4641      	mov	r1, r8
 8007776:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800777a:	4641      	mov	r1, r8
 800777c:	008a      	lsls	r2, r1, #2
 800777e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007782:	f7f8 fd29 	bl	80001d8 <__aeabi_uldivmod>
 8007786:	4602      	mov	r2, r0
 8007788:	460b      	mov	r3, r1
 800778a:	4611      	mov	r1, r2
 800778c:	4b38      	ldr	r3, [pc, #224]	@ (8007870 <UART_SetConfig+0x4e4>)
 800778e:	fba3 2301 	umull	r2, r3, r3, r1
 8007792:	095b      	lsrs	r3, r3, #5
 8007794:	2264      	movs	r2, #100	@ 0x64
 8007796:	fb02 f303 	mul.w	r3, r2, r3
 800779a:	1acb      	subs	r3, r1, r3
 800779c:	011b      	lsls	r3, r3, #4
 800779e:	3332      	adds	r3, #50	@ 0x32
 80077a0:	4a33      	ldr	r2, [pc, #204]	@ (8007870 <UART_SetConfig+0x4e4>)
 80077a2:	fba2 2303 	umull	r2, r3, r2, r3
 80077a6:	095b      	lsrs	r3, r3, #5
 80077a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80077ac:	441c      	add	r4, r3
 80077ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80077b2:	2200      	movs	r2, #0
 80077b4:	673b      	str	r3, [r7, #112]	@ 0x70
 80077b6:	677a      	str	r2, [r7, #116]	@ 0x74
 80077b8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80077bc:	4642      	mov	r2, r8
 80077be:	464b      	mov	r3, r9
 80077c0:	1891      	adds	r1, r2, r2
 80077c2:	60b9      	str	r1, [r7, #8]
 80077c4:	415b      	adcs	r3, r3
 80077c6:	60fb      	str	r3, [r7, #12]
 80077c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80077cc:	4641      	mov	r1, r8
 80077ce:	1851      	adds	r1, r2, r1
 80077d0:	6039      	str	r1, [r7, #0]
 80077d2:	4649      	mov	r1, r9
 80077d4:	414b      	adcs	r3, r1
 80077d6:	607b      	str	r3, [r7, #4]
 80077d8:	f04f 0200 	mov.w	r2, #0
 80077dc:	f04f 0300 	mov.w	r3, #0
 80077e0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80077e4:	4659      	mov	r1, fp
 80077e6:	00cb      	lsls	r3, r1, #3
 80077e8:	4651      	mov	r1, sl
 80077ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80077ee:	4651      	mov	r1, sl
 80077f0:	00ca      	lsls	r2, r1, #3
 80077f2:	4610      	mov	r0, r2
 80077f4:	4619      	mov	r1, r3
 80077f6:	4603      	mov	r3, r0
 80077f8:	4642      	mov	r2, r8
 80077fa:	189b      	adds	r3, r3, r2
 80077fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80077fe:	464b      	mov	r3, r9
 8007800:	460a      	mov	r2, r1
 8007802:	eb42 0303 	adc.w	r3, r2, r3
 8007806:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800780c:	685b      	ldr	r3, [r3, #4]
 800780e:	2200      	movs	r2, #0
 8007810:	663b      	str	r3, [r7, #96]	@ 0x60
 8007812:	667a      	str	r2, [r7, #100]	@ 0x64
 8007814:	f04f 0200 	mov.w	r2, #0
 8007818:	f04f 0300 	mov.w	r3, #0
 800781c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007820:	4649      	mov	r1, r9
 8007822:	008b      	lsls	r3, r1, #2
 8007824:	4641      	mov	r1, r8
 8007826:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800782a:	4641      	mov	r1, r8
 800782c:	008a      	lsls	r2, r1, #2
 800782e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007832:	f7f8 fcd1 	bl	80001d8 <__aeabi_uldivmod>
 8007836:	4602      	mov	r2, r0
 8007838:	460b      	mov	r3, r1
 800783a:	4b0d      	ldr	r3, [pc, #52]	@ (8007870 <UART_SetConfig+0x4e4>)
 800783c:	fba3 1302 	umull	r1, r3, r3, r2
 8007840:	095b      	lsrs	r3, r3, #5
 8007842:	2164      	movs	r1, #100	@ 0x64
 8007844:	fb01 f303 	mul.w	r3, r1, r3
 8007848:	1ad3      	subs	r3, r2, r3
 800784a:	011b      	lsls	r3, r3, #4
 800784c:	3332      	adds	r3, #50	@ 0x32
 800784e:	4a08      	ldr	r2, [pc, #32]	@ (8007870 <UART_SetConfig+0x4e4>)
 8007850:	fba2 2303 	umull	r2, r3, r2, r3
 8007854:	095b      	lsrs	r3, r3, #5
 8007856:	f003 020f 	and.w	r2, r3, #15
 800785a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	4422      	add	r2, r4
 8007862:	609a      	str	r2, [r3, #8]
}
 8007864:	bf00      	nop
 8007866:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800786a:	46bd      	mov	sp, r7
 800786c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007870:	51eb851f 	.word	0x51eb851f

08007874 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007874:	b084      	sub	sp, #16
 8007876:	b580      	push	{r7, lr}
 8007878:	b084      	sub	sp, #16
 800787a:	af00      	add	r7, sp, #0
 800787c:	6078      	str	r0, [r7, #4]
 800787e:	f107 001c 	add.w	r0, r7, #28
 8007882:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007886:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800788a:	2b01      	cmp	r3, #1
 800788c:	d123      	bne.n	80078d6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007892:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	68db      	ldr	r3, [r3, #12]
 800789e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80078a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80078a6:	687a      	ldr	r2, [r7, #4]
 80078a8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	68db      	ldr	r3, [r3, #12]
 80078ae:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80078b6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80078ba:	2b01      	cmp	r3, #1
 80078bc:	d105      	bne.n	80078ca <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	68db      	ldr	r3, [r3, #12]
 80078c2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f001 fae2 	bl	8008e94 <USB_CoreReset>
 80078d0:	4603      	mov	r3, r0
 80078d2:	73fb      	strb	r3, [r7, #15]
 80078d4:	e01b      	b.n	800790e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	68db      	ldr	r3, [r3, #12]
 80078da:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f001 fad6 	bl	8008e94 <USB_CoreReset>
 80078e8:	4603      	mov	r3, r0
 80078ea:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80078ec:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d106      	bne.n	8007902 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078f8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	639a      	str	r2, [r3, #56]	@ 0x38
 8007900:	e005      	b.n	800790e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007906:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800790e:	7fbb      	ldrb	r3, [r7, #30]
 8007910:	2b01      	cmp	r3, #1
 8007912:	d10b      	bne.n	800792c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	689b      	ldr	r3, [r3, #8]
 8007918:	f043 0206 	orr.w	r2, r3, #6
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	689b      	ldr	r3, [r3, #8]
 8007924:	f043 0220 	orr.w	r2, r3, #32
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800792c:	7bfb      	ldrb	r3, [r7, #15]
}
 800792e:	4618      	mov	r0, r3
 8007930:	3710      	adds	r7, #16
 8007932:	46bd      	mov	sp, r7
 8007934:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007938:	b004      	add	sp, #16
 800793a:	4770      	bx	lr

0800793c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800793c:	b480      	push	{r7}
 800793e:	b087      	sub	sp, #28
 8007940:	af00      	add	r7, sp, #0
 8007942:	60f8      	str	r0, [r7, #12]
 8007944:	60b9      	str	r1, [r7, #8]
 8007946:	4613      	mov	r3, r2
 8007948:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800794a:	79fb      	ldrb	r3, [r7, #7]
 800794c:	2b02      	cmp	r3, #2
 800794e:	d165      	bne.n	8007a1c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	4a41      	ldr	r2, [pc, #260]	@ (8007a58 <USB_SetTurnaroundTime+0x11c>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d906      	bls.n	8007966 <USB_SetTurnaroundTime+0x2a>
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	4a40      	ldr	r2, [pc, #256]	@ (8007a5c <USB_SetTurnaroundTime+0x120>)
 800795c:	4293      	cmp	r3, r2
 800795e:	d202      	bcs.n	8007966 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007960:	230f      	movs	r3, #15
 8007962:	617b      	str	r3, [r7, #20]
 8007964:	e062      	b.n	8007a2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	4a3c      	ldr	r2, [pc, #240]	@ (8007a5c <USB_SetTurnaroundTime+0x120>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d306      	bcc.n	800797c <USB_SetTurnaroundTime+0x40>
 800796e:	68bb      	ldr	r3, [r7, #8]
 8007970:	4a3b      	ldr	r2, [pc, #236]	@ (8007a60 <USB_SetTurnaroundTime+0x124>)
 8007972:	4293      	cmp	r3, r2
 8007974:	d202      	bcs.n	800797c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007976:	230e      	movs	r3, #14
 8007978:	617b      	str	r3, [r7, #20]
 800797a:	e057      	b.n	8007a2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	4a38      	ldr	r2, [pc, #224]	@ (8007a60 <USB_SetTurnaroundTime+0x124>)
 8007980:	4293      	cmp	r3, r2
 8007982:	d306      	bcc.n	8007992 <USB_SetTurnaroundTime+0x56>
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	4a37      	ldr	r2, [pc, #220]	@ (8007a64 <USB_SetTurnaroundTime+0x128>)
 8007988:	4293      	cmp	r3, r2
 800798a:	d202      	bcs.n	8007992 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800798c:	230d      	movs	r3, #13
 800798e:	617b      	str	r3, [r7, #20]
 8007990:	e04c      	b.n	8007a2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	4a33      	ldr	r2, [pc, #204]	@ (8007a64 <USB_SetTurnaroundTime+0x128>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d306      	bcc.n	80079a8 <USB_SetTurnaroundTime+0x6c>
 800799a:	68bb      	ldr	r3, [r7, #8]
 800799c:	4a32      	ldr	r2, [pc, #200]	@ (8007a68 <USB_SetTurnaroundTime+0x12c>)
 800799e:	4293      	cmp	r3, r2
 80079a0:	d802      	bhi.n	80079a8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80079a2:	230c      	movs	r3, #12
 80079a4:	617b      	str	r3, [r7, #20]
 80079a6:	e041      	b.n	8007a2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	4a2f      	ldr	r2, [pc, #188]	@ (8007a68 <USB_SetTurnaroundTime+0x12c>)
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d906      	bls.n	80079be <USB_SetTurnaroundTime+0x82>
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	4a2e      	ldr	r2, [pc, #184]	@ (8007a6c <USB_SetTurnaroundTime+0x130>)
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d802      	bhi.n	80079be <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80079b8:	230b      	movs	r3, #11
 80079ba:	617b      	str	r3, [r7, #20]
 80079bc:	e036      	b.n	8007a2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80079be:	68bb      	ldr	r3, [r7, #8]
 80079c0:	4a2a      	ldr	r2, [pc, #168]	@ (8007a6c <USB_SetTurnaroundTime+0x130>)
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d906      	bls.n	80079d4 <USB_SetTurnaroundTime+0x98>
 80079c6:	68bb      	ldr	r3, [r7, #8]
 80079c8:	4a29      	ldr	r2, [pc, #164]	@ (8007a70 <USB_SetTurnaroundTime+0x134>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d802      	bhi.n	80079d4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80079ce:	230a      	movs	r3, #10
 80079d0:	617b      	str	r3, [r7, #20]
 80079d2:	e02b      	b.n	8007a2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	4a26      	ldr	r2, [pc, #152]	@ (8007a70 <USB_SetTurnaroundTime+0x134>)
 80079d8:	4293      	cmp	r3, r2
 80079da:	d906      	bls.n	80079ea <USB_SetTurnaroundTime+0xae>
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	4a25      	ldr	r2, [pc, #148]	@ (8007a74 <USB_SetTurnaroundTime+0x138>)
 80079e0:	4293      	cmp	r3, r2
 80079e2:	d202      	bcs.n	80079ea <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80079e4:	2309      	movs	r3, #9
 80079e6:	617b      	str	r3, [r7, #20]
 80079e8:	e020      	b.n	8007a2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80079ea:	68bb      	ldr	r3, [r7, #8]
 80079ec:	4a21      	ldr	r2, [pc, #132]	@ (8007a74 <USB_SetTurnaroundTime+0x138>)
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d306      	bcc.n	8007a00 <USB_SetTurnaroundTime+0xc4>
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	4a20      	ldr	r2, [pc, #128]	@ (8007a78 <USB_SetTurnaroundTime+0x13c>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d802      	bhi.n	8007a00 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80079fa:	2308      	movs	r3, #8
 80079fc:	617b      	str	r3, [r7, #20]
 80079fe:	e015      	b.n	8007a2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	4a1d      	ldr	r2, [pc, #116]	@ (8007a78 <USB_SetTurnaroundTime+0x13c>)
 8007a04:	4293      	cmp	r3, r2
 8007a06:	d906      	bls.n	8007a16 <USB_SetTurnaroundTime+0xda>
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	4a1c      	ldr	r2, [pc, #112]	@ (8007a7c <USB_SetTurnaroundTime+0x140>)
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d202      	bcs.n	8007a16 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007a10:	2307      	movs	r3, #7
 8007a12:	617b      	str	r3, [r7, #20]
 8007a14:	e00a      	b.n	8007a2c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007a16:	2306      	movs	r3, #6
 8007a18:	617b      	str	r3, [r7, #20]
 8007a1a:	e007      	b.n	8007a2c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007a1c:	79fb      	ldrb	r3, [r7, #7]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d102      	bne.n	8007a28 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007a22:	2309      	movs	r3, #9
 8007a24:	617b      	str	r3, [r7, #20]
 8007a26:	e001      	b.n	8007a2c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007a28:	2309      	movs	r3, #9
 8007a2a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	68db      	ldr	r3, [r3, #12]
 8007a30:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	68da      	ldr	r2, [r3, #12]
 8007a3c:	697b      	ldr	r3, [r7, #20]
 8007a3e:	029b      	lsls	r3, r3, #10
 8007a40:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8007a44:	431a      	orrs	r2, r3
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007a4a:	2300      	movs	r3, #0
}
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	371c      	adds	r7, #28
 8007a50:	46bd      	mov	sp, r7
 8007a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a56:	4770      	bx	lr
 8007a58:	00d8acbf 	.word	0x00d8acbf
 8007a5c:	00e4e1c0 	.word	0x00e4e1c0
 8007a60:	00f42400 	.word	0x00f42400
 8007a64:	01067380 	.word	0x01067380
 8007a68:	011a499f 	.word	0x011a499f
 8007a6c:	01312cff 	.word	0x01312cff
 8007a70:	014ca43f 	.word	0x014ca43f
 8007a74:	016e3600 	.word	0x016e3600
 8007a78:	01a6ab1f 	.word	0x01a6ab1f
 8007a7c:	01e84800 	.word	0x01e84800

08007a80 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007a80:	b480      	push	{r7}
 8007a82:	b083      	sub	sp, #12
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	689b      	ldr	r3, [r3, #8]
 8007a8c:	f043 0201 	orr.w	r2, r3, #1
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007a94:	2300      	movs	r3, #0
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	370c      	adds	r7, #12
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa0:	4770      	bx	lr

08007aa2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007aa2:	b480      	push	{r7}
 8007aa4:	b083      	sub	sp, #12
 8007aa6:	af00      	add	r7, sp, #0
 8007aa8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	689b      	ldr	r3, [r3, #8]
 8007aae:	f023 0201 	bic.w	r2, r3, #1
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007ab6:	2300      	movs	r3, #0
}
 8007ab8:	4618      	mov	r0, r3
 8007aba:	370c      	adds	r7, #12
 8007abc:	46bd      	mov	sp, r7
 8007abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac2:	4770      	bx	lr

08007ac4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b084      	sub	sp, #16
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
 8007acc:	460b      	mov	r3, r1
 8007ace:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	68db      	ldr	r3, [r3, #12]
 8007ad8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007ae0:	78fb      	ldrb	r3, [r7, #3]
 8007ae2:	2b01      	cmp	r3, #1
 8007ae4:	d115      	bne.n	8007b12 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	68db      	ldr	r3, [r3, #12]
 8007aea:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007af2:	200a      	movs	r0, #10
 8007af4:	f7fa fa70 	bl	8001fd8 <HAL_Delay>
      ms += 10U;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	330a      	adds	r3, #10
 8007afc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f001 f939 	bl	8008d76 <USB_GetMode>
 8007b04:	4603      	mov	r3, r0
 8007b06:	2b01      	cmp	r3, #1
 8007b08:	d01e      	beq.n	8007b48 <USB_SetCurrentMode+0x84>
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	2bc7      	cmp	r3, #199	@ 0xc7
 8007b0e:	d9f0      	bls.n	8007af2 <USB_SetCurrentMode+0x2e>
 8007b10:	e01a      	b.n	8007b48 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007b12:	78fb      	ldrb	r3, [r7, #3]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d115      	bne.n	8007b44 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	68db      	ldr	r3, [r3, #12]
 8007b1c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007b24:	200a      	movs	r0, #10
 8007b26:	f7fa fa57 	bl	8001fd8 <HAL_Delay>
      ms += 10U;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	330a      	adds	r3, #10
 8007b2e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f001 f920 	bl	8008d76 <USB_GetMode>
 8007b36:	4603      	mov	r3, r0
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d005      	beq.n	8007b48 <USB_SetCurrentMode+0x84>
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	2bc7      	cmp	r3, #199	@ 0xc7
 8007b40:	d9f0      	bls.n	8007b24 <USB_SetCurrentMode+0x60>
 8007b42:	e001      	b.n	8007b48 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007b44:	2301      	movs	r3, #1
 8007b46:	e005      	b.n	8007b54 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	2bc8      	cmp	r3, #200	@ 0xc8
 8007b4c:	d101      	bne.n	8007b52 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007b4e:	2301      	movs	r3, #1
 8007b50:	e000      	b.n	8007b54 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007b52:	2300      	movs	r3, #0
}
 8007b54:	4618      	mov	r0, r3
 8007b56:	3710      	adds	r7, #16
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bd80      	pop	{r7, pc}

08007b5c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007b5c:	b084      	sub	sp, #16
 8007b5e:	b580      	push	{r7, lr}
 8007b60:	b086      	sub	sp, #24
 8007b62:	af00      	add	r7, sp, #0
 8007b64:	6078      	str	r0, [r7, #4]
 8007b66:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007b6a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007b6e:	2300      	movs	r3, #0
 8007b70:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007b76:	2300      	movs	r3, #0
 8007b78:	613b      	str	r3, [r7, #16]
 8007b7a:	e009      	b.n	8007b90 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007b7c:	687a      	ldr	r2, [r7, #4]
 8007b7e:	693b      	ldr	r3, [r7, #16]
 8007b80:	3340      	adds	r3, #64	@ 0x40
 8007b82:	009b      	lsls	r3, r3, #2
 8007b84:	4413      	add	r3, r2
 8007b86:	2200      	movs	r2, #0
 8007b88:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007b8a:	693b      	ldr	r3, [r7, #16]
 8007b8c:	3301      	adds	r3, #1
 8007b8e:	613b      	str	r3, [r7, #16]
 8007b90:	693b      	ldr	r3, [r7, #16]
 8007b92:	2b0e      	cmp	r3, #14
 8007b94:	d9f2      	bls.n	8007b7c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007b96:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d11c      	bne.n	8007bd8 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ba4:	685b      	ldr	r3, [r3, #4]
 8007ba6:	68fa      	ldr	r2, [r7, #12]
 8007ba8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007bac:	f043 0302 	orr.w	r3, r3, #2
 8007bb0:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bb6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bc2:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bce:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	639a      	str	r2, [r3, #56]	@ 0x38
 8007bd6:	e00b      	b.n	8007bf0 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bdc:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007be8:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007bf6:	461a      	mov	r2, r3
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007bfc:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007c00:	2b01      	cmp	r3, #1
 8007c02:	d10d      	bne.n	8007c20 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007c04:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d104      	bne.n	8007c16 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007c0c:	2100      	movs	r1, #0
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f000 f968 	bl	8007ee4 <USB_SetDevSpeed>
 8007c14:	e008      	b.n	8007c28 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007c16:	2101      	movs	r1, #1
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	f000 f963 	bl	8007ee4 <USB_SetDevSpeed>
 8007c1e:	e003      	b.n	8007c28 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007c20:	2103      	movs	r1, #3
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f000 f95e 	bl	8007ee4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007c28:	2110      	movs	r1, #16
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f000 f8fa 	bl	8007e24 <USB_FlushTxFifo>
 8007c30:	4603      	mov	r3, r0
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d001      	beq.n	8007c3a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8007c36:	2301      	movs	r3, #1
 8007c38:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f000 f924 	bl	8007e88 <USB_FlushRxFifo>
 8007c40:	4603      	mov	r3, r0
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d001      	beq.n	8007c4a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8007c46:	2301      	movs	r3, #1
 8007c48:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c50:	461a      	mov	r2, r3
 8007c52:	2300      	movs	r3, #0
 8007c54:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c5c:	461a      	mov	r2, r3
 8007c5e:	2300      	movs	r3, #0
 8007c60:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c68:	461a      	mov	r2, r3
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007c6e:	2300      	movs	r3, #0
 8007c70:	613b      	str	r3, [r7, #16]
 8007c72:	e043      	b.n	8007cfc <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007c74:	693b      	ldr	r3, [r7, #16]
 8007c76:	015a      	lsls	r2, r3, #5
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	4413      	add	r3, r2
 8007c7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007c86:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007c8a:	d118      	bne.n	8007cbe <USB_DevInit+0x162>
    {
      if (i == 0U)
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d10a      	bne.n	8007ca8 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007c92:	693b      	ldr	r3, [r7, #16]
 8007c94:	015a      	lsls	r2, r3, #5
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	4413      	add	r3, r2
 8007c9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c9e:	461a      	mov	r2, r3
 8007ca0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007ca4:	6013      	str	r3, [r2, #0]
 8007ca6:	e013      	b.n	8007cd0 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007ca8:	693b      	ldr	r3, [r7, #16]
 8007caa:	015a      	lsls	r2, r3, #5
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	4413      	add	r3, r2
 8007cb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007cb4:	461a      	mov	r2, r3
 8007cb6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007cba:	6013      	str	r3, [r2, #0]
 8007cbc:	e008      	b.n	8007cd0 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007cbe:	693b      	ldr	r3, [r7, #16]
 8007cc0:	015a      	lsls	r2, r3, #5
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	4413      	add	r3, r2
 8007cc6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007cca:	461a      	mov	r2, r3
 8007ccc:	2300      	movs	r3, #0
 8007cce:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007cd0:	693b      	ldr	r3, [r7, #16]
 8007cd2:	015a      	lsls	r2, r3, #5
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	4413      	add	r3, r2
 8007cd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007cdc:	461a      	mov	r2, r3
 8007cde:	2300      	movs	r3, #0
 8007ce0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007ce2:	693b      	ldr	r3, [r7, #16]
 8007ce4:	015a      	lsls	r2, r3, #5
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	4413      	add	r3, r2
 8007cea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007cee:	461a      	mov	r2, r3
 8007cf0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007cf4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007cf6:	693b      	ldr	r3, [r7, #16]
 8007cf8:	3301      	adds	r3, #1
 8007cfa:	613b      	str	r3, [r7, #16]
 8007cfc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007d00:	461a      	mov	r2, r3
 8007d02:	693b      	ldr	r3, [r7, #16]
 8007d04:	4293      	cmp	r3, r2
 8007d06:	d3b5      	bcc.n	8007c74 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007d08:	2300      	movs	r3, #0
 8007d0a:	613b      	str	r3, [r7, #16]
 8007d0c:	e043      	b.n	8007d96 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007d0e:	693b      	ldr	r3, [r7, #16]
 8007d10:	015a      	lsls	r2, r3, #5
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	4413      	add	r3, r2
 8007d16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007d20:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007d24:	d118      	bne.n	8007d58 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8007d26:	693b      	ldr	r3, [r7, #16]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d10a      	bne.n	8007d42 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007d2c:	693b      	ldr	r3, [r7, #16]
 8007d2e:	015a      	lsls	r2, r3, #5
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	4413      	add	r3, r2
 8007d34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d38:	461a      	mov	r2, r3
 8007d3a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007d3e:	6013      	str	r3, [r2, #0]
 8007d40:	e013      	b.n	8007d6a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007d42:	693b      	ldr	r3, [r7, #16]
 8007d44:	015a      	lsls	r2, r3, #5
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	4413      	add	r3, r2
 8007d4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d4e:	461a      	mov	r2, r3
 8007d50:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007d54:	6013      	str	r3, [r2, #0]
 8007d56:	e008      	b.n	8007d6a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007d58:	693b      	ldr	r3, [r7, #16]
 8007d5a:	015a      	lsls	r2, r3, #5
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	4413      	add	r3, r2
 8007d60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d64:	461a      	mov	r2, r3
 8007d66:	2300      	movs	r3, #0
 8007d68:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007d6a:	693b      	ldr	r3, [r7, #16]
 8007d6c:	015a      	lsls	r2, r3, #5
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	4413      	add	r3, r2
 8007d72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d76:	461a      	mov	r2, r3
 8007d78:	2300      	movs	r3, #0
 8007d7a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007d7c:	693b      	ldr	r3, [r7, #16]
 8007d7e:	015a      	lsls	r2, r3, #5
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	4413      	add	r3, r2
 8007d84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d88:	461a      	mov	r2, r3
 8007d8a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007d8e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007d90:	693b      	ldr	r3, [r7, #16]
 8007d92:	3301      	adds	r3, #1
 8007d94:	613b      	str	r3, [r7, #16]
 8007d96:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007d9a:	461a      	mov	r2, r3
 8007d9c:	693b      	ldr	r3, [r7, #16]
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d3b5      	bcc.n	8007d0e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007da8:	691b      	ldr	r3, [r3, #16]
 8007daa:	68fa      	ldr	r2, [r7, #12]
 8007dac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007db0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007db4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2200      	movs	r2, #0
 8007dba:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8007dc2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007dc4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d105      	bne.n	8007dd8 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	699b      	ldr	r3, [r3, #24]
 8007dd0:	f043 0210 	orr.w	r2, r3, #16
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	699a      	ldr	r2, [r3, #24]
 8007ddc:	4b10      	ldr	r3, [pc, #64]	@ (8007e20 <USB_DevInit+0x2c4>)
 8007dde:	4313      	orrs	r3, r2
 8007de0:	687a      	ldr	r2, [r7, #4]
 8007de2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007de4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d005      	beq.n	8007df8 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	699b      	ldr	r3, [r3, #24]
 8007df0:	f043 0208 	orr.w	r2, r3, #8
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007df8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007dfc:	2b01      	cmp	r3, #1
 8007dfe:	d107      	bne.n	8007e10 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	699b      	ldr	r3, [r3, #24]
 8007e04:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007e08:	f043 0304 	orr.w	r3, r3, #4
 8007e0c:	687a      	ldr	r2, [r7, #4]
 8007e0e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007e10:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e12:	4618      	mov	r0, r3
 8007e14:	3718      	adds	r7, #24
 8007e16:	46bd      	mov	sp, r7
 8007e18:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007e1c:	b004      	add	sp, #16
 8007e1e:	4770      	bx	lr
 8007e20:	803c3800 	.word	0x803c3800

08007e24 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007e24:	b480      	push	{r7}
 8007e26:	b085      	sub	sp, #20
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
 8007e2c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007e2e:	2300      	movs	r3, #0
 8007e30:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	3301      	adds	r3, #1
 8007e36:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007e3e:	d901      	bls.n	8007e44 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007e40:	2303      	movs	r3, #3
 8007e42:	e01b      	b.n	8007e7c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	691b      	ldr	r3, [r3, #16]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	daf2      	bge.n	8007e32 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	019b      	lsls	r3, r3, #6
 8007e54:	f043 0220 	orr.w	r2, r3, #32
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	3301      	adds	r3, #1
 8007e60:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007e68:	d901      	bls.n	8007e6e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007e6a:	2303      	movs	r3, #3
 8007e6c:	e006      	b.n	8007e7c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	691b      	ldr	r3, [r3, #16]
 8007e72:	f003 0320 	and.w	r3, r3, #32
 8007e76:	2b20      	cmp	r3, #32
 8007e78:	d0f0      	beq.n	8007e5c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007e7a:	2300      	movs	r3, #0
}
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	3714      	adds	r7, #20
 8007e80:	46bd      	mov	sp, r7
 8007e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e86:	4770      	bx	lr

08007e88 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007e88:	b480      	push	{r7}
 8007e8a:	b085      	sub	sp, #20
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007e90:	2300      	movs	r3, #0
 8007e92:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	3301      	adds	r3, #1
 8007e98:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007ea0:	d901      	bls.n	8007ea6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007ea2:	2303      	movs	r3, #3
 8007ea4:	e018      	b.n	8007ed8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	691b      	ldr	r3, [r3, #16]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	daf2      	bge.n	8007e94 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007eae:	2300      	movs	r3, #0
 8007eb0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2210      	movs	r2, #16
 8007eb6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	3301      	adds	r3, #1
 8007ebc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007ec4:	d901      	bls.n	8007eca <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007ec6:	2303      	movs	r3, #3
 8007ec8:	e006      	b.n	8007ed8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	691b      	ldr	r3, [r3, #16]
 8007ece:	f003 0310 	and.w	r3, r3, #16
 8007ed2:	2b10      	cmp	r3, #16
 8007ed4:	d0f0      	beq.n	8007eb8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007ed6:	2300      	movs	r3, #0
}
 8007ed8:	4618      	mov	r0, r3
 8007eda:	3714      	adds	r7, #20
 8007edc:	46bd      	mov	sp, r7
 8007ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee2:	4770      	bx	lr

08007ee4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007ee4:	b480      	push	{r7}
 8007ee6:	b085      	sub	sp, #20
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
 8007eec:	460b      	mov	r3, r1
 8007eee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007efa:	681a      	ldr	r2, [r3, #0]
 8007efc:	78fb      	ldrb	r3, [r7, #3]
 8007efe:	68f9      	ldr	r1, [r7, #12]
 8007f00:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007f04:	4313      	orrs	r3, r2
 8007f06:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007f08:	2300      	movs	r3, #0
}
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	3714      	adds	r7, #20
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f14:	4770      	bx	lr

08007f16 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8007f16:	b480      	push	{r7}
 8007f18:	b087      	sub	sp, #28
 8007f1a:	af00      	add	r7, sp, #0
 8007f1c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007f22:	693b      	ldr	r3, [r7, #16]
 8007f24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f28:	689b      	ldr	r3, [r3, #8]
 8007f2a:	f003 0306 	and.w	r3, r3, #6
 8007f2e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d102      	bne.n	8007f3c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007f36:	2300      	movs	r3, #0
 8007f38:	75fb      	strb	r3, [r7, #23]
 8007f3a:	e00a      	b.n	8007f52 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	2b02      	cmp	r3, #2
 8007f40:	d002      	beq.n	8007f48 <USB_GetDevSpeed+0x32>
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	2b06      	cmp	r3, #6
 8007f46:	d102      	bne.n	8007f4e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007f48:	2302      	movs	r3, #2
 8007f4a:	75fb      	strb	r3, [r7, #23]
 8007f4c:	e001      	b.n	8007f52 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007f4e:	230f      	movs	r3, #15
 8007f50:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007f52:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f54:	4618      	mov	r0, r3
 8007f56:	371c      	adds	r7, #28
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5e:	4770      	bx	lr

08007f60 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007f60:	b480      	push	{r7}
 8007f62:	b085      	sub	sp, #20
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
 8007f68:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	781b      	ldrb	r3, [r3, #0]
 8007f72:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	785b      	ldrb	r3, [r3, #1]
 8007f78:	2b01      	cmp	r3, #1
 8007f7a:	d13a      	bne.n	8007ff2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f82:	69da      	ldr	r2, [r3, #28]
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	781b      	ldrb	r3, [r3, #0]
 8007f88:	f003 030f 	and.w	r3, r3, #15
 8007f8c:	2101      	movs	r1, #1
 8007f8e:	fa01 f303 	lsl.w	r3, r1, r3
 8007f92:	b29b      	uxth	r3, r3
 8007f94:	68f9      	ldr	r1, [r7, #12]
 8007f96:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007f9a:	4313      	orrs	r3, r2
 8007f9c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	015a      	lsls	r2, r3, #5
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	4413      	add	r3, r2
 8007fa6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d155      	bne.n	8008060 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	015a      	lsls	r2, r3, #5
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	4413      	add	r3, r2
 8007fbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007fc0:	681a      	ldr	r2, [r3, #0]
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	689b      	ldr	r3, [r3, #8]
 8007fc6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	791b      	ldrb	r3, [r3, #4]
 8007fce:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007fd0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	059b      	lsls	r3, r3, #22
 8007fd6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007fd8:	4313      	orrs	r3, r2
 8007fda:	68ba      	ldr	r2, [r7, #8]
 8007fdc:	0151      	lsls	r1, r2, #5
 8007fde:	68fa      	ldr	r2, [r7, #12]
 8007fe0:	440a      	add	r2, r1
 8007fe2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007fe6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007fea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007fee:	6013      	str	r3, [r2, #0]
 8007ff0:	e036      	b.n	8008060 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ff8:	69da      	ldr	r2, [r3, #28]
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	781b      	ldrb	r3, [r3, #0]
 8007ffe:	f003 030f 	and.w	r3, r3, #15
 8008002:	2101      	movs	r1, #1
 8008004:	fa01 f303 	lsl.w	r3, r1, r3
 8008008:	041b      	lsls	r3, r3, #16
 800800a:	68f9      	ldr	r1, [r7, #12]
 800800c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008010:	4313      	orrs	r3, r2
 8008012:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	015a      	lsls	r2, r3, #5
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	4413      	add	r3, r2
 800801c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008026:	2b00      	cmp	r3, #0
 8008028:	d11a      	bne.n	8008060 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800802a:	68bb      	ldr	r3, [r7, #8]
 800802c:	015a      	lsls	r2, r3, #5
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	4413      	add	r3, r2
 8008032:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008036:	681a      	ldr	r2, [r3, #0]
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	689b      	ldr	r3, [r3, #8]
 800803c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	791b      	ldrb	r3, [r3, #4]
 8008044:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008046:	430b      	orrs	r3, r1
 8008048:	4313      	orrs	r3, r2
 800804a:	68ba      	ldr	r2, [r7, #8]
 800804c:	0151      	lsls	r1, r2, #5
 800804e:	68fa      	ldr	r2, [r7, #12]
 8008050:	440a      	add	r2, r1
 8008052:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008056:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800805a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800805e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008060:	2300      	movs	r3, #0
}
 8008062:	4618      	mov	r0, r3
 8008064:	3714      	adds	r7, #20
 8008066:	46bd      	mov	sp, r7
 8008068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806c:	4770      	bx	lr
	...

08008070 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008070:	b480      	push	{r7}
 8008072:	b085      	sub	sp, #20
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
 8008078:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	781b      	ldrb	r3, [r3, #0]
 8008082:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	785b      	ldrb	r3, [r3, #1]
 8008088:	2b01      	cmp	r3, #1
 800808a:	d161      	bne.n	8008150 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	015a      	lsls	r2, r3, #5
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	4413      	add	r3, r2
 8008094:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800809e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80080a2:	d11f      	bne.n	80080e4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80080a4:	68bb      	ldr	r3, [r7, #8]
 80080a6:	015a      	lsls	r2, r3, #5
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	4413      	add	r3, r2
 80080ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	68ba      	ldr	r2, [r7, #8]
 80080b4:	0151      	lsls	r1, r2, #5
 80080b6:	68fa      	ldr	r2, [r7, #12]
 80080b8:	440a      	add	r2, r1
 80080ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80080be:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80080c2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	015a      	lsls	r2, r3, #5
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	4413      	add	r3, r2
 80080cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	68ba      	ldr	r2, [r7, #8]
 80080d4:	0151      	lsls	r1, r2, #5
 80080d6:	68fa      	ldr	r2, [r7, #12]
 80080d8:	440a      	add	r2, r1
 80080da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80080de:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80080e2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80080ea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	781b      	ldrb	r3, [r3, #0]
 80080f0:	f003 030f 	and.w	r3, r3, #15
 80080f4:	2101      	movs	r1, #1
 80080f6:	fa01 f303 	lsl.w	r3, r1, r3
 80080fa:	b29b      	uxth	r3, r3
 80080fc:	43db      	mvns	r3, r3
 80080fe:	68f9      	ldr	r1, [r7, #12]
 8008100:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008104:	4013      	ands	r3, r2
 8008106:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800810e:	69da      	ldr	r2, [r3, #28]
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	781b      	ldrb	r3, [r3, #0]
 8008114:	f003 030f 	and.w	r3, r3, #15
 8008118:	2101      	movs	r1, #1
 800811a:	fa01 f303 	lsl.w	r3, r1, r3
 800811e:	b29b      	uxth	r3, r3
 8008120:	43db      	mvns	r3, r3
 8008122:	68f9      	ldr	r1, [r7, #12]
 8008124:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008128:	4013      	ands	r3, r2
 800812a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	015a      	lsls	r2, r3, #5
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	4413      	add	r3, r2
 8008134:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008138:	681a      	ldr	r2, [r3, #0]
 800813a:	68bb      	ldr	r3, [r7, #8]
 800813c:	0159      	lsls	r1, r3, #5
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	440b      	add	r3, r1
 8008142:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008146:	4619      	mov	r1, r3
 8008148:	4b35      	ldr	r3, [pc, #212]	@ (8008220 <USB_DeactivateEndpoint+0x1b0>)
 800814a:	4013      	ands	r3, r2
 800814c:	600b      	str	r3, [r1, #0]
 800814e:	e060      	b.n	8008212 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008150:	68bb      	ldr	r3, [r7, #8]
 8008152:	015a      	lsls	r2, r3, #5
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	4413      	add	r3, r2
 8008158:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008162:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008166:	d11f      	bne.n	80081a8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	015a      	lsls	r2, r3, #5
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	4413      	add	r3, r2
 8008170:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	68ba      	ldr	r2, [r7, #8]
 8008178:	0151      	lsls	r1, r2, #5
 800817a:	68fa      	ldr	r2, [r7, #12]
 800817c:	440a      	add	r2, r1
 800817e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008182:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008186:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	015a      	lsls	r2, r3, #5
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	4413      	add	r3, r2
 8008190:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	68ba      	ldr	r2, [r7, #8]
 8008198:	0151      	lsls	r1, r2, #5
 800819a:	68fa      	ldr	r2, [r7, #12]
 800819c:	440a      	add	r2, r1
 800819e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80081a2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80081a6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80081ae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	781b      	ldrb	r3, [r3, #0]
 80081b4:	f003 030f 	and.w	r3, r3, #15
 80081b8:	2101      	movs	r1, #1
 80081ba:	fa01 f303 	lsl.w	r3, r1, r3
 80081be:	041b      	lsls	r3, r3, #16
 80081c0:	43db      	mvns	r3, r3
 80081c2:	68f9      	ldr	r1, [r7, #12]
 80081c4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80081c8:	4013      	ands	r3, r2
 80081ca:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80081d2:	69da      	ldr	r2, [r3, #28]
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	781b      	ldrb	r3, [r3, #0]
 80081d8:	f003 030f 	and.w	r3, r3, #15
 80081dc:	2101      	movs	r1, #1
 80081de:	fa01 f303 	lsl.w	r3, r1, r3
 80081e2:	041b      	lsls	r3, r3, #16
 80081e4:	43db      	mvns	r3, r3
 80081e6:	68f9      	ldr	r1, [r7, #12]
 80081e8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80081ec:	4013      	ands	r3, r2
 80081ee:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	015a      	lsls	r2, r3, #5
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	4413      	add	r3, r2
 80081f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081fc:	681a      	ldr	r2, [r3, #0]
 80081fe:	68bb      	ldr	r3, [r7, #8]
 8008200:	0159      	lsls	r1, r3, #5
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	440b      	add	r3, r1
 8008206:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800820a:	4619      	mov	r1, r3
 800820c:	4b05      	ldr	r3, [pc, #20]	@ (8008224 <USB_DeactivateEndpoint+0x1b4>)
 800820e:	4013      	ands	r3, r2
 8008210:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008212:	2300      	movs	r3, #0
}
 8008214:	4618      	mov	r0, r3
 8008216:	3714      	adds	r7, #20
 8008218:	46bd      	mov	sp, r7
 800821a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821e:	4770      	bx	lr
 8008220:	ec337800 	.word	0xec337800
 8008224:	eff37800 	.word	0xeff37800

08008228 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b08a      	sub	sp, #40	@ 0x28
 800822c:	af02      	add	r7, sp, #8
 800822e:	60f8      	str	r0, [r7, #12]
 8008230:	60b9      	str	r1, [r7, #8]
 8008232:	4613      	mov	r3, r2
 8008234:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800823a:	68bb      	ldr	r3, [r7, #8]
 800823c:	781b      	ldrb	r3, [r3, #0]
 800823e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	785b      	ldrb	r3, [r3, #1]
 8008244:	2b01      	cmp	r3, #1
 8008246:	f040 817a 	bne.w	800853e <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800824a:	68bb      	ldr	r3, [r7, #8]
 800824c:	691b      	ldr	r3, [r3, #16]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d132      	bne.n	80082b8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008252:	69bb      	ldr	r3, [r7, #24]
 8008254:	015a      	lsls	r2, r3, #5
 8008256:	69fb      	ldr	r3, [r7, #28]
 8008258:	4413      	add	r3, r2
 800825a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800825e:	691b      	ldr	r3, [r3, #16]
 8008260:	69ba      	ldr	r2, [r7, #24]
 8008262:	0151      	lsls	r1, r2, #5
 8008264:	69fa      	ldr	r2, [r7, #28]
 8008266:	440a      	add	r2, r1
 8008268:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800826c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008270:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008274:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008276:	69bb      	ldr	r3, [r7, #24]
 8008278:	015a      	lsls	r2, r3, #5
 800827a:	69fb      	ldr	r3, [r7, #28]
 800827c:	4413      	add	r3, r2
 800827e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008282:	691b      	ldr	r3, [r3, #16]
 8008284:	69ba      	ldr	r2, [r7, #24]
 8008286:	0151      	lsls	r1, r2, #5
 8008288:	69fa      	ldr	r2, [r7, #28]
 800828a:	440a      	add	r2, r1
 800828c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008290:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008294:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008296:	69bb      	ldr	r3, [r7, #24]
 8008298:	015a      	lsls	r2, r3, #5
 800829a:	69fb      	ldr	r3, [r7, #28]
 800829c:	4413      	add	r3, r2
 800829e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082a2:	691b      	ldr	r3, [r3, #16]
 80082a4:	69ba      	ldr	r2, [r7, #24]
 80082a6:	0151      	lsls	r1, r2, #5
 80082a8:	69fa      	ldr	r2, [r7, #28]
 80082aa:	440a      	add	r2, r1
 80082ac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80082b0:	0cdb      	lsrs	r3, r3, #19
 80082b2:	04db      	lsls	r3, r3, #19
 80082b4:	6113      	str	r3, [r2, #16]
 80082b6:	e092      	b.n	80083de <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80082b8:	69bb      	ldr	r3, [r7, #24]
 80082ba:	015a      	lsls	r2, r3, #5
 80082bc:	69fb      	ldr	r3, [r7, #28]
 80082be:	4413      	add	r3, r2
 80082c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082c4:	691b      	ldr	r3, [r3, #16]
 80082c6:	69ba      	ldr	r2, [r7, #24]
 80082c8:	0151      	lsls	r1, r2, #5
 80082ca:	69fa      	ldr	r2, [r7, #28]
 80082cc:	440a      	add	r2, r1
 80082ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80082d2:	0cdb      	lsrs	r3, r3, #19
 80082d4:	04db      	lsls	r3, r3, #19
 80082d6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80082d8:	69bb      	ldr	r3, [r7, #24]
 80082da:	015a      	lsls	r2, r3, #5
 80082dc:	69fb      	ldr	r3, [r7, #28]
 80082de:	4413      	add	r3, r2
 80082e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082e4:	691b      	ldr	r3, [r3, #16]
 80082e6:	69ba      	ldr	r2, [r7, #24]
 80082e8:	0151      	lsls	r1, r2, #5
 80082ea:	69fa      	ldr	r2, [r7, #28]
 80082ec:	440a      	add	r2, r1
 80082ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80082f2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80082f6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80082fa:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80082fc:	69bb      	ldr	r3, [r7, #24]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d11a      	bne.n	8008338 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8008302:	68bb      	ldr	r3, [r7, #8]
 8008304:	691a      	ldr	r2, [r3, #16]
 8008306:	68bb      	ldr	r3, [r7, #8]
 8008308:	689b      	ldr	r3, [r3, #8]
 800830a:	429a      	cmp	r2, r3
 800830c:	d903      	bls.n	8008316 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800830e:	68bb      	ldr	r3, [r7, #8]
 8008310:	689a      	ldr	r2, [r3, #8]
 8008312:	68bb      	ldr	r3, [r7, #8]
 8008314:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008316:	69bb      	ldr	r3, [r7, #24]
 8008318:	015a      	lsls	r2, r3, #5
 800831a:	69fb      	ldr	r3, [r7, #28]
 800831c:	4413      	add	r3, r2
 800831e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008322:	691b      	ldr	r3, [r3, #16]
 8008324:	69ba      	ldr	r2, [r7, #24]
 8008326:	0151      	lsls	r1, r2, #5
 8008328:	69fa      	ldr	r2, [r7, #28]
 800832a:	440a      	add	r2, r1
 800832c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008330:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008334:	6113      	str	r3, [r2, #16]
 8008336:	e01b      	b.n	8008370 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008338:	69bb      	ldr	r3, [r7, #24]
 800833a:	015a      	lsls	r2, r3, #5
 800833c:	69fb      	ldr	r3, [r7, #28]
 800833e:	4413      	add	r3, r2
 8008340:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008344:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8008346:	68bb      	ldr	r3, [r7, #8]
 8008348:	6919      	ldr	r1, [r3, #16]
 800834a:	68bb      	ldr	r3, [r7, #8]
 800834c:	689b      	ldr	r3, [r3, #8]
 800834e:	440b      	add	r3, r1
 8008350:	1e59      	subs	r1, r3, #1
 8008352:	68bb      	ldr	r3, [r7, #8]
 8008354:	689b      	ldr	r3, [r3, #8]
 8008356:	fbb1 f3f3 	udiv	r3, r1, r3
 800835a:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800835c:	4ba2      	ldr	r3, [pc, #648]	@ (80085e8 <USB_EPStartXfer+0x3c0>)
 800835e:	400b      	ands	r3, r1
 8008360:	69b9      	ldr	r1, [r7, #24]
 8008362:	0148      	lsls	r0, r1, #5
 8008364:	69f9      	ldr	r1, [r7, #28]
 8008366:	4401      	add	r1, r0
 8008368:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800836c:	4313      	orrs	r3, r2
 800836e:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008370:	69bb      	ldr	r3, [r7, #24]
 8008372:	015a      	lsls	r2, r3, #5
 8008374:	69fb      	ldr	r3, [r7, #28]
 8008376:	4413      	add	r3, r2
 8008378:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800837c:	691a      	ldr	r2, [r3, #16]
 800837e:	68bb      	ldr	r3, [r7, #8]
 8008380:	691b      	ldr	r3, [r3, #16]
 8008382:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008386:	69b9      	ldr	r1, [r7, #24]
 8008388:	0148      	lsls	r0, r1, #5
 800838a:	69f9      	ldr	r1, [r7, #28]
 800838c:	4401      	add	r1, r0
 800838e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008392:	4313      	orrs	r3, r2
 8008394:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	791b      	ldrb	r3, [r3, #4]
 800839a:	2b01      	cmp	r3, #1
 800839c:	d11f      	bne.n	80083de <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800839e:	69bb      	ldr	r3, [r7, #24]
 80083a0:	015a      	lsls	r2, r3, #5
 80083a2:	69fb      	ldr	r3, [r7, #28]
 80083a4:	4413      	add	r3, r2
 80083a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083aa:	691b      	ldr	r3, [r3, #16]
 80083ac:	69ba      	ldr	r2, [r7, #24]
 80083ae:	0151      	lsls	r1, r2, #5
 80083b0:	69fa      	ldr	r2, [r7, #28]
 80083b2:	440a      	add	r2, r1
 80083b4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80083b8:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80083bc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80083be:	69bb      	ldr	r3, [r7, #24]
 80083c0:	015a      	lsls	r2, r3, #5
 80083c2:	69fb      	ldr	r3, [r7, #28]
 80083c4:	4413      	add	r3, r2
 80083c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083ca:	691b      	ldr	r3, [r3, #16]
 80083cc:	69ba      	ldr	r2, [r7, #24]
 80083ce:	0151      	lsls	r1, r2, #5
 80083d0:	69fa      	ldr	r2, [r7, #28]
 80083d2:	440a      	add	r2, r1
 80083d4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80083d8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80083dc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80083de:	79fb      	ldrb	r3, [r7, #7]
 80083e0:	2b01      	cmp	r3, #1
 80083e2:	d14b      	bne.n	800847c <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80083e4:	68bb      	ldr	r3, [r7, #8]
 80083e6:	69db      	ldr	r3, [r3, #28]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d009      	beq.n	8008400 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80083ec:	69bb      	ldr	r3, [r7, #24]
 80083ee:	015a      	lsls	r2, r3, #5
 80083f0:	69fb      	ldr	r3, [r7, #28]
 80083f2:	4413      	add	r3, r2
 80083f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083f8:	461a      	mov	r2, r3
 80083fa:	68bb      	ldr	r3, [r7, #8]
 80083fc:	69db      	ldr	r3, [r3, #28]
 80083fe:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	791b      	ldrb	r3, [r3, #4]
 8008404:	2b01      	cmp	r3, #1
 8008406:	d128      	bne.n	800845a <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008408:	69fb      	ldr	r3, [r7, #28]
 800840a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800840e:	689b      	ldr	r3, [r3, #8]
 8008410:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008414:	2b00      	cmp	r3, #0
 8008416:	d110      	bne.n	800843a <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008418:	69bb      	ldr	r3, [r7, #24]
 800841a:	015a      	lsls	r2, r3, #5
 800841c:	69fb      	ldr	r3, [r7, #28]
 800841e:	4413      	add	r3, r2
 8008420:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	69ba      	ldr	r2, [r7, #24]
 8008428:	0151      	lsls	r1, r2, #5
 800842a:	69fa      	ldr	r2, [r7, #28]
 800842c:	440a      	add	r2, r1
 800842e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008432:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008436:	6013      	str	r3, [r2, #0]
 8008438:	e00f      	b.n	800845a <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800843a:	69bb      	ldr	r3, [r7, #24]
 800843c:	015a      	lsls	r2, r3, #5
 800843e:	69fb      	ldr	r3, [r7, #28]
 8008440:	4413      	add	r3, r2
 8008442:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	69ba      	ldr	r2, [r7, #24]
 800844a:	0151      	lsls	r1, r2, #5
 800844c:	69fa      	ldr	r2, [r7, #28]
 800844e:	440a      	add	r2, r1
 8008450:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008454:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008458:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800845a:	69bb      	ldr	r3, [r7, #24]
 800845c:	015a      	lsls	r2, r3, #5
 800845e:	69fb      	ldr	r3, [r7, #28]
 8008460:	4413      	add	r3, r2
 8008462:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	69ba      	ldr	r2, [r7, #24]
 800846a:	0151      	lsls	r1, r2, #5
 800846c:	69fa      	ldr	r2, [r7, #28]
 800846e:	440a      	add	r2, r1
 8008470:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008474:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008478:	6013      	str	r3, [r2, #0]
 800847a:	e165      	b.n	8008748 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800847c:	69bb      	ldr	r3, [r7, #24]
 800847e:	015a      	lsls	r2, r3, #5
 8008480:	69fb      	ldr	r3, [r7, #28]
 8008482:	4413      	add	r3, r2
 8008484:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	69ba      	ldr	r2, [r7, #24]
 800848c:	0151      	lsls	r1, r2, #5
 800848e:	69fa      	ldr	r2, [r7, #28]
 8008490:	440a      	add	r2, r1
 8008492:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008496:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800849a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	791b      	ldrb	r3, [r3, #4]
 80084a0:	2b01      	cmp	r3, #1
 80084a2:	d015      	beq.n	80084d0 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	691b      	ldr	r3, [r3, #16]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	f000 814d 	beq.w	8008748 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80084ae:	69fb      	ldr	r3, [r7, #28]
 80084b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80084b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80084b6:	68bb      	ldr	r3, [r7, #8]
 80084b8:	781b      	ldrb	r3, [r3, #0]
 80084ba:	f003 030f 	and.w	r3, r3, #15
 80084be:	2101      	movs	r1, #1
 80084c0:	fa01 f303 	lsl.w	r3, r1, r3
 80084c4:	69f9      	ldr	r1, [r7, #28]
 80084c6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80084ca:	4313      	orrs	r3, r2
 80084cc:	634b      	str	r3, [r1, #52]	@ 0x34
 80084ce:	e13b      	b.n	8008748 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80084d0:	69fb      	ldr	r3, [r7, #28]
 80084d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80084d6:	689b      	ldr	r3, [r3, #8]
 80084d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d110      	bne.n	8008502 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80084e0:	69bb      	ldr	r3, [r7, #24]
 80084e2:	015a      	lsls	r2, r3, #5
 80084e4:	69fb      	ldr	r3, [r7, #28]
 80084e6:	4413      	add	r3, r2
 80084e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	69ba      	ldr	r2, [r7, #24]
 80084f0:	0151      	lsls	r1, r2, #5
 80084f2:	69fa      	ldr	r2, [r7, #28]
 80084f4:	440a      	add	r2, r1
 80084f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80084fa:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80084fe:	6013      	str	r3, [r2, #0]
 8008500:	e00f      	b.n	8008522 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008502:	69bb      	ldr	r3, [r7, #24]
 8008504:	015a      	lsls	r2, r3, #5
 8008506:	69fb      	ldr	r3, [r7, #28]
 8008508:	4413      	add	r3, r2
 800850a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	69ba      	ldr	r2, [r7, #24]
 8008512:	0151      	lsls	r1, r2, #5
 8008514:	69fa      	ldr	r2, [r7, #28]
 8008516:	440a      	add	r2, r1
 8008518:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800851c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008520:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008522:	68bb      	ldr	r3, [r7, #8]
 8008524:	68d9      	ldr	r1, [r3, #12]
 8008526:	68bb      	ldr	r3, [r7, #8]
 8008528:	781a      	ldrb	r2, [r3, #0]
 800852a:	68bb      	ldr	r3, [r7, #8]
 800852c:	691b      	ldr	r3, [r3, #16]
 800852e:	b298      	uxth	r0, r3
 8008530:	79fb      	ldrb	r3, [r7, #7]
 8008532:	9300      	str	r3, [sp, #0]
 8008534:	4603      	mov	r3, r0
 8008536:	68f8      	ldr	r0, [r7, #12]
 8008538:	f000 f9b8 	bl	80088ac <USB_WritePacket>
 800853c:	e104      	b.n	8008748 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800853e:	69bb      	ldr	r3, [r7, #24]
 8008540:	015a      	lsls	r2, r3, #5
 8008542:	69fb      	ldr	r3, [r7, #28]
 8008544:	4413      	add	r3, r2
 8008546:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800854a:	691b      	ldr	r3, [r3, #16]
 800854c:	69ba      	ldr	r2, [r7, #24]
 800854e:	0151      	lsls	r1, r2, #5
 8008550:	69fa      	ldr	r2, [r7, #28]
 8008552:	440a      	add	r2, r1
 8008554:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008558:	0cdb      	lsrs	r3, r3, #19
 800855a:	04db      	lsls	r3, r3, #19
 800855c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800855e:	69bb      	ldr	r3, [r7, #24]
 8008560:	015a      	lsls	r2, r3, #5
 8008562:	69fb      	ldr	r3, [r7, #28]
 8008564:	4413      	add	r3, r2
 8008566:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800856a:	691b      	ldr	r3, [r3, #16]
 800856c:	69ba      	ldr	r2, [r7, #24]
 800856e:	0151      	lsls	r1, r2, #5
 8008570:	69fa      	ldr	r2, [r7, #28]
 8008572:	440a      	add	r2, r1
 8008574:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008578:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800857c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008580:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8008582:	69bb      	ldr	r3, [r7, #24]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d131      	bne.n	80085ec <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8008588:	68bb      	ldr	r3, [r7, #8]
 800858a:	691b      	ldr	r3, [r3, #16]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d003      	beq.n	8008598 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8008590:	68bb      	ldr	r3, [r7, #8]
 8008592:	689a      	ldr	r2, [r3, #8]
 8008594:	68bb      	ldr	r3, [r7, #8]
 8008596:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	689a      	ldr	r2, [r3, #8]
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80085a0:	69bb      	ldr	r3, [r7, #24]
 80085a2:	015a      	lsls	r2, r3, #5
 80085a4:	69fb      	ldr	r3, [r7, #28]
 80085a6:	4413      	add	r3, r2
 80085a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085ac:	691a      	ldr	r2, [r3, #16]
 80085ae:	68bb      	ldr	r3, [r7, #8]
 80085b0:	6a1b      	ldr	r3, [r3, #32]
 80085b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80085b6:	69b9      	ldr	r1, [r7, #24]
 80085b8:	0148      	lsls	r0, r1, #5
 80085ba:	69f9      	ldr	r1, [r7, #28]
 80085bc:	4401      	add	r1, r0
 80085be:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80085c2:	4313      	orrs	r3, r2
 80085c4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80085c6:	69bb      	ldr	r3, [r7, #24]
 80085c8:	015a      	lsls	r2, r3, #5
 80085ca:	69fb      	ldr	r3, [r7, #28]
 80085cc:	4413      	add	r3, r2
 80085ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085d2:	691b      	ldr	r3, [r3, #16]
 80085d4:	69ba      	ldr	r2, [r7, #24]
 80085d6:	0151      	lsls	r1, r2, #5
 80085d8:	69fa      	ldr	r2, [r7, #28]
 80085da:	440a      	add	r2, r1
 80085dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80085e0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80085e4:	6113      	str	r3, [r2, #16]
 80085e6:	e061      	b.n	80086ac <USB_EPStartXfer+0x484>
 80085e8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	691b      	ldr	r3, [r3, #16]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d123      	bne.n	800863c <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80085f4:	69bb      	ldr	r3, [r7, #24]
 80085f6:	015a      	lsls	r2, r3, #5
 80085f8:	69fb      	ldr	r3, [r7, #28]
 80085fa:	4413      	add	r3, r2
 80085fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008600:	691a      	ldr	r2, [r3, #16]
 8008602:	68bb      	ldr	r3, [r7, #8]
 8008604:	689b      	ldr	r3, [r3, #8]
 8008606:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800860a:	69b9      	ldr	r1, [r7, #24]
 800860c:	0148      	lsls	r0, r1, #5
 800860e:	69f9      	ldr	r1, [r7, #28]
 8008610:	4401      	add	r1, r0
 8008612:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008616:	4313      	orrs	r3, r2
 8008618:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800861a:	69bb      	ldr	r3, [r7, #24]
 800861c:	015a      	lsls	r2, r3, #5
 800861e:	69fb      	ldr	r3, [r7, #28]
 8008620:	4413      	add	r3, r2
 8008622:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008626:	691b      	ldr	r3, [r3, #16]
 8008628:	69ba      	ldr	r2, [r7, #24]
 800862a:	0151      	lsls	r1, r2, #5
 800862c:	69fa      	ldr	r2, [r7, #28]
 800862e:	440a      	add	r2, r1
 8008630:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008634:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008638:	6113      	str	r3, [r2, #16]
 800863a:	e037      	b.n	80086ac <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800863c:	68bb      	ldr	r3, [r7, #8]
 800863e:	691a      	ldr	r2, [r3, #16]
 8008640:	68bb      	ldr	r3, [r7, #8]
 8008642:	689b      	ldr	r3, [r3, #8]
 8008644:	4413      	add	r3, r2
 8008646:	1e5a      	subs	r2, r3, #1
 8008648:	68bb      	ldr	r3, [r7, #8]
 800864a:	689b      	ldr	r3, [r3, #8]
 800864c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008650:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8008652:	68bb      	ldr	r3, [r7, #8]
 8008654:	689b      	ldr	r3, [r3, #8]
 8008656:	8afa      	ldrh	r2, [r7, #22]
 8008658:	fb03 f202 	mul.w	r2, r3, r2
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008660:	69bb      	ldr	r3, [r7, #24]
 8008662:	015a      	lsls	r2, r3, #5
 8008664:	69fb      	ldr	r3, [r7, #28]
 8008666:	4413      	add	r3, r2
 8008668:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800866c:	691a      	ldr	r2, [r3, #16]
 800866e:	8afb      	ldrh	r3, [r7, #22]
 8008670:	04d9      	lsls	r1, r3, #19
 8008672:	4b38      	ldr	r3, [pc, #224]	@ (8008754 <USB_EPStartXfer+0x52c>)
 8008674:	400b      	ands	r3, r1
 8008676:	69b9      	ldr	r1, [r7, #24]
 8008678:	0148      	lsls	r0, r1, #5
 800867a:	69f9      	ldr	r1, [r7, #28]
 800867c:	4401      	add	r1, r0
 800867e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008682:	4313      	orrs	r3, r2
 8008684:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008686:	69bb      	ldr	r3, [r7, #24]
 8008688:	015a      	lsls	r2, r3, #5
 800868a:	69fb      	ldr	r3, [r7, #28]
 800868c:	4413      	add	r3, r2
 800868e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008692:	691a      	ldr	r2, [r3, #16]
 8008694:	68bb      	ldr	r3, [r7, #8]
 8008696:	6a1b      	ldr	r3, [r3, #32]
 8008698:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800869c:	69b9      	ldr	r1, [r7, #24]
 800869e:	0148      	lsls	r0, r1, #5
 80086a0:	69f9      	ldr	r1, [r7, #28]
 80086a2:	4401      	add	r1, r0
 80086a4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80086a8:	4313      	orrs	r3, r2
 80086aa:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80086ac:	79fb      	ldrb	r3, [r7, #7]
 80086ae:	2b01      	cmp	r3, #1
 80086b0:	d10d      	bne.n	80086ce <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80086b2:	68bb      	ldr	r3, [r7, #8]
 80086b4:	68db      	ldr	r3, [r3, #12]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d009      	beq.n	80086ce <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80086ba:	68bb      	ldr	r3, [r7, #8]
 80086bc:	68d9      	ldr	r1, [r3, #12]
 80086be:	69bb      	ldr	r3, [r7, #24]
 80086c0:	015a      	lsls	r2, r3, #5
 80086c2:	69fb      	ldr	r3, [r7, #28]
 80086c4:	4413      	add	r3, r2
 80086c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086ca:	460a      	mov	r2, r1
 80086cc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80086ce:	68bb      	ldr	r3, [r7, #8]
 80086d0:	791b      	ldrb	r3, [r3, #4]
 80086d2:	2b01      	cmp	r3, #1
 80086d4:	d128      	bne.n	8008728 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80086d6:	69fb      	ldr	r3, [r7, #28]
 80086d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80086dc:	689b      	ldr	r3, [r3, #8]
 80086de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d110      	bne.n	8008708 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80086e6:	69bb      	ldr	r3, [r7, #24]
 80086e8:	015a      	lsls	r2, r3, #5
 80086ea:	69fb      	ldr	r3, [r7, #28]
 80086ec:	4413      	add	r3, r2
 80086ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	69ba      	ldr	r2, [r7, #24]
 80086f6:	0151      	lsls	r1, r2, #5
 80086f8:	69fa      	ldr	r2, [r7, #28]
 80086fa:	440a      	add	r2, r1
 80086fc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008700:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008704:	6013      	str	r3, [r2, #0]
 8008706:	e00f      	b.n	8008728 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008708:	69bb      	ldr	r3, [r7, #24]
 800870a:	015a      	lsls	r2, r3, #5
 800870c:	69fb      	ldr	r3, [r7, #28]
 800870e:	4413      	add	r3, r2
 8008710:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	69ba      	ldr	r2, [r7, #24]
 8008718:	0151      	lsls	r1, r2, #5
 800871a:	69fa      	ldr	r2, [r7, #28]
 800871c:	440a      	add	r2, r1
 800871e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008722:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008726:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008728:	69bb      	ldr	r3, [r7, #24]
 800872a:	015a      	lsls	r2, r3, #5
 800872c:	69fb      	ldr	r3, [r7, #28]
 800872e:	4413      	add	r3, r2
 8008730:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	69ba      	ldr	r2, [r7, #24]
 8008738:	0151      	lsls	r1, r2, #5
 800873a:	69fa      	ldr	r2, [r7, #28]
 800873c:	440a      	add	r2, r1
 800873e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008742:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008746:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008748:	2300      	movs	r3, #0
}
 800874a:	4618      	mov	r0, r3
 800874c:	3720      	adds	r7, #32
 800874e:	46bd      	mov	sp, r7
 8008750:	bd80      	pop	{r7, pc}
 8008752:	bf00      	nop
 8008754:	1ff80000 	.word	0x1ff80000

08008758 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008758:	b480      	push	{r7}
 800875a:	b087      	sub	sp, #28
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
 8008760:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008762:	2300      	movs	r3, #0
 8008764:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008766:	2300      	movs	r3, #0
 8008768:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	785b      	ldrb	r3, [r3, #1]
 8008772:	2b01      	cmp	r3, #1
 8008774:	d14a      	bne.n	800880c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	781b      	ldrb	r3, [r3, #0]
 800877a:	015a      	lsls	r2, r3, #5
 800877c:	693b      	ldr	r3, [r7, #16]
 800877e:	4413      	add	r3, r2
 8008780:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800878a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800878e:	f040 8086 	bne.w	800889e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	781b      	ldrb	r3, [r3, #0]
 8008796:	015a      	lsls	r2, r3, #5
 8008798:	693b      	ldr	r3, [r7, #16]
 800879a:	4413      	add	r3, r2
 800879c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	683a      	ldr	r2, [r7, #0]
 80087a4:	7812      	ldrb	r2, [r2, #0]
 80087a6:	0151      	lsls	r1, r2, #5
 80087a8:	693a      	ldr	r2, [r7, #16]
 80087aa:	440a      	add	r2, r1
 80087ac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80087b0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80087b4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	781b      	ldrb	r3, [r3, #0]
 80087ba:	015a      	lsls	r2, r3, #5
 80087bc:	693b      	ldr	r3, [r7, #16]
 80087be:	4413      	add	r3, r2
 80087c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	683a      	ldr	r2, [r7, #0]
 80087c8:	7812      	ldrb	r2, [r2, #0]
 80087ca:	0151      	lsls	r1, r2, #5
 80087cc:	693a      	ldr	r2, [r7, #16]
 80087ce:	440a      	add	r2, r1
 80087d0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80087d4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80087d8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	3301      	adds	r3, #1
 80087de:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80087e6:	4293      	cmp	r3, r2
 80087e8:	d902      	bls.n	80087f0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80087ea:	2301      	movs	r3, #1
 80087ec:	75fb      	strb	r3, [r7, #23]
          break;
 80087ee:	e056      	b.n	800889e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	781b      	ldrb	r3, [r3, #0]
 80087f4:	015a      	lsls	r2, r3, #5
 80087f6:	693b      	ldr	r3, [r7, #16]
 80087f8:	4413      	add	r3, r2
 80087fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008804:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008808:	d0e7      	beq.n	80087da <USB_EPStopXfer+0x82>
 800880a:	e048      	b.n	800889e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	781b      	ldrb	r3, [r3, #0]
 8008810:	015a      	lsls	r2, r3, #5
 8008812:	693b      	ldr	r3, [r7, #16]
 8008814:	4413      	add	r3, r2
 8008816:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008820:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008824:	d13b      	bne.n	800889e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	781b      	ldrb	r3, [r3, #0]
 800882a:	015a      	lsls	r2, r3, #5
 800882c:	693b      	ldr	r3, [r7, #16]
 800882e:	4413      	add	r3, r2
 8008830:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	683a      	ldr	r2, [r7, #0]
 8008838:	7812      	ldrb	r2, [r2, #0]
 800883a:	0151      	lsls	r1, r2, #5
 800883c:	693a      	ldr	r2, [r7, #16]
 800883e:	440a      	add	r2, r1
 8008840:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008844:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008848:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	781b      	ldrb	r3, [r3, #0]
 800884e:	015a      	lsls	r2, r3, #5
 8008850:	693b      	ldr	r3, [r7, #16]
 8008852:	4413      	add	r3, r2
 8008854:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	683a      	ldr	r2, [r7, #0]
 800885c:	7812      	ldrb	r2, [r2, #0]
 800885e:	0151      	lsls	r1, r2, #5
 8008860:	693a      	ldr	r2, [r7, #16]
 8008862:	440a      	add	r2, r1
 8008864:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008868:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800886c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	3301      	adds	r3, #1
 8008872:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	f242 7210 	movw	r2, #10000	@ 0x2710
 800887a:	4293      	cmp	r3, r2
 800887c:	d902      	bls.n	8008884 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800887e:	2301      	movs	r3, #1
 8008880:	75fb      	strb	r3, [r7, #23]
          break;
 8008882:	e00c      	b.n	800889e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	781b      	ldrb	r3, [r3, #0]
 8008888:	015a      	lsls	r2, r3, #5
 800888a:	693b      	ldr	r3, [r7, #16]
 800888c:	4413      	add	r3, r2
 800888e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008898:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800889c:	d0e7      	beq.n	800886e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800889e:	7dfb      	ldrb	r3, [r7, #23]
}
 80088a0:	4618      	mov	r0, r3
 80088a2:	371c      	adds	r7, #28
 80088a4:	46bd      	mov	sp, r7
 80088a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088aa:	4770      	bx	lr

080088ac <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80088ac:	b480      	push	{r7}
 80088ae:	b089      	sub	sp, #36	@ 0x24
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	60f8      	str	r0, [r7, #12]
 80088b4:	60b9      	str	r1, [r7, #8]
 80088b6:	4611      	mov	r1, r2
 80088b8:	461a      	mov	r2, r3
 80088ba:	460b      	mov	r3, r1
 80088bc:	71fb      	strb	r3, [r7, #7]
 80088be:	4613      	mov	r3, r2
 80088c0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80088c6:	68bb      	ldr	r3, [r7, #8]
 80088c8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80088ca:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d123      	bne.n	800891a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80088d2:	88bb      	ldrh	r3, [r7, #4]
 80088d4:	3303      	adds	r3, #3
 80088d6:	089b      	lsrs	r3, r3, #2
 80088d8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80088da:	2300      	movs	r3, #0
 80088dc:	61bb      	str	r3, [r7, #24]
 80088de:	e018      	b.n	8008912 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80088e0:	79fb      	ldrb	r3, [r7, #7]
 80088e2:	031a      	lsls	r2, r3, #12
 80088e4:	697b      	ldr	r3, [r7, #20]
 80088e6:	4413      	add	r3, r2
 80088e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80088ec:	461a      	mov	r2, r3
 80088ee:	69fb      	ldr	r3, [r7, #28]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80088f4:	69fb      	ldr	r3, [r7, #28]
 80088f6:	3301      	adds	r3, #1
 80088f8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80088fa:	69fb      	ldr	r3, [r7, #28]
 80088fc:	3301      	adds	r3, #1
 80088fe:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008900:	69fb      	ldr	r3, [r7, #28]
 8008902:	3301      	adds	r3, #1
 8008904:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008906:	69fb      	ldr	r3, [r7, #28]
 8008908:	3301      	adds	r3, #1
 800890a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800890c:	69bb      	ldr	r3, [r7, #24]
 800890e:	3301      	adds	r3, #1
 8008910:	61bb      	str	r3, [r7, #24]
 8008912:	69ba      	ldr	r2, [r7, #24]
 8008914:	693b      	ldr	r3, [r7, #16]
 8008916:	429a      	cmp	r2, r3
 8008918:	d3e2      	bcc.n	80088e0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800891a:	2300      	movs	r3, #0
}
 800891c:	4618      	mov	r0, r3
 800891e:	3724      	adds	r7, #36	@ 0x24
 8008920:	46bd      	mov	sp, r7
 8008922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008926:	4770      	bx	lr

08008928 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008928:	b480      	push	{r7}
 800892a:	b08b      	sub	sp, #44	@ 0x2c
 800892c:	af00      	add	r7, sp, #0
 800892e:	60f8      	str	r0, [r7, #12]
 8008930:	60b9      	str	r1, [r7, #8]
 8008932:	4613      	mov	r3, r2
 8008934:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800893a:	68bb      	ldr	r3, [r7, #8]
 800893c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800893e:	88fb      	ldrh	r3, [r7, #6]
 8008940:	089b      	lsrs	r3, r3, #2
 8008942:	b29b      	uxth	r3, r3
 8008944:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008946:	88fb      	ldrh	r3, [r7, #6]
 8008948:	f003 0303 	and.w	r3, r3, #3
 800894c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800894e:	2300      	movs	r3, #0
 8008950:	623b      	str	r3, [r7, #32]
 8008952:	e014      	b.n	800897e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008954:	69bb      	ldr	r3, [r7, #24]
 8008956:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800895a:	681a      	ldr	r2, [r3, #0]
 800895c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800895e:	601a      	str	r2, [r3, #0]
    pDest++;
 8008960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008962:	3301      	adds	r3, #1
 8008964:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008968:	3301      	adds	r3, #1
 800896a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800896c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800896e:	3301      	adds	r3, #1
 8008970:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008974:	3301      	adds	r3, #1
 8008976:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8008978:	6a3b      	ldr	r3, [r7, #32]
 800897a:	3301      	adds	r3, #1
 800897c:	623b      	str	r3, [r7, #32]
 800897e:	6a3a      	ldr	r2, [r7, #32]
 8008980:	697b      	ldr	r3, [r7, #20]
 8008982:	429a      	cmp	r2, r3
 8008984:	d3e6      	bcc.n	8008954 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008986:	8bfb      	ldrh	r3, [r7, #30]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d01e      	beq.n	80089ca <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800898c:	2300      	movs	r3, #0
 800898e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008990:	69bb      	ldr	r3, [r7, #24]
 8008992:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008996:	461a      	mov	r2, r3
 8008998:	f107 0310 	add.w	r3, r7, #16
 800899c:	6812      	ldr	r2, [r2, #0]
 800899e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80089a0:	693a      	ldr	r2, [r7, #16]
 80089a2:	6a3b      	ldr	r3, [r7, #32]
 80089a4:	b2db      	uxtb	r3, r3
 80089a6:	00db      	lsls	r3, r3, #3
 80089a8:	fa22 f303 	lsr.w	r3, r2, r3
 80089ac:	b2da      	uxtb	r2, r3
 80089ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089b0:	701a      	strb	r2, [r3, #0]
      i++;
 80089b2:	6a3b      	ldr	r3, [r7, #32]
 80089b4:	3301      	adds	r3, #1
 80089b6:	623b      	str	r3, [r7, #32]
      pDest++;
 80089b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089ba:	3301      	adds	r3, #1
 80089bc:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80089be:	8bfb      	ldrh	r3, [r7, #30]
 80089c0:	3b01      	subs	r3, #1
 80089c2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80089c4:	8bfb      	ldrh	r3, [r7, #30]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d1ea      	bne.n	80089a0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80089ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80089cc:	4618      	mov	r0, r3
 80089ce:	372c      	adds	r7, #44	@ 0x2c
 80089d0:	46bd      	mov	sp, r7
 80089d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d6:	4770      	bx	lr

080089d8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80089d8:	b480      	push	{r7}
 80089da:	b085      	sub	sp, #20
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
 80089e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	781b      	ldrb	r3, [r3, #0]
 80089ea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	785b      	ldrb	r3, [r3, #1]
 80089f0:	2b01      	cmp	r3, #1
 80089f2:	d12c      	bne.n	8008a4e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80089f4:	68bb      	ldr	r3, [r7, #8]
 80089f6:	015a      	lsls	r2, r3, #5
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	4413      	add	r3, r2
 80089fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	db12      	blt.n	8008a2c <USB_EPSetStall+0x54>
 8008a06:	68bb      	ldr	r3, [r7, #8]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d00f      	beq.n	8008a2c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008a0c:	68bb      	ldr	r3, [r7, #8]
 8008a0e:	015a      	lsls	r2, r3, #5
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	4413      	add	r3, r2
 8008a14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	68ba      	ldr	r2, [r7, #8]
 8008a1c:	0151      	lsls	r1, r2, #5
 8008a1e:	68fa      	ldr	r2, [r7, #12]
 8008a20:	440a      	add	r2, r1
 8008a22:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008a26:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008a2a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008a2c:	68bb      	ldr	r3, [r7, #8]
 8008a2e:	015a      	lsls	r2, r3, #5
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	4413      	add	r3, r2
 8008a34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	68ba      	ldr	r2, [r7, #8]
 8008a3c:	0151      	lsls	r1, r2, #5
 8008a3e:	68fa      	ldr	r2, [r7, #12]
 8008a40:	440a      	add	r2, r1
 8008a42:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008a46:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008a4a:	6013      	str	r3, [r2, #0]
 8008a4c:	e02b      	b.n	8008aa6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008a4e:	68bb      	ldr	r3, [r7, #8]
 8008a50:	015a      	lsls	r2, r3, #5
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	4413      	add	r3, r2
 8008a56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	db12      	blt.n	8008a86 <USB_EPSetStall+0xae>
 8008a60:	68bb      	ldr	r3, [r7, #8]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d00f      	beq.n	8008a86 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008a66:	68bb      	ldr	r3, [r7, #8]
 8008a68:	015a      	lsls	r2, r3, #5
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	4413      	add	r3, r2
 8008a6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	68ba      	ldr	r2, [r7, #8]
 8008a76:	0151      	lsls	r1, r2, #5
 8008a78:	68fa      	ldr	r2, [r7, #12]
 8008a7a:	440a      	add	r2, r1
 8008a7c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008a80:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008a84:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008a86:	68bb      	ldr	r3, [r7, #8]
 8008a88:	015a      	lsls	r2, r3, #5
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	4413      	add	r3, r2
 8008a8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	68ba      	ldr	r2, [r7, #8]
 8008a96:	0151      	lsls	r1, r2, #5
 8008a98:	68fa      	ldr	r2, [r7, #12]
 8008a9a:	440a      	add	r2, r1
 8008a9c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008aa0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008aa4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008aa6:	2300      	movs	r3, #0
}
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	3714      	adds	r7, #20
 8008aac:	46bd      	mov	sp, r7
 8008aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab2:	4770      	bx	lr

08008ab4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008ab4:	b480      	push	{r7}
 8008ab6:	b085      	sub	sp, #20
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
 8008abc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	781b      	ldrb	r3, [r3, #0]
 8008ac6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	785b      	ldrb	r3, [r3, #1]
 8008acc:	2b01      	cmp	r3, #1
 8008ace:	d128      	bne.n	8008b22 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	015a      	lsls	r2, r3, #5
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	4413      	add	r3, r2
 8008ad8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	68ba      	ldr	r2, [r7, #8]
 8008ae0:	0151      	lsls	r1, r2, #5
 8008ae2:	68fa      	ldr	r2, [r7, #12]
 8008ae4:	440a      	add	r2, r1
 8008ae6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008aea:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008aee:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	791b      	ldrb	r3, [r3, #4]
 8008af4:	2b03      	cmp	r3, #3
 8008af6:	d003      	beq.n	8008b00 <USB_EPClearStall+0x4c>
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	791b      	ldrb	r3, [r3, #4]
 8008afc:	2b02      	cmp	r3, #2
 8008afe:	d138      	bne.n	8008b72 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008b00:	68bb      	ldr	r3, [r7, #8]
 8008b02:	015a      	lsls	r2, r3, #5
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	4413      	add	r3, r2
 8008b08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	68ba      	ldr	r2, [r7, #8]
 8008b10:	0151      	lsls	r1, r2, #5
 8008b12:	68fa      	ldr	r2, [r7, #12]
 8008b14:	440a      	add	r2, r1
 8008b16:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008b1a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008b1e:	6013      	str	r3, [r2, #0]
 8008b20:	e027      	b.n	8008b72 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008b22:	68bb      	ldr	r3, [r7, #8]
 8008b24:	015a      	lsls	r2, r3, #5
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	4413      	add	r3, r2
 8008b2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	68ba      	ldr	r2, [r7, #8]
 8008b32:	0151      	lsls	r1, r2, #5
 8008b34:	68fa      	ldr	r2, [r7, #12]
 8008b36:	440a      	add	r2, r1
 8008b38:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008b3c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008b40:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	791b      	ldrb	r3, [r3, #4]
 8008b46:	2b03      	cmp	r3, #3
 8008b48:	d003      	beq.n	8008b52 <USB_EPClearStall+0x9e>
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	791b      	ldrb	r3, [r3, #4]
 8008b4e:	2b02      	cmp	r3, #2
 8008b50:	d10f      	bne.n	8008b72 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008b52:	68bb      	ldr	r3, [r7, #8]
 8008b54:	015a      	lsls	r2, r3, #5
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	4413      	add	r3, r2
 8008b5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	68ba      	ldr	r2, [r7, #8]
 8008b62:	0151      	lsls	r1, r2, #5
 8008b64:	68fa      	ldr	r2, [r7, #12]
 8008b66:	440a      	add	r2, r1
 8008b68:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008b6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008b70:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008b72:	2300      	movs	r3, #0
}
 8008b74:	4618      	mov	r0, r3
 8008b76:	3714      	adds	r7, #20
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7e:	4770      	bx	lr

08008b80 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008b80:	b480      	push	{r7}
 8008b82:	b085      	sub	sp, #20
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
 8008b88:	460b      	mov	r3, r1
 8008b8a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	68fa      	ldr	r2, [r7, #12]
 8008b9a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008b9e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8008ba2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008baa:	681a      	ldr	r2, [r3, #0]
 8008bac:	78fb      	ldrb	r3, [r7, #3]
 8008bae:	011b      	lsls	r3, r3, #4
 8008bb0:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8008bb4:	68f9      	ldr	r1, [r7, #12]
 8008bb6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008bba:	4313      	orrs	r3, r2
 8008bbc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008bbe:	2300      	movs	r3, #0
}
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	3714      	adds	r7, #20
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bca:	4770      	bx	lr

08008bcc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008bcc:	b480      	push	{r7}
 8008bce:	b085      	sub	sp, #20
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	68fa      	ldr	r2, [r7, #12]
 8008be2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008be6:	f023 0303 	bic.w	r3, r3, #3
 8008bea:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008bf2:	685b      	ldr	r3, [r3, #4]
 8008bf4:	68fa      	ldr	r2, [r7, #12]
 8008bf6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008bfa:	f023 0302 	bic.w	r3, r3, #2
 8008bfe:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008c00:	2300      	movs	r3, #0
}
 8008c02:	4618      	mov	r0, r3
 8008c04:	3714      	adds	r7, #20
 8008c06:	46bd      	mov	sp, r7
 8008c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0c:	4770      	bx	lr

08008c0e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008c0e:	b480      	push	{r7}
 8008c10:	b085      	sub	sp, #20
 8008c12:	af00      	add	r7, sp, #0
 8008c14:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	68fa      	ldr	r2, [r7, #12]
 8008c24:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008c28:	f023 0303 	bic.w	r3, r3, #3
 8008c2c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c34:	685b      	ldr	r3, [r3, #4]
 8008c36:	68fa      	ldr	r2, [r7, #12]
 8008c38:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008c3c:	f043 0302 	orr.w	r3, r3, #2
 8008c40:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008c42:	2300      	movs	r3, #0
}
 8008c44:	4618      	mov	r0, r3
 8008c46:	3714      	adds	r7, #20
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4e:	4770      	bx	lr

08008c50 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008c50:	b480      	push	{r7}
 8008c52:	b085      	sub	sp, #20
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	695b      	ldr	r3, [r3, #20]
 8008c5c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	699b      	ldr	r3, [r3, #24]
 8008c62:	68fa      	ldr	r2, [r7, #12]
 8008c64:	4013      	ands	r3, r2
 8008c66:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008c68:	68fb      	ldr	r3, [r7, #12]
}
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	3714      	adds	r7, #20
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c74:	4770      	bx	lr

08008c76 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008c76:	b480      	push	{r7}
 8008c78:	b085      	sub	sp, #20
 8008c7a:	af00      	add	r7, sp, #0
 8008c7c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c88:	699b      	ldr	r3, [r3, #24]
 8008c8a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c92:	69db      	ldr	r3, [r3, #28]
 8008c94:	68ba      	ldr	r2, [r7, #8]
 8008c96:	4013      	ands	r3, r2
 8008c98:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008c9a:	68bb      	ldr	r3, [r7, #8]
 8008c9c:	0c1b      	lsrs	r3, r3, #16
}
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	3714      	adds	r7, #20
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca8:	4770      	bx	lr

08008caa <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008caa:	b480      	push	{r7}
 8008cac:	b085      	sub	sp, #20
 8008cae:	af00      	add	r7, sp, #0
 8008cb0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008cbc:	699b      	ldr	r3, [r3, #24]
 8008cbe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008cc6:	69db      	ldr	r3, [r3, #28]
 8008cc8:	68ba      	ldr	r2, [r7, #8]
 8008cca:	4013      	ands	r3, r2
 8008ccc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008cce:	68bb      	ldr	r3, [r7, #8]
 8008cd0:	b29b      	uxth	r3, r3
}
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	3714      	adds	r7, #20
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cdc:	4770      	bx	lr

08008cde <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008cde:	b480      	push	{r7}
 8008ce0:	b085      	sub	sp, #20
 8008ce2:	af00      	add	r7, sp, #0
 8008ce4:	6078      	str	r0, [r7, #4]
 8008ce6:	460b      	mov	r3, r1
 8008ce8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008cee:	78fb      	ldrb	r3, [r7, #3]
 8008cf0:	015a      	lsls	r2, r3, #5
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	4413      	add	r3, r2
 8008cf6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008cfa:	689b      	ldr	r3, [r3, #8]
 8008cfc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008d04:	695b      	ldr	r3, [r3, #20]
 8008d06:	68ba      	ldr	r2, [r7, #8]
 8008d08:	4013      	ands	r3, r2
 8008d0a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008d0c:	68bb      	ldr	r3, [r7, #8]
}
 8008d0e:	4618      	mov	r0, r3
 8008d10:	3714      	adds	r7, #20
 8008d12:	46bd      	mov	sp, r7
 8008d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d18:	4770      	bx	lr

08008d1a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008d1a:	b480      	push	{r7}
 8008d1c:	b087      	sub	sp, #28
 8008d1e:	af00      	add	r7, sp, #0
 8008d20:	6078      	str	r0, [r7, #4]
 8008d22:	460b      	mov	r3, r1
 8008d24:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008d2a:	697b      	ldr	r3, [r7, #20]
 8008d2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008d30:	691b      	ldr	r3, [r3, #16]
 8008d32:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008d34:	697b      	ldr	r3, [r7, #20]
 8008d36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008d3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d3c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008d3e:	78fb      	ldrb	r3, [r7, #3]
 8008d40:	f003 030f 	and.w	r3, r3, #15
 8008d44:	68fa      	ldr	r2, [r7, #12]
 8008d46:	fa22 f303 	lsr.w	r3, r2, r3
 8008d4a:	01db      	lsls	r3, r3, #7
 8008d4c:	b2db      	uxtb	r3, r3
 8008d4e:	693a      	ldr	r2, [r7, #16]
 8008d50:	4313      	orrs	r3, r2
 8008d52:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008d54:	78fb      	ldrb	r3, [r7, #3]
 8008d56:	015a      	lsls	r2, r3, #5
 8008d58:	697b      	ldr	r3, [r7, #20]
 8008d5a:	4413      	add	r3, r2
 8008d5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d60:	689b      	ldr	r3, [r3, #8]
 8008d62:	693a      	ldr	r2, [r7, #16]
 8008d64:	4013      	ands	r3, r2
 8008d66:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008d68:	68bb      	ldr	r3, [r7, #8]
}
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	371c      	adds	r7, #28
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d74:	4770      	bx	lr

08008d76 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008d76:	b480      	push	{r7}
 8008d78:	b083      	sub	sp, #12
 8008d7a:	af00      	add	r7, sp, #0
 8008d7c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	695b      	ldr	r3, [r3, #20]
 8008d82:	f003 0301 	and.w	r3, r3, #1
}
 8008d86:	4618      	mov	r0, r3
 8008d88:	370c      	adds	r7, #12
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d90:	4770      	bx	lr

08008d92 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8008d92:	b480      	push	{r7}
 8008d94:	b085      	sub	sp, #20
 8008d96:	af00      	add	r7, sp, #0
 8008d98:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	68fa      	ldr	r2, [r7, #12]
 8008da8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008dac:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8008db0:	f023 0307 	bic.w	r3, r3, #7
 8008db4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008dbc:	685b      	ldr	r3, [r3, #4]
 8008dbe:	68fa      	ldr	r2, [r7, #12]
 8008dc0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008dc4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008dc8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008dca:	2300      	movs	r3, #0
}
 8008dcc:	4618      	mov	r0, r3
 8008dce:	3714      	adds	r7, #20
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd6:	4770      	bx	lr

08008dd8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8008dd8:	b480      	push	{r7}
 8008dda:	b087      	sub	sp, #28
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	60f8      	str	r0, [r7, #12]
 8008de0:	460b      	mov	r3, r1
 8008de2:	607a      	str	r2, [r7, #4]
 8008de4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	333c      	adds	r3, #60	@ 0x3c
 8008dee:	3304      	adds	r3, #4
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008df4:	693b      	ldr	r3, [r7, #16]
 8008df6:	4a26      	ldr	r2, [pc, #152]	@ (8008e90 <USB_EP0_OutStart+0xb8>)
 8008df8:	4293      	cmp	r3, r2
 8008dfa:	d90a      	bls.n	8008e12 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008dfc:	697b      	ldr	r3, [r7, #20]
 8008dfe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008e08:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008e0c:	d101      	bne.n	8008e12 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008e0e:	2300      	movs	r3, #0
 8008e10:	e037      	b.n	8008e82 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008e12:	697b      	ldr	r3, [r7, #20]
 8008e14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e18:	461a      	mov	r2, r3
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008e1e:	697b      	ldr	r3, [r7, #20]
 8008e20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e24:	691b      	ldr	r3, [r3, #16]
 8008e26:	697a      	ldr	r2, [r7, #20]
 8008e28:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008e2c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008e30:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008e32:	697b      	ldr	r3, [r7, #20]
 8008e34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e38:	691b      	ldr	r3, [r3, #16]
 8008e3a:	697a      	ldr	r2, [r7, #20]
 8008e3c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008e40:	f043 0318 	orr.w	r3, r3, #24
 8008e44:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008e46:	697b      	ldr	r3, [r7, #20]
 8008e48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e4c:	691b      	ldr	r3, [r3, #16]
 8008e4e:	697a      	ldr	r2, [r7, #20]
 8008e50:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008e54:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8008e58:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008e5a:	7afb      	ldrb	r3, [r7, #11]
 8008e5c:	2b01      	cmp	r3, #1
 8008e5e:	d10f      	bne.n	8008e80 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008e60:	697b      	ldr	r3, [r7, #20]
 8008e62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e66:	461a      	mov	r2, r3
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008e6c:	697b      	ldr	r3, [r7, #20]
 8008e6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	697a      	ldr	r2, [r7, #20]
 8008e76:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008e7a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8008e7e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008e80:	2300      	movs	r3, #0
}
 8008e82:	4618      	mov	r0, r3
 8008e84:	371c      	adds	r7, #28
 8008e86:	46bd      	mov	sp, r7
 8008e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8c:	4770      	bx	lr
 8008e8e:	bf00      	nop
 8008e90:	4f54300a 	.word	0x4f54300a

08008e94 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008e94:	b480      	push	{r7}
 8008e96:	b085      	sub	sp, #20
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	3301      	adds	r3, #1
 8008ea4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008eac:	d901      	bls.n	8008eb2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008eae:	2303      	movs	r3, #3
 8008eb0:	e01b      	b.n	8008eea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	691b      	ldr	r3, [r3, #16]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	daf2      	bge.n	8008ea0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008eba:	2300      	movs	r3, #0
 8008ebc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	691b      	ldr	r3, [r3, #16]
 8008ec2:	f043 0201 	orr.w	r2, r3, #1
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	3301      	adds	r3, #1
 8008ece:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008ed6:	d901      	bls.n	8008edc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008ed8:	2303      	movs	r3, #3
 8008eda:	e006      	b.n	8008eea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	691b      	ldr	r3, [r3, #16]
 8008ee0:	f003 0301 	and.w	r3, r3, #1
 8008ee4:	2b01      	cmp	r3, #1
 8008ee6:	d0f0      	beq.n	8008eca <USB_CoreReset+0x36>

  return HAL_OK;
 8008ee8:	2300      	movs	r3, #0
}
 8008eea:	4618      	mov	r0, r3
 8008eec:	3714      	adds	r7, #20
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef4:	4770      	bx	lr
	...

08008ef8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b084      	sub	sp, #16
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
 8008f00:	460b      	mov	r3, r1
 8008f02:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008f04:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8008f08:	f002 fc22 	bl	800b750 <USBD_static_malloc>
 8008f0c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d109      	bne.n	8008f28 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	32b0      	adds	r2, #176	@ 0xb0
 8008f1e:	2100      	movs	r1, #0
 8008f20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008f24:	2302      	movs	r3, #2
 8008f26:	e0d4      	b.n	80090d2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8008f28:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8008f2c:	2100      	movs	r1, #0
 8008f2e:	68f8      	ldr	r0, [r7, #12]
 8008f30:	f002 fd36 	bl	800b9a0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	32b0      	adds	r2, #176	@ 0xb0
 8008f3e:	68f9      	ldr	r1, [r7, #12]
 8008f40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	32b0      	adds	r2, #176	@ 0xb0
 8008f4e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	7c1b      	ldrb	r3, [r3, #16]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d138      	bne.n	8008fd2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008f60:	4b5e      	ldr	r3, [pc, #376]	@ (80090dc <USBD_CDC_Init+0x1e4>)
 8008f62:	7819      	ldrb	r1, [r3, #0]
 8008f64:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008f68:	2202      	movs	r2, #2
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	f002 facd 	bl	800b50a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008f70:	4b5a      	ldr	r3, [pc, #360]	@ (80090dc <USBD_CDC_Init+0x1e4>)
 8008f72:	781b      	ldrb	r3, [r3, #0]
 8008f74:	f003 020f 	and.w	r2, r3, #15
 8008f78:	6879      	ldr	r1, [r7, #4]
 8008f7a:	4613      	mov	r3, r2
 8008f7c:	009b      	lsls	r3, r3, #2
 8008f7e:	4413      	add	r3, r2
 8008f80:	009b      	lsls	r3, r3, #2
 8008f82:	440b      	add	r3, r1
 8008f84:	3324      	adds	r3, #36	@ 0x24
 8008f86:	2201      	movs	r2, #1
 8008f88:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008f8a:	4b55      	ldr	r3, [pc, #340]	@ (80090e0 <USBD_CDC_Init+0x1e8>)
 8008f8c:	7819      	ldrb	r1, [r3, #0]
 8008f8e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008f92:	2202      	movs	r2, #2
 8008f94:	6878      	ldr	r0, [r7, #4]
 8008f96:	f002 fab8 	bl	800b50a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008f9a:	4b51      	ldr	r3, [pc, #324]	@ (80090e0 <USBD_CDC_Init+0x1e8>)
 8008f9c:	781b      	ldrb	r3, [r3, #0]
 8008f9e:	f003 020f 	and.w	r2, r3, #15
 8008fa2:	6879      	ldr	r1, [r7, #4]
 8008fa4:	4613      	mov	r3, r2
 8008fa6:	009b      	lsls	r3, r3, #2
 8008fa8:	4413      	add	r3, r2
 8008faa:	009b      	lsls	r3, r3, #2
 8008fac:	440b      	add	r3, r1
 8008fae:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008fb2:	2201      	movs	r2, #1
 8008fb4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008fb6:	4b4b      	ldr	r3, [pc, #300]	@ (80090e4 <USBD_CDC_Init+0x1ec>)
 8008fb8:	781b      	ldrb	r3, [r3, #0]
 8008fba:	f003 020f 	and.w	r2, r3, #15
 8008fbe:	6879      	ldr	r1, [r7, #4]
 8008fc0:	4613      	mov	r3, r2
 8008fc2:	009b      	lsls	r3, r3, #2
 8008fc4:	4413      	add	r3, r2
 8008fc6:	009b      	lsls	r3, r3, #2
 8008fc8:	440b      	add	r3, r1
 8008fca:	3326      	adds	r3, #38	@ 0x26
 8008fcc:	2210      	movs	r2, #16
 8008fce:	801a      	strh	r2, [r3, #0]
 8008fd0:	e035      	b.n	800903e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008fd2:	4b42      	ldr	r3, [pc, #264]	@ (80090dc <USBD_CDC_Init+0x1e4>)
 8008fd4:	7819      	ldrb	r1, [r3, #0]
 8008fd6:	2340      	movs	r3, #64	@ 0x40
 8008fd8:	2202      	movs	r2, #2
 8008fda:	6878      	ldr	r0, [r7, #4]
 8008fdc:	f002 fa95 	bl	800b50a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008fe0:	4b3e      	ldr	r3, [pc, #248]	@ (80090dc <USBD_CDC_Init+0x1e4>)
 8008fe2:	781b      	ldrb	r3, [r3, #0]
 8008fe4:	f003 020f 	and.w	r2, r3, #15
 8008fe8:	6879      	ldr	r1, [r7, #4]
 8008fea:	4613      	mov	r3, r2
 8008fec:	009b      	lsls	r3, r3, #2
 8008fee:	4413      	add	r3, r2
 8008ff0:	009b      	lsls	r3, r3, #2
 8008ff2:	440b      	add	r3, r1
 8008ff4:	3324      	adds	r3, #36	@ 0x24
 8008ff6:	2201      	movs	r2, #1
 8008ff8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008ffa:	4b39      	ldr	r3, [pc, #228]	@ (80090e0 <USBD_CDC_Init+0x1e8>)
 8008ffc:	7819      	ldrb	r1, [r3, #0]
 8008ffe:	2340      	movs	r3, #64	@ 0x40
 8009000:	2202      	movs	r2, #2
 8009002:	6878      	ldr	r0, [r7, #4]
 8009004:	f002 fa81 	bl	800b50a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009008:	4b35      	ldr	r3, [pc, #212]	@ (80090e0 <USBD_CDC_Init+0x1e8>)
 800900a:	781b      	ldrb	r3, [r3, #0]
 800900c:	f003 020f 	and.w	r2, r3, #15
 8009010:	6879      	ldr	r1, [r7, #4]
 8009012:	4613      	mov	r3, r2
 8009014:	009b      	lsls	r3, r3, #2
 8009016:	4413      	add	r3, r2
 8009018:	009b      	lsls	r3, r3, #2
 800901a:	440b      	add	r3, r1
 800901c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009020:	2201      	movs	r2, #1
 8009022:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009024:	4b2f      	ldr	r3, [pc, #188]	@ (80090e4 <USBD_CDC_Init+0x1ec>)
 8009026:	781b      	ldrb	r3, [r3, #0]
 8009028:	f003 020f 	and.w	r2, r3, #15
 800902c:	6879      	ldr	r1, [r7, #4]
 800902e:	4613      	mov	r3, r2
 8009030:	009b      	lsls	r3, r3, #2
 8009032:	4413      	add	r3, r2
 8009034:	009b      	lsls	r3, r3, #2
 8009036:	440b      	add	r3, r1
 8009038:	3326      	adds	r3, #38	@ 0x26
 800903a:	2210      	movs	r2, #16
 800903c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800903e:	4b29      	ldr	r3, [pc, #164]	@ (80090e4 <USBD_CDC_Init+0x1ec>)
 8009040:	7819      	ldrb	r1, [r3, #0]
 8009042:	2308      	movs	r3, #8
 8009044:	2203      	movs	r2, #3
 8009046:	6878      	ldr	r0, [r7, #4]
 8009048:	f002 fa5f 	bl	800b50a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800904c:	4b25      	ldr	r3, [pc, #148]	@ (80090e4 <USBD_CDC_Init+0x1ec>)
 800904e:	781b      	ldrb	r3, [r3, #0]
 8009050:	f003 020f 	and.w	r2, r3, #15
 8009054:	6879      	ldr	r1, [r7, #4]
 8009056:	4613      	mov	r3, r2
 8009058:	009b      	lsls	r3, r3, #2
 800905a:	4413      	add	r3, r2
 800905c:	009b      	lsls	r3, r3, #2
 800905e:	440b      	add	r3, r1
 8009060:	3324      	adds	r3, #36	@ 0x24
 8009062:	2201      	movs	r2, #1
 8009064:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	2200      	movs	r2, #0
 800906a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009074:	687a      	ldr	r2, [r7, #4]
 8009076:	33b0      	adds	r3, #176	@ 0xb0
 8009078:	009b      	lsls	r3, r3, #2
 800907a:	4413      	add	r3, r2
 800907c:	685b      	ldr	r3, [r3, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	2200      	movs	r2, #0
 8009086:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	2200      	movs	r2, #0
 800908e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8009098:	2b00      	cmp	r3, #0
 800909a:	d101      	bne.n	80090a0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800909c:	2302      	movs	r3, #2
 800909e:	e018      	b.n	80090d2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	7c1b      	ldrb	r3, [r3, #16]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d10a      	bne.n	80090be <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80090a8:	4b0d      	ldr	r3, [pc, #52]	@ (80090e0 <USBD_CDC_Init+0x1e8>)
 80090aa:	7819      	ldrb	r1, [r3, #0]
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80090b2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80090b6:	6878      	ldr	r0, [r7, #4]
 80090b8:	f002 fb16 	bl	800b6e8 <USBD_LL_PrepareReceive>
 80090bc:	e008      	b.n	80090d0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80090be:	4b08      	ldr	r3, [pc, #32]	@ (80090e0 <USBD_CDC_Init+0x1e8>)
 80090c0:	7819      	ldrb	r1, [r3, #0]
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80090c8:	2340      	movs	r3, #64	@ 0x40
 80090ca:	6878      	ldr	r0, [r7, #4]
 80090cc:	f002 fb0c 	bl	800b6e8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80090d0:	2300      	movs	r3, #0
}
 80090d2:	4618      	mov	r0, r3
 80090d4:	3710      	adds	r7, #16
 80090d6:	46bd      	mov	sp, r7
 80090d8:	bd80      	pop	{r7, pc}
 80090da:	bf00      	nop
 80090dc:	20000097 	.word	0x20000097
 80090e0:	20000098 	.word	0x20000098
 80090e4:	20000099 	.word	0x20000099

080090e8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b082      	sub	sp, #8
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
 80090f0:	460b      	mov	r3, r1
 80090f2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80090f4:	4b3a      	ldr	r3, [pc, #232]	@ (80091e0 <USBD_CDC_DeInit+0xf8>)
 80090f6:	781b      	ldrb	r3, [r3, #0]
 80090f8:	4619      	mov	r1, r3
 80090fa:	6878      	ldr	r0, [r7, #4]
 80090fc:	f002 fa2b 	bl	800b556 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009100:	4b37      	ldr	r3, [pc, #220]	@ (80091e0 <USBD_CDC_DeInit+0xf8>)
 8009102:	781b      	ldrb	r3, [r3, #0]
 8009104:	f003 020f 	and.w	r2, r3, #15
 8009108:	6879      	ldr	r1, [r7, #4]
 800910a:	4613      	mov	r3, r2
 800910c:	009b      	lsls	r3, r3, #2
 800910e:	4413      	add	r3, r2
 8009110:	009b      	lsls	r3, r3, #2
 8009112:	440b      	add	r3, r1
 8009114:	3324      	adds	r3, #36	@ 0x24
 8009116:	2200      	movs	r2, #0
 8009118:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800911a:	4b32      	ldr	r3, [pc, #200]	@ (80091e4 <USBD_CDC_DeInit+0xfc>)
 800911c:	781b      	ldrb	r3, [r3, #0]
 800911e:	4619      	mov	r1, r3
 8009120:	6878      	ldr	r0, [r7, #4]
 8009122:	f002 fa18 	bl	800b556 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8009126:	4b2f      	ldr	r3, [pc, #188]	@ (80091e4 <USBD_CDC_DeInit+0xfc>)
 8009128:	781b      	ldrb	r3, [r3, #0]
 800912a:	f003 020f 	and.w	r2, r3, #15
 800912e:	6879      	ldr	r1, [r7, #4]
 8009130:	4613      	mov	r3, r2
 8009132:	009b      	lsls	r3, r3, #2
 8009134:	4413      	add	r3, r2
 8009136:	009b      	lsls	r3, r3, #2
 8009138:	440b      	add	r3, r1
 800913a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800913e:	2200      	movs	r2, #0
 8009140:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8009142:	4b29      	ldr	r3, [pc, #164]	@ (80091e8 <USBD_CDC_DeInit+0x100>)
 8009144:	781b      	ldrb	r3, [r3, #0]
 8009146:	4619      	mov	r1, r3
 8009148:	6878      	ldr	r0, [r7, #4]
 800914a:	f002 fa04 	bl	800b556 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800914e:	4b26      	ldr	r3, [pc, #152]	@ (80091e8 <USBD_CDC_DeInit+0x100>)
 8009150:	781b      	ldrb	r3, [r3, #0]
 8009152:	f003 020f 	and.w	r2, r3, #15
 8009156:	6879      	ldr	r1, [r7, #4]
 8009158:	4613      	mov	r3, r2
 800915a:	009b      	lsls	r3, r3, #2
 800915c:	4413      	add	r3, r2
 800915e:	009b      	lsls	r3, r3, #2
 8009160:	440b      	add	r3, r1
 8009162:	3324      	adds	r3, #36	@ 0x24
 8009164:	2200      	movs	r2, #0
 8009166:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009168:	4b1f      	ldr	r3, [pc, #124]	@ (80091e8 <USBD_CDC_DeInit+0x100>)
 800916a:	781b      	ldrb	r3, [r3, #0]
 800916c:	f003 020f 	and.w	r2, r3, #15
 8009170:	6879      	ldr	r1, [r7, #4]
 8009172:	4613      	mov	r3, r2
 8009174:	009b      	lsls	r3, r3, #2
 8009176:	4413      	add	r3, r2
 8009178:	009b      	lsls	r3, r3, #2
 800917a:	440b      	add	r3, r1
 800917c:	3326      	adds	r3, #38	@ 0x26
 800917e:	2200      	movs	r2, #0
 8009180:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	32b0      	adds	r2, #176	@ 0xb0
 800918c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d01f      	beq.n	80091d4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800919a:	687a      	ldr	r2, [r7, #4]
 800919c:	33b0      	adds	r3, #176	@ 0xb0
 800919e:	009b      	lsls	r3, r3, #2
 80091a0:	4413      	add	r3, r2
 80091a2:	685b      	ldr	r3, [r3, #4]
 80091a4:	685b      	ldr	r3, [r3, #4]
 80091a6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	32b0      	adds	r2, #176	@ 0xb0
 80091b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091b6:	4618      	mov	r0, r3
 80091b8:	f002 fad8 	bl	800b76c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	32b0      	adds	r2, #176	@ 0xb0
 80091c6:	2100      	movs	r1, #0
 80091c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2200      	movs	r2, #0
 80091d0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80091d4:	2300      	movs	r3, #0
}
 80091d6:	4618      	mov	r0, r3
 80091d8:	3708      	adds	r7, #8
 80091da:	46bd      	mov	sp, r7
 80091dc:	bd80      	pop	{r7, pc}
 80091de:	bf00      	nop
 80091e0:	20000097 	.word	0x20000097
 80091e4:	20000098 	.word	0x20000098
 80091e8:	20000099 	.word	0x20000099

080091ec <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b086      	sub	sp, #24
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
 80091f4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	32b0      	adds	r2, #176	@ 0xb0
 8009200:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009204:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009206:	2300      	movs	r3, #0
 8009208:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800920a:	2300      	movs	r3, #0
 800920c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800920e:	2300      	movs	r3, #0
 8009210:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009212:	693b      	ldr	r3, [r7, #16]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d101      	bne.n	800921c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009218:	2303      	movs	r3, #3
 800921a:	e0bf      	b.n	800939c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800921c:	683b      	ldr	r3, [r7, #0]
 800921e:	781b      	ldrb	r3, [r3, #0]
 8009220:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009224:	2b00      	cmp	r3, #0
 8009226:	d050      	beq.n	80092ca <USBD_CDC_Setup+0xde>
 8009228:	2b20      	cmp	r3, #32
 800922a:	f040 80af 	bne.w	800938c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800922e:	683b      	ldr	r3, [r7, #0]
 8009230:	88db      	ldrh	r3, [r3, #6]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d03a      	beq.n	80092ac <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	781b      	ldrb	r3, [r3, #0]
 800923a:	b25b      	sxtb	r3, r3
 800923c:	2b00      	cmp	r3, #0
 800923e:	da1b      	bge.n	8009278 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009246:	687a      	ldr	r2, [r7, #4]
 8009248:	33b0      	adds	r3, #176	@ 0xb0
 800924a:	009b      	lsls	r3, r3, #2
 800924c:	4413      	add	r3, r2
 800924e:	685b      	ldr	r3, [r3, #4]
 8009250:	689b      	ldr	r3, [r3, #8]
 8009252:	683a      	ldr	r2, [r7, #0]
 8009254:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8009256:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009258:	683a      	ldr	r2, [r7, #0]
 800925a:	88d2      	ldrh	r2, [r2, #6]
 800925c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	88db      	ldrh	r3, [r3, #6]
 8009262:	2b07      	cmp	r3, #7
 8009264:	bf28      	it	cs
 8009266:	2307      	movcs	r3, #7
 8009268:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800926a:	693b      	ldr	r3, [r7, #16]
 800926c:	89fa      	ldrh	r2, [r7, #14]
 800926e:	4619      	mov	r1, r3
 8009270:	6878      	ldr	r0, [r7, #4]
 8009272:	f001 fd47 	bl	800ad04 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8009276:	e090      	b.n	800939a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009278:	683b      	ldr	r3, [r7, #0]
 800927a:	785a      	ldrb	r2, [r3, #1]
 800927c:	693b      	ldr	r3, [r7, #16]
 800927e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	88db      	ldrh	r3, [r3, #6]
 8009286:	2b3f      	cmp	r3, #63	@ 0x3f
 8009288:	d803      	bhi.n	8009292 <USBD_CDC_Setup+0xa6>
 800928a:	683b      	ldr	r3, [r7, #0]
 800928c:	88db      	ldrh	r3, [r3, #6]
 800928e:	b2da      	uxtb	r2, r3
 8009290:	e000      	b.n	8009294 <USBD_CDC_Setup+0xa8>
 8009292:	2240      	movs	r2, #64	@ 0x40
 8009294:	693b      	ldr	r3, [r7, #16]
 8009296:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800929a:	6939      	ldr	r1, [r7, #16]
 800929c:	693b      	ldr	r3, [r7, #16]
 800929e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80092a2:	461a      	mov	r2, r3
 80092a4:	6878      	ldr	r0, [r7, #4]
 80092a6:	f001 fd59 	bl	800ad5c <USBD_CtlPrepareRx>
      break;
 80092aa:	e076      	b.n	800939a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80092b2:	687a      	ldr	r2, [r7, #4]
 80092b4:	33b0      	adds	r3, #176	@ 0xb0
 80092b6:	009b      	lsls	r3, r3, #2
 80092b8:	4413      	add	r3, r2
 80092ba:	685b      	ldr	r3, [r3, #4]
 80092bc:	689b      	ldr	r3, [r3, #8]
 80092be:	683a      	ldr	r2, [r7, #0]
 80092c0:	7850      	ldrb	r0, [r2, #1]
 80092c2:	2200      	movs	r2, #0
 80092c4:	6839      	ldr	r1, [r7, #0]
 80092c6:	4798      	blx	r3
      break;
 80092c8:	e067      	b.n	800939a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	785b      	ldrb	r3, [r3, #1]
 80092ce:	2b0b      	cmp	r3, #11
 80092d0:	d851      	bhi.n	8009376 <USBD_CDC_Setup+0x18a>
 80092d2:	a201      	add	r2, pc, #4	@ (adr r2, 80092d8 <USBD_CDC_Setup+0xec>)
 80092d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092d8:	08009309 	.word	0x08009309
 80092dc:	08009385 	.word	0x08009385
 80092e0:	08009377 	.word	0x08009377
 80092e4:	08009377 	.word	0x08009377
 80092e8:	08009377 	.word	0x08009377
 80092ec:	08009377 	.word	0x08009377
 80092f0:	08009377 	.word	0x08009377
 80092f4:	08009377 	.word	0x08009377
 80092f8:	08009377 	.word	0x08009377
 80092fc:	08009377 	.word	0x08009377
 8009300:	08009333 	.word	0x08009333
 8009304:	0800935d 	.word	0x0800935d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800930e:	b2db      	uxtb	r3, r3
 8009310:	2b03      	cmp	r3, #3
 8009312:	d107      	bne.n	8009324 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009314:	f107 030a 	add.w	r3, r7, #10
 8009318:	2202      	movs	r2, #2
 800931a:	4619      	mov	r1, r3
 800931c:	6878      	ldr	r0, [r7, #4]
 800931e:	f001 fcf1 	bl	800ad04 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009322:	e032      	b.n	800938a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009324:	6839      	ldr	r1, [r7, #0]
 8009326:	6878      	ldr	r0, [r7, #4]
 8009328:	f001 fc7b 	bl	800ac22 <USBD_CtlError>
            ret = USBD_FAIL;
 800932c:	2303      	movs	r3, #3
 800932e:	75fb      	strb	r3, [r7, #23]
          break;
 8009330:	e02b      	b.n	800938a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009338:	b2db      	uxtb	r3, r3
 800933a:	2b03      	cmp	r3, #3
 800933c:	d107      	bne.n	800934e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800933e:	f107 030d 	add.w	r3, r7, #13
 8009342:	2201      	movs	r2, #1
 8009344:	4619      	mov	r1, r3
 8009346:	6878      	ldr	r0, [r7, #4]
 8009348:	f001 fcdc 	bl	800ad04 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800934c:	e01d      	b.n	800938a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800934e:	6839      	ldr	r1, [r7, #0]
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	f001 fc66 	bl	800ac22 <USBD_CtlError>
            ret = USBD_FAIL;
 8009356:	2303      	movs	r3, #3
 8009358:	75fb      	strb	r3, [r7, #23]
          break;
 800935a:	e016      	b.n	800938a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009362:	b2db      	uxtb	r3, r3
 8009364:	2b03      	cmp	r3, #3
 8009366:	d00f      	beq.n	8009388 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009368:	6839      	ldr	r1, [r7, #0]
 800936a:	6878      	ldr	r0, [r7, #4]
 800936c:	f001 fc59 	bl	800ac22 <USBD_CtlError>
            ret = USBD_FAIL;
 8009370:	2303      	movs	r3, #3
 8009372:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009374:	e008      	b.n	8009388 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009376:	6839      	ldr	r1, [r7, #0]
 8009378:	6878      	ldr	r0, [r7, #4]
 800937a:	f001 fc52 	bl	800ac22 <USBD_CtlError>
          ret = USBD_FAIL;
 800937e:	2303      	movs	r3, #3
 8009380:	75fb      	strb	r3, [r7, #23]
          break;
 8009382:	e002      	b.n	800938a <USBD_CDC_Setup+0x19e>
          break;
 8009384:	bf00      	nop
 8009386:	e008      	b.n	800939a <USBD_CDC_Setup+0x1ae>
          break;
 8009388:	bf00      	nop
      }
      break;
 800938a:	e006      	b.n	800939a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800938c:	6839      	ldr	r1, [r7, #0]
 800938e:	6878      	ldr	r0, [r7, #4]
 8009390:	f001 fc47 	bl	800ac22 <USBD_CtlError>
      ret = USBD_FAIL;
 8009394:	2303      	movs	r3, #3
 8009396:	75fb      	strb	r3, [r7, #23]
      break;
 8009398:	bf00      	nop
  }

  return (uint8_t)ret;
 800939a:	7dfb      	ldrb	r3, [r7, #23]
}
 800939c:	4618      	mov	r0, r3
 800939e:	3718      	adds	r7, #24
 80093a0:	46bd      	mov	sp, r7
 80093a2:	bd80      	pop	{r7, pc}

080093a4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b084      	sub	sp, #16
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
 80093ac:	460b      	mov	r3, r1
 80093ae:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80093b6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	32b0      	adds	r2, #176	@ 0xb0
 80093c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d101      	bne.n	80093ce <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80093ca:	2303      	movs	r3, #3
 80093cc:	e065      	b.n	800949a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	32b0      	adds	r2, #176	@ 0xb0
 80093d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093dc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80093de:	78fb      	ldrb	r3, [r7, #3]
 80093e0:	f003 020f 	and.w	r2, r3, #15
 80093e4:	6879      	ldr	r1, [r7, #4]
 80093e6:	4613      	mov	r3, r2
 80093e8:	009b      	lsls	r3, r3, #2
 80093ea:	4413      	add	r3, r2
 80093ec:	009b      	lsls	r3, r3, #2
 80093ee:	440b      	add	r3, r1
 80093f0:	3318      	adds	r3, #24
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d02f      	beq.n	8009458 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80093f8:	78fb      	ldrb	r3, [r7, #3]
 80093fa:	f003 020f 	and.w	r2, r3, #15
 80093fe:	6879      	ldr	r1, [r7, #4]
 8009400:	4613      	mov	r3, r2
 8009402:	009b      	lsls	r3, r3, #2
 8009404:	4413      	add	r3, r2
 8009406:	009b      	lsls	r3, r3, #2
 8009408:	440b      	add	r3, r1
 800940a:	3318      	adds	r3, #24
 800940c:	681a      	ldr	r2, [r3, #0]
 800940e:	78fb      	ldrb	r3, [r7, #3]
 8009410:	f003 010f 	and.w	r1, r3, #15
 8009414:	68f8      	ldr	r0, [r7, #12]
 8009416:	460b      	mov	r3, r1
 8009418:	00db      	lsls	r3, r3, #3
 800941a:	440b      	add	r3, r1
 800941c:	009b      	lsls	r3, r3, #2
 800941e:	4403      	add	r3, r0
 8009420:	331c      	adds	r3, #28
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	fbb2 f1f3 	udiv	r1, r2, r3
 8009428:	fb01 f303 	mul.w	r3, r1, r3
 800942c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800942e:	2b00      	cmp	r3, #0
 8009430:	d112      	bne.n	8009458 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8009432:	78fb      	ldrb	r3, [r7, #3]
 8009434:	f003 020f 	and.w	r2, r3, #15
 8009438:	6879      	ldr	r1, [r7, #4]
 800943a:	4613      	mov	r3, r2
 800943c:	009b      	lsls	r3, r3, #2
 800943e:	4413      	add	r3, r2
 8009440:	009b      	lsls	r3, r3, #2
 8009442:	440b      	add	r3, r1
 8009444:	3318      	adds	r3, #24
 8009446:	2200      	movs	r2, #0
 8009448:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800944a:	78f9      	ldrb	r1, [r7, #3]
 800944c:	2300      	movs	r3, #0
 800944e:	2200      	movs	r2, #0
 8009450:	6878      	ldr	r0, [r7, #4]
 8009452:	f002 f928 	bl	800b6a6 <USBD_LL_Transmit>
 8009456:	e01f      	b.n	8009498 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009458:	68bb      	ldr	r3, [r7, #8]
 800945a:	2200      	movs	r2, #0
 800945c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009466:	687a      	ldr	r2, [r7, #4]
 8009468:	33b0      	adds	r3, #176	@ 0xb0
 800946a:	009b      	lsls	r3, r3, #2
 800946c:	4413      	add	r3, r2
 800946e:	685b      	ldr	r3, [r3, #4]
 8009470:	691b      	ldr	r3, [r3, #16]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d010      	beq.n	8009498 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800947c:	687a      	ldr	r2, [r7, #4]
 800947e:	33b0      	adds	r3, #176	@ 0xb0
 8009480:	009b      	lsls	r3, r3, #2
 8009482:	4413      	add	r3, r2
 8009484:	685b      	ldr	r3, [r3, #4]
 8009486:	691b      	ldr	r3, [r3, #16]
 8009488:	68ba      	ldr	r2, [r7, #8]
 800948a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800948e:	68ba      	ldr	r2, [r7, #8]
 8009490:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8009494:	78fa      	ldrb	r2, [r7, #3]
 8009496:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009498:	2300      	movs	r3, #0
}
 800949a:	4618      	mov	r0, r3
 800949c:	3710      	adds	r7, #16
 800949e:	46bd      	mov	sp, r7
 80094a0:	bd80      	pop	{r7, pc}

080094a2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80094a2:	b580      	push	{r7, lr}
 80094a4:	b084      	sub	sp, #16
 80094a6:	af00      	add	r7, sp, #0
 80094a8:	6078      	str	r0, [r7, #4]
 80094aa:	460b      	mov	r3, r1
 80094ac:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	32b0      	adds	r2, #176	@ 0xb0
 80094b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094bc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	32b0      	adds	r2, #176	@ 0xb0
 80094c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d101      	bne.n	80094d4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80094d0:	2303      	movs	r3, #3
 80094d2:	e01a      	b.n	800950a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80094d4:	78fb      	ldrb	r3, [r7, #3]
 80094d6:	4619      	mov	r1, r3
 80094d8:	6878      	ldr	r0, [r7, #4]
 80094da:	f002 f926 	bl	800b72a <USBD_LL_GetRxDataSize>
 80094de:	4602      	mov	r2, r0
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80094ec:	687a      	ldr	r2, [r7, #4]
 80094ee:	33b0      	adds	r3, #176	@ 0xb0
 80094f0:	009b      	lsls	r3, r3, #2
 80094f2:	4413      	add	r3, r2
 80094f4:	685b      	ldr	r3, [r3, #4]
 80094f6:	68db      	ldr	r3, [r3, #12]
 80094f8:	68fa      	ldr	r2, [r7, #12]
 80094fa:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80094fe:	68fa      	ldr	r2, [r7, #12]
 8009500:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8009504:	4611      	mov	r1, r2
 8009506:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009508:	2300      	movs	r3, #0
}
 800950a:	4618      	mov	r0, r3
 800950c:	3710      	adds	r7, #16
 800950e:	46bd      	mov	sp, r7
 8009510:	bd80      	pop	{r7, pc}

08009512 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009512:	b580      	push	{r7, lr}
 8009514:	b084      	sub	sp, #16
 8009516:	af00      	add	r7, sp, #0
 8009518:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	32b0      	adds	r2, #176	@ 0xb0
 8009524:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009528:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d101      	bne.n	8009534 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009530:	2303      	movs	r3, #3
 8009532:	e024      	b.n	800957e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800953a:	687a      	ldr	r2, [r7, #4]
 800953c:	33b0      	adds	r3, #176	@ 0xb0
 800953e:	009b      	lsls	r3, r3, #2
 8009540:	4413      	add	r3, r2
 8009542:	685b      	ldr	r3, [r3, #4]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d019      	beq.n	800957c <USBD_CDC_EP0_RxReady+0x6a>
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800954e:	2bff      	cmp	r3, #255	@ 0xff
 8009550:	d014      	beq.n	800957c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009558:	687a      	ldr	r2, [r7, #4]
 800955a:	33b0      	adds	r3, #176	@ 0xb0
 800955c:	009b      	lsls	r3, r3, #2
 800955e:	4413      	add	r3, r2
 8009560:	685b      	ldr	r3, [r3, #4]
 8009562:	689b      	ldr	r3, [r3, #8]
 8009564:	68fa      	ldr	r2, [r7, #12]
 8009566:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800956a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800956c:	68fa      	ldr	r2, [r7, #12]
 800956e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009572:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	22ff      	movs	r2, #255	@ 0xff
 8009578:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800957c:	2300      	movs	r3, #0
}
 800957e:	4618      	mov	r0, r3
 8009580:	3710      	adds	r7, #16
 8009582:	46bd      	mov	sp, r7
 8009584:	bd80      	pop	{r7, pc}
	...

08009588 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b086      	sub	sp, #24
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009590:	2182      	movs	r1, #130	@ 0x82
 8009592:	4818      	ldr	r0, [pc, #96]	@ (80095f4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009594:	f000 fd0f 	bl	8009fb6 <USBD_GetEpDesc>
 8009598:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800959a:	2101      	movs	r1, #1
 800959c:	4815      	ldr	r0, [pc, #84]	@ (80095f4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800959e:	f000 fd0a 	bl	8009fb6 <USBD_GetEpDesc>
 80095a2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80095a4:	2181      	movs	r1, #129	@ 0x81
 80095a6:	4813      	ldr	r0, [pc, #76]	@ (80095f4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80095a8:	f000 fd05 	bl	8009fb6 <USBD_GetEpDesc>
 80095ac:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80095ae:	697b      	ldr	r3, [r7, #20]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d002      	beq.n	80095ba <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80095b4:	697b      	ldr	r3, [r7, #20]
 80095b6:	2210      	movs	r2, #16
 80095b8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80095ba:	693b      	ldr	r3, [r7, #16]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d006      	beq.n	80095ce <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80095c0:	693b      	ldr	r3, [r7, #16]
 80095c2:	2200      	movs	r2, #0
 80095c4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80095c8:	711a      	strb	r2, [r3, #4]
 80095ca:	2200      	movs	r2, #0
 80095cc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d006      	beq.n	80095e2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	2200      	movs	r2, #0
 80095d8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80095dc:	711a      	strb	r2, [r3, #4]
 80095de:	2200      	movs	r2, #0
 80095e0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	2243      	movs	r2, #67	@ 0x43
 80095e6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80095e8:	4b02      	ldr	r3, [pc, #8]	@ (80095f4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80095ea:	4618      	mov	r0, r3
 80095ec:	3718      	adds	r7, #24
 80095ee:	46bd      	mov	sp, r7
 80095f0:	bd80      	pop	{r7, pc}
 80095f2:	bf00      	nop
 80095f4:	20000054 	.word	0x20000054

080095f8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b086      	sub	sp, #24
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009600:	2182      	movs	r1, #130	@ 0x82
 8009602:	4818      	ldr	r0, [pc, #96]	@ (8009664 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009604:	f000 fcd7 	bl	8009fb6 <USBD_GetEpDesc>
 8009608:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800960a:	2101      	movs	r1, #1
 800960c:	4815      	ldr	r0, [pc, #84]	@ (8009664 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800960e:	f000 fcd2 	bl	8009fb6 <USBD_GetEpDesc>
 8009612:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009614:	2181      	movs	r1, #129	@ 0x81
 8009616:	4813      	ldr	r0, [pc, #76]	@ (8009664 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009618:	f000 fccd 	bl	8009fb6 <USBD_GetEpDesc>
 800961c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800961e:	697b      	ldr	r3, [r7, #20]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d002      	beq.n	800962a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009624:	697b      	ldr	r3, [r7, #20]
 8009626:	2210      	movs	r2, #16
 8009628:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800962a:	693b      	ldr	r3, [r7, #16]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d006      	beq.n	800963e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009630:	693b      	ldr	r3, [r7, #16]
 8009632:	2200      	movs	r2, #0
 8009634:	711a      	strb	r2, [r3, #4]
 8009636:	2200      	movs	r2, #0
 8009638:	f042 0202 	orr.w	r2, r2, #2
 800963c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d006      	beq.n	8009652 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	2200      	movs	r2, #0
 8009648:	711a      	strb	r2, [r3, #4]
 800964a:	2200      	movs	r2, #0
 800964c:	f042 0202 	orr.w	r2, r2, #2
 8009650:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	2243      	movs	r2, #67	@ 0x43
 8009656:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009658:	4b02      	ldr	r3, [pc, #8]	@ (8009664 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800965a:	4618      	mov	r0, r3
 800965c:	3718      	adds	r7, #24
 800965e:	46bd      	mov	sp, r7
 8009660:	bd80      	pop	{r7, pc}
 8009662:	bf00      	nop
 8009664:	20000054 	.word	0x20000054

08009668 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b086      	sub	sp, #24
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009670:	2182      	movs	r1, #130	@ 0x82
 8009672:	4818      	ldr	r0, [pc, #96]	@ (80096d4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009674:	f000 fc9f 	bl	8009fb6 <USBD_GetEpDesc>
 8009678:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800967a:	2101      	movs	r1, #1
 800967c:	4815      	ldr	r0, [pc, #84]	@ (80096d4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800967e:	f000 fc9a 	bl	8009fb6 <USBD_GetEpDesc>
 8009682:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009684:	2181      	movs	r1, #129	@ 0x81
 8009686:	4813      	ldr	r0, [pc, #76]	@ (80096d4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009688:	f000 fc95 	bl	8009fb6 <USBD_GetEpDesc>
 800968c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800968e:	697b      	ldr	r3, [r7, #20]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d002      	beq.n	800969a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009694:	697b      	ldr	r3, [r7, #20]
 8009696:	2210      	movs	r2, #16
 8009698:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800969a:	693b      	ldr	r3, [r7, #16]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d006      	beq.n	80096ae <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80096a0:	693b      	ldr	r3, [r7, #16]
 80096a2:	2200      	movs	r2, #0
 80096a4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80096a8:	711a      	strb	r2, [r3, #4]
 80096aa:	2200      	movs	r2, #0
 80096ac:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d006      	beq.n	80096c2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	2200      	movs	r2, #0
 80096b8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80096bc:	711a      	strb	r2, [r3, #4]
 80096be:	2200      	movs	r2, #0
 80096c0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	2243      	movs	r2, #67	@ 0x43
 80096c6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80096c8:	4b02      	ldr	r3, [pc, #8]	@ (80096d4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80096ca:	4618      	mov	r0, r3
 80096cc:	3718      	adds	r7, #24
 80096ce:	46bd      	mov	sp, r7
 80096d0:	bd80      	pop	{r7, pc}
 80096d2:	bf00      	nop
 80096d4:	20000054 	.word	0x20000054

080096d8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80096d8:	b480      	push	{r7}
 80096da:	b083      	sub	sp, #12
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	220a      	movs	r2, #10
 80096e4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80096e6:	4b03      	ldr	r3, [pc, #12]	@ (80096f4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80096e8:	4618      	mov	r0, r3
 80096ea:	370c      	adds	r7, #12
 80096ec:	46bd      	mov	sp, r7
 80096ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f2:	4770      	bx	lr
 80096f4:	20000010 	.word	0x20000010

080096f8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80096f8:	b480      	push	{r7}
 80096fa:	b083      	sub	sp, #12
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
 8009700:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009702:	683b      	ldr	r3, [r7, #0]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d101      	bne.n	800970c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009708:	2303      	movs	r3, #3
 800970a:	e009      	b.n	8009720 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009712:	687a      	ldr	r2, [r7, #4]
 8009714:	33b0      	adds	r3, #176	@ 0xb0
 8009716:	009b      	lsls	r3, r3, #2
 8009718:	4413      	add	r3, r2
 800971a:	683a      	ldr	r2, [r7, #0]
 800971c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800971e:	2300      	movs	r3, #0
}
 8009720:	4618      	mov	r0, r3
 8009722:	370c      	adds	r7, #12
 8009724:	46bd      	mov	sp, r7
 8009726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972a:	4770      	bx	lr

0800972c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800972c:	b480      	push	{r7}
 800972e:	b087      	sub	sp, #28
 8009730:	af00      	add	r7, sp, #0
 8009732:	60f8      	str	r0, [r7, #12]
 8009734:	60b9      	str	r1, [r7, #8]
 8009736:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	32b0      	adds	r2, #176	@ 0xb0
 8009742:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009746:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009748:	697b      	ldr	r3, [r7, #20]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d101      	bne.n	8009752 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800974e:	2303      	movs	r3, #3
 8009750:	e008      	b.n	8009764 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8009752:	697b      	ldr	r3, [r7, #20]
 8009754:	68ba      	ldr	r2, [r7, #8]
 8009756:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800975a:	697b      	ldr	r3, [r7, #20]
 800975c:	687a      	ldr	r2, [r7, #4]
 800975e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8009762:	2300      	movs	r3, #0
}
 8009764:	4618      	mov	r0, r3
 8009766:	371c      	adds	r7, #28
 8009768:	46bd      	mov	sp, r7
 800976a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976e:	4770      	bx	lr

08009770 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009770:	b480      	push	{r7}
 8009772:	b085      	sub	sp, #20
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
 8009778:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	32b0      	adds	r2, #176	@ 0xb0
 8009784:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009788:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d101      	bne.n	8009794 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009790:	2303      	movs	r3, #3
 8009792:	e004      	b.n	800979e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	683a      	ldr	r2, [r7, #0]
 8009798:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800979c:	2300      	movs	r3, #0
}
 800979e:	4618      	mov	r0, r3
 80097a0:	3714      	adds	r7, #20
 80097a2:	46bd      	mov	sp, r7
 80097a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a8:	4770      	bx	lr
	...

080097ac <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b084      	sub	sp, #16
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	32b0      	adds	r2, #176	@ 0xb0
 80097be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097c2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	32b0      	adds	r2, #176	@ 0xb0
 80097ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d101      	bne.n	80097da <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80097d6:	2303      	movs	r3, #3
 80097d8:	e018      	b.n	800980c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	7c1b      	ldrb	r3, [r3, #16]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d10a      	bne.n	80097f8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80097e2:	4b0c      	ldr	r3, [pc, #48]	@ (8009814 <USBD_CDC_ReceivePacket+0x68>)
 80097e4:	7819      	ldrb	r1, [r3, #0]
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80097ec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80097f0:	6878      	ldr	r0, [r7, #4]
 80097f2:	f001 ff79 	bl	800b6e8 <USBD_LL_PrepareReceive>
 80097f6:	e008      	b.n	800980a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80097f8:	4b06      	ldr	r3, [pc, #24]	@ (8009814 <USBD_CDC_ReceivePacket+0x68>)
 80097fa:	7819      	ldrb	r1, [r3, #0]
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009802:	2340      	movs	r3, #64	@ 0x40
 8009804:	6878      	ldr	r0, [r7, #4]
 8009806:	f001 ff6f 	bl	800b6e8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800980a:	2300      	movs	r3, #0
}
 800980c:	4618      	mov	r0, r3
 800980e:	3710      	adds	r7, #16
 8009810:	46bd      	mov	sp, r7
 8009812:	bd80      	pop	{r7, pc}
 8009814:	20000098 	.word	0x20000098

08009818 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b086      	sub	sp, #24
 800981c:	af00      	add	r7, sp, #0
 800981e:	60f8      	str	r0, [r7, #12]
 8009820:	60b9      	str	r1, [r7, #8]
 8009822:	4613      	mov	r3, r2
 8009824:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d101      	bne.n	8009830 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800982c:	2303      	movs	r3, #3
 800982e:	e01f      	b.n	8009870 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	2200      	movs	r2, #0
 8009834:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	2200      	movs	r2, #0
 800983c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	2200      	movs	r2, #0
 8009844:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009848:	68bb      	ldr	r3, [r7, #8]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d003      	beq.n	8009856 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	68ba      	ldr	r2, [r7, #8]
 8009852:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	2201      	movs	r2, #1
 800985a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	79fa      	ldrb	r2, [r7, #7]
 8009862:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009864:	68f8      	ldr	r0, [r7, #12]
 8009866:	f001 fde9 	bl	800b43c <USBD_LL_Init>
 800986a:	4603      	mov	r3, r0
 800986c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800986e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009870:	4618      	mov	r0, r3
 8009872:	3718      	adds	r7, #24
 8009874:	46bd      	mov	sp, r7
 8009876:	bd80      	pop	{r7, pc}

08009878 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b084      	sub	sp, #16
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
 8009880:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009882:	2300      	movs	r3, #0
 8009884:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d101      	bne.n	8009890 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800988c:	2303      	movs	r3, #3
 800988e:	e025      	b.n	80098dc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	683a      	ldr	r2, [r7, #0]
 8009894:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	32ae      	adds	r2, #174	@ 0xae
 80098a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d00f      	beq.n	80098cc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	32ae      	adds	r2, #174	@ 0xae
 80098b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098bc:	f107 020e 	add.w	r2, r7, #14
 80098c0:	4610      	mov	r0, r2
 80098c2:	4798      	blx	r3
 80098c4:	4602      	mov	r2, r0
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80098d2:	1c5a      	adds	r2, r3, #1
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80098da:	2300      	movs	r3, #0
}
 80098dc:	4618      	mov	r0, r3
 80098de:	3710      	adds	r7, #16
 80098e0:	46bd      	mov	sp, r7
 80098e2:	bd80      	pop	{r7, pc}

080098e4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b082      	sub	sp, #8
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80098ec:	6878      	ldr	r0, [r7, #4]
 80098ee:	f001 fdf1 	bl	800b4d4 <USBD_LL_Start>
 80098f2:	4603      	mov	r3, r0
}
 80098f4:	4618      	mov	r0, r3
 80098f6:	3708      	adds	r7, #8
 80098f8:	46bd      	mov	sp, r7
 80098fa:	bd80      	pop	{r7, pc}

080098fc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80098fc:	b480      	push	{r7}
 80098fe:	b083      	sub	sp, #12
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009904:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009906:	4618      	mov	r0, r3
 8009908:	370c      	adds	r7, #12
 800990a:	46bd      	mov	sp, r7
 800990c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009910:	4770      	bx	lr

08009912 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009912:	b580      	push	{r7, lr}
 8009914:	b084      	sub	sp, #16
 8009916:	af00      	add	r7, sp, #0
 8009918:	6078      	str	r0, [r7, #4]
 800991a:	460b      	mov	r3, r1
 800991c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800991e:	2300      	movs	r3, #0
 8009920:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009928:	2b00      	cmp	r3, #0
 800992a:	d009      	beq.n	8009940 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	78fa      	ldrb	r2, [r7, #3]
 8009936:	4611      	mov	r1, r2
 8009938:	6878      	ldr	r0, [r7, #4]
 800993a:	4798      	blx	r3
 800993c:	4603      	mov	r3, r0
 800993e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009940:	7bfb      	ldrb	r3, [r7, #15]
}
 8009942:	4618      	mov	r0, r3
 8009944:	3710      	adds	r7, #16
 8009946:	46bd      	mov	sp, r7
 8009948:	bd80      	pop	{r7, pc}

0800994a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800994a:	b580      	push	{r7, lr}
 800994c:	b084      	sub	sp, #16
 800994e:	af00      	add	r7, sp, #0
 8009950:	6078      	str	r0, [r7, #4]
 8009952:	460b      	mov	r3, r1
 8009954:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009956:	2300      	movs	r3, #0
 8009958:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009960:	685b      	ldr	r3, [r3, #4]
 8009962:	78fa      	ldrb	r2, [r7, #3]
 8009964:	4611      	mov	r1, r2
 8009966:	6878      	ldr	r0, [r7, #4]
 8009968:	4798      	blx	r3
 800996a:	4603      	mov	r3, r0
 800996c:	2b00      	cmp	r3, #0
 800996e:	d001      	beq.n	8009974 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009970:	2303      	movs	r3, #3
 8009972:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009974:	7bfb      	ldrb	r3, [r7, #15]
}
 8009976:	4618      	mov	r0, r3
 8009978:	3710      	adds	r7, #16
 800997a:	46bd      	mov	sp, r7
 800997c:	bd80      	pop	{r7, pc}

0800997e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800997e:	b580      	push	{r7, lr}
 8009980:	b084      	sub	sp, #16
 8009982:	af00      	add	r7, sp, #0
 8009984:	6078      	str	r0, [r7, #4]
 8009986:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800998e:	6839      	ldr	r1, [r7, #0]
 8009990:	4618      	mov	r0, r3
 8009992:	f001 f90c 	bl	800abae <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	2201      	movs	r2, #1
 800999a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80099a4:	461a      	mov	r2, r3
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80099b2:	f003 031f 	and.w	r3, r3, #31
 80099b6:	2b02      	cmp	r3, #2
 80099b8:	d01a      	beq.n	80099f0 <USBD_LL_SetupStage+0x72>
 80099ba:	2b02      	cmp	r3, #2
 80099bc:	d822      	bhi.n	8009a04 <USBD_LL_SetupStage+0x86>
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d002      	beq.n	80099c8 <USBD_LL_SetupStage+0x4a>
 80099c2:	2b01      	cmp	r3, #1
 80099c4:	d00a      	beq.n	80099dc <USBD_LL_SetupStage+0x5e>
 80099c6:	e01d      	b.n	8009a04 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80099ce:	4619      	mov	r1, r3
 80099d0:	6878      	ldr	r0, [r7, #4]
 80099d2:	f000 fb63 	bl	800a09c <USBD_StdDevReq>
 80099d6:	4603      	mov	r3, r0
 80099d8:	73fb      	strb	r3, [r7, #15]
      break;
 80099da:	e020      	b.n	8009a1e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80099e2:	4619      	mov	r1, r3
 80099e4:	6878      	ldr	r0, [r7, #4]
 80099e6:	f000 fbcb 	bl	800a180 <USBD_StdItfReq>
 80099ea:	4603      	mov	r3, r0
 80099ec:	73fb      	strb	r3, [r7, #15]
      break;
 80099ee:	e016      	b.n	8009a1e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80099f6:	4619      	mov	r1, r3
 80099f8:	6878      	ldr	r0, [r7, #4]
 80099fa:	f000 fc2d 	bl	800a258 <USBD_StdEPReq>
 80099fe:	4603      	mov	r3, r0
 8009a00:	73fb      	strb	r3, [r7, #15]
      break;
 8009a02:	e00c      	b.n	8009a1e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009a0a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009a0e:	b2db      	uxtb	r3, r3
 8009a10:	4619      	mov	r1, r3
 8009a12:	6878      	ldr	r0, [r7, #4]
 8009a14:	f001 fdbe 	bl	800b594 <USBD_LL_StallEP>
 8009a18:	4603      	mov	r3, r0
 8009a1a:	73fb      	strb	r3, [r7, #15]
      break;
 8009a1c:	bf00      	nop
  }

  return ret;
 8009a1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a20:	4618      	mov	r0, r3
 8009a22:	3710      	adds	r7, #16
 8009a24:	46bd      	mov	sp, r7
 8009a26:	bd80      	pop	{r7, pc}

08009a28 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b086      	sub	sp, #24
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	60f8      	str	r0, [r7, #12]
 8009a30:	460b      	mov	r3, r1
 8009a32:	607a      	str	r2, [r7, #4]
 8009a34:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009a36:	2300      	movs	r3, #0
 8009a38:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009a3a:	7afb      	ldrb	r3, [r7, #11]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d16e      	bne.n	8009b1e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8009a46:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009a4e:	2b03      	cmp	r3, #3
 8009a50:	f040 8098 	bne.w	8009b84 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009a54:	693b      	ldr	r3, [r7, #16]
 8009a56:	689a      	ldr	r2, [r3, #8]
 8009a58:	693b      	ldr	r3, [r7, #16]
 8009a5a:	68db      	ldr	r3, [r3, #12]
 8009a5c:	429a      	cmp	r2, r3
 8009a5e:	d913      	bls.n	8009a88 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009a60:	693b      	ldr	r3, [r7, #16]
 8009a62:	689a      	ldr	r2, [r3, #8]
 8009a64:	693b      	ldr	r3, [r7, #16]
 8009a66:	68db      	ldr	r3, [r3, #12]
 8009a68:	1ad2      	subs	r2, r2, r3
 8009a6a:	693b      	ldr	r3, [r7, #16]
 8009a6c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009a6e:	693b      	ldr	r3, [r7, #16]
 8009a70:	68da      	ldr	r2, [r3, #12]
 8009a72:	693b      	ldr	r3, [r7, #16]
 8009a74:	689b      	ldr	r3, [r3, #8]
 8009a76:	4293      	cmp	r3, r2
 8009a78:	bf28      	it	cs
 8009a7a:	4613      	movcs	r3, r2
 8009a7c:	461a      	mov	r2, r3
 8009a7e:	6879      	ldr	r1, [r7, #4]
 8009a80:	68f8      	ldr	r0, [r7, #12]
 8009a82:	f001 f988 	bl	800ad96 <USBD_CtlContinueRx>
 8009a86:	e07d      	b.n	8009b84 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009a8e:	f003 031f 	and.w	r3, r3, #31
 8009a92:	2b02      	cmp	r3, #2
 8009a94:	d014      	beq.n	8009ac0 <USBD_LL_DataOutStage+0x98>
 8009a96:	2b02      	cmp	r3, #2
 8009a98:	d81d      	bhi.n	8009ad6 <USBD_LL_DataOutStage+0xae>
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d002      	beq.n	8009aa4 <USBD_LL_DataOutStage+0x7c>
 8009a9e:	2b01      	cmp	r3, #1
 8009aa0:	d003      	beq.n	8009aaa <USBD_LL_DataOutStage+0x82>
 8009aa2:	e018      	b.n	8009ad6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	75bb      	strb	r3, [r7, #22]
            break;
 8009aa8:	e018      	b.n	8009adc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009ab0:	b2db      	uxtb	r3, r3
 8009ab2:	4619      	mov	r1, r3
 8009ab4:	68f8      	ldr	r0, [r7, #12]
 8009ab6:	f000 fa64 	bl	8009f82 <USBD_CoreFindIF>
 8009aba:	4603      	mov	r3, r0
 8009abc:	75bb      	strb	r3, [r7, #22]
            break;
 8009abe:	e00d      	b.n	8009adc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009ac6:	b2db      	uxtb	r3, r3
 8009ac8:	4619      	mov	r1, r3
 8009aca:	68f8      	ldr	r0, [r7, #12]
 8009acc:	f000 fa66 	bl	8009f9c <USBD_CoreFindEP>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	75bb      	strb	r3, [r7, #22]
            break;
 8009ad4:	e002      	b.n	8009adc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	75bb      	strb	r3, [r7, #22]
            break;
 8009ada:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009adc:	7dbb      	ldrb	r3, [r7, #22]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d119      	bne.n	8009b16 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ae8:	b2db      	uxtb	r3, r3
 8009aea:	2b03      	cmp	r3, #3
 8009aec:	d113      	bne.n	8009b16 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009aee:	7dba      	ldrb	r2, [r7, #22]
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	32ae      	adds	r2, #174	@ 0xae
 8009af4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009af8:	691b      	ldr	r3, [r3, #16]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d00b      	beq.n	8009b16 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8009afe:	7dba      	ldrb	r2, [r7, #22]
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009b06:	7dba      	ldrb	r2, [r7, #22]
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	32ae      	adds	r2, #174	@ 0xae
 8009b0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b10:	691b      	ldr	r3, [r3, #16]
 8009b12:	68f8      	ldr	r0, [r7, #12]
 8009b14:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009b16:	68f8      	ldr	r0, [r7, #12]
 8009b18:	f001 f94e 	bl	800adb8 <USBD_CtlSendStatus>
 8009b1c:	e032      	b.n	8009b84 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009b1e:	7afb      	ldrb	r3, [r7, #11]
 8009b20:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009b24:	b2db      	uxtb	r3, r3
 8009b26:	4619      	mov	r1, r3
 8009b28:	68f8      	ldr	r0, [r7, #12]
 8009b2a:	f000 fa37 	bl	8009f9c <USBD_CoreFindEP>
 8009b2e:	4603      	mov	r3, r0
 8009b30:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009b32:	7dbb      	ldrb	r3, [r7, #22]
 8009b34:	2bff      	cmp	r3, #255	@ 0xff
 8009b36:	d025      	beq.n	8009b84 <USBD_LL_DataOutStage+0x15c>
 8009b38:	7dbb      	ldrb	r3, [r7, #22]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d122      	bne.n	8009b84 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b44:	b2db      	uxtb	r3, r3
 8009b46:	2b03      	cmp	r3, #3
 8009b48:	d117      	bne.n	8009b7a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8009b4a:	7dba      	ldrb	r2, [r7, #22]
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	32ae      	adds	r2, #174	@ 0xae
 8009b50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b54:	699b      	ldr	r3, [r3, #24]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d00f      	beq.n	8009b7a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8009b5a:	7dba      	ldrb	r2, [r7, #22]
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8009b62:	7dba      	ldrb	r2, [r7, #22]
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	32ae      	adds	r2, #174	@ 0xae
 8009b68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b6c:	699b      	ldr	r3, [r3, #24]
 8009b6e:	7afa      	ldrb	r2, [r7, #11]
 8009b70:	4611      	mov	r1, r2
 8009b72:	68f8      	ldr	r0, [r7, #12]
 8009b74:	4798      	blx	r3
 8009b76:	4603      	mov	r3, r0
 8009b78:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8009b7a:	7dfb      	ldrb	r3, [r7, #23]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d001      	beq.n	8009b84 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8009b80:	7dfb      	ldrb	r3, [r7, #23]
 8009b82:	e000      	b.n	8009b86 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009b84:	2300      	movs	r3, #0
}
 8009b86:	4618      	mov	r0, r3
 8009b88:	3718      	adds	r7, #24
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	bd80      	pop	{r7, pc}

08009b8e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009b8e:	b580      	push	{r7, lr}
 8009b90:	b086      	sub	sp, #24
 8009b92:	af00      	add	r7, sp, #0
 8009b94:	60f8      	str	r0, [r7, #12]
 8009b96:	460b      	mov	r3, r1
 8009b98:	607a      	str	r2, [r7, #4]
 8009b9a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8009b9c:	7afb      	ldrb	r3, [r7, #11]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d16f      	bne.n	8009c82 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	3314      	adds	r3, #20
 8009ba6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009bae:	2b02      	cmp	r3, #2
 8009bb0:	d15a      	bne.n	8009c68 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8009bb2:	693b      	ldr	r3, [r7, #16]
 8009bb4:	689a      	ldr	r2, [r3, #8]
 8009bb6:	693b      	ldr	r3, [r7, #16]
 8009bb8:	68db      	ldr	r3, [r3, #12]
 8009bba:	429a      	cmp	r2, r3
 8009bbc:	d914      	bls.n	8009be8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009bbe:	693b      	ldr	r3, [r7, #16]
 8009bc0:	689a      	ldr	r2, [r3, #8]
 8009bc2:	693b      	ldr	r3, [r7, #16]
 8009bc4:	68db      	ldr	r3, [r3, #12]
 8009bc6:	1ad2      	subs	r2, r2, r3
 8009bc8:	693b      	ldr	r3, [r7, #16]
 8009bca:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009bcc:	693b      	ldr	r3, [r7, #16]
 8009bce:	689b      	ldr	r3, [r3, #8]
 8009bd0:	461a      	mov	r2, r3
 8009bd2:	6879      	ldr	r1, [r7, #4]
 8009bd4:	68f8      	ldr	r0, [r7, #12]
 8009bd6:	f001 f8b0 	bl	800ad3a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009bda:	2300      	movs	r3, #0
 8009bdc:	2200      	movs	r2, #0
 8009bde:	2100      	movs	r1, #0
 8009be0:	68f8      	ldr	r0, [r7, #12]
 8009be2:	f001 fd81 	bl	800b6e8 <USBD_LL_PrepareReceive>
 8009be6:	e03f      	b.n	8009c68 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009be8:	693b      	ldr	r3, [r7, #16]
 8009bea:	68da      	ldr	r2, [r3, #12]
 8009bec:	693b      	ldr	r3, [r7, #16]
 8009bee:	689b      	ldr	r3, [r3, #8]
 8009bf0:	429a      	cmp	r2, r3
 8009bf2:	d11c      	bne.n	8009c2e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009bf4:	693b      	ldr	r3, [r7, #16]
 8009bf6:	685a      	ldr	r2, [r3, #4]
 8009bf8:	693b      	ldr	r3, [r7, #16]
 8009bfa:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009bfc:	429a      	cmp	r2, r3
 8009bfe:	d316      	bcc.n	8009c2e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009c00:	693b      	ldr	r3, [r7, #16]
 8009c02:	685a      	ldr	r2, [r3, #4]
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009c0a:	429a      	cmp	r2, r3
 8009c0c:	d20f      	bcs.n	8009c2e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009c0e:	2200      	movs	r2, #0
 8009c10:	2100      	movs	r1, #0
 8009c12:	68f8      	ldr	r0, [r7, #12]
 8009c14:	f001 f891 	bl	800ad3a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009c20:	2300      	movs	r3, #0
 8009c22:	2200      	movs	r2, #0
 8009c24:	2100      	movs	r1, #0
 8009c26:	68f8      	ldr	r0, [r7, #12]
 8009c28:	f001 fd5e 	bl	800b6e8 <USBD_LL_PrepareReceive>
 8009c2c:	e01c      	b.n	8009c68 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c34:	b2db      	uxtb	r3, r3
 8009c36:	2b03      	cmp	r3, #3
 8009c38:	d10f      	bne.n	8009c5a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009c40:	68db      	ldr	r3, [r3, #12]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d009      	beq.n	8009c5a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	2200      	movs	r2, #0
 8009c4a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009c54:	68db      	ldr	r3, [r3, #12]
 8009c56:	68f8      	ldr	r0, [r7, #12]
 8009c58:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009c5a:	2180      	movs	r1, #128	@ 0x80
 8009c5c:	68f8      	ldr	r0, [r7, #12]
 8009c5e:	f001 fc99 	bl	800b594 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009c62:	68f8      	ldr	r0, [r7, #12]
 8009c64:	f001 f8bb 	bl	800adde <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d03a      	beq.n	8009ce8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8009c72:	68f8      	ldr	r0, [r7, #12]
 8009c74:	f7ff fe42 	bl	80098fc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8009c80:	e032      	b.n	8009ce8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8009c82:	7afb      	ldrb	r3, [r7, #11]
 8009c84:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009c88:	b2db      	uxtb	r3, r3
 8009c8a:	4619      	mov	r1, r3
 8009c8c:	68f8      	ldr	r0, [r7, #12]
 8009c8e:	f000 f985 	bl	8009f9c <USBD_CoreFindEP>
 8009c92:	4603      	mov	r3, r0
 8009c94:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009c96:	7dfb      	ldrb	r3, [r7, #23]
 8009c98:	2bff      	cmp	r3, #255	@ 0xff
 8009c9a:	d025      	beq.n	8009ce8 <USBD_LL_DataInStage+0x15a>
 8009c9c:	7dfb      	ldrb	r3, [r7, #23]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d122      	bne.n	8009ce8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ca8:	b2db      	uxtb	r3, r3
 8009caa:	2b03      	cmp	r3, #3
 8009cac:	d11c      	bne.n	8009ce8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8009cae:	7dfa      	ldrb	r2, [r7, #23]
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	32ae      	adds	r2, #174	@ 0xae
 8009cb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cb8:	695b      	ldr	r3, [r3, #20]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d014      	beq.n	8009ce8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8009cbe:	7dfa      	ldrb	r2, [r7, #23]
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8009cc6:	7dfa      	ldrb	r2, [r7, #23]
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	32ae      	adds	r2, #174	@ 0xae
 8009ccc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cd0:	695b      	ldr	r3, [r3, #20]
 8009cd2:	7afa      	ldrb	r2, [r7, #11]
 8009cd4:	4611      	mov	r1, r2
 8009cd6:	68f8      	ldr	r0, [r7, #12]
 8009cd8:	4798      	blx	r3
 8009cda:	4603      	mov	r3, r0
 8009cdc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8009cde:	7dbb      	ldrb	r3, [r7, #22]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d001      	beq.n	8009ce8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009ce4:	7dbb      	ldrb	r3, [r7, #22]
 8009ce6:	e000      	b.n	8009cea <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009ce8:	2300      	movs	r3, #0
}
 8009cea:	4618      	mov	r0, r3
 8009cec:	3718      	adds	r7, #24
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	bd80      	pop	{r7, pc}

08009cf2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009cf2:	b580      	push	{r7, lr}
 8009cf4:	b084      	sub	sp, #16
 8009cf6:	af00      	add	r7, sp, #0
 8009cf8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	2201      	movs	r2, #1
 8009d02:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	2200      	movs	r2, #0
 8009d0a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	2200      	movs	r2, #0
 8009d12:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	2200      	movs	r2, #0
 8009d18:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	2200      	movs	r2, #0
 8009d20:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d014      	beq.n	8009d58 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009d34:	685b      	ldr	r3, [r3, #4]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d00e      	beq.n	8009d58 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009d40:	685b      	ldr	r3, [r3, #4]
 8009d42:	687a      	ldr	r2, [r7, #4]
 8009d44:	6852      	ldr	r2, [r2, #4]
 8009d46:	b2d2      	uxtb	r2, r2
 8009d48:	4611      	mov	r1, r2
 8009d4a:	6878      	ldr	r0, [r7, #4]
 8009d4c:	4798      	blx	r3
 8009d4e:	4603      	mov	r3, r0
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d001      	beq.n	8009d58 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009d54:	2303      	movs	r3, #3
 8009d56:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009d58:	2340      	movs	r3, #64	@ 0x40
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	2100      	movs	r1, #0
 8009d5e:	6878      	ldr	r0, [r7, #4]
 8009d60:	f001 fbd3 	bl	800b50a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	2201      	movs	r2, #1
 8009d68:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	2240      	movs	r2, #64	@ 0x40
 8009d70:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009d74:	2340      	movs	r3, #64	@ 0x40
 8009d76:	2200      	movs	r2, #0
 8009d78:	2180      	movs	r1, #128	@ 0x80
 8009d7a:	6878      	ldr	r0, [r7, #4]
 8009d7c:	f001 fbc5 	bl	800b50a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	2201      	movs	r2, #1
 8009d84:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	2240      	movs	r2, #64	@ 0x40
 8009d8a:	621a      	str	r2, [r3, #32]

  return ret;
 8009d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d8e:	4618      	mov	r0, r3
 8009d90:	3710      	adds	r7, #16
 8009d92:	46bd      	mov	sp, r7
 8009d94:	bd80      	pop	{r7, pc}

08009d96 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009d96:	b480      	push	{r7}
 8009d98:	b083      	sub	sp, #12
 8009d9a:	af00      	add	r7, sp, #0
 8009d9c:	6078      	str	r0, [r7, #4]
 8009d9e:	460b      	mov	r3, r1
 8009da0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	78fa      	ldrb	r2, [r7, #3]
 8009da6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009da8:	2300      	movs	r3, #0
}
 8009daa:	4618      	mov	r0, r3
 8009dac:	370c      	adds	r7, #12
 8009dae:	46bd      	mov	sp, r7
 8009db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db4:	4770      	bx	lr

08009db6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009db6:	b480      	push	{r7}
 8009db8:	b083      	sub	sp, #12
 8009dba:	af00      	add	r7, sp, #0
 8009dbc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009dc4:	b2db      	uxtb	r3, r3
 8009dc6:	2b04      	cmp	r3, #4
 8009dc8:	d006      	beq.n	8009dd8 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009dd0:	b2da      	uxtb	r2, r3
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2204      	movs	r2, #4
 8009ddc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8009de0:	2300      	movs	r3, #0
}
 8009de2:	4618      	mov	r0, r3
 8009de4:	370c      	adds	r7, #12
 8009de6:	46bd      	mov	sp, r7
 8009de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dec:	4770      	bx	lr

08009dee <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009dee:	b480      	push	{r7}
 8009df0:	b083      	sub	sp, #12
 8009df2:	af00      	add	r7, sp, #0
 8009df4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009dfc:	b2db      	uxtb	r3, r3
 8009dfe:	2b04      	cmp	r3, #4
 8009e00:	d106      	bne.n	8009e10 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8009e08:	b2da      	uxtb	r2, r3
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8009e10:	2300      	movs	r3, #0
}
 8009e12:	4618      	mov	r0, r3
 8009e14:	370c      	adds	r7, #12
 8009e16:	46bd      	mov	sp, r7
 8009e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1c:	4770      	bx	lr

08009e1e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009e1e:	b580      	push	{r7, lr}
 8009e20:	b082      	sub	sp, #8
 8009e22:	af00      	add	r7, sp, #0
 8009e24:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e2c:	b2db      	uxtb	r3, r3
 8009e2e:	2b03      	cmp	r3, #3
 8009e30:	d110      	bne.n	8009e54 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d00b      	beq.n	8009e54 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009e42:	69db      	ldr	r3, [r3, #28]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d005      	beq.n	8009e54 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009e4e:	69db      	ldr	r3, [r3, #28]
 8009e50:	6878      	ldr	r0, [r7, #4]
 8009e52:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009e54:	2300      	movs	r3, #0
}
 8009e56:	4618      	mov	r0, r3
 8009e58:	3708      	adds	r7, #8
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	bd80      	pop	{r7, pc}

08009e5e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009e5e:	b580      	push	{r7, lr}
 8009e60:	b082      	sub	sp, #8
 8009e62:	af00      	add	r7, sp, #0
 8009e64:	6078      	str	r0, [r7, #4]
 8009e66:	460b      	mov	r3, r1
 8009e68:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	32ae      	adds	r2, #174	@ 0xae
 8009e74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d101      	bne.n	8009e80 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009e7c:	2303      	movs	r3, #3
 8009e7e:	e01c      	b.n	8009eba <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e86:	b2db      	uxtb	r3, r3
 8009e88:	2b03      	cmp	r3, #3
 8009e8a:	d115      	bne.n	8009eb8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	32ae      	adds	r2, #174	@ 0xae
 8009e96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e9a:	6a1b      	ldr	r3, [r3, #32]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d00b      	beq.n	8009eb8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	32ae      	adds	r2, #174	@ 0xae
 8009eaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009eae:	6a1b      	ldr	r3, [r3, #32]
 8009eb0:	78fa      	ldrb	r2, [r7, #3]
 8009eb2:	4611      	mov	r1, r2
 8009eb4:	6878      	ldr	r0, [r7, #4]
 8009eb6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009eb8:	2300      	movs	r3, #0
}
 8009eba:	4618      	mov	r0, r3
 8009ebc:	3708      	adds	r7, #8
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	bd80      	pop	{r7, pc}

08009ec2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009ec2:	b580      	push	{r7, lr}
 8009ec4:	b082      	sub	sp, #8
 8009ec6:	af00      	add	r7, sp, #0
 8009ec8:	6078      	str	r0, [r7, #4]
 8009eca:	460b      	mov	r3, r1
 8009ecc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	32ae      	adds	r2, #174	@ 0xae
 8009ed8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d101      	bne.n	8009ee4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009ee0:	2303      	movs	r3, #3
 8009ee2:	e01c      	b.n	8009f1e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009eea:	b2db      	uxtb	r3, r3
 8009eec:	2b03      	cmp	r3, #3
 8009eee:	d115      	bne.n	8009f1c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	32ae      	adds	r2, #174	@ 0xae
 8009efa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d00b      	beq.n	8009f1c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	32ae      	adds	r2, #174	@ 0xae
 8009f0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f14:	78fa      	ldrb	r2, [r7, #3]
 8009f16:	4611      	mov	r1, r2
 8009f18:	6878      	ldr	r0, [r7, #4]
 8009f1a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009f1c:	2300      	movs	r3, #0
}
 8009f1e:	4618      	mov	r0, r3
 8009f20:	3708      	adds	r7, #8
 8009f22:	46bd      	mov	sp, r7
 8009f24:	bd80      	pop	{r7, pc}

08009f26 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009f26:	b480      	push	{r7}
 8009f28:	b083      	sub	sp, #12
 8009f2a:	af00      	add	r7, sp, #0
 8009f2c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009f2e:	2300      	movs	r3, #0
}
 8009f30:	4618      	mov	r0, r3
 8009f32:	370c      	adds	r7, #12
 8009f34:	46bd      	mov	sp, r7
 8009f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3a:	4770      	bx	lr

08009f3c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b084      	sub	sp, #16
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009f44:	2300      	movs	r3, #0
 8009f46:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2201      	movs	r2, #1
 8009f4c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d00e      	beq.n	8009f78 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009f60:	685b      	ldr	r3, [r3, #4]
 8009f62:	687a      	ldr	r2, [r7, #4]
 8009f64:	6852      	ldr	r2, [r2, #4]
 8009f66:	b2d2      	uxtb	r2, r2
 8009f68:	4611      	mov	r1, r2
 8009f6a:	6878      	ldr	r0, [r7, #4]
 8009f6c:	4798      	blx	r3
 8009f6e:	4603      	mov	r3, r0
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d001      	beq.n	8009f78 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009f74:	2303      	movs	r3, #3
 8009f76:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009f78:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	3710      	adds	r7, #16
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	bd80      	pop	{r7, pc}

08009f82 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009f82:	b480      	push	{r7}
 8009f84:	b083      	sub	sp, #12
 8009f86:	af00      	add	r7, sp, #0
 8009f88:	6078      	str	r0, [r7, #4]
 8009f8a:	460b      	mov	r3, r1
 8009f8c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009f8e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009f90:	4618      	mov	r0, r3
 8009f92:	370c      	adds	r7, #12
 8009f94:	46bd      	mov	sp, r7
 8009f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9a:	4770      	bx	lr

08009f9c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009f9c:	b480      	push	{r7}
 8009f9e:	b083      	sub	sp, #12
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
 8009fa4:	460b      	mov	r3, r1
 8009fa6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009fa8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009faa:	4618      	mov	r0, r3
 8009fac:	370c      	adds	r7, #12
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb4:	4770      	bx	lr

08009fb6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8009fb6:	b580      	push	{r7, lr}
 8009fb8:	b086      	sub	sp, #24
 8009fba:	af00      	add	r7, sp, #0
 8009fbc:	6078      	str	r0, [r7, #4]
 8009fbe:	460b      	mov	r3, r1
 8009fc0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8009fca:	2300      	movs	r3, #0
 8009fcc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	885b      	ldrh	r3, [r3, #2]
 8009fd2:	b29b      	uxth	r3, r3
 8009fd4:	68fa      	ldr	r2, [r7, #12]
 8009fd6:	7812      	ldrb	r2, [r2, #0]
 8009fd8:	4293      	cmp	r3, r2
 8009fda:	d91f      	bls.n	800a01c <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	781b      	ldrb	r3, [r3, #0]
 8009fe0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8009fe2:	e013      	b.n	800a00c <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009fe4:	f107 030a 	add.w	r3, r7, #10
 8009fe8:	4619      	mov	r1, r3
 8009fea:	6978      	ldr	r0, [r7, #20]
 8009fec:	f000 f81b 	bl	800a026 <USBD_GetNextDesc>
 8009ff0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009ff2:	697b      	ldr	r3, [r7, #20]
 8009ff4:	785b      	ldrb	r3, [r3, #1]
 8009ff6:	2b05      	cmp	r3, #5
 8009ff8:	d108      	bne.n	800a00c <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8009ffa:	697b      	ldr	r3, [r7, #20]
 8009ffc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009ffe:	693b      	ldr	r3, [r7, #16]
 800a000:	789b      	ldrb	r3, [r3, #2]
 800a002:	78fa      	ldrb	r2, [r7, #3]
 800a004:	429a      	cmp	r2, r3
 800a006:	d008      	beq.n	800a01a <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a008:	2300      	movs	r3, #0
 800a00a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	885b      	ldrh	r3, [r3, #2]
 800a010:	b29a      	uxth	r2, r3
 800a012:	897b      	ldrh	r3, [r7, #10]
 800a014:	429a      	cmp	r2, r3
 800a016:	d8e5      	bhi.n	8009fe4 <USBD_GetEpDesc+0x2e>
 800a018:	e000      	b.n	800a01c <USBD_GetEpDesc+0x66>
          break;
 800a01a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a01c:	693b      	ldr	r3, [r7, #16]
}
 800a01e:	4618      	mov	r0, r3
 800a020:	3718      	adds	r7, #24
 800a022:	46bd      	mov	sp, r7
 800a024:	bd80      	pop	{r7, pc}

0800a026 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a026:	b480      	push	{r7}
 800a028:	b085      	sub	sp, #20
 800a02a:	af00      	add	r7, sp, #0
 800a02c:	6078      	str	r0, [r7, #4]
 800a02e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a034:	683b      	ldr	r3, [r7, #0]
 800a036:	881b      	ldrh	r3, [r3, #0]
 800a038:	68fa      	ldr	r2, [r7, #12]
 800a03a:	7812      	ldrb	r2, [r2, #0]
 800a03c:	4413      	add	r3, r2
 800a03e:	b29a      	uxth	r2, r3
 800a040:	683b      	ldr	r3, [r7, #0]
 800a042:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	781b      	ldrb	r3, [r3, #0]
 800a048:	461a      	mov	r2, r3
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	4413      	add	r3, r2
 800a04e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a050:	68fb      	ldr	r3, [r7, #12]
}
 800a052:	4618      	mov	r0, r3
 800a054:	3714      	adds	r7, #20
 800a056:	46bd      	mov	sp, r7
 800a058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05c:	4770      	bx	lr

0800a05e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a05e:	b480      	push	{r7}
 800a060:	b087      	sub	sp, #28
 800a062:	af00      	add	r7, sp, #0
 800a064:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a06a:	697b      	ldr	r3, [r7, #20]
 800a06c:	781b      	ldrb	r3, [r3, #0]
 800a06e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a070:	697b      	ldr	r3, [r7, #20]
 800a072:	3301      	adds	r3, #1
 800a074:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a076:	697b      	ldr	r3, [r7, #20]
 800a078:	781b      	ldrb	r3, [r3, #0]
 800a07a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a07c:	8a3b      	ldrh	r3, [r7, #16]
 800a07e:	021b      	lsls	r3, r3, #8
 800a080:	b21a      	sxth	r2, r3
 800a082:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a086:	4313      	orrs	r3, r2
 800a088:	b21b      	sxth	r3, r3
 800a08a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a08c:	89fb      	ldrh	r3, [r7, #14]
}
 800a08e:	4618      	mov	r0, r3
 800a090:	371c      	adds	r7, #28
 800a092:	46bd      	mov	sp, r7
 800a094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a098:	4770      	bx	lr
	...

0800a09c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b084      	sub	sp, #16
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]
 800a0a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a0aa:	683b      	ldr	r3, [r7, #0]
 800a0ac:	781b      	ldrb	r3, [r3, #0]
 800a0ae:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a0b2:	2b40      	cmp	r3, #64	@ 0x40
 800a0b4:	d005      	beq.n	800a0c2 <USBD_StdDevReq+0x26>
 800a0b6:	2b40      	cmp	r3, #64	@ 0x40
 800a0b8:	d857      	bhi.n	800a16a <USBD_StdDevReq+0xce>
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d00f      	beq.n	800a0de <USBD_StdDevReq+0x42>
 800a0be:	2b20      	cmp	r3, #32
 800a0c0:	d153      	bne.n	800a16a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	32ae      	adds	r2, #174	@ 0xae
 800a0cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0d0:	689b      	ldr	r3, [r3, #8]
 800a0d2:	6839      	ldr	r1, [r7, #0]
 800a0d4:	6878      	ldr	r0, [r7, #4]
 800a0d6:	4798      	blx	r3
 800a0d8:	4603      	mov	r3, r0
 800a0da:	73fb      	strb	r3, [r7, #15]
      break;
 800a0dc:	e04a      	b.n	800a174 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a0de:	683b      	ldr	r3, [r7, #0]
 800a0e0:	785b      	ldrb	r3, [r3, #1]
 800a0e2:	2b09      	cmp	r3, #9
 800a0e4:	d83b      	bhi.n	800a15e <USBD_StdDevReq+0xc2>
 800a0e6:	a201      	add	r2, pc, #4	@ (adr r2, 800a0ec <USBD_StdDevReq+0x50>)
 800a0e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0ec:	0800a141 	.word	0x0800a141
 800a0f0:	0800a155 	.word	0x0800a155
 800a0f4:	0800a15f 	.word	0x0800a15f
 800a0f8:	0800a14b 	.word	0x0800a14b
 800a0fc:	0800a15f 	.word	0x0800a15f
 800a100:	0800a11f 	.word	0x0800a11f
 800a104:	0800a115 	.word	0x0800a115
 800a108:	0800a15f 	.word	0x0800a15f
 800a10c:	0800a137 	.word	0x0800a137
 800a110:	0800a129 	.word	0x0800a129
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a114:	6839      	ldr	r1, [r7, #0]
 800a116:	6878      	ldr	r0, [r7, #4]
 800a118:	f000 fa3c 	bl	800a594 <USBD_GetDescriptor>
          break;
 800a11c:	e024      	b.n	800a168 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a11e:	6839      	ldr	r1, [r7, #0]
 800a120:	6878      	ldr	r0, [r7, #4]
 800a122:	f000 fba1 	bl	800a868 <USBD_SetAddress>
          break;
 800a126:	e01f      	b.n	800a168 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a128:	6839      	ldr	r1, [r7, #0]
 800a12a:	6878      	ldr	r0, [r7, #4]
 800a12c:	f000 fbe0 	bl	800a8f0 <USBD_SetConfig>
 800a130:	4603      	mov	r3, r0
 800a132:	73fb      	strb	r3, [r7, #15]
          break;
 800a134:	e018      	b.n	800a168 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a136:	6839      	ldr	r1, [r7, #0]
 800a138:	6878      	ldr	r0, [r7, #4]
 800a13a:	f000 fc83 	bl	800aa44 <USBD_GetConfig>
          break;
 800a13e:	e013      	b.n	800a168 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a140:	6839      	ldr	r1, [r7, #0]
 800a142:	6878      	ldr	r0, [r7, #4]
 800a144:	f000 fcb4 	bl	800aab0 <USBD_GetStatus>
          break;
 800a148:	e00e      	b.n	800a168 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a14a:	6839      	ldr	r1, [r7, #0]
 800a14c:	6878      	ldr	r0, [r7, #4]
 800a14e:	f000 fce3 	bl	800ab18 <USBD_SetFeature>
          break;
 800a152:	e009      	b.n	800a168 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a154:	6839      	ldr	r1, [r7, #0]
 800a156:	6878      	ldr	r0, [r7, #4]
 800a158:	f000 fd07 	bl	800ab6a <USBD_ClrFeature>
          break;
 800a15c:	e004      	b.n	800a168 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a15e:	6839      	ldr	r1, [r7, #0]
 800a160:	6878      	ldr	r0, [r7, #4]
 800a162:	f000 fd5e 	bl	800ac22 <USBD_CtlError>
          break;
 800a166:	bf00      	nop
      }
      break;
 800a168:	e004      	b.n	800a174 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a16a:	6839      	ldr	r1, [r7, #0]
 800a16c:	6878      	ldr	r0, [r7, #4]
 800a16e:	f000 fd58 	bl	800ac22 <USBD_CtlError>
      break;
 800a172:	bf00      	nop
  }

  return ret;
 800a174:	7bfb      	ldrb	r3, [r7, #15]
}
 800a176:	4618      	mov	r0, r3
 800a178:	3710      	adds	r7, #16
 800a17a:	46bd      	mov	sp, r7
 800a17c:	bd80      	pop	{r7, pc}
 800a17e:	bf00      	nop

0800a180 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a180:	b580      	push	{r7, lr}
 800a182:	b084      	sub	sp, #16
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]
 800a188:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a18a:	2300      	movs	r3, #0
 800a18c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a18e:	683b      	ldr	r3, [r7, #0]
 800a190:	781b      	ldrb	r3, [r3, #0]
 800a192:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a196:	2b40      	cmp	r3, #64	@ 0x40
 800a198:	d005      	beq.n	800a1a6 <USBD_StdItfReq+0x26>
 800a19a:	2b40      	cmp	r3, #64	@ 0x40
 800a19c:	d852      	bhi.n	800a244 <USBD_StdItfReq+0xc4>
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d001      	beq.n	800a1a6 <USBD_StdItfReq+0x26>
 800a1a2:	2b20      	cmp	r3, #32
 800a1a4:	d14e      	bne.n	800a244 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a1ac:	b2db      	uxtb	r3, r3
 800a1ae:	3b01      	subs	r3, #1
 800a1b0:	2b02      	cmp	r3, #2
 800a1b2:	d840      	bhi.n	800a236 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a1b4:	683b      	ldr	r3, [r7, #0]
 800a1b6:	889b      	ldrh	r3, [r3, #4]
 800a1b8:	b2db      	uxtb	r3, r3
 800a1ba:	2b01      	cmp	r3, #1
 800a1bc:	d836      	bhi.n	800a22c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a1be:	683b      	ldr	r3, [r7, #0]
 800a1c0:	889b      	ldrh	r3, [r3, #4]
 800a1c2:	b2db      	uxtb	r3, r3
 800a1c4:	4619      	mov	r1, r3
 800a1c6:	6878      	ldr	r0, [r7, #4]
 800a1c8:	f7ff fedb 	bl	8009f82 <USBD_CoreFindIF>
 800a1cc:	4603      	mov	r3, r0
 800a1ce:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a1d0:	7bbb      	ldrb	r3, [r7, #14]
 800a1d2:	2bff      	cmp	r3, #255	@ 0xff
 800a1d4:	d01d      	beq.n	800a212 <USBD_StdItfReq+0x92>
 800a1d6:	7bbb      	ldrb	r3, [r7, #14]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d11a      	bne.n	800a212 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a1dc:	7bba      	ldrb	r2, [r7, #14]
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	32ae      	adds	r2, #174	@ 0xae
 800a1e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1e6:	689b      	ldr	r3, [r3, #8]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d00f      	beq.n	800a20c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a1ec:	7bba      	ldrb	r2, [r7, #14]
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a1f4:	7bba      	ldrb	r2, [r7, #14]
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	32ae      	adds	r2, #174	@ 0xae
 800a1fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1fe:	689b      	ldr	r3, [r3, #8]
 800a200:	6839      	ldr	r1, [r7, #0]
 800a202:	6878      	ldr	r0, [r7, #4]
 800a204:	4798      	blx	r3
 800a206:	4603      	mov	r3, r0
 800a208:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a20a:	e004      	b.n	800a216 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a20c:	2303      	movs	r3, #3
 800a20e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a210:	e001      	b.n	800a216 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a212:	2303      	movs	r3, #3
 800a214:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a216:	683b      	ldr	r3, [r7, #0]
 800a218:	88db      	ldrh	r3, [r3, #6]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d110      	bne.n	800a240 <USBD_StdItfReq+0xc0>
 800a21e:	7bfb      	ldrb	r3, [r7, #15]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d10d      	bne.n	800a240 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a224:	6878      	ldr	r0, [r7, #4]
 800a226:	f000 fdc7 	bl	800adb8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a22a:	e009      	b.n	800a240 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a22c:	6839      	ldr	r1, [r7, #0]
 800a22e:	6878      	ldr	r0, [r7, #4]
 800a230:	f000 fcf7 	bl	800ac22 <USBD_CtlError>
          break;
 800a234:	e004      	b.n	800a240 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a236:	6839      	ldr	r1, [r7, #0]
 800a238:	6878      	ldr	r0, [r7, #4]
 800a23a:	f000 fcf2 	bl	800ac22 <USBD_CtlError>
          break;
 800a23e:	e000      	b.n	800a242 <USBD_StdItfReq+0xc2>
          break;
 800a240:	bf00      	nop
      }
      break;
 800a242:	e004      	b.n	800a24e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a244:	6839      	ldr	r1, [r7, #0]
 800a246:	6878      	ldr	r0, [r7, #4]
 800a248:	f000 fceb 	bl	800ac22 <USBD_CtlError>
      break;
 800a24c:	bf00      	nop
  }

  return ret;
 800a24e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a250:	4618      	mov	r0, r3
 800a252:	3710      	adds	r7, #16
 800a254:	46bd      	mov	sp, r7
 800a256:	bd80      	pop	{r7, pc}

0800a258 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b084      	sub	sp, #16
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
 800a260:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a262:	2300      	movs	r3, #0
 800a264:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a266:	683b      	ldr	r3, [r7, #0]
 800a268:	889b      	ldrh	r3, [r3, #4]
 800a26a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a26c:	683b      	ldr	r3, [r7, #0]
 800a26e:	781b      	ldrb	r3, [r3, #0]
 800a270:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a274:	2b40      	cmp	r3, #64	@ 0x40
 800a276:	d007      	beq.n	800a288 <USBD_StdEPReq+0x30>
 800a278:	2b40      	cmp	r3, #64	@ 0x40
 800a27a:	f200 817f 	bhi.w	800a57c <USBD_StdEPReq+0x324>
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d02a      	beq.n	800a2d8 <USBD_StdEPReq+0x80>
 800a282:	2b20      	cmp	r3, #32
 800a284:	f040 817a 	bne.w	800a57c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a288:	7bbb      	ldrb	r3, [r7, #14]
 800a28a:	4619      	mov	r1, r3
 800a28c:	6878      	ldr	r0, [r7, #4]
 800a28e:	f7ff fe85 	bl	8009f9c <USBD_CoreFindEP>
 800a292:	4603      	mov	r3, r0
 800a294:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a296:	7b7b      	ldrb	r3, [r7, #13]
 800a298:	2bff      	cmp	r3, #255	@ 0xff
 800a29a:	f000 8174 	beq.w	800a586 <USBD_StdEPReq+0x32e>
 800a29e:	7b7b      	ldrb	r3, [r7, #13]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	f040 8170 	bne.w	800a586 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a2a6:	7b7a      	ldrb	r2, [r7, #13]
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a2ae:	7b7a      	ldrb	r2, [r7, #13]
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	32ae      	adds	r2, #174	@ 0xae
 800a2b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2b8:	689b      	ldr	r3, [r3, #8]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	f000 8163 	beq.w	800a586 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a2c0:	7b7a      	ldrb	r2, [r7, #13]
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	32ae      	adds	r2, #174	@ 0xae
 800a2c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2ca:	689b      	ldr	r3, [r3, #8]
 800a2cc:	6839      	ldr	r1, [r7, #0]
 800a2ce:	6878      	ldr	r0, [r7, #4]
 800a2d0:	4798      	blx	r3
 800a2d2:	4603      	mov	r3, r0
 800a2d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a2d6:	e156      	b.n	800a586 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a2d8:	683b      	ldr	r3, [r7, #0]
 800a2da:	785b      	ldrb	r3, [r3, #1]
 800a2dc:	2b03      	cmp	r3, #3
 800a2de:	d008      	beq.n	800a2f2 <USBD_StdEPReq+0x9a>
 800a2e0:	2b03      	cmp	r3, #3
 800a2e2:	f300 8145 	bgt.w	800a570 <USBD_StdEPReq+0x318>
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	f000 809b 	beq.w	800a422 <USBD_StdEPReq+0x1ca>
 800a2ec:	2b01      	cmp	r3, #1
 800a2ee:	d03c      	beq.n	800a36a <USBD_StdEPReq+0x112>
 800a2f0:	e13e      	b.n	800a570 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a2f8:	b2db      	uxtb	r3, r3
 800a2fa:	2b02      	cmp	r3, #2
 800a2fc:	d002      	beq.n	800a304 <USBD_StdEPReq+0xac>
 800a2fe:	2b03      	cmp	r3, #3
 800a300:	d016      	beq.n	800a330 <USBD_StdEPReq+0xd8>
 800a302:	e02c      	b.n	800a35e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a304:	7bbb      	ldrb	r3, [r7, #14]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d00d      	beq.n	800a326 <USBD_StdEPReq+0xce>
 800a30a:	7bbb      	ldrb	r3, [r7, #14]
 800a30c:	2b80      	cmp	r3, #128	@ 0x80
 800a30e:	d00a      	beq.n	800a326 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a310:	7bbb      	ldrb	r3, [r7, #14]
 800a312:	4619      	mov	r1, r3
 800a314:	6878      	ldr	r0, [r7, #4]
 800a316:	f001 f93d 	bl	800b594 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a31a:	2180      	movs	r1, #128	@ 0x80
 800a31c:	6878      	ldr	r0, [r7, #4]
 800a31e:	f001 f939 	bl	800b594 <USBD_LL_StallEP>
 800a322:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a324:	e020      	b.n	800a368 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a326:	6839      	ldr	r1, [r7, #0]
 800a328:	6878      	ldr	r0, [r7, #4]
 800a32a:	f000 fc7a 	bl	800ac22 <USBD_CtlError>
              break;
 800a32e:	e01b      	b.n	800a368 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a330:	683b      	ldr	r3, [r7, #0]
 800a332:	885b      	ldrh	r3, [r3, #2]
 800a334:	2b00      	cmp	r3, #0
 800a336:	d10e      	bne.n	800a356 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a338:	7bbb      	ldrb	r3, [r7, #14]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d00b      	beq.n	800a356 <USBD_StdEPReq+0xfe>
 800a33e:	7bbb      	ldrb	r3, [r7, #14]
 800a340:	2b80      	cmp	r3, #128	@ 0x80
 800a342:	d008      	beq.n	800a356 <USBD_StdEPReq+0xfe>
 800a344:	683b      	ldr	r3, [r7, #0]
 800a346:	88db      	ldrh	r3, [r3, #6]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d104      	bne.n	800a356 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a34c:	7bbb      	ldrb	r3, [r7, #14]
 800a34e:	4619      	mov	r1, r3
 800a350:	6878      	ldr	r0, [r7, #4]
 800a352:	f001 f91f 	bl	800b594 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a356:	6878      	ldr	r0, [r7, #4]
 800a358:	f000 fd2e 	bl	800adb8 <USBD_CtlSendStatus>

              break;
 800a35c:	e004      	b.n	800a368 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a35e:	6839      	ldr	r1, [r7, #0]
 800a360:	6878      	ldr	r0, [r7, #4]
 800a362:	f000 fc5e 	bl	800ac22 <USBD_CtlError>
              break;
 800a366:	bf00      	nop
          }
          break;
 800a368:	e107      	b.n	800a57a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a370:	b2db      	uxtb	r3, r3
 800a372:	2b02      	cmp	r3, #2
 800a374:	d002      	beq.n	800a37c <USBD_StdEPReq+0x124>
 800a376:	2b03      	cmp	r3, #3
 800a378:	d016      	beq.n	800a3a8 <USBD_StdEPReq+0x150>
 800a37a:	e04b      	b.n	800a414 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a37c:	7bbb      	ldrb	r3, [r7, #14]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d00d      	beq.n	800a39e <USBD_StdEPReq+0x146>
 800a382:	7bbb      	ldrb	r3, [r7, #14]
 800a384:	2b80      	cmp	r3, #128	@ 0x80
 800a386:	d00a      	beq.n	800a39e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a388:	7bbb      	ldrb	r3, [r7, #14]
 800a38a:	4619      	mov	r1, r3
 800a38c:	6878      	ldr	r0, [r7, #4]
 800a38e:	f001 f901 	bl	800b594 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a392:	2180      	movs	r1, #128	@ 0x80
 800a394:	6878      	ldr	r0, [r7, #4]
 800a396:	f001 f8fd 	bl	800b594 <USBD_LL_StallEP>
 800a39a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a39c:	e040      	b.n	800a420 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a39e:	6839      	ldr	r1, [r7, #0]
 800a3a0:	6878      	ldr	r0, [r7, #4]
 800a3a2:	f000 fc3e 	bl	800ac22 <USBD_CtlError>
              break;
 800a3a6:	e03b      	b.n	800a420 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a3a8:	683b      	ldr	r3, [r7, #0]
 800a3aa:	885b      	ldrh	r3, [r3, #2]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d136      	bne.n	800a41e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a3b0:	7bbb      	ldrb	r3, [r7, #14]
 800a3b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d004      	beq.n	800a3c4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a3ba:	7bbb      	ldrb	r3, [r7, #14]
 800a3bc:	4619      	mov	r1, r3
 800a3be:	6878      	ldr	r0, [r7, #4]
 800a3c0:	f001 f907 	bl	800b5d2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a3c4:	6878      	ldr	r0, [r7, #4]
 800a3c6:	f000 fcf7 	bl	800adb8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a3ca:	7bbb      	ldrb	r3, [r7, #14]
 800a3cc:	4619      	mov	r1, r3
 800a3ce:	6878      	ldr	r0, [r7, #4]
 800a3d0:	f7ff fde4 	bl	8009f9c <USBD_CoreFindEP>
 800a3d4:	4603      	mov	r3, r0
 800a3d6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a3d8:	7b7b      	ldrb	r3, [r7, #13]
 800a3da:	2bff      	cmp	r3, #255	@ 0xff
 800a3dc:	d01f      	beq.n	800a41e <USBD_StdEPReq+0x1c6>
 800a3de:	7b7b      	ldrb	r3, [r7, #13]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d11c      	bne.n	800a41e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800a3e4:	7b7a      	ldrb	r2, [r7, #13]
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800a3ec:	7b7a      	ldrb	r2, [r7, #13]
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	32ae      	adds	r2, #174	@ 0xae
 800a3f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3f6:	689b      	ldr	r3, [r3, #8]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d010      	beq.n	800a41e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a3fc:	7b7a      	ldrb	r2, [r7, #13]
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	32ae      	adds	r2, #174	@ 0xae
 800a402:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a406:	689b      	ldr	r3, [r3, #8]
 800a408:	6839      	ldr	r1, [r7, #0]
 800a40a:	6878      	ldr	r0, [r7, #4]
 800a40c:	4798      	blx	r3
 800a40e:	4603      	mov	r3, r0
 800a410:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800a412:	e004      	b.n	800a41e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800a414:	6839      	ldr	r1, [r7, #0]
 800a416:	6878      	ldr	r0, [r7, #4]
 800a418:	f000 fc03 	bl	800ac22 <USBD_CtlError>
              break;
 800a41c:	e000      	b.n	800a420 <USBD_StdEPReq+0x1c8>
              break;
 800a41e:	bf00      	nop
          }
          break;
 800a420:	e0ab      	b.n	800a57a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a428:	b2db      	uxtb	r3, r3
 800a42a:	2b02      	cmp	r3, #2
 800a42c:	d002      	beq.n	800a434 <USBD_StdEPReq+0x1dc>
 800a42e:	2b03      	cmp	r3, #3
 800a430:	d032      	beq.n	800a498 <USBD_StdEPReq+0x240>
 800a432:	e097      	b.n	800a564 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a434:	7bbb      	ldrb	r3, [r7, #14]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d007      	beq.n	800a44a <USBD_StdEPReq+0x1f2>
 800a43a:	7bbb      	ldrb	r3, [r7, #14]
 800a43c:	2b80      	cmp	r3, #128	@ 0x80
 800a43e:	d004      	beq.n	800a44a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800a440:	6839      	ldr	r1, [r7, #0]
 800a442:	6878      	ldr	r0, [r7, #4]
 800a444:	f000 fbed 	bl	800ac22 <USBD_CtlError>
                break;
 800a448:	e091      	b.n	800a56e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a44a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	da0b      	bge.n	800a46a <USBD_StdEPReq+0x212>
 800a452:	7bbb      	ldrb	r3, [r7, #14]
 800a454:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a458:	4613      	mov	r3, r2
 800a45a:	009b      	lsls	r3, r3, #2
 800a45c:	4413      	add	r3, r2
 800a45e:	009b      	lsls	r3, r3, #2
 800a460:	3310      	adds	r3, #16
 800a462:	687a      	ldr	r2, [r7, #4]
 800a464:	4413      	add	r3, r2
 800a466:	3304      	adds	r3, #4
 800a468:	e00b      	b.n	800a482 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a46a:	7bbb      	ldrb	r3, [r7, #14]
 800a46c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a470:	4613      	mov	r3, r2
 800a472:	009b      	lsls	r3, r3, #2
 800a474:	4413      	add	r3, r2
 800a476:	009b      	lsls	r3, r3, #2
 800a478:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a47c:	687a      	ldr	r2, [r7, #4]
 800a47e:	4413      	add	r3, r2
 800a480:	3304      	adds	r3, #4
 800a482:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a484:	68bb      	ldr	r3, [r7, #8]
 800a486:	2200      	movs	r2, #0
 800a488:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a48a:	68bb      	ldr	r3, [r7, #8]
 800a48c:	2202      	movs	r2, #2
 800a48e:	4619      	mov	r1, r3
 800a490:	6878      	ldr	r0, [r7, #4]
 800a492:	f000 fc37 	bl	800ad04 <USBD_CtlSendData>
              break;
 800a496:	e06a      	b.n	800a56e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a498:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	da11      	bge.n	800a4c4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a4a0:	7bbb      	ldrb	r3, [r7, #14]
 800a4a2:	f003 020f 	and.w	r2, r3, #15
 800a4a6:	6879      	ldr	r1, [r7, #4]
 800a4a8:	4613      	mov	r3, r2
 800a4aa:	009b      	lsls	r3, r3, #2
 800a4ac:	4413      	add	r3, r2
 800a4ae:	009b      	lsls	r3, r3, #2
 800a4b0:	440b      	add	r3, r1
 800a4b2:	3324      	adds	r3, #36	@ 0x24
 800a4b4:	881b      	ldrh	r3, [r3, #0]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d117      	bne.n	800a4ea <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a4ba:	6839      	ldr	r1, [r7, #0]
 800a4bc:	6878      	ldr	r0, [r7, #4]
 800a4be:	f000 fbb0 	bl	800ac22 <USBD_CtlError>
                  break;
 800a4c2:	e054      	b.n	800a56e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a4c4:	7bbb      	ldrb	r3, [r7, #14]
 800a4c6:	f003 020f 	and.w	r2, r3, #15
 800a4ca:	6879      	ldr	r1, [r7, #4]
 800a4cc:	4613      	mov	r3, r2
 800a4ce:	009b      	lsls	r3, r3, #2
 800a4d0:	4413      	add	r3, r2
 800a4d2:	009b      	lsls	r3, r3, #2
 800a4d4:	440b      	add	r3, r1
 800a4d6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a4da:	881b      	ldrh	r3, [r3, #0]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d104      	bne.n	800a4ea <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a4e0:	6839      	ldr	r1, [r7, #0]
 800a4e2:	6878      	ldr	r0, [r7, #4]
 800a4e4:	f000 fb9d 	bl	800ac22 <USBD_CtlError>
                  break;
 800a4e8:	e041      	b.n	800a56e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a4ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	da0b      	bge.n	800a50a <USBD_StdEPReq+0x2b2>
 800a4f2:	7bbb      	ldrb	r3, [r7, #14]
 800a4f4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a4f8:	4613      	mov	r3, r2
 800a4fa:	009b      	lsls	r3, r3, #2
 800a4fc:	4413      	add	r3, r2
 800a4fe:	009b      	lsls	r3, r3, #2
 800a500:	3310      	adds	r3, #16
 800a502:	687a      	ldr	r2, [r7, #4]
 800a504:	4413      	add	r3, r2
 800a506:	3304      	adds	r3, #4
 800a508:	e00b      	b.n	800a522 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a50a:	7bbb      	ldrb	r3, [r7, #14]
 800a50c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a510:	4613      	mov	r3, r2
 800a512:	009b      	lsls	r3, r3, #2
 800a514:	4413      	add	r3, r2
 800a516:	009b      	lsls	r3, r3, #2
 800a518:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a51c:	687a      	ldr	r2, [r7, #4]
 800a51e:	4413      	add	r3, r2
 800a520:	3304      	adds	r3, #4
 800a522:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a524:	7bbb      	ldrb	r3, [r7, #14]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d002      	beq.n	800a530 <USBD_StdEPReq+0x2d8>
 800a52a:	7bbb      	ldrb	r3, [r7, #14]
 800a52c:	2b80      	cmp	r3, #128	@ 0x80
 800a52e:	d103      	bne.n	800a538 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800a530:	68bb      	ldr	r3, [r7, #8]
 800a532:	2200      	movs	r2, #0
 800a534:	601a      	str	r2, [r3, #0]
 800a536:	e00e      	b.n	800a556 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a538:	7bbb      	ldrb	r3, [r7, #14]
 800a53a:	4619      	mov	r1, r3
 800a53c:	6878      	ldr	r0, [r7, #4]
 800a53e:	f001 f867 	bl	800b610 <USBD_LL_IsStallEP>
 800a542:	4603      	mov	r3, r0
 800a544:	2b00      	cmp	r3, #0
 800a546:	d003      	beq.n	800a550 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800a548:	68bb      	ldr	r3, [r7, #8]
 800a54a:	2201      	movs	r2, #1
 800a54c:	601a      	str	r2, [r3, #0]
 800a54e:	e002      	b.n	800a556 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800a550:	68bb      	ldr	r3, [r7, #8]
 800a552:	2200      	movs	r2, #0
 800a554:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a556:	68bb      	ldr	r3, [r7, #8]
 800a558:	2202      	movs	r2, #2
 800a55a:	4619      	mov	r1, r3
 800a55c:	6878      	ldr	r0, [r7, #4]
 800a55e:	f000 fbd1 	bl	800ad04 <USBD_CtlSendData>
              break;
 800a562:	e004      	b.n	800a56e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800a564:	6839      	ldr	r1, [r7, #0]
 800a566:	6878      	ldr	r0, [r7, #4]
 800a568:	f000 fb5b 	bl	800ac22 <USBD_CtlError>
              break;
 800a56c:	bf00      	nop
          }
          break;
 800a56e:	e004      	b.n	800a57a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800a570:	6839      	ldr	r1, [r7, #0]
 800a572:	6878      	ldr	r0, [r7, #4]
 800a574:	f000 fb55 	bl	800ac22 <USBD_CtlError>
          break;
 800a578:	bf00      	nop
      }
      break;
 800a57a:	e005      	b.n	800a588 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800a57c:	6839      	ldr	r1, [r7, #0]
 800a57e:	6878      	ldr	r0, [r7, #4]
 800a580:	f000 fb4f 	bl	800ac22 <USBD_CtlError>
      break;
 800a584:	e000      	b.n	800a588 <USBD_StdEPReq+0x330>
      break;
 800a586:	bf00      	nop
  }

  return ret;
 800a588:	7bfb      	ldrb	r3, [r7, #15]
}
 800a58a:	4618      	mov	r0, r3
 800a58c:	3710      	adds	r7, #16
 800a58e:	46bd      	mov	sp, r7
 800a590:	bd80      	pop	{r7, pc}
	...

0800a594 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a594:	b580      	push	{r7, lr}
 800a596:	b084      	sub	sp, #16
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
 800a59c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a59e:	2300      	movs	r3, #0
 800a5a0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a5aa:	683b      	ldr	r3, [r7, #0]
 800a5ac:	885b      	ldrh	r3, [r3, #2]
 800a5ae:	0a1b      	lsrs	r3, r3, #8
 800a5b0:	b29b      	uxth	r3, r3
 800a5b2:	3b01      	subs	r3, #1
 800a5b4:	2b06      	cmp	r3, #6
 800a5b6:	f200 8128 	bhi.w	800a80a <USBD_GetDescriptor+0x276>
 800a5ba:	a201      	add	r2, pc, #4	@ (adr r2, 800a5c0 <USBD_GetDescriptor+0x2c>)
 800a5bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5c0:	0800a5dd 	.word	0x0800a5dd
 800a5c4:	0800a5f5 	.word	0x0800a5f5
 800a5c8:	0800a635 	.word	0x0800a635
 800a5cc:	0800a80b 	.word	0x0800a80b
 800a5d0:	0800a80b 	.word	0x0800a80b
 800a5d4:	0800a7ab 	.word	0x0800a7ab
 800a5d8:	0800a7d7 	.word	0x0800a7d7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	687a      	ldr	r2, [r7, #4]
 800a5e6:	7c12      	ldrb	r2, [r2, #16]
 800a5e8:	f107 0108 	add.w	r1, r7, #8
 800a5ec:	4610      	mov	r0, r2
 800a5ee:	4798      	blx	r3
 800a5f0:	60f8      	str	r0, [r7, #12]
      break;
 800a5f2:	e112      	b.n	800a81a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	7c1b      	ldrb	r3, [r3, #16]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d10d      	bne.n	800a618 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a602:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a604:	f107 0208 	add.w	r2, r7, #8
 800a608:	4610      	mov	r0, r2
 800a60a:	4798      	blx	r3
 800a60c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	3301      	adds	r3, #1
 800a612:	2202      	movs	r2, #2
 800a614:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a616:	e100      	b.n	800a81a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a61e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a620:	f107 0208 	add.w	r2, r7, #8
 800a624:	4610      	mov	r0, r2
 800a626:	4798      	blx	r3
 800a628:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	3301      	adds	r3, #1
 800a62e:	2202      	movs	r2, #2
 800a630:	701a      	strb	r2, [r3, #0]
      break;
 800a632:	e0f2      	b.n	800a81a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a634:	683b      	ldr	r3, [r7, #0]
 800a636:	885b      	ldrh	r3, [r3, #2]
 800a638:	b2db      	uxtb	r3, r3
 800a63a:	2b05      	cmp	r3, #5
 800a63c:	f200 80ac 	bhi.w	800a798 <USBD_GetDescriptor+0x204>
 800a640:	a201      	add	r2, pc, #4	@ (adr r2, 800a648 <USBD_GetDescriptor+0xb4>)
 800a642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a646:	bf00      	nop
 800a648:	0800a661 	.word	0x0800a661
 800a64c:	0800a695 	.word	0x0800a695
 800a650:	0800a6c9 	.word	0x0800a6c9
 800a654:	0800a6fd 	.word	0x0800a6fd
 800a658:	0800a731 	.word	0x0800a731
 800a65c:	0800a765 	.word	0x0800a765
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a666:	685b      	ldr	r3, [r3, #4]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d00b      	beq.n	800a684 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a672:	685b      	ldr	r3, [r3, #4]
 800a674:	687a      	ldr	r2, [r7, #4]
 800a676:	7c12      	ldrb	r2, [r2, #16]
 800a678:	f107 0108 	add.w	r1, r7, #8
 800a67c:	4610      	mov	r0, r2
 800a67e:	4798      	blx	r3
 800a680:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a682:	e091      	b.n	800a7a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a684:	6839      	ldr	r1, [r7, #0]
 800a686:	6878      	ldr	r0, [r7, #4]
 800a688:	f000 facb 	bl	800ac22 <USBD_CtlError>
            err++;
 800a68c:	7afb      	ldrb	r3, [r7, #11]
 800a68e:	3301      	adds	r3, #1
 800a690:	72fb      	strb	r3, [r7, #11]
          break;
 800a692:	e089      	b.n	800a7a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a69a:	689b      	ldr	r3, [r3, #8]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d00b      	beq.n	800a6b8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a6a6:	689b      	ldr	r3, [r3, #8]
 800a6a8:	687a      	ldr	r2, [r7, #4]
 800a6aa:	7c12      	ldrb	r2, [r2, #16]
 800a6ac:	f107 0108 	add.w	r1, r7, #8
 800a6b0:	4610      	mov	r0, r2
 800a6b2:	4798      	blx	r3
 800a6b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a6b6:	e077      	b.n	800a7a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a6b8:	6839      	ldr	r1, [r7, #0]
 800a6ba:	6878      	ldr	r0, [r7, #4]
 800a6bc:	f000 fab1 	bl	800ac22 <USBD_CtlError>
            err++;
 800a6c0:	7afb      	ldrb	r3, [r7, #11]
 800a6c2:	3301      	adds	r3, #1
 800a6c4:	72fb      	strb	r3, [r7, #11]
          break;
 800a6c6:	e06f      	b.n	800a7a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a6ce:	68db      	ldr	r3, [r3, #12]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d00b      	beq.n	800a6ec <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a6da:	68db      	ldr	r3, [r3, #12]
 800a6dc:	687a      	ldr	r2, [r7, #4]
 800a6de:	7c12      	ldrb	r2, [r2, #16]
 800a6e0:	f107 0108 	add.w	r1, r7, #8
 800a6e4:	4610      	mov	r0, r2
 800a6e6:	4798      	blx	r3
 800a6e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a6ea:	e05d      	b.n	800a7a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a6ec:	6839      	ldr	r1, [r7, #0]
 800a6ee:	6878      	ldr	r0, [r7, #4]
 800a6f0:	f000 fa97 	bl	800ac22 <USBD_CtlError>
            err++;
 800a6f4:	7afb      	ldrb	r3, [r7, #11]
 800a6f6:	3301      	adds	r3, #1
 800a6f8:	72fb      	strb	r3, [r7, #11]
          break;
 800a6fa:	e055      	b.n	800a7a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a702:	691b      	ldr	r3, [r3, #16]
 800a704:	2b00      	cmp	r3, #0
 800a706:	d00b      	beq.n	800a720 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a70e:	691b      	ldr	r3, [r3, #16]
 800a710:	687a      	ldr	r2, [r7, #4]
 800a712:	7c12      	ldrb	r2, [r2, #16]
 800a714:	f107 0108 	add.w	r1, r7, #8
 800a718:	4610      	mov	r0, r2
 800a71a:	4798      	blx	r3
 800a71c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a71e:	e043      	b.n	800a7a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a720:	6839      	ldr	r1, [r7, #0]
 800a722:	6878      	ldr	r0, [r7, #4]
 800a724:	f000 fa7d 	bl	800ac22 <USBD_CtlError>
            err++;
 800a728:	7afb      	ldrb	r3, [r7, #11]
 800a72a:	3301      	adds	r3, #1
 800a72c:	72fb      	strb	r3, [r7, #11]
          break;
 800a72e:	e03b      	b.n	800a7a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a736:	695b      	ldr	r3, [r3, #20]
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d00b      	beq.n	800a754 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a742:	695b      	ldr	r3, [r3, #20]
 800a744:	687a      	ldr	r2, [r7, #4]
 800a746:	7c12      	ldrb	r2, [r2, #16]
 800a748:	f107 0108 	add.w	r1, r7, #8
 800a74c:	4610      	mov	r0, r2
 800a74e:	4798      	blx	r3
 800a750:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a752:	e029      	b.n	800a7a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a754:	6839      	ldr	r1, [r7, #0]
 800a756:	6878      	ldr	r0, [r7, #4]
 800a758:	f000 fa63 	bl	800ac22 <USBD_CtlError>
            err++;
 800a75c:	7afb      	ldrb	r3, [r7, #11]
 800a75e:	3301      	adds	r3, #1
 800a760:	72fb      	strb	r3, [r7, #11]
          break;
 800a762:	e021      	b.n	800a7a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a76a:	699b      	ldr	r3, [r3, #24]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d00b      	beq.n	800a788 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a776:	699b      	ldr	r3, [r3, #24]
 800a778:	687a      	ldr	r2, [r7, #4]
 800a77a:	7c12      	ldrb	r2, [r2, #16]
 800a77c:	f107 0108 	add.w	r1, r7, #8
 800a780:	4610      	mov	r0, r2
 800a782:	4798      	blx	r3
 800a784:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a786:	e00f      	b.n	800a7a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a788:	6839      	ldr	r1, [r7, #0]
 800a78a:	6878      	ldr	r0, [r7, #4]
 800a78c:	f000 fa49 	bl	800ac22 <USBD_CtlError>
            err++;
 800a790:	7afb      	ldrb	r3, [r7, #11]
 800a792:	3301      	adds	r3, #1
 800a794:	72fb      	strb	r3, [r7, #11]
          break;
 800a796:	e007      	b.n	800a7a8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a798:	6839      	ldr	r1, [r7, #0]
 800a79a:	6878      	ldr	r0, [r7, #4]
 800a79c:	f000 fa41 	bl	800ac22 <USBD_CtlError>
          err++;
 800a7a0:	7afb      	ldrb	r3, [r7, #11]
 800a7a2:	3301      	adds	r3, #1
 800a7a4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a7a6:	bf00      	nop
      }
      break;
 800a7a8:	e037      	b.n	800a81a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	7c1b      	ldrb	r3, [r3, #16]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d109      	bne.n	800a7c6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a7b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a7ba:	f107 0208 	add.w	r2, r7, #8
 800a7be:	4610      	mov	r0, r2
 800a7c0:	4798      	blx	r3
 800a7c2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a7c4:	e029      	b.n	800a81a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a7c6:	6839      	ldr	r1, [r7, #0]
 800a7c8:	6878      	ldr	r0, [r7, #4]
 800a7ca:	f000 fa2a 	bl	800ac22 <USBD_CtlError>
        err++;
 800a7ce:	7afb      	ldrb	r3, [r7, #11]
 800a7d0:	3301      	adds	r3, #1
 800a7d2:	72fb      	strb	r3, [r7, #11]
      break;
 800a7d4:	e021      	b.n	800a81a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	7c1b      	ldrb	r3, [r3, #16]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d10d      	bne.n	800a7fa <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a7e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a7e6:	f107 0208 	add.w	r2, r7, #8
 800a7ea:	4610      	mov	r0, r2
 800a7ec:	4798      	blx	r3
 800a7ee:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	3301      	adds	r3, #1
 800a7f4:	2207      	movs	r2, #7
 800a7f6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a7f8:	e00f      	b.n	800a81a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a7fa:	6839      	ldr	r1, [r7, #0]
 800a7fc:	6878      	ldr	r0, [r7, #4]
 800a7fe:	f000 fa10 	bl	800ac22 <USBD_CtlError>
        err++;
 800a802:	7afb      	ldrb	r3, [r7, #11]
 800a804:	3301      	adds	r3, #1
 800a806:	72fb      	strb	r3, [r7, #11]
      break;
 800a808:	e007      	b.n	800a81a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a80a:	6839      	ldr	r1, [r7, #0]
 800a80c:	6878      	ldr	r0, [r7, #4]
 800a80e:	f000 fa08 	bl	800ac22 <USBD_CtlError>
      err++;
 800a812:	7afb      	ldrb	r3, [r7, #11]
 800a814:	3301      	adds	r3, #1
 800a816:	72fb      	strb	r3, [r7, #11]
      break;
 800a818:	bf00      	nop
  }

  if (err != 0U)
 800a81a:	7afb      	ldrb	r3, [r7, #11]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d11e      	bne.n	800a85e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800a820:	683b      	ldr	r3, [r7, #0]
 800a822:	88db      	ldrh	r3, [r3, #6]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d016      	beq.n	800a856 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800a828:	893b      	ldrh	r3, [r7, #8]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d00e      	beq.n	800a84c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800a82e:	683b      	ldr	r3, [r7, #0]
 800a830:	88da      	ldrh	r2, [r3, #6]
 800a832:	893b      	ldrh	r3, [r7, #8]
 800a834:	4293      	cmp	r3, r2
 800a836:	bf28      	it	cs
 800a838:	4613      	movcs	r3, r2
 800a83a:	b29b      	uxth	r3, r3
 800a83c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a83e:	893b      	ldrh	r3, [r7, #8]
 800a840:	461a      	mov	r2, r3
 800a842:	68f9      	ldr	r1, [r7, #12]
 800a844:	6878      	ldr	r0, [r7, #4]
 800a846:	f000 fa5d 	bl	800ad04 <USBD_CtlSendData>
 800a84a:	e009      	b.n	800a860 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a84c:	6839      	ldr	r1, [r7, #0]
 800a84e:	6878      	ldr	r0, [r7, #4]
 800a850:	f000 f9e7 	bl	800ac22 <USBD_CtlError>
 800a854:	e004      	b.n	800a860 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a856:	6878      	ldr	r0, [r7, #4]
 800a858:	f000 faae 	bl	800adb8 <USBD_CtlSendStatus>
 800a85c:	e000      	b.n	800a860 <USBD_GetDescriptor+0x2cc>
    return;
 800a85e:	bf00      	nop
  }
}
 800a860:	3710      	adds	r7, #16
 800a862:	46bd      	mov	sp, r7
 800a864:	bd80      	pop	{r7, pc}
 800a866:	bf00      	nop

0800a868 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	b084      	sub	sp, #16
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
 800a870:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a872:	683b      	ldr	r3, [r7, #0]
 800a874:	889b      	ldrh	r3, [r3, #4]
 800a876:	2b00      	cmp	r3, #0
 800a878:	d131      	bne.n	800a8de <USBD_SetAddress+0x76>
 800a87a:	683b      	ldr	r3, [r7, #0]
 800a87c:	88db      	ldrh	r3, [r3, #6]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d12d      	bne.n	800a8de <USBD_SetAddress+0x76>
 800a882:	683b      	ldr	r3, [r7, #0]
 800a884:	885b      	ldrh	r3, [r3, #2]
 800a886:	2b7f      	cmp	r3, #127	@ 0x7f
 800a888:	d829      	bhi.n	800a8de <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a88a:	683b      	ldr	r3, [r7, #0]
 800a88c:	885b      	ldrh	r3, [r3, #2]
 800a88e:	b2db      	uxtb	r3, r3
 800a890:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a894:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a89c:	b2db      	uxtb	r3, r3
 800a89e:	2b03      	cmp	r3, #3
 800a8a0:	d104      	bne.n	800a8ac <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a8a2:	6839      	ldr	r1, [r7, #0]
 800a8a4:	6878      	ldr	r0, [r7, #4]
 800a8a6:	f000 f9bc 	bl	800ac22 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a8aa:	e01d      	b.n	800a8e8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	7bfa      	ldrb	r2, [r7, #15]
 800a8b0:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a8b4:	7bfb      	ldrb	r3, [r7, #15]
 800a8b6:	4619      	mov	r1, r3
 800a8b8:	6878      	ldr	r0, [r7, #4]
 800a8ba:	f000 fed5 	bl	800b668 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a8be:	6878      	ldr	r0, [r7, #4]
 800a8c0:	f000 fa7a 	bl	800adb8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a8c4:	7bfb      	ldrb	r3, [r7, #15]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d004      	beq.n	800a8d4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	2202      	movs	r2, #2
 800a8ce:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a8d2:	e009      	b.n	800a8e8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	2201      	movs	r2, #1
 800a8d8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a8dc:	e004      	b.n	800a8e8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a8de:	6839      	ldr	r1, [r7, #0]
 800a8e0:	6878      	ldr	r0, [r7, #4]
 800a8e2:	f000 f99e 	bl	800ac22 <USBD_CtlError>
  }
}
 800a8e6:	bf00      	nop
 800a8e8:	bf00      	nop
 800a8ea:	3710      	adds	r7, #16
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	bd80      	pop	{r7, pc}

0800a8f0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b084      	sub	sp, #16
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]
 800a8f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a8fe:	683b      	ldr	r3, [r7, #0]
 800a900:	885b      	ldrh	r3, [r3, #2]
 800a902:	b2da      	uxtb	r2, r3
 800a904:	4b4e      	ldr	r3, [pc, #312]	@ (800aa40 <USBD_SetConfig+0x150>)
 800a906:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a908:	4b4d      	ldr	r3, [pc, #308]	@ (800aa40 <USBD_SetConfig+0x150>)
 800a90a:	781b      	ldrb	r3, [r3, #0]
 800a90c:	2b01      	cmp	r3, #1
 800a90e:	d905      	bls.n	800a91c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a910:	6839      	ldr	r1, [r7, #0]
 800a912:	6878      	ldr	r0, [r7, #4]
 800a914:	f000 f985 	bl	800ac22 <USBD_CtlError>
    return USBD_FAIL;
 800a918:	2303      	movs	r3, #3
 800a91a:	e08c      	b.n	800aa36 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a922:	b2db      	uxtb	r3, r3
 800a924:	2b02      	cmp	r3, #2
 800a926:	d002      	beq.n	800a92e <USBD_SetConfig+0x3e>
 800a928:	2b03      	cmp	r3, #3
 800a92a:	d029      	beq.n	800a980 <USBD_SetConfig+0x90>
 800a92c:	e075      	b.n	800aa1a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a92e:	4b44      	ldr	r3, [pc, #272]	@ (800aa40 <USBD_SetConfig+0x150>)
 800a930:	781b      	ldrb	r3, [r3, #0]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d020      	beq.n	800a978 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a936:	4b42      	ldr	r3, [pc, #264]	@ (800aa40 <USBD_SetConfig+0x150>)
 800a938:	781b      	ldrb	r3, [r3, #0]
 800a93a:	461a      	mov	r2, r3
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a940:	4b3f      	ldr	r3, [pc, #252]	@ (800aa40 <USBD_SetConfig+0x150>)
 800a942:	781b      	ldrb	r3, [r3, #0]
 800a944:	4619      	mov	r1, r3
 800a946:	6878      	ldr	r0, [r7, #4]
 800a948:	f7fe ffe3 	bl	8009912 <USBD_SetClassConfig>
 800a94c:	4603      	mov	r3, r0
 800a94e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a950:	7bfb      	ldrb	r3, [r7, #15]
 800a952:	2b00      	cmp	r3, #0
 800a954:	d008      	beq.n	800a968 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a956:	6839      	ldr	r1, [r7, #0]
 800a958:	6878      	ldr	r0, [r7, #4]
 800a95a:	f000 f962 	bl	800ac22 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	2202      	movs	r2, #2
 800a962:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a966:	e065      	b.n	800aa34 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a968:	6878      	ldr	r0, [r7, #4]
 800a96a:	f000 fa25 	bl	800adb8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	2203      	movs	r2, #3
 800a972:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a976:	e05d      	b.n	800aa34 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a978:	6878      	ldr	r0, [r7, #4]
 800a97a:	f000 fa1d 	bl	800adb8 <USBD_CtlSendStatus>
      break;
 800a97e:	e059      	b.n	800aa34 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a980:	4b2f      	ldr	r3, [pc, #188]	@ (800aa40 <USBD_SetConfig+0x150>)
 800a982:	781b      	ldrb	r3, [r3, #0]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d112      	bne.n	800a9ae <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	2202      	movs	r2, #2
 800a98c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800a990:	4b2b      	ldr	r3, [pc, #172]	@ (800aa40 <USBD_SetConfig+0x150>)
 800a992:	781b      	ldrb	r3, [r3, #0]
 800a994:	461a      	mov	r2, r3
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a99a:	4b29      	ldr	r3, [pc, #164]	@ (800aa40 <USBD_SetConfig+0x150>)
 800a99c:	781b      	ldrb	r3, [r3, #0]
 800a99e:	4619      	mov	r1, r3
 800a9a0:	6878      	ldr	r0, [r7, #4]
 800a9a2:	f7fe ffd2 	bl	800994a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a9a6:	6878      	ldr	r0, [r7, #4]
 800a9a8:	f000 fa06 	bl	800adb8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a9ac:	e042      	b.n	800aa34 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a9ae:	4b24      	ldr	r3, [pc, #144]	@ (800aa40 <USBD_SetConfig+0x150>)
 800a9b0:	781b      	ldrb	r3, [r3, #0]
 800a9b2:	461a      	mov	r2, r3
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	685b      	ldr	r3, [r3, #4]
 800a9b8:	429a      	cmp	r2, r3
 800a9ba:	d02a      	beq.n	800aa12 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	685b      	ldr	r3, [r3, #4]
 800a9c0:	b2db      	uxtb	r3, r3
 800a9c2:	4619      	mov	r1, r3
 800a9c4:	6878      	ldr	r0, [r7, #4]
 800a9c6:	f7fe ffc0 	bl	800994a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a9ca:	4b1d      	ldr	r3, [pc, #116]	@ (800aa40 <USBD_SetConfig+0x150>)
 800a9cc:	781b      	ldrb	r3, [r3, #0]
 800a9ce:	461a      	mov	r2, r3
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a9d4:	4b1a      	ldr	r3, [pc, #104]	@ (800aa40 <USBD_SetConfig+0x150>)
 800a9d6:	781b      	ldrb	r3, [r3, #0]
 800a9d8:	4619      	mov	r1, r3
 800a9da:	6878      	ldr	r0, [r7, #4]
 800a9dc:	f7fe ff99 	bl	8009912 <USBD_SetClassConfig>
 800a9e0:	4603      	mov	r3, r0
 800a9e2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a9e4:	7bfb      	ldrb	r3, [r7, #15]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d00f      	beq.n	800aa0a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a9ea:	6839      	ldr	r1, [r7, #0]
 800a9ec:	6878      	ldr	r0, [r7, #4]
 800a9ee:	f000 f918 	bl	800ac22 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	685b      	ldr	r3, [r3, #4]
 800a9f6:	b2db      	uxtb	r3, r3
 800a9f8:	4619      	mov	r1, r3
 800a9fa:	6878      	ldr	r0, [r7, #4]
 800a9fc:	f7fe ffa5 	bl	800994a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	2202      	movs	r2, #2
 800aa04:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800aa08:	e014      	b.n	800aa34 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800aa0a:	6878      	ldr	r0, [r7, #4]
 800aa0c:	f000 f9d4 	bl	800adb8 <USBD_CtlSendStatus>
      break;
 800aa10:	e010      	b.n	800aa34 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800aa12:	6878      	ldr	r0, [r7, #4]
 800aa14:	f000 f9d0 	bl	800adb8 <USBD_CtlSendStatus>
      break;
 800aa18:	e00c      	b.n	800aa34 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800aa1a:	6839      	ldr	r1, [r7, #0]
 800aa1c:	6878      	ldr	r0, [r7, #4]
 800aa1e:	f000 f900 	bl	800ac22 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800aa22:	4b07      	ldr	r3, [pc, #28]	@ (800aa40 <USBD_SetConfig+0x150>)
 800aa24:	781b      	ldrb	r3, [r3, #0]
 800aa26:	4619      	mov	r1, r3
 800aa28:	6878      	ldr	r0, [r7, #4]
 800aa2a:	f7fe ff8e 	bl	800994a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800aa2e:	2303      	movs	r3, #3
 800aa30:	73fb      	strb	r3, [r7, #15]
      break;
 800aa32:	bf00      	nop
  }

  return ret;
 800aa34:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa36:	4618      	mov	r0, r3
 800aa38:	3710      	adds	r7, #16
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	bd80      	pop	{r7, pc}
 800aa3e:	bf00      	nop
 800aa40:	20000478 	.word	0x20000478

0800aa44 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa44:	b580      	push	{r7, lr}
 800aa46:	b082      	sub	sp, #8
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]
 800aa4c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800aa4e:	683b      	ldr	r3, [r7, #0]
 800aa50:	88db      	ldrh	r3, [r3, #6]
 800aa52:	2b01      	cmp	r3, #1
 800aa54:	d004      	beq.n	800aa60 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800aa56:	6839      	ldr	r1, [r7, #0]
 800aa58:	6878      	ldr	r0, [r7, #4]
 800aa5a:	f000 f8e2 	bl	800ac22 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800aa5e:	e023      	b.n	800aaa8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa66:	b2db      	uxtb	r3, r3
 800aa68:	2b02      	cmp	r3, #2
 800aa6a:	dc02      	bgt.n	800aa72 <USBD_GetConfig+0x2e>
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	dc03      	bgt.n	800aa78 <USBD_GetConfig+0x34>
 800aa70:	e015      	b.n	800aa9e <USBD_GetConfig+0x5a>
 800aa72:	2b03      	cmp	r3, #3
 800aa74:	d00b      	beq.n	800aa8e <USBD_GetConfig+0x4a>
 800aa76:	e012      	b.n	800aa9e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	3308      	adds	r3, #8
 800aa82:	2201      	movs	r2, #1
 800aa84:	4619      	mov	r1, r3
 800aa86:	6878      	ldr	r0, [r7, #4]
 800aa88:	f000 f93c 	bl	800ad04 <USBD_CtlSendData>
        break;
 800aa8c:	e00c      	b.n	800aaa8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	3304      	adds	r3, #4
 800aa92:	2201      	movs	r2, #1
 800aa94:	4619      	mov	r1, r3
 800aa96:	6878      	ldr	r0, [r7, #4]
 800aa98:	f000 f934 	bl	800ad04 <USBD_CtlSendData>
        break;
 800aa9c:	e004      	b.n	800aaa8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800aa9e:	6839      	ldr	r1, [r7, #0]
 800aaa0:	6878      	ldr	r0, [r7, #4]
 800aaa2:	f000 f8be 	bl	800ac22 <USBD_CtlError>
        break;
 800aaa6:	bf00      	nop
}
 800aaa8:	bf00      	nop
 800aaaa:	3708      	adds	r7, #8
 800aaac:	46bd      	mov	sp, r7
 800aaae:	bd80      	pop	{r7, pc}

0800aab0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aab0:	b580      	push	{r7, lr}
 800aab2:	b082      	sub	sp, #8
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	6078      	str	r0, [r7, #4]
 800aab8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aac0:	b2db      	uxtb	r3, r3
 800aac2:	3b01      	subs	r3, #1
 800aac4:	2b02      	cmp	r3, #2
 800aac6:	d81e      	bhi.n	800ab06 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800aac8:	683b      	ldr	r3, [r7, #0]
 800aaca:	88db      	ldrh	r3, [r3, #6]
 800aacc:	2b02      	cmp	r3, #2
 800aace:	d004      	beq.n	800aada <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800aad0:	6839      	ldr	r1, [r7, #0]
 800aad2:	6878      	ldr	r0, [r7, #4]
 800aad4:	f000 f8a5 	bl	800ac22 <USBD_CtlError>
        break;
 800aad8:	e01a      	b.n	800ab10 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	2201      	movs	r2, #1
 800aade:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d005      	beq.n	800aaf6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	68db      	ldr	r3, [r3, #12]
 800aaee:	f043 0202 	orr.w	r2, r3, #2
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	330c      	adds	r3, #12
 800aafa:	2202      	movs	r2, #2
 800aafc:	4619      	mov	r1, r3
 800aafe:	6878      	ldr	r0, [r7, #4]
 800ab00:	f000 f900 	bl	800ad04 <USBD_CtlSendData>
      break;
 800ab04:	e004      	b.n	800ab10 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ab06:	6839      	ldr	r1, [r7, #0]
 800ab08:	6878      	ldr	r0, [r7, #4]
 800ab0a:	f000 f88a 	bl	800ac22 <USBD_CtlError>
      break;
 800ab0e:	bf00      	nop
  }
}
 800ab10:	bf00      	nop
 800ab12:	3708      	adds	r7, #8
 800ab14:	46bd      	mov	sp, r7
 800ab16:	bd80      	pop	{r7, pc}

0800ab18 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	b082      	sub	sp, #8
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	6078      	str	r0, [r7, #4]
 800ab20:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ab22:	683b      	ldr	r3, [r7, #0]
 800ab24:	885b      	ldrh	r3, [r3, #2]
 800ab26:	2b01      	cmp	r3, #1
 800ab28:	d107      	bne.n	800ab3a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	2201      	movs	r2, #1
 800ab2e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ab32:	6878      	ldr	r0, [r7, #4]
 800ab34:	f000 f940 	bl	800adb8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800ab38:	e013      	b.n	800ab62 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800ab3a:	683b      	ldr	r3, [r7, #0]
 800ab3c:	885b      	ldrh	r3, [r3, #2]
 800ab3e:	2b02      	cmp	r3, #2
 800ab40:	d10b      	bne.n	800ab5a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800ab42:	683b      	ldr	r3, [r7, #0]
 800ab44:	889b      	ldrh	r3, [r3, #4]
 800ab46:	0a1b      	lsrs	r3, r3, #8
 800ab48:	b29b      	uxth	r3, r3
 800ab4a:	b2da      	uxtb	r2, r3
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800ab52:	6878      	ldr	r0, [r7, #4]
 800ab54:	f000 f930 	bl	800adb8 <USBD_CtlSendStatus>
}
 800ab58:	e003      	b.n	800ab62 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800ab5a:	6839      	ldr	r1, [r7, #0]
 800ab5c:	6878      	ldr	r0, [r7, #4]
 800ab5e:	f000 f860 	bl	800ac22 <USBD_CtlError>
}
 800ab62:	bf00      	nop
 800ab64:	3708      	adds	r7, #8
 800ab66:	46bd      	mov	sp, r7
 800ab68:	bd80      	pop	{r7, pc}

0800ab6a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab6a:	b580      	push	{r7, lr}
 800ab6c:	b082      	sub	sp, #8
 800ab6e:	af00      	add	r7, sp, #0
 800ab70:	6078      	str	r0, [r7, #4]
 800ab72:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ab7a:	b2db      	uxtb	r3, r3
 800ab7c:	3b01      	subs	r3, #1
 800ab7e:	2b02      	cmp	r3, #2
 800ab80:	d80b      	bhi.n	800ab9a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ab82:	683b      	ldr	r3, [r7, #0]
 800ab84:	885b      	ldrh	r3, [r3, #2]
 800ab86:	2b01      	cmp	r3, #1
 800ab88:	d10c      	bne.n	800aba4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	2200      	movs	r2, #0
 800ab8e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ab92:	6878      	ldr	r0, [r7, #4]
 800ab94:	f000 f910 	bl	800adb8 <USBD_CtlSendStatus>
      }
      break;
 800ab98:	e004      	b.n	800aba4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ab9a:	6839      	ldr	r1, [r7, #0]
 800ab9c:	6878      	ldr	r0, [r7, #4]
 800ab9e:	f000 f840 	bl	800ac22 <USBD_CtlError>
      break;
 800aba2:	e000      	b.n	800aba6 <USBD_ClrFeature+0x3c>
      break;
 800aba4:	bf00      	nop
  }
}
 800aba6:	bf00      	nop
 800aba8:	3708      	adds	r7, #8
 800abaa:	46bd      	mov	sp, r7
 800abac:	bd80      	pop	{r7, pc}

0800abae <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800abae:	b580      	push	{r7, lr}
 800abb0:	b084      	sub	sp, #16
 800abb2:	af00      	add	r7, sp, #0
 800abb4:	6078      	str	r0, [r7, #4]
 800abb6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	781a      	ldrb	r2, [r3, #0]
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	3301      	adds	r3, #1
 800abc8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	781a      	ldrb	r2, [r3, #0]
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	3301      	adds	r3, #1
 800abd6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800abd8:	68f8      	ldr	r0, [r7, #12]
 800abda:	f7ff fa40 	bl	800a05e <SWAPBYTE>
 800abde:	4603      	mov	r3, r0
 800abe0:	461a      	mov	r2, r3
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	3301      	adds	r3, #1
 800abea:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	3301      	adds	r3, #1
 800abf0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800abf2:	68f8      	ldr	r0, [r7, #12]
 800abf4:	f7ff fa33 	bl	800a05e <SWAPBYTE>
 800abf8:	4603      	mov	r3, r0
 800abfa:	461a      	mov	r2, r3
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	3301      	adds	r3, #1
 800ac04:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	3301      	adds	r3, #1
 800ac0a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ac0c:	68f8      	ldr	r0, [r7, #12]
 800ac0e:	f7ff fa26 	bl	800a05e <SWAPBYTE>
 800ac12:	4603      	mov	r3, r0
 800ac14:	461a      	mov	r2, r3
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	80da      	strh	r2, [r3, #6]
}
 800ac1a:	bf00      	nop
 800ac1c:	3710      	adds	r7, #16
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	bd80      	pop	{r7, pc}

0800ac22 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac22:	b580      	push	{r7, lr}
 800ac24:	b082      	sub	sp, #8
 800ac26:	af00      	add	r7, sp, #0
 800ac28:	6078      	str	r0, [r7, #4]
 800ac2a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ac2c:	2180      	movs	r1, #128	@ 0x80
 800ac2e:	6878      	ldr	r0, [r7, #4]
 800ac30:	f000 fcb0 	bl	800b594 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ac34:	2100      	movs	r1, #0
 800ac36:	6878      	ldr	r0, [r7, #4]
 800ac38:	f000 fcac 	bl	800b594 <USBD_LL_StallEP>
}
 800ac3c:	bf00      	nop
 800ac3e:	3708      	adds	r7, #8
 800ac40:	46bd      	mov	sp, r7
 800ac42:	bd80      	pop	{r7, pc}

0800ac44 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ac44:	b580      	push	{r7, lr}
 800ac46:	b086      	sub	sp, #24
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	60f8      	str	r0, [r7, #12]
 800ac4c:	60b9      	str	r1, [r7, #8]
 800ac4e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ac50:	2300      	movs	r3, #0
 800ac52:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d036      	beq.n	800acc8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800ac5e:	6938      	ldr	r0, [r7, #16]
 800ac60:	f000 f836 	bl	800acd0 <USBD_GetLen>
 800ac64:	4603      	mov	r3, r0
 800ac66:	3301      	adds	r3, #1
 800ac68:	b29b      	uxth	r3, r3
 800ac6a:	005b      	lsls	r3, r3, #1
 800ac6c:	b29a      	uxth	r2, r3
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ac72:	7dfb      	ldrb	r3, [r7, #23]
 800ac74:	68ba      	ldr	r2, [r7, #8]
 800ac76:	4413      	add	r3, r2
 800ac78:	687a      	ldr	r2, [r7, #4]
 800ac7a:	7812      	ldrb	r2, [r2, #0]
 800ac7c:	701a      	strb	r2, [r3, #0]
  idx++;
 800ac7e:	7dfb      	ldrb	r3, [r7, #23]
 800ac80:	3301      	adds	r3, #1
 800ac82:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ac84:	7dfb      	ldrb	r3, [r7, #23]
 800ac86:	68ba      	ldr	r2, [r7, #8]
 800ac88:	4413      	add	r3, r2
 800ac8a:	2203      	movs	r2, #3
 800ac8c:	701a      	strb	r2, [r3, #0]
  idx++;
 800ac8e:	7dfb      	ldrb	r3, [r7, #23]
 800ac90:	3301      	adds	r3, #1
 800ac92:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ac94:	e013      	b.n	800acbe <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800ac96:	7dfb      	ldrb	r3, [r7, #23]
 800ac98:	68ba      	ldr	r2, [r7, #8]
 800ac9a:	4413      	add	r3, r2
 800ac9c:	693a      	ldr	r2, [r7, #16]
 800ac9e:	7812      	ldrb	r2, [r2, #0]
 800aca0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800aca2:	693b      	ldr	r3, [r7, #16]
 800aca4:	3301      	adds	r3, #1
 800aca6:	613b      	str	r3, [r7, #16]
    idx++;
 800aca8:	7dfb      	ldrb	r3, [r7, #23]
 800acaa:	3301      	adds	r3, #1
 800acac:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800acae:	7dfb      	ldrb	r3, [r7, #23]
 800acb0:	68ba      	ldr	r2, [r7, #8]
 800acb2:	4413      	add	r3, r2
 800acb4:	2200      	movs	r2, #0
 800acb6:	701a      	strb	r2, [r3, #0]
    idx++;
 800acb8:	7dfb      	ldrb	r3, [r7, #23]
 800acba:	3301      	adds	r3, #1
 800acbc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800acbe:	693b      	ldr	r3, [r7, #16]
 800acc0:	781b      	ldrb	r3, [r3, #0]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d1e7      	bne.n	800ac96 <USBD_GetString+0x52>
 800acc6:	e000      	b.n	800acca <USBD_GetString+0x86>
    return;
 800acc8:	bf00      	nop
  }
}
 800acca:	3718      	adds	r7, #24
 800accc:	46bd      	mov	sp, r7
 800acce:	bd80      	pop	{r7, pc}

0800acd0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800acd0:	b480      	push	{r7}
 800acd2:	b085      	sub	sp, #20
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800acd8:	2300      	movs	r3, #0
 800acda:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ace0:	e005      	b.n	800acee <USBD_GetLen+0x1e>
  {
    len++;
 800ace2:	7bfb      	ldrb	r3, [r7, #15]
 800ace4:	3301      	adds	r3, #1
 800ace6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ace8:	68bb      	ldr	r3, [r7, #8]
 800acea:	3301      	adds	r3, #1
 800acec:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800acee:	68bb      	ldr	r3, [r7, #8]
 800acf0:	781b      	ldrb	r3, [r3, #0]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d1f5      	bne.n	800ace2 <USBD_GetLen+0x12>
  }

  return len;
 800acf6:	7bfb      	ldrb	r3, [r7, #15]
}
 800acf8:	4618      	mov	r0, r3
 800acfa:	3714      	adds	r7, #20
 800acfc:	46bd      	mov	sp, r7
 800acfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad02:	4770      	bx	lr

0800ad04 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ad04:	b580      	push	{r7, lr}
 800ad06:	b084      	sub	sp, #16
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	60f8      	str	r0, [r7, #12]
 800ad0c:	60b9      	str	r1, [r7, #8]
 800ad0e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	2202      	movs	r2, #2
 800ad14:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	687a      	ldr	r2, [r7, #4]
 800ad1c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	687a      	ldr	r2, [r7, #4]
 800ad22:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	68ba      	ldr	r2, [r7, #8]
 800ad28:	2100      	movs	r1, #0
 800ad2a:	68f8      	ldr	r0, [r7, #12]
 800ad2c:	f000 fcbb 	bl	800b6a6 <USBD_LL_Transmit>

  return USBD_OK;
 800ad30:	2300      	movs	r3, #0
}
 800ad32:	4618      	mov	r0, r3
 800ad34:	3710      	adds	r7, #16
 800ad36:	46bd      	mov	sp, r7
 800ad38:	bd80      	pop	{r7, pc}

0800ad3a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ad3a:	b580      	push	{r7, lr}
 800ad3c:	b084      	sub	sp, #16
 800ad3e:	af00      	add	r7, sp, #0
 800ad40:	60f8      	str	r0, [r7, #12]
 800ad42:	60b9      	str	r1, [r7, #8]
 800ad44:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	68ba      	ldr	r2, [r7, #8]
 800ad4a:	2100      	movs	r1, #0
 800ad4c:	68f8      	ldr	r0, [r7, #12]
 800ad4e:	f000 fcaa 	bl	800b6a6 <USBD_LL_Transmit>

  return USBD_OK;
 800ad52:	2300      	movs	r3, #0
}
 800ad54:	4618      	mov	r0, r3
 800ad56:	3710      	adds	r7, #16
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	bd80      	pop	{r7, pc}

0800ad5c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ad5c:	b580      	push	{r7, lr}
 800ad5e:	b084      	sub	sp, #16
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	60f8      	str	r0, [r7, #12]
 800ad64:	60b9      	str	r1, [r7, #8]
 800ad66:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	2203      	movs	r2, #3
 800ad6c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	687a      	ldr	r2, [r7, #4]
 800ad74:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	687a      	ldr	r2, [r7, #4]
 800ad7c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	68ba      	ldr	r2, [r7, #8]
 800ad84:	2100      	movs	r1, #0
 800ad86:	68f8      	ldr	r0, [r7, #12]
 800ad88:	f000 fcae 	bl	800b6e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ad8c:	2300      	movs	r3, #0
}
 800ad8e:	4618      	mov	r0, r3
 800ad90:	3710      	adds	r7, #16
 800ad92:	46bd      	mov	sp, r7
 800ad94:	bd80      	pop	{r7, pc}

0800ad96 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ad96:	b580      	push	{r7, lr}
 800ad98:	b084      	sub	sp, #16
 800ad9a:	af00      	add	r7, sp, #0
 800ad9c:	60f8      	str	r0, [r7, #12]
 800ad9e:	60b9      	str	r1, [r7, #8]
 800ada0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	68ba      	ldr	r2, [r7, #8]
 800ada6:	2100      	movs	r1, #0
 800ada8:	68f8      	ldr	r0, [r7, #12]
 800adaa:	f000 fc9d 	bl	800b6e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800adae:	2300      	movs	r3, #0
}
 800adb0:	4618      	mov	r0, r3
 800adb2:	3710      	adds	r7, #16
 800adb4:	46bd      	mov	sp, r7
 800adb6:	bd80      	pop	{r7, pc}

0800adb8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800adb8:	b580      	push	{r7, lr}
 800adba:	b082      	sub	sp, #8
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	2204      	movs	r2, #4
 800adc4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800adc8:	2300      	movs	r3, #0
 800adca:	2200      	movs	r2, #0
 800adcc:	2100      	movs	r1, #0
 800adce:	6878      	ldr	r0, [r7, #4]
 800add0:	f000 fc69 	bl	800b6a6 <USBD_LL_Transmit>

  return USBD_OK;
 800add4:	2300      	movs	r3, #0
}
 800add6:	4618      	mov	r0, r3
 800add8:	3708      	adds	r7, #8
 800adda:	46bd      	mov	sp, r7
 800addc:	bd80      	pop	{r7, pc}

0800adde <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800adde:	b580      	push	{r7, lr}
 800ade0:	b082      	sub	sp, #8
 800ade2:	af00      	add	r7, sp, #0
 800ade4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	2205      	movs	r2, #5
 800adea:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800adee:	2300      	movs	r3, #0
 800adf0:	2200      	movs	r2, #0
 800adf2:	2100      	movs	r1, #0
 800adf4:	6878      	ldr	r0, [r7, #4]
 800adf6:	f000 fc77 	bl	800b6e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800adfa:	2300      	movs	r3, #0
}
 800adfc:	4618      	mov	r0, r3
 800adfe:	3708      	adds	r7, #8
 800ae00:	46bd      	mov	sp, r7
 800ae02:	bd80      	pop	{r7, pc}

0800ae04 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ae04:	b580      	push	{r7, lr}
 800ae06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ae08:	2200      	movs	r2, #0
 800ae0a:	4912      	ldr	r1, [pc, #72]	@ (800ae54 <MX_USB_DEVICE_Init+0x50>)
 800ae0c:	4812      	ldr	r0, [pc, #72]	@ (800ae58 <MX_USB_DEVICE_Init+0x54>)
 800ae0e:	f7fe fd03 	bl	8009818 <USBD_Init>
 800ae12:	4603      	mov	r3, r0
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d001      	beq.n	800ae1c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ae18:	f7f6 fd16 	bl	8001848 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ae1c:	490f      	ldr	r1, [pc, #60]	@ (800ae5c <MX_USB_DEVICE_Init+0x58>)
 800ae1e:	480e      	ldr	r0, [pc, #56]	@ (800ae58 <MX_USB_DEVICE_Init+0x54>)
 800ae20:	f7fe fd2a 	bl	8009878 <USBD_RegisterClass>
 800ae24:	4603      	mov	r3, r0
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d001      	beq.n	800ae2e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ae2a:	f7f6 fd0d 	bl	8001848 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ae2e:	490c      	ldr	r1, [pc, #48]	@ (800ae60 <MX_USB_DEVICE_Init+0x5c>)
 800ae30:	4809      	ldr	r0, [pc, #36]	@ (800ae58 <MX_USB_DEVICE_Init+0x54>)
 800ae32:	f7fe fc61 	bl	80096f8 <USBD_CDC_RegisterInterface>
 800ae36:	4603      	mov	r3, r0
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d001      	beq.n	800ae40 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ae3c:	f7f6 fd04 	bl	8001848 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ae40:	4805      	ldr	r0, [pc, #20]	@ (800ae58 <MX_USB_DEVICE_Init+0x54>)
 800ae42:	f7fe fd4f 	bl	80098e4 <USBD_Start>
 800ae46:	4603      	mov	r3, r0
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d001      	beq.n	800ae50 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ae4c:	f7f6 fcfc 	bl	8001848 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ae50:	bf00      	nop
 800ae52:	bd80      	pop	{r7, pc}
 800ae54:	200000b0 	.word	0x200000b0
 800ae58:	2000047c 	.word	0x2000047c
 800ae5c:	2000001c 	.word	0x2000001c
 800ae60:	2000009c 	.word	0x2000009c

0800ae64 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ae64:	b580      	push	{r7, lr}
 800ae66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ae68:	2200      	movs	r2, #0
 800ae6a:	4905      	ldr	r1, [pc, #20]	@ (800ae80 <CDC_Init_FS+0x1c>)
 800ae6c:	4805      	ldr	r0, [pc, #20]	@ (800ae84 <CDC_Init_FS+0x20>)
 800ae6e:	f7fe fc5d 	bl	800972c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ae72:	4905      	ldr	r1, [pc, #20]	@ (800ae88 <CDC_Init_FS+0x24>)
 800ae74:	4803      	ldr	r0, [pc, #12]	@ (800ae84 <CDC_Init_FS+0x20>)
 800ae76:	f7fe fc7b 	bl	8009770 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ae7a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ae7c:	4618      	mov	r0, r3
 800ae7e:	bd80      	pop	{r7, pc}
 800ae80:	20000f58 	.word	0x20000f58
 800ae84:	2000047c 	.word	0x2000047c
 800ae88:	20000758 	.word	0x20000758

0800ae8c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ae8c:	b480      	push	{r7}
 800ae8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ae90:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ae92:	4618      	mov	r0, r3
 800ae94:	46bd      	mov	sp, r7
 800ae96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9a:	4770      	bx	lr

0800ae9c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ae9c:	b480      	push	{r7}
 800ae9e:	b083      	sub	sp, #12
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	4603      	mov	r3, r0
 800aea4:	6039      	str	r1, [r7, #0]
 800aea6:	71fb      	strb	r3, [r7, #7]
 800aea8:	4613      	mov	r3, r2
 800aeaa:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800aeac:	79fb      	ldrb	r3, [r7, #7]
 800aeae:	2b23      	cmp	r3, #35	@ 0x23
 800aeb0:	d84a      	bhi.n	800af48 <CDC_Control_FS+0xac>
 800aeb2:	a201      	add	r2, pc, #4	@ (adr r2, 800aeb8 <CDC_Control_FS+0x1c>)
 800aeb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aeb8:	0800af49 	.word	0x0800af49
 800aebc:	0800af49 	.word	0x0800af49
 800aec0:	0800af49 	.word	0x0800af49
 800aec4:	0800af49 	.word	0x0800af49
 800aec8:	0800af49 	.word	0x0800af49
 800aecc:	0800af49 	.word	0x0800af49
 800aed0:	0800af49 	.word	0x0800af49
 800aed4:	0800af49 	.word	0x0800af49
 800aed8:	0800af49 	.word	0x0800af49
 800aedc:	0800af49 	.word	0x0800af49
 800aee0:	0800af49 	.word	0x0800af49
 800aee4:	0800af49 	.word	0x0800af49
 800aee8:	0800af49 	.word	0x0800af49
 800aeec:	0800af49 	.word	0x0800af49
 800aef0:	0800af49 	.word	0x0800af49
 800aef4:	0800af49 	.word	0x0800af49
 800aef8:	0800af49 	.word	0x0800af49
 800aefc:	0800af49 	.word	0x0800af49
 800af00:	0800af49 	.word	0x0800af49
 800af04:	0800af49 	.word	0x0800af49
 800af08:	0800af49 	.word	0x0800af49
 800af0c:	0800af49 	.word	0x0800af49
 800af10:	0800af49 	.word	0x0800af49
 800af14:	0800af49 	.word	0x0800af49
 800af18:	0800af49 	.word	0x0800af49
 800af1c:	0800af49 	.word	0x0800af49
 800af20:	0800af49 	.word	0x0800af49
 800af24:	0800af49 	.word	0x0800af49
 800af28:	0800af49 	.word	0x0800af49
 800af2c:	0800af49 	.word	0x0800af49
 800af30:	0800af49 	.word	0x0800af49
 800af34:	0800af49 	.word	0x0800af49
 800af38:	0800af49 	.word	0x0800af49
 800af3c:	0800af49 	.word	0x0800af49
 800af40:	0800af49 	.word	0x0800af49
 800af44:	0800af49 	.word	0x0800af49
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800af48:	bf00      	nop
  }

  return (USBD_OK);
 800af4a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800af4c:	4618      	mov	r0, r3
 800af4e:	370c      	adds	r7, #12
 800af50:	46bd      	mov	sp, r7
 800af52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af56:	4770      	bx	lr

0800af58 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800af58:	b580      	push	{r7, lr}
 800af5a:	b082      	sub	sp, #8
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	6078      	str	r0, [r7, #4]
 800af60:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800af62:	6879      	ldr	r1, [r7, #4]
 800af64:	4805      	ldr	r0, [pc, #20]	@ (800af7c <CDC_Receive_FS+0x24>)
 800af66:	f7fe fc03 	bl	8009770 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800af6a:	4804      	ldr	r0, [pc, #16]	@ (800af7c <CDC_Receive_FS+0x24>)
 800af6c:	f7fe fc1e 	bl	80097ac <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800af70:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800af72:	4618      	mov	r0, r3
 800af74:	3708      	adds	r7, #8
 800af76:	46bd      	mov	sp, r7
 800af78:	bd80      	pop	{r7, pc}
 800af7a:	bf00      	nop
 800af7c:	2000047c 	.word	0x2000047c

0800af80 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800af80:	b480      	push	{r7}
 800af82:	b087      	sub	sp, #28
 800af84:	af00      	add	r7, sp, #0
 800af86:	60f8      	str	r0, [r7, #12]
 800af88:	60b9      	str	r1, [r7, #8]
 800af8a:	4613      	mov	r3, r2
 800af8c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800af8e:	2300      	movs	r3, #0
 800af90:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800af92:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800af96:	4618      	mov	r0, r3
 800af98:	371c      	adds	r7, #28
 800af9a:	46bd      	mov	sp, r7
 800af9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa0:	4770      	bx	lr
	...

0800afa4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800afa4:	b480      	push	{r7}
 800afa6:	b083      	sub	sp, #12
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	4603      	mov	r3, r0
 800afac:	6039      	str	r1, [r7, #0]
 800afae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800afb0:	683b      	ldr	r3, [r7, #0]
 800afb2:	2212      	movs	r2, #18
 800afb4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800afb6:	4b03      	ldr	r3, [pc, #12]	@ (800afc4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800afb8:	4618      	mov	r0, r3
 800afba:	370c      	adds	r7, #12
 800afbc:	46bd      	mov	sp, r7
 800afbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc2:	4770      	bx	lr
 800afc4:	200000cc 	.word	0x200000cc

0800afc8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800afc8:	b480      	push	{r7}
 800afca:	b083      	sub	sp, #12
 800afcc:	af00      	add	r7, sp, #0
 800afce:	4603      	mov	r3, r0
 800afd0:	6039      	str	r1, [r7, #0]
 800afd2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800afd4:	683b      	ldr	r3, [r7, #0]
 800afd6:	2204      	movs	r2, #4
 800afd8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800afda:	4b03      	ldr	r3, [pc, #12]	@ (800afe8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800afdc:	4618      	mov	r0, r3
 800afde:	370c      	adds	r7, #12
 800afe0:	46bd      	mov	sp, r7
 800afe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe6:	4770      	bx	lr
 800afe8:	200000e0 	.word	0x200000e0

0800afec <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800afec:	b580      	push	{r7, lr}
 800afee:	b082      	sub	sp, #8
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	4603      	mov	r3, r0
 800aff4:	6039      	str	r1, [r7, #0]
 800aff6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800aff8:	79fb      	ldrb	r3, [r7, #7]
 800affa:	2b00      	cmp	r3, #0
 800affc:	d105      	bne.n	800b00a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800affe:	683a      	ldr	r2, [r7, #0]
 800b000:	4907      	ldr	r1, [pc, #28]	@ (800b020 <USBD_FS_ProductStrDescriptor+0x34>)
 800b002:	4808      	ldr	r0, [pc, #32]	@ (800b024 <USBD_FS_ProductStrDescriptor+0x38>)
 800b004:	f7ff fe1e 	bl	800ac44 <USBD_GetString>
 800b008:	e004      	b.n	800b014 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b00a:	683a      	ldr	r2, [r7, #0]
 800b00c:	4904      	ldr	r1, [pc, #16]	@ (800b020 <USBD_FS_ProductStrDescriptor+0x34>)
 800b00e:	4805      	ldr	r0, [pc, #20]	@ (800b024 <USBD_FS_ProductStrDescriptor+0x38>)
 800b010:	f7ff fe18 	bl	800ac44 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b014:	4b02      	ldr	r3, [pc, #8]	@ (800b020 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b016:	4618      	mov	r0, r3
 800b018:	3708      	adds	r7, #8
 800b01a:	46bd      	mov	sp, r7
 800b01c:	bd80      	pop	{r7, pc}
 800b01e:	bf00      	nop
 800b020:	20001758 	.word	0x20001758
 800b024:	0800bb9c 	.word	0x0800bb9c

0800b028 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b028:	b580      	push	{r7, lr}
 800b02a:	b082      	sub	sp, #8
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	4603      	mov	r3, r0
 800b030:	6039      	str	r1, [r7, #0]
 800b032:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b034:	683a      	ldr	r2, [r7, #0]
 800b036:	4904      	ldr	r1, [pc, #16]	@ (800b048 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b038:	4804      	ldr	r0, [pc, #16]	@ (800b04c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b03a:	f7ff fe03 	bl	800ac44 <USBD_GetString>
  return USBD_StrDesc;
 800b03e:	4b02      	ldr	r3, [pc, #8]	@ (800b048 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b040:	4618      	mov	r0, r3
 800b042:	3708      	adds	r7, #8
 800b044:	46bd      	mov	sp, r7
 800b046:	bd80      	pop	{r7, pc}
 800b048:	20001758 	.word	0x20001758
 800b04c:	0800bbb4 	.word	0x0800bbb4

0800b050 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b050:	b580      	push	{r7, lr}
 800b052:	b082      	sub	sp, #8
 800b054:	af00      	add	r7, sp, #0
 800b056:	4603      	mov	r3, r0
 800b058:	6039      	str	r1, [r7, #0]
 800b05a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b05c:	683b      	ldr	r3, [r7, #0]
 800b05e:	221a      	movs	r2, #26
 800b060:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b062:	f000 f843 	bl	800b0ec <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b066:	4b02      	ldr	r3, [pc, #8]	@ (800b070 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b068:	4618      	mov	r0, r3
 800b06a:	3708      	adds	r7, #8
 800b06c:	46bd      	mov	sp, r7
 800b06e:	bd80      	pop	{r7, pc}
 800b070:	200000e4 	.word	0x200000e4

0800b074 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b074:	b580      	push	{r7, lr}
 800b076:	b082      	sub	sp, #8
 800b078:	af00      	add	r7, sp, #0
 800b07a:	4603      	mov	r3, r0
 800b07c:	6039      	str	r1, [r7, #0]
 800b07e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b080:	79fb      	ldrb	r3, [r7, #7]
 800b082:	2b00      	cmp	r3, #0
 800b084:	d105      	bne.n	800b092 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b086:	683a      	ldr	r2, [r7, #0]
 800b088:	4907      	ldr	r1, [pc, #28]	@ (800b0a8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b08a:	4808      	ldr	r0, [pc, #32]	@ (800b0ac <USBD_FS_ConfigStrDescriptor+0x38>)
 800b08c:	f7ff fdda 	bl	800ac44 <USBD_GetString>
 800b090:	e004      	b.n	800b09c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b092:	683a      	ldr	r2, [r7, #0]
 800b094:	4904      	ldr	r1, [pc, #16]	@ (800b0a8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b096:	4805      	ldr	r0, [pc, #20]	@ (800b0ac <USBD_FS_ConfigStrDescriptor+0x38>)
 800b098:	f7ff fdd4 	bl	800ac44 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b09c:	4b02      	ldr	r3, [pc, #8]	@ (800b0a8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b09e:	4618      	mov	r0, r3
 800b0a0:	3708      	adds	r7, #8
 800b0a2:	46bd      	mov	sp, r7
 800b0a4:	bd80      	pop	{r7, pc}
 800b0a6:	bf00      	nop
 800b0a8:	20001758 	.word	0x20001758
 800b0ac:	0800bbc8 	.word	0x0800bbc8

0800b0b0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b0b0:	b580      	push	{r7, lr}
 800b0b2:	b082      	sub	sp, #8
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	4603      	mov	r3, r0
 800b0b8:	6039      	str	r1, [r7, #0]
 800b0ba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b0bc:	79fb      	ldrb	r3, [r7, #7]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d105      	bne.n	800b0ce <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b0c2:	683a      	ldr	r2, [r7, #0]
 800b0c4:	4907      	ldr	r1, [pc, #28]	@ (800b0e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b0c6:	4808      	ldr	r0, [pc, #32]	@ (800b0e8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b0c8:	f7ff fdbc 	bl	800ac44 <USBD_GetString>
 800b0cc:	e004      	b.n	800b0d8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b0ce:	683a      	ldr	r2, [r7, #0]
 800b0d0:	4904      	ldr	r1, [pc, #16]	@ (800b0e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b0d2:	4805      	ldr	r0, [pc, #20]	@ (800b0e8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b0d4:	f7ff fdb6 	bl	800ac44 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b0d8:	4b02      	ldr	r3, [pc, #8]	@ (800b0e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b0da:	4618      	mov	r0, r3
 800b0dc:	3708      	adds	r7, #8
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	bd80      	pop	{r7, pc}
 800b0e2:	bf00      	nop
 800b0e4:	20001758 	.word	0x20001758
 800b0e8:	0800bbd4 	.word	0x0800bbd4

0800b0ec <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b084      	sub	sp, #16
 800b0f0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b0f2:	4b0f      	ldr	r3, [pc, #60]	@ (800b130 <Get_SerialNum+0x44>)
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b0f8:	4b0e      	ldr	r3, [pc, #56]	@ (800b134 <Get_SerialNum+0x48>)
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b0fe:	4b0e      	ldr	r3, [pc, #56]	@ (800b138 <Get_SerialNum+0x4c>)
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b104:	68fa      	ldr	r2, [r7, #12]
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	4413      	add	r3, r2
 800b10a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d009      	beq.n	800b126 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b112:	2208      	movs	r2, #8
 800b114:	4909      	ldr	r1, [pc, #36]	@ (800b13c <Get_SerialNum+0x50>)
 800b116:	68f8      	ldr	r0, [r7, #12]
 800b118:	f000 f814 	bl	800b144 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b11c:	2204      	movs	r2, #4
 800b11e:	4908      	ldr	r1, [pc, #32]	@ (800b140 <Get_SerialNum+0x54>)
 800b120:	68b8      	ldr	r0, [r7, #8]
 800b122:	f000 f80f 	bl	800b144 <IntToUnicode>
  }
}
 800b126:	bf00      	nop
 800b128:	3710      	adds	r7, #16
 800b12a:	46bd      	mov	sp, r7
 800b12c:	bd80      	pop	{r7, pc}
 800b12e:	bf00      	nop
 800b130:	1fff7a10 	.word	0x1fff7a10
 800b134:	1fff7a14 	.word	0x1fff7a14
 800b138:	1fff7a18 	.word	0x1fff7a18
 800b13c:	200000e6 	.word	0x200000e6
 800b140:	200000f6 	.word	0x200000f6

0800b144 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b144:	b480      	push	{r7}
 800b146:	b087      	sub	sp, #28
 800b148:	af00      	add	r7, sp, #0
 800b14a:	60f8      	str	r0, [r7, #12]
 800b14c:	60b9      	str	r1, [r7, #8]
 800b14e:	4613      	mov	r3, r2
 800b150:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b152:	2300      	movs	r3, #0
 800b154:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b156:	2300      	movs	r3, #0
 800b158:	75fb      	strb	r3, [r7, #23]
 800b15a:	e027      	b.n	800b1ac <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	0f1b      	lsrs	r3, r3, #28
 800b160:	2b09      	cmp	r3, #9
 800b162:	d80b      	bhi.n	800b17c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	0f1b      	lsrs	r3, r3, #28
 800b168:	b2da      	uxtb	r2, r3
 800b16a:	7dfb      	ldrb	r3, [r7, #23]
 800b16c:	005b      	lsls	r3, r3, #1
 800b16e:	4619      	mov	r1, r3
 800b170:	68bb      	ldr	r3, [r7, #8]
 800b172:	440b      	add	r3, r1
 800b174:	3230      	adds	r2, #48	@ 0x30
 800b176:	b2d2      	uxtb	r2, r2
 800b178:	701a      	strb	r2, [r3, #0]
 800b17a:	e00a      	b.n	800b192 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	0f1b      	lsrs	r3, r3, #28
 800b180:	b2da      	uxtb	r2, r3
 800b182:	7dfb      	ldrb	r3, [r7, #23]
 800b184:	005b      	lsls	r3, r3, #1
 800b186:	4619      	mov	r1, r3
 800b188:	68bb      	ldr	r3, [r7, #8]
 800b18a:	440b      	add	r3, r1
 800b18c:	3237      	adds	r2, #55	@ 0x37
 800b18e:	b2d2      	uxtb	r2, r2
 800b190:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	011b      	lsls	r3, r3, #4
 800b196:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b198:	7dfb      	ldrb	r3, [r7, #23]
 800b19a:	005b      	lsls	r3, r3, #1
 800b19c:	3301      	adds	r3, #1
 800b19e:	68ba      	ldr	r2, [r7, #8]
 800b1a0:	4413      	add	r3, r2
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b1a6:	7dfb      	ldrb	r3, [r7, #23]
 800b1a8:	3301      	adds	r3, #1
 800b1aa:	75fb      	strb	r3, [r7, #23]
 800b1ac:	7dfa      	ldrb	r2, [r7, #23]
 800b1ae:	79fb      	ldrb	r3, [r7, #7]
 800b1b0:	429a      	cmp	r2, r3
 800b1b2:	d3d3      	bcc.n	800b15c <IntToUnicode+0x18>
  }
}
 800b1b4:	bf00      	nop
 800b1b6:	bf00      	nop
 800b1b8:	371c      	adds	r7, #28
 800b1ba:	46bd      	mov	sp, r7
 800b1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c0:	4770      	bx	lr
	...

0800b1c4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b1c4:	b580      	push	{r7, lr}
 800b1c6:	b08a      	sub	sp, #40	@ 0x28
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b1cc:	f107 0314 	add.w	r3, r7, #20
 800b1d0:	2200      	movs	r2, #0
 800b1d2:	601a      	str	r2, [r3, #0]
 800b1d4:	605a      	str	r2, [r3, #4]
 800b1d6:	609a      	str	r2, [r3, #8]
 800b1d8:	60da      	str	r2, [r3, #12]
 800b1da:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b1e4:	d13a      	bne.n	800b25c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b1e6:	2300      	movs	r3, #0
 800b1e8:	613b      	str	r3, [r7, #16]
 800b1ea:	4b1e      	ldr	r3, [pc, #120]	@ (800b264 <HAL_PCD_MspInit+0xa0>)
 800b1ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b1ee:	4a1d      	ldr	r2, [pc, #116]	@ (800b264 <HAL_PCD_MspInit+0xa0>)
 800b1f0:	f043 0301 	orr.w	r3, r3, #1
 800b1f4:	6313      	str	r3, [r2, #48]	@ 0x30
 800b1f6:	4b1b      	ldr	r3, [pc, #108]	@ (800b264 <HAL_PCD_MspInit+0xa0>)
 800b1f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b1fa:	f003 0301 	and.w	r3, r3, #1
 800b1fe:	613b      	str	r3, [r7, #16]
 800b200:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b202:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800b206:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b208:	2302      	movs	r3, #2
 800b20a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b20c:	2300      	movs	r3, #0
 800b20e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b210:	2303      	movs	r3, #3
 800b212:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b214:	230a      	movs	r3, #10
 800b216:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b218:	f107 0314 	add.w	r3, r7, #20
 800b21c:	4619      	mov	r1, r3
 800b21e:	4812      	ldr	r0, [pc, #72]	@ (800b268 <HAL_PCD_MspInit+0xa4>)
 800b220:	f7f8 f924 	bl	800346c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b224:	4b0f      	ldr	r3, [pc, #60]	@ (800b264 <HAL_PCD_MspInit+0xa0>)
 800b226:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b228:	4a0e      	ldr	r2, [pc, #56]	@ (800b264 <HAL_PCD_MspInit+0xa0>)
 800b22a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b22e:	6353      	str	r3, [r2, #52]	@ 0x34
 800b230:	2300      	movs	r3, #0
 800b232:	60fb      	str	r3, [r7, #12]
 800b234:	4b0b      	ldr	r3, [pc, #44]	@ (800b264 <HAL_PCD_MspInit+0xa0>)
 800b236:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b238:	4a0a      	ldr	r2, [pc, #40]	@ (800b264 <HAL_PCD_MspInit+0xa0>)
 800b23a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800b23e:	6453      	str	r3, [r2, #68]	@ 0x44
 800b240:	4b08      	ldr	r3, [pc, #32]	@ (800b264 <HAL_PCD_MspInit+0xa0>)
 800b242:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b244:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b248:	60fb      	str	r3, [r7, #12]
 800b24a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b24c:	2200      	movs	r2, #0
 800b24e:	2100      	movs	r1, #0
 800b250:	2043      	movs	r0, #67	@ 0x43
 800b252:	f7f7 fcd2 	bl	8002bfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b256:	2043      	movs	r0, #67	@ 0x43
 800b258:	f7f7 fceb 	bl	8002c32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b25c:	bf00      	nop
 800b25e:	3728      	adds	r7, #40	@ 0x28
 800b260:	46bd      	mov	sp, r7
 800b262:	bd80      	pop	{r7, pc}
 800b264:	40023800 	.word	0x40023800
 800b268:	40020000 	.word	0x40020000

0800b26c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b26c:	b580      	push	{r7, lr}
 800b26e:	b082      	sub	sp, #8
 800b270:	af00      	add	r7, sp, #0
 800b272:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800b280:	4619      	mov	r1, r3
 800b282:	4610      	mov	r0, r2
 800b284:	f7fe fb7b 	bl	800997e <USBD_LL_SetupStage>
}
 800b288:	bf00      	nop
 800b28a:	3708      	adds	r7, #8
 800b28c:	46bd      	mov	sp, r7
 800b28e:	bd80      	pop	{r7, pc}

0800b290 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b290:	b580      	push	{r7, lr}
 800b292:	b082      	sub	sp, #8
 800b294:	af00      	add	r7, sp, #0
 800b296:	6078      	str	r0, [r7, #4]
 800b298:	460b      	mov	r3, r1
 800b29a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800b2a2:	78fa      	ldrb	r2, [r7, #3]
 800b2a4:	6879      	ldr	r1, [r7, #4]
 800b2a6:	4613      	mov	r3, r2
 800b2a8:	00db      	lsls	r3, r3, #3
 800b2aa:	4413      	add	r3, r2
 800b2ac:	009b      	lsls	r3, r3, #2
 800b2ae:	440b      	add	r3, r1
 800b2b0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800b2b4:	681a      	ldr	r2, [r3, #0]
 800b2b6:	78fb      	ldrb	r3, [r7, #3]
 800b2b8:	4619      	mov	r1, r3
 800b2ba:	f7fe fbb5 	bl	8009a28 <USBD_LL_DataOutStage>
}
 800b2be:	bf00      	nop
 800b2c0:	3708      	adds	r7, #8
 800b2c2:	46bd      	mov	sp, r7
 800b2c4:	bd80      	pop	{r7, pc}

0800b2c6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b2c6:	b580      	push	{r7, lr}
 800b2c8:	b082      	sub	sp, #8
 800b2ca:	af00      	add	r7, sp, #0
 800b2cc:	6078      	str	r0, [r7, #4]
 800b2ce:	460b      	mov	r3, r1
 800b2d0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800b2d8:	78fa      	ldrb	r2, [r7, #3]
 800b2da:	6879      	ldr	r1, [r7, #4]
 800b2dc:	4613      	mov	r3, r2
 800b2de:	00db      	lsls	r3, r3, #3
 800b2e0:	4413      	add	r3, r2
 800b2e2:	009b      	lsls	r3, r3, #2
 800b2e4:	440b      	add	r3, r1
 800b2e6:	3320      	adds	r3, #32
 800b2e8:	681a      	ldr	r2, [r3, #0]
 800b2ea:	78fb      	ldrb	r3, [r7, #3]
 800b2ec:	4619      	mov	r1, r3
 800b2ee:	f7fe fc4e 	bl	8009b8e <USBD_LL_DataInStage>
}
 800b2f2:	bf00      	nop
 800b2f4:	3708      	adds	r7, #8
 800b2f6:	46bd      	mov	sp, r7
 800b2f8:	bd80      	pop	{r7, pc}

0800b2fa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b2fa:	b580      	push	{r7, lr}
 800b2fc:	b082      	sub	sp, #8
 800b2fe:	af00      	add	r7, sp, #0
 800b300:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b308:	4618      	mov	r0, r3
 800b30a:	f7fe fd88 	bl	8009e1e <USBD_LL_SOF>
}
 800b30e:	bf00      	nop
 800b310:	3708      	adds	r7, #8
 800b312:	46bd      	mov	sp, r7
 800b314:	bd80      	pop	{r7, pc}

0800b316 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b316:	b580      	push	{r7, lr}
 800b318:	b084      	sub	sp, #16
 800b31a:	af00      	add	r7, sp, #0
 800b31c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b31e:	2301      	movs	r3, #1
 800b320:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	79db      	ldrb	r3, [r3, #7]
 800b326:	2b02      	cmp	r3, #2
 800b328:	d001      	beq.n	800b32e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b32a:	f7f6 fa8d 	bl	8001848 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b334:	7bfa      	ldrb	r2, [r7, #15]
 800b336:	4611      	mov	r1, r2
 800b338:	4618      	mov	r0, r3
 800b33a:	f7fe fd2c 	bl	8009d96 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b344:	4618      	mov	r0, r3
 800b346:	f7fe fcd4 	bl	8009cf2 <USBD_LL_Reset>
}
 800b34a:	bf00      	nop
 800b34c:	3710      	adds	r7, #16
 800b34e:	46bd      	mov	sp, r7
 800b350:	bd80      	pop	{r7, pc}
	...

0800b354 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b354:	b580      	push	{r7, lr}
 800b356:	b082      	sub	sp, #8
 800b358:	af00      	add	r7, sp, #0
 800b35a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b362:	4618      	mov	r0, r3
 800b364:	f7fe fd27 	bl	8009db6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	687a      	ldr	r2, [r7, #4]
 800b374:	6812      	ldr	r2, [r2, #0]
 800b376:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b37a:	f043 0301 	orr.w	r3, r3, #1
 800b37e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	7adb      	ldrb	r3, [r3, #11]
 800b384:	2b00      	cmp	r3, #0
 800b386:	d005      	beq.n	800b394 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b388:	4b04      	ldr	r3, [pc, #16]	@ (800b39c <HAL_PCD_SuspendCallback+0x48>)
 800b38a:	691b      	ldr	r3, [r3, #16]
 800b38c:	4a03      	ldr	r2, [pc, #12]	@ (800b39c <HAL_PCD_SuspendCallback+0x48>)
 800b38e:	f043 0306 	orr.w	r3, r3, #6
 800b392:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b394:	bf00      	nop
 800b396:	3708      	adds	r7, #8
 800b398:	46bd      	mov	sp, r7
 800b39a:	bd80      	pop	{r7, pc}
 800b39c:	e000ed00 	.word	0xe000ed00

0800b3a0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b3a0:	b580      	push	{r7, lr}
 800b3a2:	b082      	sub	sp, #8
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	f7fe fd1d 	bl	8009dee <USBD_LL_Resume>
}
 800b3b4:	bf00      	nop
 800b3b6:	3708      	adds	r7, #8
 800b3b8:	46bd      	mov	sp, r7
 800b3ba:	bd80      	pop	{r7, pc}

0800b3bc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b3bc:	b580      	push	{r7, lr}
 800b3be:	b082      	sub	sp, #8
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	6078      	str	r0, [r7, #4]
 800b3c4:	460b      	mov	r3, r1
 800b3c6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b3ce:	78fa      	ldrb	r2, [r7, #3]
 800b3d0:	4611      	mov	r1, r2
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	f7fe fd75 	bl	8009ec2 <USBD_LL_IsoOUTIncomplete>
}
 800b3d8:	bf00      	nop
 800b3da:	3708      	adds	r7, #8
 800b3dc:	46bd      	mov	sp, r7
 800b3de:	bd80      	pop	{r7, pc}

0800b3e0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b082      	sub	sp, #8
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	6078      	str	r0, [r7, #4]
 800b3e8:	460b      	mov	r3, r1
 800b3ea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b3f2:	78fa      	ldrb	r2, [r7, #3]
 800b3f4:	4611      	mov	r1, r2
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	f7fe fd31 	bl	8009e5e <USBD_LL_IsoINIncomplete>
}
 800b3fc:	bf00      	nop
 800b3fe:	3708      	adds	r7, #8
 800b400:	46bd      	mov	sp, r7
 800b402:	bd80      	pop	{r7, pc}

0800b404 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b404:	b580      	push	{r7, lr}
 800b406:	b082      	sub	sp, #8
 800b408:	af00      	add	r7, sp, #0
 800b40a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b412:	4618      	mov	r0, r3
 800b414:	f7fe fd87 	bl	8009f26 <USBD_LL_DevConnected>
}
 800b418:	bf00      	nop
 800b41a:	3708      	adds	r7, #8
 800b41c:	46bd      	mov	sp, r7
 800b41e:	bd80      	pop	{r7, pc}

0800b420 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b420:	b580      	push	{r7, lr}
 800b422:	b082      	sub	sp, #8
 800b424:	af00      	add	r7, sp, #0
 800b426:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b42e:	4618      	mov	r0, r3
 800b430:	f7fe fd84 	bl	8009f3c <USBD_LL_DevDisconnected>
}
 800b434:	bf00      	nop
 800b436:	3708      	adds	r7, #8
 800b438:	46bd      	mov	sp, r7
 800b43a:	bd80      	pop	{r7, pc}

0800b43c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b43c:	b580      	push	{r7, lr}
 800b43e:	b082      	sub	sp, #8
 800b440:	af00      	add	r7, sp, #0
 800b442:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	781b      	ldrb	r3, [r3, #0]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d13c      	bne.n	800b4c6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800b44c:	4a20      	ldr	r2, [pc, #128]	@ (800b4d0 <USBD_LL_Init+0x94>)
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	4a1e      	ldr	r2, [pc, #120]	@ (800b4d0 <USBD_LL_Init+0x94>)
 800b458:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b45c:	4b1c      	ldr	r3, [pc, #112]	@ (800b4d0 <USBD_LL_Init+0x94>)
 800b45e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800b462:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800b464:	4b1a      	ldr	r3, [pc, #104]	@ (800b4d0 <USBD_LL_Init+0x94>)
 800b466:	2204      	movs	r2, #4
 800b468:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800b46a:	4b19      	ldr	r3, [pc, #100]	@ (800b4d0 <USBD_LL_Init+0x94>)
 800b46c:	2202      	movs	r2, #2
 800b46e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b470:	4b17      	ldr	r3, [pc, #92]	@ (800b4d0 <USBD_LL_Init+0x94>)
 800b472:	2200      	movs	r2, #0
 800b474:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b476:	4b16      	ldr	r3, [pc, #88]	@ (800b4d0 <USBD_LL_Init+0x94>)
 800b478:	2202      	movs	r2, #2
 800b47a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b47c:	4b14      	ldr	r3, [pc, #80]	@ (800b4d0 <USBD_LL_Init+0x94>)
 800b47e:	2200      	movs	r2, #0
 800b480:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800b482:	4b13      	ldr	r3, [pc, #76]	@ (800b4d0 <USBD_LL_Init+0x94>)
 800b484:	2200      	movs	r2, #0
 800b486:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800b488:	4b11      	ldr	r3, [pc, #68]	@ (800b4d0 <USBD_LL_Init+0x94>)
 800b48a:	2200      	movs	r2, #0
 800b48c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800b48e:	4b10      	ldr	r3, [pc, #64]	@ (800b4d0 <USBD_LL_Init+0x94>)
 800b490:	2200      	movs	r2, #0
 800b492:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800b494:	4b0e      	ldr	r3, [pc, #56]	@ (800b4d0 <USBD_LL_Init+0x94>)
 800b496:	2200      	movs	r2, #0
 800b498:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800b49a:	480d      	ldr	r0, [pc, #52]	@ (800b4d0 <USBD_LL_Init+0x94>)
 800b49c:	f7f8 f9b4 	bl	8003808 <HAL_PCD_Init>
 800b4a0:	4603      	mov	r3, r0
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d001      	beq.n	800b4aa <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800b4a6:	f7f6 f9cf 	bl	8001848 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800b4aa:	2180      	movs	r1, #128	@ 0x80
 800b4ac:	4808      	ldr	r0, [pc, #32]	@ (800b4d0 <USBD_LL_Init+0x94>)
 800b4ae:	f7f9 fbde 	bl	8004c6e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800b4b2:	2240      	movs	r2, #64	@ 0x40
 800b4b4:	2100      	movs	r1, #0
 800b4b6:	4806      	ldr	r0, [pc, #24]	@ (800b4d0 <USBD_LL_Init+0x94>)
 800b4b8:	f7f9 fb92 	bl	8004be0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800b4bc:	2280      	movs	r2, #128	@ 0x80
 800b4be:	2101      	movs	r1, #1
 800b4c0:	4803      	ldr	r0, [pc, #12]	@ (800b4d0 <USBD_LL_Init+0x94>)
 800b4c2:	f7f9 fb8d 	bl	8004be0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800b4c6:	2300      	movs	r3, #0
}
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	3708      	adds	r7, #8
 800b4cc:	46bd      	mov	sp, r7
 800b4ce:	bd80      	pop	{r7, pc}
 800b4d0:	20001958 	.word	0x20001958

0800b4d4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b4d4:	b580      	push	{r7, lr}
 800b4d6:	b084      	sub	sp, #16
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b4dc:	2300      	movs	r3, #0
 800b4de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b4e0:	2300      	movs	r3, #0
 800b4e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	f7f8 fa9b 	bl	8003a26 <HAL_PCD_Start>
 800b4f0:	4603      	mov	r3, r0
 800b4f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b4f4:	7bfb      	ldrb	r3, [r7, #15]
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	f000 f942 	bl	800b780 <USBD_Get_USB_Status>
 800b4fc:	4603      	mov	r3, r0
 800b4fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b500:	7bbb      	ldrb	r3, [r7, #14]
}
 800b502:	4618      	mov	r0, r3
 800b504:	3710      	adds	r7, #16
 800b506:	46bd      	mov	sp, r7
 800b508:	bd80      	pop	{r7, pc}

0800b50a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b50a:	b580      	push	{r7, lr}
 800b50c:	b084      	sub	sp, #16
 800b50e:	af00      	add	r7, sp, #0
 800b510:	6078      	str	r0, [r7, #4]
 800b512:	4608      	mov	r0, r1
 800b514:	4611      	mov	r1, r2
 800b516:	461a      	mov	r2, r3
 800b518:	4603      	mov	r3, r0
 800b51a:	70fb      	strb	r3, [r7, #3]
 800b51c:	460b      	mov	r3, r1
 800b51e:	70bb      	strb	r3, [r7, #2]
 800b520:	4613      	mov	r3, r2
 800b522:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b524:	2300      	movs	r3, #0
 800b526:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b528:	2300      	movs	r3, #0
 800b52a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b532:	78bb      	ldrb	r3, [r7, #2]
 800b534:	883a      	ldrh	r2, [r7, #0]
 800b536:	78f9      	ldrb	r1, [r7, #3]
 800b538:	f7f8 ff6f 	bl	800441a <HAL_PCD_EP_Open>
 800b53c:	4603      	mov	r3, r0
 800b53e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b540:	7bfb      	ldrb	r3, [r7, #15]
 800b542:	4618      	mov	r0, r3
 800b544:	f000 f91c 	bl	800b780 <USBD_Get_USB_Status>
 800b548:	4603      	mov	r3, r0
 800b54a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b54c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b54e:	4618      	mov	r0, r3
 800b550:	3710      	adds	r7, #16
 800b552:	46bd      	mov	sp, r7
 800b554:	bd80      	pop	{r7, pc}

0800b556 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b556:	b580      	push	{r7, lr}
 800b558:	b084      	sub	sp, #16
 800b55a:	af00      	add	r7, sp, #0
 800b55c:	6078      	str	r0, [r7, #4]
 800b55e:	460b      	mov	r3, r1
 800b560:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b562:	2300      	movs	r3, #0
 800b564:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b566:	2300      	movs	r3, #0
 800b568:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b570:	78fa      	ldrb	r2, [r7, #3]
 800b572:	4611      	mov	r1, r2
 800b574:	4618      	mov	r0, r3
 800b576:	f7f8 ffb8 	bl	80044ea <HAL_PCD_EP_Close>
 800b57a:	4603      	mov	r3, r0
 800b57c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b57e:	7bfb      	ldrb	r3, [r7, #15]
 800b580:	4618      	mov	r0, r3
 800b582:	f000 f8fd 	bl	800b780 <USBD_Get_USB_Status>
 800b586:	4603      	mov	r3, r0
 800b588:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b58a:	7bbb      	ldrb	r3, [r7, #14]
}
 800b58c:	4618      	mov	r0, r3
 800b58e:	3710      	adds	r7, #16
 800b590:	46bd      	mov	sp, r7
 800b592:	bd80      	pop	{r7, pc}

0800b594 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b594:	b580      	push	{r7, lr}
 800b596:	b084      	sub	sp, #16
 800b598:	af00      	add	r7, sp, #0
 800b59a:	6078      	str	r0, [r7, #4]
 800b59c:	460b      	mov	r3, r1
 800b59e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b5a0:	2300      	movs	r3, #0
 800b5a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b5a4:	2300      	movs	r3, #0
 800b5a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b5ae:	78fa      	ldrb	r2, [r7, #3]
 800b5b0:	4611      	mov	r1, r2
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	f7f9 f870 	bl	8004698 <HAL_PCD_EP_SetStall>
 800b5b8:	4603      	mov	r3, r0
 800b5ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b5bc:	7bfb      	ldrb	r3, [r7, #15]
 800b5be:	4618      	mov	r0, r3
 800b5c0:	f000 f8de 	bl	800b780 <USBD_Get_USB_Status>
 800b5c4:	4603      	mov	r3, r0
 800b5c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b5c8:	7bbb      	ldrb	r3, [r7, #14]
}
 800b5ca:	4618      	mov	r0, r3
 800b5cc:	3710      	adds	r7, #16
 800b5ce:	46bd      	mov	sp, r7
 800b5d0:	bd80      	pop	{r7, pc}

0800b5d2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b5d2:	b580      	push	{r7, lr}
 800b5d4:	b084      	sub	sp, #16
 800b5d6:	af00      	add	r7, sp, #0
 800b5d8:	6078      	str	r0, [r7, #4]
 800b5da:	460b      	mov	r3, r1
 800b5dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b5de:	2300      	movs	r3, #0
 800b5e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b5ec:	78fa      	ldrb	r2, [r7, #3]
 800b5ee:	4611      	mov	r1, r2
 800b5f0:	4618      	mov	r0, r3
 800b5f2:	f7f9 f8b4 	bl	800475e <HAL_PCD_EP_ClrStall>
 800b5f6:	4603      	mov	r3, r0
 800b5f8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b5fa:	7bfb      	ldrb	r3, [r7, #15]
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	f000 f8bf 	bl	800b780 <USBD_Get_USB_Status>
 800b602:	4603      	mov	r3, r0
 800b604:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b606:	7bbb      	ldrb	r3, [r7, #14]
}
 800b608:	4618      	mov	r0, r3
 800b60a:	3710      	adds	r7, #16
 800b60c:	46bd      	mov	sp, r7
 800b60e:	bd80      	pop	{r7, pc}

0800b610 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b610:	b480      	push	{r7}
 800b612:	b085      	sub	sp, #20
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
 800b618:	460b      	mov	r3, r1
 800b61a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b622:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b624:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	da0b      	bge.n	800b644 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b62c:	78fb      	ldrb	r3, [r7, #3]
 800b62e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b632:	68f9      	ldr	r1, [r7, #12]
 800b634:	4613      	mov	r3, r2
 800b636:	00db      	lsls	r3, r3, #3
 800b638:	4413      	add	r3, r2
 800b63a:	009b      	lsls	r3, r3, #2
 800b63c:	440b      	add	r3, r1
 800b63e:	3316      	adds	r3, #22
 800b640:	781b      	ldrb	r3, [r3, #0]
 800b642:	e00b      	b.n	800b65c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b644:	78fb      	ldrb	r3, [r7, #3]
 800b646:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b64a:	68f9      	ldr	r1, [r7, #12]
 800b64c:	4613      	mov	r3, r2
 800b64e:	00db      	lsls	r3, r3, #3
 800b650:	4413      	add	r3, r2
 800b652:	009b      	lsls	r3, r3, #2
 800b654:	440b      	add	r3, r1
 800b656:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800b65a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b65c:	4618      	mov	r0, r3
 800b65e:	3714      	adds	r7, #20
 800b660:	46bd      	mov	sp, r7
 800b662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b666:	4770      	bx	lr

0800b668 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b668:	b580      	push	{r7, lr}
 800b66a:	b084      	sub	sp, #16
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	6078      	str	r0, [r7, #4]
 800b670:	460b      	mov	r3, r1
 800b672:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b674:	2300      	movs	r3, #0
 800b676:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b678:	2300      	movs	r3, #0
 800b67a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b682:	78fa      	ldrb	r2, [r7, #3]
 800b684:	4611      	mov	r1, r2
 800b686:	4618      	mov	r0, r3
 800b688:	f7f8 fea3 	bl	80043d2 <HAL_PCD_SetAddress>
 800b68c:	4603      	mov	r3, r0
 800b68e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b690:	7bfb      	ldrb	r3, [r7, #15]
 800b692:	4618      	mov	r0, r3
 800b694:	f000 f874 	bl	800b780 <USBD_Get_USB_Status>
 800b698:	4603      	mov	r3, r0
 800b69a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b69c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b69e:	4618      	mov	r0, r3
 800b6a0:	3710      	adds	r7, #16
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	bd80      	pop	{r7, pc}

0800b6a6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b6a6:	b580      	push	{r7, lr}
 800b6a8:	b086      	sub	sp, #24
 800b6aa:	af00      	add	r7, sp, #0
 800b6ac:	60f8      	str	r0, [r7, #12]
 800b6ae:	607a      	str	r2, [r7, #4]
 800b6b0:	603b      	str	r3, [r7, #0]
 800b6b2:	460b      	mov	r3, r1
 800b6b4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b6c4:	7af9      	ldrb	r1, [r7, #11]
 800b6c6:	683b      	ldr	r3, [r7, #0]
 800b6c8:	687a      	ldr	r2, [r7, #4]
 800b6ca:	f7f8 ffab 	bl	8004624 <HAL_PCD_EP_Transmit>
 800b6ce:	4603      	mov	r3, r0
 800b6d0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b6d2:	7dfb      	ldrb	r3, [r7, #23]
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	f000 f853 	bl	800b780 <USBD_Get_USB_Status>
 800b6da:	4603      	mov	r3, r0
 800b6dc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b6de:	7dbb      	ldrb	r3, [r7, #22]
}
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	3718      	adds	r7, #24
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	bd80      	pop	{r7, pc}

0800b6e8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b6e8:	b580      	push	{r7, lr}
 800b6ea:	b086      	sub	sp, #24
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	60f8      	str	r0, [r7, #12]
 800b6f0:	607a      	str	r2, [r7, #4]
 800b6f2:	603b      	str	r3, [r7, #0]
 800b6f4:	460b      	mov	r3, r1
 800b6f6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b6f8:	2300      	movs	r3, #0
 800b6fa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b706:	7af9      	ldrb	r1, [r7, #11]
 800b708:	683b      	ldr	r3, [r7, #0]
 800b70a:	687a      	ldr	r2, [r7, #4]
 800b70c:	f7f8 ff37 	bl	800457e <HAL_PCD_EP_Receive>
 800b710:	4603      	mov	r3, r0
 800b712:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b714:	7dfb      	ldrb	r3, [r7, #23]
 800b716:	4618      	mov	r0, r3
 800b718:	f000 f832 	bl	800b780 <USBD_Get_USB_Status>
 800b71c:	4603      	mov	r3, r0
 800b71e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b720:	7dbb      	ldrb	r3, [r7, #22]
}
 800b722:	4618      	mov	r0, r3
 800b724:	3718      	adds	r7, #24
 800b726:	46bd      	mov	sp, r7
 800b728:	bd80      	pop	{r7, pc}

0800b72a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b72a:	b580      	push	{r7, lr}
 800b72c:	b082      	sub	sp, #8
 800b72e:	af00      	add	r7, sp, #0
 800b730:	6078      	str	r0, [r7, #4]
 800b732:	460b      	mov	r3, r1
 800b734:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b73c:	78fa      	ldrb	r2, [r7, #3]
 800b73e:	4611      	mov	r1, r2
 800b740:	4618      	mov	r0, r3
 800b742:	f7f8 ff57 	bl	80045f4 <HAL_PCD_EP_GetRxCount>
 800b746:	4603      	mov	r3, r0
}
 800b748:	4618      	mov	r0, r3
 800b74a:	3708      	adds	r7, #8
 800b74c:	46bd      	mov	sp, r7
 800b74e:	bd80      	pop	{r7, pc}

0800b750 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b750:	b480      	push	{r7}
 800b752:	b083      	sub	sp, #12
 800b754:	af00      	add	r7, sp, #0
 800b756:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b758:	4b03      	ldr	r3, [pc, #12]	@ (800b768 <USBD_static_malloc+0x18>)
}
 800b75a:	4618      	mov	r0, r3
 800b75c:	370c      	adds	r7, #12
 800b75e:	46bd      	mov	sp, r7
 800b760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b764:	4770      	bx	lr
 800b766:	bf00      	nop
 800b768:	20001e3c 	.word	0x20001e3c

0800b76c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b76c:	b480      	push	{r7}
 800b76e:	b083      	sub	sp, #12
 800b770:	af00      	add	r7, sp, #0
 800b772:	6078      	str	r0, [r7, #4]

}
 800b774:	bf00      	nop
 800b776:	370c      	adds	r7, #12
 800b778:	46bd      	mov	sp, r7
 800b77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b77e:	4770      	bx	lr

0800b780 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b780:	b480      	push	{r7}
 800b782:	b085      	sub	sp, #20
 800b784:	af00      	add	r7, sp, #0
 800b786:	4603      	mov	r3, r0
 800b788:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b78a:	2300      	movs	r3, #0
 800b78c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b78e:	79fb      	ldrb	r3, [r7, #7]
 800b790:	2b03      	cmp	r3, #3
 800b792:	d817      	bhi.n	800b7c4 <USBD_Get_USB_Status+0x44>
 800b794:	a201      	add	r2, pc, #4	@ (adr r2, 800b79c <USBD_Get_USB_Status+0x1c>)
 800b796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b79a:	bf00      	nop
 800b79c:	0800b7ad 	.word	0x0800b7ad
 800b7a0:	0800b7b3 	.word	0x0800b7b3
 800b7a4:	0800b7b9 	.word	0x0800b7b9
 800b7a8:	0800b7bf 	.word	0x0800b7bf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	73fb      	strb	r3, [r7, #15]
    break;
 800b7b0:	e00b      	b.n	800b7ca <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b7b2:	2303      	movs	r3, #3
 800b7b4:	73fb      	strb	r3, [r7, #15]
    break;
 800b7b6:	e008      	b.n	800b7ca <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b7b8:	2301      	movs	r3, #1
 800b7ba:	73fb      	strb	r3, [r7, #15]
    break;
 800b7bc:	e005      	b.n	800b7ca <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b7be:	2303      	movs	r3, #3
 800b7c0:	73fb      	strb	r3, [r7, #15]
    break;
 800b7c2:	e002      	b.n	800b7ca <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b7c4:	2303      	movs	r3, #3
 800b7c6:	73fb      	strb	r3, [r7, #15]
    break;
 800b7c8:	bf00      	nop
  }
  return usb_status;
 800b7ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	3714      	adds	r7, #20
 800b7d0:	46bd      	mov	sp, r7
 800b7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d6:	4770      	bx	lr

0800b7d8 <_ZdlPvj>:
 800b7d8:	f000 b811 	b.w	800b7fe <_ZdlPv>

0800b7dc <_Znwj>:
 800b7dc:	2801      	cmp	r0, #1
 800b7de:	bf38      	it	cc
 800b7e0:	2001      	movcc	r0, #1
 800b7e2:	b510      	push	{r4, lr}
 800b7e4:	4604      	mov	r4, r0
 800b7e6:	4620      	mov	r0, r4
 800b7e8:	f000 f81c 	bl	800b824 <malloc>
 800b7ec:	b100      	cbz	r0, 800b7f0 <_Znwj+0x14>
 800b7ee:	bd10      	pop	{r4, pc}
 800b7f0:	f000 f808 	bl	800b804 <_ZSt15get_new_handlerv>
 800b7f4:	b908      	cbnz	r0, 800b7fa <_Znwj+0x1e>
 800b7f6:	f000 f80d 	bl	800b814 <abort>
 800b7fa:	4780      	blx	r0
 800b7fc:	e7f3      	b.n	800b7e6 <_Znwj+0xa>

0800b7fe <_ZdlPv>:
 800b7fe:	f000 b819 	b.w	800b834 <free>
	...

0800b804 <_ZSt15get_new_handlerv>:
 800b804:	4b02      	ldr	r3, [pc, #8]	@ (800b810 <_ZSt15get_new_handlerv+0xc>)
 800b806:	6818      	ldr	r0, [r3, #0]
 800b808:	f3bf 8f5b 	dmb	ish
 800b80c:	4770      	bx	lr
 800b80e:	bf00      	nop
 800b810:	2000205c 	.word	0x2000205c

0800b814 <abort>:
 800b814:	b508      	push	{r3, lr}
 800b816:	2006      	movs	r0, #6
 800b818:	f000 f8f2 	bl	800ba00 <raise>
 800b81c:	2001      	movs	r0, #1
 800b81e:	f7f6 f9c7 	bl	8001bb0 <_exit>
	...

0800b824 <malloc>:
 800b824:	4b02      	ldr	r3, [pc, #8]	@ (800b830 <malloc+0xc>)
 800b826:	4601      	mov	r1, r0
 800b828:	6818      	ldr	r0, [r3, #0]
 800b82a:	f000 b82d 	b.w	800b888 <_malloc_r>
 800b82e:	bf00      	nop
 800b830:	20000100 	.word	0x20000100

0800b834 <free>:
 800b834:	4b02      	ldr	r3, [pc, #8]	@ (800b840 <free+0xc>)
 800b836:	4601      	mov	r1, r0
 800b838:	6818      	ldr	r0, [r3, #0]
 800b83a:	f000 b939 	b.w	800bab0 <_free_r>
 800b83e:	bf00      	nop
 800b840:	20000100 	.word	0x20000100

0800b844 <sbrk_aligned>:
 800b844:	b570      	push	{r4, r5, r6, lr}
 800b846:	4e0f      	ldr	r6, [pc, #60]	@ (800b884 <sbrk_aligned+0x40>)
 800b848:	460c      	mov	r4, r1
 800b84a:	6831      	ldr	r1, [r6, #0]
 800b84c:	4605      	mov	r5, r0
 800b84e:	b911      	cbnz	r1, 800b856 <sbrk_aligned+0x12>
 800b850:	f000 f8f2 	bl	800ba38 <_sbrk_r>
 800b854:	6030      	str	r0, [r6, #0]
 800b856:	4621      	mov	r1, r4
 800b858:	4628      	mov	r0, r5
 800b85a:	f000 f8ed 	bl	800ba38 <_sbrk_r>
 800b85e:	1c43      	adds	r3, r0, #1
 800b860:	d103      	bne.n	800b86a <sbrk_aligned+0x26>
 800b862:	f04f 34ff 	mov.w	r4, #4294967295
 800b866:	4620      	mov	r0, r4
 800b868:	bd70      	pop	{r4, r5, r6, pc}
 800b86a:	1cc4      	adds	r4, r0, #3
 800b86c:	f024 0403 	bic.w	r4, r4, #3
 800b870:	42a0      	cmp	r0, r4
 800b872:	d0f8      	beq.n	800b866 <sbrk_aligned+0x22>
 800b874:	1a21      	subs	r1, r4, r0
 800b876:	4628      	mov	r0, r5
 800b878:	f000 f8de 	bl	800ba38 <_sbrk_r>
 800b87c:	3001      	adds	r0, #1
 800b87e:	d1f2      	bne.n	800b866 <sbrk_aligned+0x22>
 800b880:	e7ef      	b.n	800b862 <sbrk_aligned+0x1e>
 800b882:	bf00      	nop
 800b884:	20002060 	.word	0x20002060

0800b888 <_malloc_r>:
 800b888:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b88c:	1ccd      	adds	r5, r1, #3
 800b88e:	f025 0503 	bic.w	r5, r5, #3
 800b892:	3508      	adds	r5, #8
 800b894:	2d0c      	cmp	r5, #12
 800b896:	bf38      	it	cc
 800b898:	250c      	movcc	r5, #12
 800b89a:	2d00      	cmp	r5, #0
 800b89c:	4606      	mov	r6, r0
 800b89e:	db01      	blt.n	800b8a4 <_malloc_r+0x1c>
 800b8a0:	42a9      	cmp	r1, r5
 800b8a2:	d904      	bls.n	800b8ae <_malloc_r+0x26>
 800b8a4:	230c      	movs	r3, #12
 800b8a6:	6033      	str	r3, [r6, #0]
 800b8a8:	2000      	movs	r0, #0
 800b8aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b8ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b984 <_malloc_r+0xfc>
 800b8b2:	f000 f869 	bl	800b988 <__malloc_lock>
 800b8b6:	f8d8 3000 	ldr.w	r3, [r8]
 800b8ba:	461c      	mov	r4, r3
 800b8bc:	bb44      	cbnz	r4, 800b910 <_malloc_r+0x88>
 800b8be:	4629      	mov	r1, r5
 800b8c0:	4630      	mov	r0, r6
 800b8c2:	f7ff ffbf 	bl	800b844 <sbrk_aligned>
 800b8c6:	1c43      	adds	r3, r0, #1
 800b8c8:	4604      	mov	r4, r0
 800b8ca:	d158      	bne.n	800b97e <_malloc_r+0xf6>
 800b8cc:	f8d8 4000 	ldr.w	r4, [r8]
 800b8d0:	4627      	mov	r7, r4
 800b8d2:	2f00      	cmp	r7, #0
 800b8d4:	d143      	bne.n	800b95e <_malloc_r+0xd6>
 800b8d6:	2c00      	cmp	r4, #0
 800b8d8:	d04b      	beq.n	800b972 <_malloc_r+0xea>
 800b8da:	6823      	ldr	r3, [r4, #0]
 800b8dc:	4639      	mov	r1, r7
 800b8de:	4630      	mov	r0, r6
 800b8e0:	eb04 0903 	add.w	r9, r4, r3
 800b8e4:	f000 f8a8 	bl	800ba38 <_sbrk_r>
 800b8e8:	4581      	cmp	r9, r0
 800b8ea:	d142      	bne.n	800b972 <_malloc_r+0xea>
 800b8ec:	6821      	ldr	r1, [r4, #0]
 800b8ee:	1a6d      	subs	r5, r5, r1
 800b8f0:	4629      	mov	r1, r5
 800b8f2:	4630      	mov	r0, r6
 800b8f4:	f7ff ffa6 	bl	800b844 <sbrk_aligned>
 800b8f8:	3001      	adds	r0, #1
 800b8fa:	d03a      	beq.n	800b972 <_malloc_r+0xea>
 800b8fc:	6823      	ldr	r3, [r4, #0]
 800b8fe:	442b      	add	r3, r5
 800b900:	6023      	str	r3, [r4, #0]
 800b902:	f8d8 3000 	ldr.w	r3, [r8]
 800b906:	685a      	ldr	r2, [r3, #4]
 800b908:	bb62      	cbnz	r2, 800b964 <_malloc_r+0xdc>
 800b90a:	f8c8 7000 	str.w	r7, [r8]
 800b90e:	e00f      	b.n	800b930 <_malloc_r+0xa8>
 800b910:	6822      	ldr	r2, [r4, #0]
 800b912:	1b52      	subs	r2, r2, r5
 800b914:	d420      	bmi.n	800b958 <_malloc_r+0xd0>
 800b916:	2a0b      	cmp	r2, #11
 800b918:	d917      	bls.n	800b94a <_malloc_r+0xc2>
 800b91a:	1961      	adds	r1, r4, r5
 800b91c:	42a3      	cmp	r3, r4
 800b91e:	6025      	str	r5, [r4, #0]
 800b920:	bf18      	it	ne
 800b922:	6059      	strne	r1, [r3, #4]
 800b924:	6863      	ldr	r3, [r4, #4]
 800b926:	bf08      	it	eq
 800b928:	f8c8 1000 	streq.w	r1, [r8]
 800b92c:	5162      	str	r2, [r4, r5]
 800b92e:	604b      	str	r3, [r1, #4]
 800b930:	4630      	mov	r0, r6
 800b932:	f000 f82f 	bl	800b994 <__malloc_unlock>
 800b936:	f104 000b 	add.w	r0, r4, #11
 800b93a:	1d23      	adds	r3, r4, #4
 800b93c:	f020 0007 	bic.w	r0, r0, #7
 800b940:	1ac2      	subs	r2, r0, r3
 800b942:	bf1c      	itt	ne
 800b944:	1a1b      	subne	r3, r3, r0
 800b946:	50a3      	strne	r3, [r4, r2]
 800b948:	e7af      	b.n	800b8aa <_malloc_r+0x22>
 800b94a:	6862      	ldr	r2, [r4, #4]
 800b94c:	42a3      	cmp	r3, r4
 800b94e:	bf0c      	ite	eq
 800b950:	f8c8 2000 	streq.w	r2, [r8]
 800b954:	605a      	strne	r2, [r3, #4]
 800b956:	e7eb      	b.n	800b930 <_malloc_r+0xa8>
 800b958:	4623      	mov	r3, r4
 800b95a:	6864      	ldr	r4, [r4, #4]
 800b95c:	e7ae      	b.n	800b8bc <_malloc_r+0x34>
 800b95e:	463c      	mov	r4, r7
 800b960:	687f      	ldr	r7, [r7, #4]
 800b962:	e7b6      	b.n	800b8d2 <_malloc_r+0x4a>
 800b964:	461a      	mov	r2, r3
 800b966:	685b      	ldr	r3, [r3, #4]
 800b968:	42a3      	cmp	r3, r4
 800b96a:	d1fb      	bne.n	800b964 <_malloc_r+0xdc>
 800b96c:	2300      	movs	r3, #0
 800b96e:	6053      	str	r3, [r2, #4]
 800b970:	e7de      	b.n	800b930 <_malloc_r+0xa8>
 800b972:	230c      	movs	r3, #12
 800b974:	6033      	str	r3, [r6, #0]
 800b976:	4630      	mov	r0, r6
 800b978:	f000 f80c 	bl	800b994 <__malloc_unlock>
 800b97c:	e794      	b.n	800b8a8 <_malloc_r+0x20>
 800b97e:	6005      	str	r5, [r0, #0]
 800b980:	e7d6      	b.n	800b930 <_malloc_r+0xa8>
 800b982:	bf00      	nop
 800b984:	20002064 	.word	0x20002064

0800b988 <__malloc_lock>:
 800b988:	4801      	ldr	r0, [pc, #4]	@ (800b990 <__malloc_lock+0x8>)
 800b98a:	f000 b88f 	b.w	800baac <__retarget_lock_acquire_recursive>
 800b98e:	bf00      	nop
 800b990:	200021a4 	.word	0x200021a4

0800b994 <__malloc_unlock>:
 800b994:	4801      	ldr	r0, [pc, #4]	@ (800b99c <__malloc_unlock+0x8>)
 800b996:	f000 b88a 	b.w	800baae <__retarget_lock_release_recursive>
 800b99a:	bf00      	nop
 800b99c:	200021a4 	.word	0x200021a4

0800b9a0 <memset>:
 800b9a0:	4402      	add	r2, r0
 800b9a2:	4603      	mov	r3, r0
 800b9a4:	4293      	cmp	r3, r2
 800b9a6:	d100      	bne.n	800b9aa <memset+0xa>
 800b9a8:	4770      	bx	lr
 800b9aa:	f803 1b01 	strb.w	r1, [r3], #1
 800b9ae:	e7f9      	b.n	800b9a4 <memset+0x4>

0800b9b0 <_raise_r>:
 800b9b0:	291f      	cmp	r1, #31
 800b9b2:	b538      	push	{r3, r4, r5, lr}
 800b9b4:	4605      	mov	r5, r0
 800b9b6:	460c      	mov	r4, r1
 800b9b8:	d904      	bls.n	800b9c4 <_raise_r+0x14>
 800b9ba:	2316      	movs	r3, #22
 800b9bc:	6003      	str	r3, [r0, #0]
 800b9be:	f04f 30ff 	mov.w	r0, #4294967295
 800b9c2:	bd38      	pop	{r3, r4, r5, pc}
 800b9c4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b9c6:	b112      	cbz	r2, 800b9ce <_raise_r+0x1e>
 800b9c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b9cc:	b94b      	cbnz	r3, 800b9e2 <_raise_r+0x32>
 800b9ce:	4628      	mov	r0, r5
 800b9d0:	f000 f830 	bl	800ba34 <_getpid_r>
 800b9d4:	4622      	mov	r2, r4
 800b9d6:	4601      	mov	r1, r0
 800b9d8:	4628      	mov	r0, r5
 800b9da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b9de:	f000 b817 	b.w	800ba10 <_kill_r>
 800b9e2:	2b01      	cmp	r3, #1
 800b9e4:	d00a      	beq.n	800b9fc <_raise_r+0x4c>
 800b9e6:	1c59      	adds	r1, r3, #1
 800b9e8:	d103      	bne.n	800b9f2 <_raise_r+0x42>
 800b9ea:	2316      	movs	r3, #22
 800b9ec:	6003      	str	r3, [r0, #0]
 800b9ee:	2001      	movs	r0, #1
 800b9f0:	e7e7      	b.n	800b9c2 <_raise_r+0x12>
 800b9f2:	2100      	movs	r1, #0
 800b9f4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b9f8:	4620      	mov	r0, r4
 800b9fa:	4798      	blx	r3
 800b9fc:	2000      	movs	r0, #0
 800b9fe:	e7e0      	b.n	800b9c2 <_raise_r+0x12>

0800ba00 <raise>:
 800ba00:	4b02      	ldr	r3, [pc, #8]	@ (800ba0c <raise+0xc>)
 800ba02:	4601      	mov	r1, r0
 800ba04:	6818      	ldr	r0, [r3, #0]
 800ba06:	f7ff bfd3 	b.w	800b9b0 <_raise_r>
 800ba0a:	bf00      	nop
 800ba0c:	20000100 	.word	0x20000100

0800ba10 <_kill_r>:
 800ba10:	b538      	push	{r3, r4, r5, lr}
 800ba12:	4d07      	ldr	r5, [pc, #28]	@ (800ba30 <_kill_r+0x20>)
 800ba14:	2300      	movs	r3, #0
 800ba16:	4604      	mov	r4, r0
 800ba18:	4608      	mov	r0, r1
 800ba1a:	4611      	mov	r1, r2
 800ba1c:	602b      	str	r3, [r5, #0]
 800ba1e:	f7f6 f8b7 	bl	8001b90 <_kill>
 800ba22:	1c43      	adds	r3, r0, #1
 800ba24:	d102      	bne.n	800ba2c <_kill_r+0x1c>
 800ba26:	682b      	ldr	r3, [r5, #0]
 800ba28:	b103      	cbz	r3, 800ba2c <_kill_r+0x1c>
 800ba2a:	6023      	str	r3, [r4, #0]
 800ba2c:	bd38      	pop	{r3, r4, r5, pc}
 800ba2e:	bf00      	nop
 800ba30:	200021a0 	.word	0x200021a0

0800ba34 <_getpid_r>:
 800ba34:	f7f6 b8a4 	b.w	8001b80 <_getpid>

0800ba38 <_sbrk_r>:
 800ba38:	b538      	push	{r3, r4, r5, lr}
 800ba3a:	4d06      	ldr	r5, [pc, #24]	@ (800ba54 <_sbrk_r+0x1c>)
 800ba3c:	2300      	movs	r3, #0
 800ba3e:	4604      	mov	r4, r0
 800ba40:	4608      	mov	r0, r1
 800ba42:	602b      	str	r3, [r5, #0]
 800ba44:	f7f6 f8c0 	bl	8001bc8 <_sbrk>
 800ba48:	1c43      	adds	r3, r0, #1
 800ba4a:	d102      	bne.n	800ba52 <_sbrk_r+0x1a>
 800ba4c:	682b      	ldr	r3, [r5, #0]
 800ba4e:	b103      	cbz	r3, 800ba52 <_sbrk_r+0x1a>
 800ba50:	6023      	str	r3, [r4, #0]
 800ba52:	bd38      	pop	{r3, r4, r5, pc}
 800ba54:	200021a0 	.word	0x200021a0

0800ba58 <__errno>:
 800ba58:	4b01      	ldr	r3, [pc, #4]	@ (800ba60 <__errno+0x8>)
 800ba5a:	6818      	ldr	r0, [r3, #0]
 800ba5c:	4770      	bx	lr
 800ba5e:	bf00      	nop
 800ba60:	20000100 	.word	0x20000100

0800ba64 <__libc_init_array>:
 800ba64:	b570      	push	{r4, r5, r6, lr}
 800ba66:	4d0d      	ldr	r5, [pc, #52]	@ (800ba9c <__libc_init_array+0x38>)
 800ba68:	4c0d      	ldr	r4, [pc, #52]	@ (800baa0 <__libc_init_array+0x3c>)
 800ba6a:	1b64      	subs	r4, r4, r5
 800ba6c:	10a4      	asrs	r4, r4, #2
 800ba6e:	2600      	movs	r6, #0
 800ba70:	42a6      	cmp	r6, r4
 800ba72:	d109      	bne.n	800ba88 <__libc_init_array+0x24>
 800ba74:	4d0b      	ldr	r5, [pc, #44]	@ (800baa4 <__libc_init_array+0x40>)
 800ba76:	4c0c      	ldr	r4, [pc, #48]	@ (800baa8 <__libc_init_array+0x44>)
 800ba78:	f000 f864 	bl	800bb44 <_init>
 800ba7c:	1b64      	subs	r4, r4, r5
 800ba7e:	10a4      	asrs	r4, r4, #2
 800ba80:	2600      	movs	r6, #0
 800ba82:	42a6      	cmp	r6, r4
 800ba84:	d105      	bne.n	800ba92 <__libc_init_array+0x2e>
 800ba86:	bd70      	pop	{r4, r5, r6, pc}
 800ba88:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba8c:	4798      	blx	r3
 800ba8e:	3601      	adds	r6, #1
 800ba90:	e7ee      	b.n	800ba70 <__libc_init_array+0xc>
 800ba92:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba96:	4798      	blx	r3
 800ba98:	3601      	adds	r6, #1
 800ba9a:	e7f2      	b.n	800ba82 <__libc_init_array+0x1e>
 800ba9c:	0800bc30 	.word	0x0800bc30
 800baa0:	0800bc30 	.word	0x0800bc30
 800baa4:	0800bc30 	.word	0x0800bc30
 800baa8:	0800bc38 	.word	0x0800bc38

0800baac <__retarget_lock_acquire_recursive>:
 800baac:	4770      	bx	lr

0800baae <__retarget_lock_release_recursive>:
 800baae:	4770      	bx	lr

0800bab0 <_free_r>:
 800bab0:	b538      	push	{r3, r4, r5, lr}
 800bab2:	4605      	mov	r5, r0
 800bab4:	2900      	cmp	r1, #0
 800bab6:	d041      	beq.n	800bb3c <_free_r+0x8c>
 800bab8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800babc:	1f0c      	subs	r4, r1, #4
 800babe:	2b00      	cmp	r3, #0
 800bac0:	bfb8      	it	lt
 800bac2:	18e4      	addlt	r4, r4, r3
 800bac4:	f7ff ff60 	bl	800b988 <__malloc_lock>
 800bac8:	4a1d      	ldr	r2, [pc, #116]	@ (800bb40 <_free_r+0x90>)
 800baca:	6813      	ldr	r3, [r2, #0]
 800bacc:	b933      	cbnz	r3, 800badc <_free_r+0x2c>
 800bace:	6063      	str	r3, [r4, #4]
 800bad0:	6014      	str	r4, [r2, #0]
 800bad2:	4628      	mov	r0, r5
 800bad4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bad8:	f7ff bf5c 	b.w	800b994 <__malloc_unlock>
 800badc:	42a3      	cmp	r3, r4
 800bade:	d908      	bls.n	800baf2 <_free_r+0x42>
 800bae0:	6820      	ldr	r0, [r4, #0]
 800bae2:	1821      	adds	r1, r4, r0
 800bae4:	428b      	cmp	r3, r1
 800bae6:	bf01      	itttt	eq
 800bae8:	6819      	ldreq	r1, [r3, #0]
 800baea:	685b      	ldreq	r3, [r3, #4]
 800baec:	1809      	addeq	r1, r1, r0
 800baee:	6021      	streq	r1, [r4, #0]
 800baf0:	e7ed      	b.n	800bace <_free_r+0x1e>
 800baf2:	461a      	mov	r2, r3
 800baf4:	685b      	ldr	r3, [r3, #4]
 800baf6:	b10b      	cbz	r3, 800bafc <_free_r+0x4c>
 800baf8:	42a3      	cmp	r3, r4
 800bafa:	d9fa      	bls.n	800baf2 <_free_r+0x42>
 800bafc:	6811      	ldr	r1, [r2, #0]
 800bafe:	1850      	adds	r0, r2, r1
 800bb00:	42a0      	cmp	r0, r4
 800bb02:	d10b      	bne.n	800bb1c <_free_r+0x6c>
 800bb04:	6820      	ldr	r0, [r4, #0]
 800bb06:	4401      	add	r1, r0
 800bb08:	1850      	adds	r0, r2, r1
 800bb0a:	4283      	cmp	r3, r0
 800bb0c:	6011      	str	r1, [r2, #0]
 800bb0e:	d1e0      	bne.n	800bad2 <_free_r+0x22>
 800bb10:	6818      	ldr	r0, [r3, #0]
 800bb12:	685b      	ldr	r3, [r3, #4]
 800bb14:	6053      	str	r3, [r2, #4]
 800bb16:	4408      	add	r0, r1
 800bb18:	6010      	str	r0, [r2, #0]
 800bb1a:	e7da      	b.n	800bad2 <_free_r+0x22>
 800bb1c:	d902      	bls.n	800bb24 <_free_r+0x74>
 800bb1e:	230c      	movs	r3, #12
 800bb20:	602b      	str	r3, [r5, #0]
 800bb22:	e7d6      	b.n	800bad2 <_free_r+0x22>
 800bb24:	6820      	ldr	r0, [r4, #0]
 800bb26:	1821      	adds	r1, r4, r0
 800bb28:	428b      	cmp	r3, r1
 800bb2a:	bf04      	itt	eq
 800bb2c:	6819      	ldreq	r1, [r3, #0]
 800bb2e:	685b      	ldreq	r3, [r3, #4]
 800bb30:	6063      	str	r3, [r4, #4]
 800bb32:	bf04      	itt	eq
 800bb34:	1809      	addeq	r1, r1, r0
 800bb36:	6021      	streq	r1, [r4, #0]
 800bb38:	6054      	str	r4, [r2, #4]
 800bb3a:	e7ca      	b.n	800bad2 <_free_r+0x22>
 800bb3c:	bd38      	pop	{r3, r4, r5, pc}
 800bb3e:	bf00      	nop
 800bb40:	20002064 	.word	0x20002064

0800bb44 <_init>:
 800bb44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb46:	bf00      	nop
 800bb48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb4a:	bc08      	pop	{r3}
 800bb4c:	469e      	mov	lr, r3
 800bb4e:	4770      	bx	lr

0800bb50 <_fini>:
 800bb50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb52:	bf00      	nop
 800bb54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb56:	bc08      	pop	{r3}
 800bb58:	469e      	mov	lr, r3
 800bb5a:	4770      	bx	lr
