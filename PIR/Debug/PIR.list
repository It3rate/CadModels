
PIR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000070b0  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08007248  08007248  00008248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080072b0  080072b0  0000915c  2**0
                  CONTENTS
  4 .ARM          00000008  080072b0  080072b0  000082b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080072b8  080072b8  0000915c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080072b8  080072b8  000082b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080072bc  080072bc  000082bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000015c  20000000  080072c0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001da0  2000015c  0800741c  0000915c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001efc  0800741c  00009efc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000915c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f22f  00000000  00000000  0000918c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035aa  00000000  00000000  000183bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ce8  00000000  00000000  0001b968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000968  00000000  00000000  0001c650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c125  00000000  00000000  0001cfb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001276b  00000000  00000000  000390dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b677  00000000  00000000  0004b848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d6ebf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003700  00000000  00000000  000d6f04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  000da604  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000015c 	.word	0x2000015c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08007230 	.word	0x08007230

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000160 	.word	0x20000160
 80001d4:	08007230 	.word	0x08007230

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <_Z19onPirChangedHandlerP3Pir>:
uint8_t buffer[] = "Pir change\r\n";
Pir *myPir = nullptr;
uint16_t pir_state;

void onPirChangedHandler(Pir* instance)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
	CDC_Transmit_FS(buffer, sizeof(buffer));
 80004d0:	210d      	movs	r1, #13
 80004d2:	4803      	ldr	r0, [pc, #12]	@ (80004e0 <_Z19onPirChangedHandlerP3Pir+0x18>)
 80004d4:	f006 f8a4 	bl	8006620 <CDC_Transmit_FS>
}
 80004d8:	bf00      	nop
 80004da:	3708      	adds	r7, #8
 80004dc:	46bd      	mov	sp, r7
 80004de:	bd80      	pop	{r7, pc}
 80004e0:	20000000 	.word	0x20000000

080004e4 <_Z12EventLoopCppv>:
void EventLoopCpp() {
 80004e4:	b590      	push	{r4, r7, lr}
 80004e6:	b083      	sub	sp, #12
 80004e8:	af00      	add	r7, sp, #0
	myPir = new Pir(PIR_GPIO_Port, PIR_Pin);
 80004ea:	2010      	movs	r0, #16
 80004ec:	f006 fcec 	bl	8006ec8 <_Znwj>
 80004f0:	4603      	mov	r3, r0
 80004f2:	461c      	mov	r4, r3
 80004f4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80004f8:	490f      	ldr	r1, [pc, #60]	@ (8000538 <_Z12EventLoopCppv+0x54>)
 80004fa:	4620      	mov	r0, r4
 80004fc:	f000 f892 	bl	8000624 <_ZN3PirC1EP12GPIO_TypeDeft>
 8000500:	4b0e      	ldr	r3, [pc, #56]	@ (800053c <_Z12EventLoopCppv+0x58>)
 8000502:	601c      	str	r4, [r3, #0]
	myPir->attachOnPirChanged(onPirChangedHandler);
 8000504:	4b0d      	ldr	r3, [pc, #52]	@ (800053c <_Z12EventLoopCppv+0x58>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	490d      	ldr	r1, [pc, #52]	@ (8000540 <_Z12EventLoopCppv+0x5c>)
 800050a:	4618      	mov	r0, r3
 800050c:	f000 f8d2 	bl	80006b4 <_ZN3Pir18attachOnPirChangedEPFvPS_E>

	while (1) {
		//CDC_Transmit_FS(buffer, sizeof(buffer));

		GPIO_PinState ps = HAL_GPIO_ReadPin(PIR_GPIO_Port, PIR_Pin);
 8000510:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000514:	4808      	ldr	r0, [pc, #32]	@ (8000538 <_Z12EventLoopCppv+0x54>)
 8000516:	f000 fe0d 	bl	8001134 <HAL_GPIO_ReadPin>
 800051a:	4603      	mov	r3, r0
 800051c:	71fb      	strb	r3, [r7, #7]
		pir_state = (ps == GPIO_PIN_SET ? 1 : 0);
 800051e:	79fb      	ldrb	r3, [r7, #7]
 8000520:	2b01      	cmp	r3, #1
 8000522:	d101      	bne.n	8000528 <_Z12EventLoopCppv+0x44>
 8000524:	2201      	movs	r2, #1
 8000526:	e000      	b.n	800052a <_Z12EventLoopCppv+0x46>
 8000528:	2200      	movs	r2, #0
 800052a:	4b06      	ldr	r3, [pc, #24]	@ (8000544 <_Z12EventLoopCppv+0x60>)
 800052c:	801a      	strh	r2, [r3, #0]
		HAL_Delay(10);
 800052e:	200a      	movs	r0, #10
 8000530:	f000 fb46 	bl	8000bc0 <HAL_Delay>
	}
 8000534:	e7ec      	b.n	8000510 <_Z12EventLoopCppv+0x2c>
 8000536:	bf00      	nop
 8000538:	40020800 	.word	0x40020800
 800053c:	20000178 	.word	0x20000178
 8000540:	080004c9 	.word	0x080004c9
 8000544:	2000017c 	.word	0x2000017c

08000548 <HAL_GPIO_EXTI_Callback>:
}

extern void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	4603      	mov	r3, r0
 8000550:	80fb      	strh	r3, [r7, #6]
	Interrupts::Invoke_GPIO_EXTI(GPIO_Pin);
 8000552:	88fb      	ldrh	r3, [r7, #6]
 8000554:	4618      	mov	r0, r3
 8000556:	f000 f825 	bl	80005a4 <_ZN10Interrupts16Invoke_GPIO_EXTIEt>
}
 800055a:	bf00      	nop
 800055c:	3708      	adds	r7, #8
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}

08000562 <EventLoopC>:

// Define all C function calls from main.c below
extern "C" {
void EventLoopC() {
 8000562:	b580      	push	{r7, lr}
 8000564:	af00      	add	r7, sp, #0
	EventLoopCpp();
 8000566:	f7ff ffbd 	bl	80004e4 <_Z12EventLoopCppv>
}
 800056a:	bf00      	nop
 800056c:	bd80      	pop	{r7, pc}
	...

08000570 <_ZN10Interrupts22Add_GPIO_EXTI_CallbackEtPFvtE>:
#include <Interrupts.hpp>

GPIO_EXTI_Handler Interrupts::GPIO_EXTI_Callbacks[16] = {nullptr};

void Interrupts::Add_GPIO_EXTI_Callback(uint16_t gpioPin, GPIO_EXTI_Handler handler)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af00      	add	r7, sp, #0
 8000576:	4603      	mov	r3, r0
 8000578:	6039      	str	r1, [r7, #0]
 800057a:	80fb      	strh	r3, [r7, #6]
	uint8_t index = Interrupts::PinToIndex(gpioPin);
 800057c:	88fb      	ldrh	r3, [r7, #6]
 800057e:	4618      	mov	r0, r3
 8000580:	f000 f832 	bl	80005e8 <_ZN10Interrupts10PinToIndexEt>
 8000584:	4603      	mov	r3, r0
 8000586:	73fb      	strb	r3, [r7, #15]
    if (index < 16)
 8000588:	7bfb      	ldrb	r3, [r7, #15]
 800058a:	2b0f      	cmp	r3, #15
 800058c:	d804      	bhi.n	8000598 <_ZN10Interrupts22Add_GPIO_EXTI_CallbackEtPFvtE+0x28>
    {
    	GPIO_EXTI_Callbacks[index] = handler;
 800058e:	7bfb      	ldrb	r3, [r7, #15]
 8000590:	4903      	ldr	r1, [pc, #12]	@ (80005a0 <_ZN10Interrupts22Add_GPIO_EXTI_CallbackEtPFvtE+0x30>)
 8000592:	683a      	ldr	r2, [r7, #0]
 8000594:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
}
 8000598:	bf00      	nop
 800059a:	3710      	adds	r7, #16
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	20000180 	.word	0x20000180

080005a4 <_ZN10Interrupts16Invoke_GPIO_EXTIEt>:
    {
    	GPIO_EXTI_Callbacks[index] = nullptr;
    }
}
void Interrupts::Invoke_GPIO_EXTI(uint16_t gpioPin)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b084      	sub	sp, #16
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	4603      	mov	r3, r0
 80005ac:	80fb      	strh	r3, [r7, #6]
	uint8_t index = Interrupts::PinToIndex(gpioPin);
 80005ae:	88fb      	ldrh	r3, [r7, #6]
 80005b0:	4618      	mov	r0, r3
 80005b2:	f000 f819 	bl	80005e8 <_ZN10Interrupts10PinToIndexEt>
 80005b6:	4603      	mov	r3, r0
 80005b8:	73fb      	strb	r3, [r7, #15]
    if (index >= 0 && index < 16 && GPIO_EXTI_Callbacks[index]) {
 80005ba:	7bfb      	ldrb	r3, [r7, #15]
 80005bc:	2b0f      	cmp	r3, #15
 80005be:	d80c      	bhi.n	80005da <_ZN10Interrupts16Invoke_GPIO_EXTIEt+0x36>
 80005c0:	7bfb      	ldrb	r3, [r7, #15]
 80005c2:	4a08      	ldr	r2, [pc, #32]	@ (80005e4 <_ZN10Interrupts16Invoke_GPIO_EXTIEt+0x40>)
 80005c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d006      	beq.n	80005da <_ZN10Interrupts16Invoke_GPIO_EXTIEt+0x36>
    	GPIO_EXTI_Callbacks[index](gpioPin);
 80005cc:	7bfb      	ldrb	r3, [r7, #15]
 80005ce:	4a05      	ldr	r2, [pc, #20]	@ (80005e4 <_ZN10Interrupts16Invoke_GPIO_EXTIEt+0x40>)
 80005d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005d4:	88fa      	ldrh	r2, [r7, #6]
 80005d6:	4610      	mov	r0, r2
 80005d8:	4798      	blx	r3
    }
}
 80005da:	bf00      	nop
 80005dc:	3710      	adds	r7, #16
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	20000180 	.word	0x20000180

080005e8 <_ZN10Interrupts10PinToIndexEt>:


uint8_t Interrupts::PinToIndex(uint16_t n) {
 80005e8:	b480      	push	{r7}
 80005ea:	b085      	sub	sp, #20
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	4603      	mov	r3, r0
 80005f0:	80fb      	strh	r3, [r7, #6]
	uint8_t index = 0;
 80005f2:	2300      	movs	r3, #0
 80005f4:	73fb      	strb	r3, [r7, #15]
    while (n >>= 1) {
 80005f6:	e002      	b.n	80005fe <_ZN10Interrupts10PinToIndexEt+0x16>
        index++;
 80005f8:	7bfb      	ldrb	r3, [r7, #15]
 80005fa:	3301      	adds	r3, #1
 80005fc:	73fb      	strb	r3, [r7, #15]
    while (n >>= 1) {
 80005fe:	88fb      	ldrh	r3, [r7, #6]
 8000600:	085b      	lsrs	r3, r3, #1
 8000602:	80fb      	strh	r3, [r7, #6]
 8000604:	88fb      	ldrh	r3, [r7, #6]
 8000606:	2b00      	cmp	r3, #0
 8000608:	bf14      	ite	ne
 800060a:	2301      	movne	r3, #1
 800060c:	2300      	moveq	r3, #0
 800060e:	b2db      	uxtb	r3, r3
 8000610:	2b00      	cmp	r3, #0
 8000612:	d1f1      	bne.n	80005f8 <_ZN10Interrupts10PinToIndexEt+0x10>
    }
    return index;
 8000614:	7bfb      	ldrb	r3, [r7, #15]
}
 8000616:	4618      	mov	r0, r3
 8000618:	3714      	adds	r7, #20
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr
	...

08000624 <_ZN3PirC1EP12GPIO_TypeDeft>:
#include "Pir.hpp"
#include "Interrupts.hpp"

static Pir* _instance = nullptr;

Pir::Pir(GPIO_TypeDef *port, uint16_t pin) :
 8000624:	b580      	push	{r7, lr}
 8000626:	b084      	sub	sp, #16
 8000628:	af00      	add	r7, sp, #0
 800062a:	60f8      	str	r0, [r7, #12]
 800062c:	60b9      	str	r1, [r7, #8]
 800062e:	4613      	mov	r3, r2
 8000630:	80fb      	strh	r3, [r7, #6]
	_port(port), _pin(pin), _state(false)
 8000632:	4a0d      	ldr	r2, [pc, #52]	@ (8000668 <_ZN3PirC1EP12GPIO_TypeDeft+0x44>)
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	68ba      	ldr	r2, [r7, #8]
 800063c:	609a      	str	r2, [r3, #8]
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	88fa      	ldrh	r2, [r7, #6]
 8000642:	819a      	strh	r2, [r3, #12]
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	2200      	movs	r2, #0
 8000648:	739a      	strb	r2, [r3, #14]
{
	_instance = this;
 800064a:	4a08      	ldr	r2, [pc, #32]	@ (800066c <_ZN3PirC1EP12GPIO_TypeDeft+0x48>)
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	6013      	str	r3, [r2, #0]
	Interrupts::Add_GPIO_EXTI_Callback(_pin, OnPirChange);
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	899b      	ldrh	r3, [r3, #12]
 8000654:	4906      	ldr	r1, [pc, #24]	@ (8000670 <_ZN3PirC1EP12GPIO_TypeDeft+0x4c>)
 8000656:	4618      	mov	r0, r3
 8000658:	f7ff ff8a 	bl	8000570 <_ZN10Interrupts22Add_GPIO_EXTI_CallbackEtPFvtE>
}
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	4618      	mov	r0, r3
 8000660:	3710      	adds	r7, #16
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	08007298 	.word	0x08007298
 800066c:	200001c0 	.word	0x200001c0
 8000670:	08000715 	.word	0x08000715

08000674 <_ZN3PirD1Ev>:

Pir::~Pir() {
 8000674:	b480      	push	{r7}
 8000676:	b083      	sub	sp, #12
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
 800067c:	4a04      	ldr	r2, [pc, #16]	@ (8000690 <_ZN3PirD1Ev+0x1c>)
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	601a      	str	r2, [r3, #0]
}
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	4618      	mov	r0, r3
 8000686:	370c      	adds	r7, #12
 8000688:	46bd      	mov	sp, r7
 800068a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068e:	4770      	bx	lr
 8000690:	08007298 	.word	0x08007298

08000694 <_ZN3PirD0Ev>:
Pir::~Pir() {
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
}
 800069c:	6878      	ldr	r0, [r7, #4]
 800069e:	f7ff ffe9 	bl	8000674 <_ZN3PirD1Ev>
 80006a2:	2110      	movs	r1, #16
 80006a4:	6878      	ldr	r0, [r7, #4]
 80006a6:	f006 fc0d 	bl	8006ec4 <_ZdlPvj>
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	4618      	mov	r0, r3
 80006ae:	3708      	adds	r7, #8
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}

080006b4 <_ZN3Pir18attachOnPirChangedEPFvPS_E>:
{
	return _state;
}

void Pir::attachOnPirChanged(PirChangedHandler handler)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b083      	sub	sp, #12
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
 80006bc:	6039      	str	r1, [r7, #0]
    onPirChanged = handler;
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	683a      	ldr	r2, [r7, #0]
 80006c2:	605a      	str	r2, [r3, #4]
}
 80006c4:	bf00      	nop
 80006c6:	370c      	adds	r7, #12
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr

080006d0 <_ZN3Pir10PirChangedEv>:

void Pir::PirChanged()
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
	GPIO_PinState ps = HAL_GPIO_ReadPin(_port, _pin);
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	689a      	ldr	r2, [r3, #8]
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	899b      	ldrh	r3, [r3, #12]
 80006e0:	4619      	mov	r1, r3
 80006e2:	4610      	mov	r0, r2
 80006e4:	f000 fd26 	bl	8001134 <HAL_GPIO_ReadPin>
 80006e8:	4603      	mov	r3, r0
 80006ea:	73fb      	strb	r3, [r7, #15]
	_state = (ps == GPIO_PIN_SET ? 0 : 1);
 80006ec:	7bfb      	ldrb	r3, [r7, #15]
 80006ee:	2b01      	cmp	r3, #1
 80006f0:	bf14      	ite	ne
 80006f2:	2301      	movne	r3, #1
 80006f4:	2300      	moveq	r3, #0
 80006f6:	b2da      	uxtb	r2, r3
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	739a      	strb	r2, [r3, #14]
	if (onPirChanged != nullptr)
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	685b      	ldr	r3, [r3, #4]
 8000700:	2b00      	cmp	r3, #0
 8000702:	d003      	beq.n	800070c <_ZN3Pir10PirChangedEv+0x3c>
	{
		onPirChanged(this);
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	685b      	ldr	r3, [r3, #4]
 8000708:	6878      	ldr	r0, [r7, #4]
 800070a:	4798      	blx	r3
	}
}
 800070c:	bf00      	nop
 800070e:	3710      	adds	r7, #16
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}

08000714 <_ZN3Pir11OnPirChangeEt>:

void Pir::OnPirChange(uint16_t GPIO_Pin)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
 800071a:	4603      	mov	r3, r0
 800071c:	80fb      	strh	r3, [r7, #6]
	if (_instance != nullptr) {
 800071e:	4b06      	ldr	r3, [pc, #24]	@ (8000738 <_ZN3Pir11OnPirChangeEt+0x24>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	2b00      	cmp	r3, #0
 8000724:	d004      	beq.n	8000730 <_ZN3Pir11OnPirChangeEt+0x1c>
	    _instance->PirChanged();
 8000726:	4b04      	ldr	r3, [pc, #16]	@ (8000738 <_ZN3Pir11OnPirChangeEt+0x24>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	4618      	mov	r0, r3
 800072c:	f7ff ffd0 	bl	80006d0 <_ZN3Pir10PirChangedEv>
	}
}
 8000730:	bf00      	nop
 8000732:	3708      	adds	r7, #8
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	200001c0 	.word	0x200001c0

0800073c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b088      	sub	sp, #32
 8000740:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000742:	f107 030c 	add.w	r3, r7, #12
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	605a      	str	r2, [r3, #4]
 800074c:	609a      	str	r2, [r3, #8]
 800074e:	60da      	str	r2, [r3, #12]
 8000750:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	60bb      	str	r3, [r7, #8]
 8000756:	4b21      	ldr	r3, [pc, #132]	@ (80007dc <MX_GPIO_Init+0xa0>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075a:	4a20      	ldr	r2, [pc, #128]	@ (80007dc <MX_GPIO_Init+0xa0>)
 800075c:	f043 0304 	orr.w	r3, r3, #4
 8000760:	6313      	str	r3, [r2, #48]	@ 0x30
 8000762:	4b1e      	ldr	r3, [pc, #120]	@ (80007dc <MX_GPIO_Init+0xa0>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000766:	f003 0304 	and.w	r3, r3, #4
 800076a:	60bb      	str	r3, [r7, #8]
 800076c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	607b      	str	r3, [r7, #4]
 8000772:	4b1a      	ldr	r3, [pc, #104]	@ (80007dc <MX_GPIO_Init+0xa0>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000776:	4a19      	ldr	r2, [pc, #100]	@ (80007dc <MX_GPIO_Init+0xa0>)
 8000778:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800077c:	6313      	str	r3, [r2, #48]	@ 0x30
 800077e:	4b17      	ldr	r3, [pc, #92]	@ (80007dc <MX_GPIO_Init+0xa0>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000782:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000786:	607b      	str	r3, [r7, #4]
 8000788:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	603b      	str	r3, [r7, #0]
 800078e:	4b13      	ldr	r3, [pc, #76]	@ (80007dc <MX_GPIO_Init+0xa0>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000792:	4a12      	ldr	r2, [pc, #72]	@ (80007dc <MX_GPIO_Init+0xa0>)
 8000794:	f043 0301 	orr.w	r3, r3, #1
 8000798:	6313      	str	r3, [r2, #48]	@ 0x30
 800079a:	4b10      	ldr	r3, [pc, #64]	@ (80007dc <MX_GPIO_Init+0xa0>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079e:	f003 0301 	and.w	r3, r3, #1
 80007a2:	603b      	str	r3, [r7, #0]
 80007a4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PIR_Pin;
 80007a6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80007aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007ac:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80007b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b2:	2300      	movs	r3, #0
 80007b4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(PIR_GPIO_Port, &GPIO_InitStruct);
 80007b6:	f107 030c 	add.w	r3, r7, #12
 80007ba:	4619      	mov	r1, r3
 80007bc:	4808      	ldr	r0, [pc, #32]	@ (80007e0 <MX_GPIO_Init+0xa4>)
 80007be:	f000 fb35 	bl	8000e2c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80007c2:	2200      	movs	r2, #0
 80007c4:	2100      	movs	r1, #0
 80007c6:	2028      	movs	r0, #40	@ 0x28
 80007c8:	f000 faf9 	bl	8000dbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80007cc:	2028      	movs	r0, #40	@ 0x28
 80007ce:	f000 fb12 	bl	8000df6 <HAL_NVIC_EnableIRQ>

}
 80007d2:	bf00      	nop
 80007d4:	3720      	adds	r7, #32
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	40023800 	.word	0x40023800
 80007e0:	40020800 	.word	0x40020800

080007e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007e8:	f000 f978 	bl	8000adc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ec:	f000 f808 	bl	8000800 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007f0:	f7ff ffa4 	bl	800073c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80007f4:	f005 fe56 	bl	80064a4 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  EventLoopC();
 80007f8:	f7ff feb3 	bl	8000562 <EventLoopC>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007fc:	bf00      	nop
 80007fe:	e7fd      	b.n	80007fc <main+0x18>

08000800 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b094      	sub	sp, #80	@ 0x50
 8000804:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000806:	f107 0320 	add.w	r3, r7, #32
 800080a:	2230      	movs	r2, #48	@ 0x30
 800080c:	2100      	movs	r1, #0
 800080e:	4618      	mov	r0, r3
 8000810:	f006 fc3c 	bl	800708c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000814:	f107 030c 	add.w	r3, r7, #12
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
 800081c:	605a      	str	r2, [r3, #4]
 800081e:	609a      	str	r2, [r3, #8]
 8000820:	60da      	str	r2, [r3, #12]
 8000822:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000824:	2300      	movs	r3, #0
 8000826:	60bb      	str	r3, [r7, #8]
 8000828:	4b27      	ldr	r3, [pc, #156]	@ (80008c8 <SystemClock_Config+0xc8>)
 800082a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800082c:	4a26      	ldr	r2, [pc, #152]	@ (80008c8 <SystemClock_Config+0xc8>)
 800082e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000832:	6413      	str	r3, [r2, #64]	@ 0x40
 8000834:	4b24      	ldr	r3, [pc, #144]	@ (80008c8 <SystemClock_Config+0xc8>)
 8000836:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000838:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800083c:	60bb      	str	r3, [r7, #8]
 800083e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000840:	2300      	movs	r3, #0
 8000842:	607b      	str	r3, [r7, #4]
 8000844:	4b21      	ldr	r3, [pc, #132]	@ (80008cc <SystemClock_Config+0xcc>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4a20      	ldr	r2, [pc, #128]	@ (80008cc <SystemClock_Config+0xcc>)
 800084a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800084e:	6013      	str	r3, [r2, #0]
 8000850:	4b1e      	ldr	r3, [pc, #120]	@ (80008cc <SystemClock_Config+0xcc>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000858:	607b      	str	r3, [r7, #4]
 800085a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800085c:	2301      	movs	r3, #1
 800085e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000860:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000864:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000866:	2302      	movs	r3, #2
 8000868:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800086a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800086e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8000870:	230f      	movs	r3, #15
 8000872:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000874:	2390      	movs	r3, #144	@ 0x90
 8000876:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000878:	2304      	movs	r3, #4
 800087a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 800087c:	2305      	movs	r3, #5
 800087e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000880:	f107 0320 	add.w	r3, r7, #32
 8000884:	4618      	mov	r0, r3
 8000886:	f001 fed5 	bl	8002634 <HAL_RCC_OscConfig>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000890:	f000 f81e 	bl	80008d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000894:	230f      	movs	r3, #15
 8000896:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000898:	2302      	movs	r3, #2
 800089a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800089c:	2300      	movs	r3, #0
 800089e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008a6:	2300      	movs	r3, #0
 80008a8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008aa:	f107 030c 	add.w	r3, r7, #12
 80008ae:	2101      	movs	r1, #1
 80008b0:	4618      	mov	r0, r3
 80008b2:	f002 f937 	bl	8002b24 <HAL_RCC_ClockConfig>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80008bc:	f000 f808 	bl	80008d0 <Error_Handler>
  }
}
 80008c0:	bf00      	nop
 80008c2:	3750      	adds	r7, #80	@ 0x50
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	40023800 	.word	0x40023800
 80008cc:	40007000 	.word	0x40007000

080008d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008d4:	b672      	cpsid	i
}
 80008d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008d8:	bf00      	nop
 80008da:	e7fd      	b.n	80008d8 <Error_Handler+0x8>

080008dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	b083      	sub	sp, #12
 80008e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	607b      	str	r3, [r7, #4]
 80008e6:	4b10      	ldr	r3, [pc, #64]	@ (8000928 <HAL_MspInit+0x4c>)
 80008e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008ea:	4a0f      	ldr	r2, [pc, #60]	@ (8000928 <HAL_MspInit+0x4c>)
 80008ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80008f2:	4b0d      	ldr	r3, [pc, #52]	@ (8000928 <HAL_MspInit+0x4c>)
 80008f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008fa:	607b      	str	r3, [r7, #4]
 80008fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	603b      	str	r3, [r7, #0]
 8000902:	4b09      	ldr	r3, [pc, #36]	@ (8000928 <HAL_MspInit+0x4c>)
 8000904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000906:	4a08      	ldr	r2, [pc, #32]	@ (8000928 <HAL_MspInit+0x4c>)
 8000908:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800090c:	6413      	str	r3, [r2, #64]	@ 0x40
 800090e:	4b06      	ldr	r3, [pc, #24]	@ (8000928 <HAL_MspInit+0x4c>)
 8000910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000912:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000916:	603b      	str	r3, [r7, #0]
 8000918:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800091a:	bf00      	nop
 800091c:	370c      	adds	r7, #12
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	40023800 	.word	0x40023800

0800092c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000930:	bf00      	nop
 8000932:	e7fd      	b.n	8000930 <NMI_Handler+0x4>

08000934 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000938:	bf00      	nop
 800093a:	e7fd      	b.n	8000938 <HardFault_Handler+0x4>

0800093c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000940:	bf00      	nop
 8000942:	e7fd      	b.n	8000940 <MemManage_Handler+0x4>

08000944 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000948:	bf00      	nop
 800094a:	e7fd      	b.n	8000948 <BusFault_Handler+0x4>

0800094c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000950:	bf00      	nop
 8000952:	e7fd      	b.n	8000950 <UsageFault_Handler+0x4>

08000954 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000958:	bf00      	nop
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr

08000962 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000962:	b480      	push	{r7}
 8000964:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000966:	bf00      	nop
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr

08000970 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000974:	bf00      	nop
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr

0800097e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800097e:	b580      	push	{r7, lr}
 8000980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000982:	f000 f8fd 	bl	8000b80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000986:	bf00      	nop
 8000988:	bd80      	pop	{r7, pc}

0800098a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800098a:	b580      	push	{r7, lr}
 800098c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PIR_Pin);
 800098e:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000992:	f000 fbe7 	bl	8001164 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000996:	bf00      	nop
 8000998:	bd80      	pop	{r7, pc}
	...

0800099c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80009a0:	4802      	ldr	r0, [pc, #8]	@ (80009ac <OTG_FS_IRQHandler+0x10>)
 80009a2:	f000 fd3b 	bl	800141c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80009a6:	bf00      	nop
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	200016ac 	.word	0x200016ac

080009b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  return 1;
 80009b4:	2301      	movs	r3, #1
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr

080009c0 <_kill>:

int _kill(int pid, int sig)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
 80009c8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80009ca:	f006 fbbb 	bl	8007144 <__errno>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2216      	movs	r2, #22
 80009d2:	601a      	str	r2, [r3, #0]
  return -1;
 80009d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009d8:	4618      	mov	r0, r3
 80009da:	3708      	adds	r7, #8
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}

080009e0 <_exit>:

void _exit (int status)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80009e8:	f04f 31ff 	mov.w	r1, #4294967295
 80009ec:	6878      	ldr	r0, [r7, #4]
 80009ee:	f7ff ffe7 	bl	80009c0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80009f2:	bf00      	nop
 80009f4:	e7fd      	b.n	80009f2 <_exit+0x12>
	...

080009f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b086      	sub	sp, #24
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a00:	4a14      	ldr	r2, [pc, #80]	@ (8000a54 <_sbrk+0x5c>)
 8000a02:	4b15      	ldr	r3, [pc, #84]	@ (8000a58 <_sbrk+0x60>)
 8000a04:	1ad3      	subs	r3, r2, r3
 8000a06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a08:	697b      	ldr	r3, [r7, #20]
 8000a0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a0c:	4b13      	ldr	r3, [pc, #76]	@ (8000a5c <_sbrk+0x64>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d102      	bne.n	8000a1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a14:	4b11      	ldr	r3, [pc, #68]	@ (8000a5c <_sbrk+0x64>)
 8000a16:	4a12      	ldr	r2, [pc, #72]	@ (8000a60 <_sbrk+0x68>)
 8000a18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a1a:	4b10      	ldr	r3, [pc, #64]	@ (8000a5c <_sbrk+0x64>)
 8000a1c:	681a      	ldr	r2, [r3, #0]
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	4413      	add	r3, r2
 8000a22:	693a      	ldr	r2, [r7, #16]
 8000a24:	429a      	cmp	r2, r3
 8000a26:	d207      	bcs.n	8000a38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a28:	f006 fb8c 	bl	8007144 <__errno>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	220c      	movs	r2, #12
 8000a30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a32:	f04f 33ff 	mov.w	r3, #4294967295
 8000a36:	e009      	b.n	8000a4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a38:	4b08      	ldr	r3, [pc, #32]	@ (8000a5c <_sbrk+0x64>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a3e:	4b07      	ldr	r3, [pc, #28]	@ (8000a5c <_sbrk+0x64>)
 8000a40:	681a      	ldr	r2, [r3, #0]
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	4413      	add	r3, r2
 8000a46:	4a05      	ldr	r2, [pc, #20]	@ (8000a5c <_sbrk+0x64>)
 8000a48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a4a:	68fb      	ldr	r3, [r7, #12]
}
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	3718      	adds	r7, #24
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	20020000 	.word	0x20020000
 8000a58:	00000400 	.word	0x00000400
 8000a5c:	200001c4 	.word	0x200001c4
 8000a60:	20001f00 	.word	0x20001f00

08000a64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a68:	4b06      	ldr	r3, [pc, #24]	@ (8000a84 <SystemInit+0x20>)
 8000a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a6e:	4a05      	ldr	r2, [pc, #20]	@ (8000a84 <SystemInit+0x20>)
 8000a70:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a74:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a78:	bf00      	nop
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	e000ed00 	.word	0xe000ed00

08000a88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a88:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ac0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a8c:	f7ff ffea 	bl	8000a64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a90:	480c      	ldr	r0, [pc, #48]	@ (8000ac4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a92:	490d      	ldr	r1, [pc, #52]	@ (8000ac8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a94:	4a0d      	ldr	r2, [pc, #52]	@ (8000acc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a98:	e002      	b.n	8000aa0 <LoopCopyDataInit>

08000a9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a9e:	3304      	adds	r3, #4

08000aa0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000aa0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aa2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000aa4:	d3f9      	bcc.n	8000a9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aa6:	4a0a      	ldr	r2, [pc, #40]	@ (8000ad0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000aa8:	4c0a      	ldr	r4, [pc, #40]	@ (8000ad4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000aaa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000aac:	e001      	b.n	8000ab2 <LoopFillZerobss>

08000aae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ab0:	3204      	adds	r2, #4

08000ab2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ab2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ab4:	d3fb      	bcc.n	8000aae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ab6:	f006 fb4b 	bl	8007150 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000aba:	f7ff fe93 	bl	80007e4 <main>
  bx  lr    
 8000abe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ac0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ac4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ac8:	2000015c 	.word	0x2000015c
  ldr r2, =_sidata
 8000acc:	080072c0 	.word	0x080072c0
  ldr r2, =_sbss
 8000ad0:	2000015c 	.word	0x2000015c
  ldr r4, =_ebss
 8000ad4:	20001efc 	.word	0x20001efc

08000ad8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ad8:	e7fe      	b.n	8000ad8 <ADC_IRQHandler>
	...

08000adc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ae0:	4b0e      	ldr	r3, [pc, #56]	@ (8000b1c <HAL_Init+0x40>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a0d      	ldr	r2, [pc, #52]	@ (8000b1c <HAL_Init+0x40>)
 8000ae6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000aea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000aec:	4b0b      	ldr	r3, [pc, #44]	@ (8000b1c <HAL_Init+0x40>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a0a      	ldr	r2, [pc, #40]	@ (8000b1c <HAL_Init+0x40>)
 8000af2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000af6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000af8:	4b08      	ldr	r3, [pc, #32]	@ (8000b1c <HAL_Init+0x40>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a07      	ldr	r2, [pc, #28]	@ (8000b1c <HAL_Init+0x40>)
 8000afe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b04:	2003      	movs	r0, #3
 8000b06:	f000 f94f 	bl	8000da8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b0a:	200f      	movs	r0, #15
 8000b0c:	f000 f808 	bl	8000b20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b10:	f7ff fee4 	bl	80008dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b14:	2300      	movs	r3, #0
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	40023c00 	.word	0x40023c00

08000b20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b28:	4b12      	ldr	r3, [pc, #72]	@ (8000b74 <HAL_InitTick+0x54>)
 8000b2a:	681a      	ldr	r2, [r3, #0]
 8000b2c:	4b12      	ldr	r3, [pc, #72]	@ (8000b78 <HAL_InitTick+0x58>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	4619      	mov	r1, r3
 8000b32:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b36:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f000 f967 	bl	8000e12 <HAL_SYSTICK_Config>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	e00e      	b.n	8000b6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	2b0f      	cmp	r3, #15
 8000b52:	d80a      	bhi.n	8000b6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b54:	2200      	movs	r2, #0
 8000b56:	6879      	ldr	r1, [r7, #4]
 8000b58:	f04f 30ff 	mov.w	r0, #4294967295
 8000b5c:	f000 f92f 	bl	8000dbe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b60:	4a06      	ldr	r2, [pc, #24]	@ (8000b7c <HAL_InitTick+0x5c>)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b66:	2300      	movs	r3, #0
 8000b68:	e000      	b.n	8000b6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b6a:	2301      	movs	r3, #1
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	3708      	adds	r7, #8
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	20000010 	.word	0x20000010
 8000b78:	20000018 	.word	0x20000018
 8000b7c:	20000014 	.word	0x20000014

08000b80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b84:	4b06      	ldr	r3, [pc, #24]	@ (8000ba0 <HAL_IncTick+0x20>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	461a      	mov	r2, r3
 8000b8a:	4b06      	ldr	r3, [pc, #24]	@ (8000ba4 <HAL_IncTick+0x24>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4413      	add	r3, r2
 8000b90:	4a04      	ldr	r2, [pc, #16]	@ (8000ba4 <HAL_IncTick+0x24>)
 8000b92:	6013      	str	r3, [r2, #0]
}
 8000b94:	bf00      	nop
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	20000018 	.word	0x20000018
 8000ba4:	200001c8 	.word	0x200001c8

08000ba8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  return uwTick;
 8000bac:	4b03      	ldr	r3, [pc, #12]	@ (8000bbc <HAL_GetTick+0x14>)
 8000bae:	681b      	ldr	r3, [r3, #0]
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	200001c8 	.word	0x200001c8

08000bc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b084      	sub	sp, #16
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bc8:	f7ff ffee 	bl	8000ba8 <HAL_GetTick>
 8000bcc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bd8:	d005      	beq.n	8000be6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bda:	4b0a      	ldr	r3, [pc, #40]	@ (8000c04 <HAL_Delay+0x44>)
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	461a      	mov	r2, r3
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	4413      	add	r3, r2
 8000be4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000be6:	bf00      	nop
 8000be8:	f7ff ffde 	bl	8000ba8 <HAL_GetTick>
 8000bec:	4602      	mov	r2, r0
 8000bee:	68bb      	ldr	r3, [r7, #8]
 8000bf0:	1ad3      	subs	r3, r2, r3
 8000bf2:	68fa      	ldr	r2, [r7, #12]
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	d8f7      	bhi.n	8000be8 <HAL_Delay+0x28>
  {
  }
}
 8000bf8:	bf00      	nop
 8000bfa:	bf00      	nop
 8000bfc:	3710      	adds	r7, #16
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	20000018 	.word	0x20000018

08000c08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b085      	sub	sp, #20
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	f003 0307 	and.w	r3, r3, #7
 8000c16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c18:	4b0c      	ldr	r3, [pc, #48]	@ (8000c4c <__NVIC_SetPriorityGrouping+0x44>)
 8000c1a:	68db      	ldr	r3, [r3, #12]
 8000c1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c1e:	68ba      	ldr	r2, [r7, #8]
 8000c20:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c24:	4013      	ands	r3, r2
 8000c26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c30:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c3a:	4a04      	ldr	r2, [pc, #16]	@ (8000c4c <__NVIC_SetPriorityGrouping+0x44>)
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	60d3      	str	r3, [r2, #12]
}
 8000c40:	bf00      	nop
 8000c42:	3714      	adds	r7, #20
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr
 8000c4c:	e000ed00 	.word	0xe000ed00

08000c50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c54:	4b04      	ldr	r3, [pc, #16]	@ (8000c68 <__NVIC_GetPriorityGrouping+0x18>)
 8000c56:	68db      	ldr	r3, [r3, #12]
 8000c58:	0a1b      	lsrs	r3, r3, #8
 8000c5a:	f003 0307 	and.w	r3, r3, #7
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr
 8000c68:	e000ed00 	.word	0xe000ed00

08000c6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	4603      	mov	r3, r0
 8000c74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	db0b      	blt.n	8000c96 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c7e:	79fb      	ldrb	r3, [r7, #7]
 8000c80:	f003 021f 	and.w	r2, r3, #31
 8000c84:	4907      	ldr	r1, [pc, #28]	@ (8000ca4 <__NVIC_EnableIRQ+0x38>)
 8000c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8a:	095b      	lsrs	r3, r3, #5
 8000c8c:	2001      	movs	r0, #1
 8000c8e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c96:	bf00      	nop
 8000c98:	370c      	adds	r7, #12
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	e000e100 	.word	0xe000e100

08000ca8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	4603      	mov	r3, r0
 8000cb0:	6039      	str	r1, [r7, #0]
 8000cb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	db0a      	blt.n	8000cd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	b2da      	uxtb	r2, r3
 8000cc0:	490c      	ldr	r1, [pc, #48]	@ (8000cf4 <__NVIC_SetPriority+0x4c>)
 8000cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc6:	0112      	lsls	r2, r2, #4
 8000cc8:	b2d2      	uxtb	r2, r2
 8000cca:	440b      	add	r3, r1
 8000ccc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cd0:	e00a      	b.n	8000ce8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	b2da      	uxtb	r2, r3
 8000cd6:	4908      	ldr	r1, [pc, #32]	@ (8000cf8 <__NVIC_SetPriority+0x50>)
 8000cd8:	79fb      	ldrb	r3, [r7, #7]
 8000cda:	f003 030f 	and.w	r3, r3, #15
 8000cde:	3b04      	subs	r3, #4
 8000ce0:	0112      	lsls	r2, r2, #4
 8000ce2:	b2d2      	uxtb	r2, r2
 8000ce4:	440b      	add	r3, r1
 8000ce6:	761a      	strb	r2, [r3, #24]
}
 8000ce8:	bf00      	nop
 8000cea:	370c      	adds	r7, #12
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr
 8000cf4:	e000e100 	.word	0xe000e100
 8000cf8:	e000ed00 	.word	0xe000ed00

08000cfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b089      	sub	sp, #36	@ 0x24
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	60f8      	str	r0, [r7, #12]
 8000d04:	60b9      	str	r1, [r7, #8]
 8000d06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	f003 0307 	and.w	r3, r3, #7
 8000d0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d10:	69fb      	ldr	r3, [r7, #28]
 8000d12:	f1c3 0307 	rsb	r3, r3, #7
 8000d16:	2b04      	cmp	r3, #4
 8000d18:	bf28      	it	cs
 8000d1a:	2304      	movcs	r3, #4
 8000d1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d1e:	69fb      	ldr	r3, [r7, #28]
 8000d20:	3304      	adds	r3, #4
 8000d22:	2b06      	cmp	r3, #6
 8000d24:	d902      	bls.n	8000d2c <NVIC_EncodePriority+0x30>
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	3b03      	subs	r3, #3
 8000d2a:	e000      	b.n	8000d2e <NVIC_EncodePriority+0x32>
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d30:	f04f 32ff 	mov.w	r2, #4294967295
 8000d34:	69bb      	ldr	r3, [r7, #24]
 8000d36:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3a:	43da      	mvns	r2, r3
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	401a      	ands	r2, r3
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d44:	f04f 31ff 	mov.w	r1, #4294967295
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d4e:	43d9      	mvns	r1, r3
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d54:	4313      	orrs	r3, r2
         );
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	3724      	adds	r7, #36	@ 0x24
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
	...

08000d64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	3b01      	subs	r3, #1
 8000d70:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d74:	d301      	bcc.n	8000d7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d76:	2301      	movs	r3, #1
 8000d78:	e00f      	b.n	8000d9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d7a:	4a0a      	ldr	r2, [pc, #40]	@ (8000da4 <SysTick_Config+0x40>)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	3b01      	subs	r3, #1
 8000d80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d82:	210f      	movs	r1, #15
 8000d84:	f04f 30ff 	mov.w	r0, #4294967295
 8000d88:	f7ff ff8e 	bl	8000ca8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d8c:	4b05      	ldr	r3, [pc, #20]	@ (8000da4 <SysTick_Config+0x40>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d92:	4b04      	ldr	r3, [pc, #16]	@ (8000da4 <SysTick_Config+0x40>)
 8000d94:	2207      	movs	r2, #7
 8000d96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d98:	2300      	movs	r3, #0
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3708      	adds	r7, #8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	e000e010 	.word	0xe000e010

08000da8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000db0:	6878      	ldr	r0, [r7, #4]
 8000db2:	f7ff ff29 	bl	8000c08 <__NVIC_SetPriorityGrouping>
}
 8000db6:	bf00      	nop
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}

08000dbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	b086      	sub	sp, #24
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	60b9      	str	r1, [r7, #8]
 8000dc8:	607a      	str	r2, [r7, #4]
 8000dca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dd0:	f7ff ff3e 	bl	8000c50 <__NVIC_GetPriorityGrouping>
 8000dd4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dd6:	687a      	ldr	r2, [r7, #4]
 8000dd8:	68b9      	ldr	r1, [r7, #8]
 8000dda:	6978      	ldr	r0, [r7, #20]
 8000ddc:	f7ff ff8e 	bl	8000cfc <NVIC_EncodePriority>
 8000de0:	4602      	mov	r2, r0
 8000de2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000de6:	4611      	mov	r1, r2
 8000de8:	4618      	mov	r0, r3
 8000dea:	f7ff ff5d 	bl	8000ca8 <__NVIC_SetPriority>
}
 8000dee:	bf00      	nop
 8000df0:	3718      	adds	r7, #24
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}

08000df6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000df6:	b580      	push	{r7, lr}
 8000df8:	b082      	sub	sp, #8
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e04:	4618      	mov	r0, r3
 8000e06:	f7ff ff31 	bl	8000c6c <__NVIC_EnableIRQ>
}
 8000e0a:	bf00      	nop
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}

08000e12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e12:	b580      	push	{r7, lr}
 8000e14:	b082      	sub	sp, #8
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e1a:	6878      	ldr	r0, [r7, #4]
 8000e1c:	f7ff ffa2 	bl	8000d64 <SysTick_Config>
 8000e20:	4603      	mov	r3, r0
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
	...

08000e2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b089      	sub	sp, #36	@ 0x24
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
 8000e34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e36:	2300      	movs	r3, #0
 8000e38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e42:	2300      	movs	r3, #0
 8000e44:	61fb      	str	r3, [r7, #28]
 8000e46:	e159      	b.n	80010fc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e48:	2201      	movs	r2, #1
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	697a      	ldr	r2, [r7, #20]
 8000e58:	4013      	ands	r3, r2
 8000e5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e5c:	693a      	ldr	r2, [r7, #16]
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	429a      	cmp	r2, r3
 8000e62:	f040 8148 	bne.w	80010f6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	f003 0303 	and.w	r3, r3, #3
 8000e6e:	2b01      	cmp	r3, #1
 8000e70:	d005      	beq.n	8000e7e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e7a:	2b02      	cmp	r3, #2
 8000e7c:	d130      	bne.n	8000ee0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	689b      	ldr	r3, [r3, #8]
 8000e82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e84:	69fb      	ldr	r3, [r7, #28]
 8000e86:	005b      	lsls	r3, r3, #1
 8000e88:	2203      	movs	r2, #3
 8000e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8e:	43db      	mvns	r3, r3
 8000e90:	69ba      	ldr	r2, [r7, #24]
 8000e92:	4013      	ands	r3, r2
 8000e94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	68da      	ldr	r2, [r3, #12]
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	005b      	lsls	r3, r3, #1
 8000e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea2:	69ba      	ldr	r2, [r7, #24]
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	69ba      	ldr	r2, [r7, #24]
 8000eac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	43db      	mvns	r3, r3
 8000ebe:	69ba      	ldr	r2, [r7, #24]
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	091b      	lsrs	r3, r3, #4
 8000eca:	f003 0201 	and.w	r2, r3, #1
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed4:	69ba      	ldr	r2, [r7, #24]
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	69ba      	ldr	r2, [r7, #24]
 8000ede:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	f003 0303 	and.w	r3, r3, #3
 8000ee8:	2b03      	cmp	r3, #3
 8000eea:	d017      	beq.n	8000f1c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	68db      	ldr	r3, [r3, #12]
 8000ef0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	005b      	lsls	r3, r3, #1
 8000ef6:	2203      	movs	r2, #3
 8000ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8000efc:	43db      	mvns	r3, r3
 8000efe:	69ba      	ldr	r2, [r7, #24]
 8000f00:	4013      	ands	r3, r2
 8000f02:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	689a      	ldr	r2, [r3, #8]
 8000f08:	69fb      	ldr	r3, [r7, #28]
 8000f0a:	005b      	lsls	r3, r3, #1
 8000f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f10:	69ba      	ldr	r2, [r7, #24]
 8000f12:	4313      	orrs	r3, r2
 8000f14:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	f003 0303 	and.w	r3, r3, #3
 8000f24:	2b02      	cmp	r3, #2
 8000f26:	d123      	bne.n	8000f70 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	08da      	lsrs	r2, r3, #3
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	3208      	adds	r2, #8
 8000f30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f34:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	f003 0307 	and.w	r3, r3, #7
 8000f3c:	009b      	lsls	r3, r3, #2
 8000f3e:	220f      	movs	r2, #15
 8000f40:	fa02 f303 	lsl.w	r3, r2, r3
 8000f44:	43db      	mvns	r3, r3
 8000f46:	69ba      	ldr	r2, [r7, #24]
 8000f48:	4013      	ands	r3, r2
 8000f4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	691a      	ldr	r2, [r3, #16]
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	f003 0307 	and.w	r3, r3, #7
 8000f56:	009b      	lsls	r3, r3, #2
 8000f58:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5c:	69ba      	ldr	r2, [r7, #24]
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	08da      	lsrs	r2, r3, #3
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	3208      	adds	r2, #8
 8000f6a:	69b9      	ldr	r1, [r7, #24]
 8000f6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	005b      	lsls	r3, r3, #1
 8000f7a:	2203      	movs	r2, #3
 8000f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f80:	43db      	mvns	r3, r3
 8000f82:	69ba      	ldr	r2, [r7, #24]
 8000f84:	4013      	ands	r3, r2
 8000f86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f003 0203 	and.w	r2, r3, #3
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	005b      	lsls	r3, r3, #1
 8000f94:	fa02 f303 	lsl.w	r3, r2, r3
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	f000 80a2 	beq.w	80010f6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	60fb      	str	r3, [r7, #12]
 8000fb6:	4b57      	ldr	r3, [pc, #348]	@ (8001114 <HAL_GPIO_Init+0x2e8>)
 8000fb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fba:	4a56      	ldr	r2, [pc, #344]	@ (8001114 <HAL_GPIO_Init+0x2e8>)
 8000fbc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fc0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fc2:	4b54      	ldr	r3, [pc, #336]	@ (8001114 <HAL_GPIO_Init+0x2e8>)
 8000fc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fc6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fca:	60fb      	str	r3, [r7, #12]
 8000fcc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fce:	4a52      	ldr	r2, [pc, #328]	@ (8001118 <HAL_GPIO_Init+0x2ec>)
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	089b      	lsrs	r3, r3, #2
 8000fd4:	3302      	adds	r3, #2
 8000fd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	f003 0303 	and.w	r3, r3, #3
 8000fe2:	009b      	lsls	r3, r3, #2
 8000fe4:	220f      	movs	r2, #15
 8000fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fea:	43db      	mvns	r3, r3
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	4013      	ands	r3, r2
 8000ff0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4a49      	ldr	r2, [pc, #292]	@ (800111c <HAL_GPIO_Init+0x2f0>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d019      	beq.n	800102e <HAL_GPIO_Init+0x202>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4a48      	ldr	r2, [pc, #288]	@ (8001120 <HAL_GPIO_Init+0x2f4>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d013      	beq.n	800102a <HAL_GPIO_Init+0x1fe>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4a47      	ldr	r2, [pc, #284]	@ (8001124 <HAL_GPIO_Init+0x2f8>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d00d      	beq.n	8001026 <HAL_GPIO_Init+0x1fa>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4a46      	ldr	r2, [pc, #280]	@ (8001128 <HAL_GPIO_Init+0x2fc>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d007      	beq.n	8001022 <HAL_GPIO_Init+0x1f6>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4a45      	ldr	r2, [pc, #276]	@ (800112c <HAL_GPIO_Init+0x300>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d101      	bne.n	800101e <HAL_GPIO_Init+0x1f2>
 800101a:	2304      	movs	r3, #4
 800101c:	e008      	b.n	8001030 <HAL_GPIO_Init+0x204>
 800101e:	2307      	movs	r3, #7
 8001020:	e006      	b.n	8001030 <HAL_GPIO_Init+0x204>
 8001022:	2303      	movs	r3, #3
 8001024:	e004      	b.n	8001030 <HAL_GPIO_Init+0x204>
 8001026:	2302      	movs	r3, #2
 8001028:	e002      	b.n	8001030 <HAL_GPIO_Init+0x204>
 800102a:	2301      	movs	r3, #1
 800102c:	e000      	b.n	8001030 <HAL_GPIO_Init+0x204>
 800102e:	2300      	movs	r3, #0
 8001030:	69fa      	ldr	r2, [r7, #28]
 8001032:	f002 0203 	and.w	r2, r2, #3
 8001036:	0092      	lsls	r2, r2, #2
 8001038:	4093      	lsls	r3, r2
 800103a:	69ba      	ldr	r2, [r7, #24]
 800103c:	4313      	orrs	r3, r2
 800103e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001040:	4935      	ldr	r1, [pc, #212]	@ (8001118 <HAL_GPIO_Init+0x2ec>)
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	089b      	lsrs	r3, r3, #2
 8001046:	3302      	adds	r3, #2
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800104e:	4b38      	ldr	r3, [pc, #224]	@ (8001130 <HAL_GPIO_Init+0x304>)
 8001050:	689b      	ldr	r3, [r3, #8]
 8001052:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	43db      	mvns	r3, r3
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	4013      	ands	r3, r2
 800105c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001066:	2b00      	cmp	r3, #0
 8001068:	d003      	beq.n	8001072 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800106a:	69ba      	ldr	r2, [r7, #24]
 800106c:	693b      	ldr	r3, [r7, #16]
 800106e:	4313      	orrs	r3, r2
 8001070:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001072:	4a2f      	ldr	r2, [pc, #188]	@ (8001130 <HAL_GPIO_Init+0x304>)
 8001074:	69bb      	ldr	r3, [r7, #24]
 8001076:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001078:	4b2d      	ldr	r3, [pc, #180]	@ (8001130 <HAL_GPIO_Init+0x304>)
 800107a:	68db      	ldr	r3, [r3, #12]
 800107c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	43db      	mvns	r3, r3
 8001082:	69ba      	ldr	r2, [r7, #24]
 8001084:	4013      	ands	r3, r2
 8001086:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001090:	2b00      	cmp	r3, #0
 8001092:	d003      	beq.n	800109c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	4313      	orrs	r3, r2
 800109a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800109c:	4a24      	ldr	r2, [pc, #144]	@ (8001130 <HAL_GPIO_Init+0x304>)
 800109e:	69bb      	ldr	r3, [r7, #24]
 80010a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010a2:	4b23      	ldr	r3, [pc, #140]	@ (8001130 <HAL_GPIO_Init+0x304>)
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	43db      	mvns	r3, r3
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	4013      	ands	r3, r2
 80010b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d003      	beq.n	80010c6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80010be:	69ba      	ldr	r2, [r7, #24]
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	4313      	orrs	r3, r2
 80010c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010c6:	4a1a      	ldr	r2, [pc, #104]	@ (8001130 <HAL_GPIO_Init+0x304>)
 80010c8:	69bb      	ldr	r3, [r7, #24]
 80010ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010cc:	4b18      	ldr	r3, [pc, #96]	@ (8001130 <HAL_GPIO_Init+0x304>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	43db      	mvns	r3, r3
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	4013      	ands	r3, r2
 80010da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d003      	beq.n	80010f0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010f0:	4a0f      	ldr	r2, [pc, #60]	@ (8001130 <HAL_GPIO_Init+0x304>)
 80010f2:	69bb      	ldr	r3, [r7, #24]
 80010f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	3301      	adds	r3, #1
 80010fa:	61fb      	str	r3, [r7, #28]
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	2b0f      	cmp	r3, #15
 8001100:	f67f aea2 	bls.w	8000e48 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001104:	bf00      	nop
 8001106:	bf00      	nop
 8001108:	3724      	adds	r7, #36	@ 0x24
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	40023800 	.word	0x40023800
 8001118:	40013800 	.word	0x40013800
 800111c:	40020000 	.word	0x40020000
 8001120:	40020400 	.word	0x40020400
 8001124:	40020800 	.word	0x40020800
 8001128:	40020c00 	.word	0x40020c00
 800112c:	40021000 	.word	0x40021000
 8001130:	40013c00 	.word	0x40013c00

08001134 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001134:	b480      	push	{r7}
 8001136:	b085      	sub	sp, #20
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	460b      	mov	r3, r1
 800113e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	691a      	ldr	r2, [r3, #16]
 8001144:	887b      	ldrh	r3, [r7, #2]
 8001146:	4013      	ands	r3, r2
 8001148:	2b00      	cmp	r3, #0
 800114a:	d002      	beq.n	8001152 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800114c:	2301      	movs	r3, #1
 800114e:	73fb      	strb	r3, [r7, #15]
 8001150:	e001      	b.n	8001156 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001152:	2300      	movs	r3, #0
 8001154:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001156:	7bfb      	ldrb	r3, [r7, #15]
}
 8001158:	4618      	mov	r0, r3
 800115a:	3714      	adds	r7, #20
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr

08001164 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800116e:	4b08      	ldr	r3, [pc, #32]	@ (8001190 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001170:	695a      	ldr	r2, [r3, #20]
 8001172:	88fb      	ldrh	r3, [r7, #6]
 8001174:	4013      	ands	r3, r2
 8001176:	2b00      	cmp	r3, #0
 8001178:	d006      	beq.n	8001188 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800117a:	4a05      	ldr	r2, [pc, #20]	@ (8001190 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800117c:	88fb      	ldrh	r3, [r7, #6]
 800117e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001180:	88fb      	ldrh	r3, [r7, #6]
 8001182:	4618      	mov	r0, r3
 8001184:	f7ff f9e0 	bl	8000548 <HAL_GPIO_EXTI_Callback>
  }
}
 8001188:	bf00      	nop
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	40013c00 	.word	0x40013c00

08001194 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b086      	sub	sp, #24
 8001198:	af02      	add	r7, sp, #8
 800119a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d101      	bne.n	80011a6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	e101      	b.n	80013aa <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d106      	bne.n	80011c6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2200      	movs	r2, #0
 80011bc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f005 fb75 	bl	80068b0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2203      	movs	r2, #3
 80011ca:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80011ce:	68bb      	ldr	r3, [r7, #8]
 80011d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80011d4:	d102      	bne.n	80011dc <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2200      	movs	r2, #0
 80011da:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f001 ff6e 	bl	80030c2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6818      	ldr	r0, [r3, #0]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	7c1a      	ldrb	r2, [r3, #16]
 80011ee:	f88d 2000 	strb.w	r2, [sp]
 80011f2:	3304      	adds	r3, #4
 80011f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011f6:	f001 fe4d 	bl	8002e94 <USB_CoreInit>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d005      	beq.n	800120c <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2202      	movs	r2, #2
 8001204:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001208:	2301      	movs	r3, #1
 800120a:	e0ce      	b.n	80013aa <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	2100      	movs	r1, #0
 8001212:	4618      	mov	r0, r3
 8001214:	f001 ff66 	bl	80030e4 <USB_SetCurrentMode>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d005      	beq.n	800122a <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2202      	movs	r2, #2
 8001222:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001226:	2301      	movs	r3, #1
 8001228:	e0bf      	b.n	80013aa <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800122a:	2300      	movs	r3, #0
 800122c:	73fb      	strb	r3, [r7, #15]
 800122e:	e04a      	b.n	80012c6 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001230:	7bfa      	ldrb	r2, [r7, #15]
 8001232:	6879      	ldr	r1, [r7, #4]
 8001234:	4613      	mov	r3, r2
 8001236:	00db      	lsls	r3, r3, #3
 8001238:	4413      	add	r3, r2
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	440b      	add	r3, r1
 800123e:	3315      	adds	r3, #21
 8001240:	2201      	movs	r2, #1
 8001242:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001244:	7bfa      	ldrb	r2, [r7, #15]
 8001246:	6879      	ldr	r1, [r7, #4]
 8001248:	4613      	mov	r3, r2
 800124a:	00db      	lsls	r3, r3, #3
 800124c:	4413      	add	r3, r2
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	440b      	add	r3, r1
 8001252:	3314      	adds	r3, #20
 8001254:	7bfa      	ldrb	r2, [r7, #15]
 8001256:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001258:	7bfa      	ldrb	r2, [r7, #15]
 800125a:	7bfb      	ldrb	r3, [r7, #15]
 800125c:	b298      	uxth	r0, r3
 800125e:	6879      	ldr	r1, [r7, #4]
 8001260:	4613      	mov	r3, r2
 8001262:	00db      	lsls	r3, r3, #3
 8001264:	4413      	add	r3, r2
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	440b      	add	r3, r1
 800126a:	332e      	adds	r3, #46	@ 0x2e
 800126c:	4602      	mov	r2, r0
 800126e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001270:	7bfa      	ldrb	r2, [r7, #15]
 8001272:	6879      	ldr	r1, [r7, #4]
 8001274:	4613      	mov	r3, r2
 8001276:	00db      	lsls	r3, r3, #3
 8001278:	4413      	add	r3, r2
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	440b      	add	r3, r1
 800127e:	3318      	adds	r3, #24
 8001280:	2200      	movs	r2, #0
 8001282:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001284:	7bfa      	ldrb	r2, [r7, #15]
 8001286:	6879      	ldr	r1, [r7, #4]
 8001288:	4613      	mov	r3, r2
 800128a:	00db      	lsls	r3, r3, #3
 800128c:	4413      	add	r3, r2
 800128e:	009b      	lsls	r3, r3, #2
 8001290:	440b      	add	r3, r1
 8001292:	331c      	adds	r3, #28
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001298:	7bfa      	ldrb	r2, [r7, #15]
 800129a:	6879      	ldr	r1, [r7, #4]
 800129c:	4613      	mov	r3, r2
 800129e:	00db      	lsls	r3, r3, #3
 80012a0:	4413      	add	r3, r2
 80012a2:	009b      	lsls	r3, r3, #2
 80012a4:	440b      	add	r3, r1
 80012a6:	3320      	adds	r3, #32
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80012ac:	7bfa      	ldrb	r2, [r7, #15]
 80012ae:	6879      	ldr	r1, [r7, #4]
 80012b0:	4613      	mov	r3, r2
 80012b2:	00db      	lsls	r3, r3, #3
 80012b4:	4413      	add	r3, r2
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	440b      	add	r3, r1
 80012ba:	3324      	adds	r3, #36	@ 0x24
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012c0:	7bfb      	ldrb	r3, [r7, #15]
 80012c2:	3301      	adds	r3, #1
 80012c4:	73fb      	strb	r3, [r7, #15]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	791b      	ldrb	r3, [r3, #4]
 80012ca:	7bfa      	ldrb	r2, [r7, #15]
 80012cc:	429a      	cmp	r2, r3
 80012ce:	d3af      	bcc.n	8001230 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012d0:	2300      	movs	r3, #0
 80012d2:	73fb      	strb	r3, [r7, #15]
 80012d4:	e044      	b.n	8001360 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80012d6:	7bfa      	ldrb	r2, [r7, #15]
 80012d8:	6879      	ldr	r1, [r7, #4]
 80012da:	4613      	mov	r3, r2
 80012dc:	00db      	lsls	r3, r3, #3
 80012de:	4413      	add	r3, r2
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	440b      	add	r3, r1
 80012e4:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80012e8:	2200      	movs	r2, #0
 80012ea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80012ec:	7bfa      	ldrb	r2, [r7, #15]
 80012ee:	6879      	ldr	r1, [r7, #4]
 80012f0:	4613      	mov	r3, r2
 80012f2:	00db      	lsls	r3, r3, #3
 80012f4:	4413      	add	r3, r2
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	440b      	add	r3, r1
 80012fa:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80012fe:	7bfa      	ldrb	r2, [r7, #15]
 8001300:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001302:	7bfa      	ldrb	r2, [r7, #15]
 8001304:	6879      	ldr	r1, [r7, #4]
 8001306:	4613      	mov	r3, r2
 8001308:	00db      	lsls	r3, r3, #3
 800130a:	4413      	add	r3, r2
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	440b      	add	r3, r1
 8001310:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001314:	2200      	movs	r2, #0
 8001316:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001318:	7bfa      	ldrb	r2, [r7, #15]
 800131a:	6879      	ldr	r1, [r7, #4]
 800131c:	4613      	mov	r3, r2
 800131e:	00db      	lsls	r3, r3, #3
 8001320:	4413      	add	r3, r2
 8001322:	009b      	lsls	r3, r3, #2
 8001324:	440b      	add	r3, r1
 8001326:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800132a:	2200      	movs	r2, #0
 800132c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800132e:	7bfa      	ldrb	r2, [r7, #15]
 8001330:	6879      	ldr	r1, [r7, #4]
 8001332:	4613      	mov	r3, r2
 8001334:	00db      	lsls	r3, r3, #3
 8001336:	4413      	add	r3, r2
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	440b      	add	r3, r1
 800133c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001344:	7bfa      	ldrb	r2, [r7, #15]
 8001346:	6879      	ldr	r1, [r7, #4]
 8001348:	4613      	mov	r3, r2
 800134a:	00db      	lsls	r3, r3, #3
 800134c:	4413      	add	r3, r2
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	440b      	add	r3, r1
 8001352:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800135a:	7bfb      	ldrb	r3, [r7, #15]
 800135c:	3301      	adds	r3, #1
 800135e:	73fb      	strb	r3, [r7, #15]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	791b      	ldrb	r3, [r3, #4]
 8001364:	7bfa      	ldrb	r2, [r7, #15]
 8001366:	429a      	cmp	r2, r3
 8001368:	d3b5      	bcc.n	80012d6 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6818      	ldr	r0, [r3, #0]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	7c1a      	ldrb	r2, [r3, #16]
 8001372:	f88d 2000 	strb.w	r2, [sp]
 8001376:	3304      	adds	r3, #4
 8001378:	cb0e      	ldmia	r3, {r1, r2, r3}
 800137a:	f001 feff 	bl	800317c <USB_DevInit>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d005      	beq.n	8001390 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2202      	movs	r2, #2
 8001388:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800138c:	2301      	movs	r3, #1
 800138e:	e00c      	b.n	80013aa <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2200      	movs	r2, #0
 8001394:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2201      	movs	r2, #1
 800139a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4618      	mov	r0, r3
 80013a4:	f002 ff43 	bl	800422e <USB_DevDisconnect>

  return HAL_OK;
 80013a8:	2300      	movs	r3, #0
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3710      	adds	r7, #16
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b084      	sub	sp, #16
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d101      	bne.n	80013ce <HAL_PCD_Start+0x1c>
 80013ca:	2302      	movs	r3, #2
 80013cc:	e022      	b.n	8001414 <HAL_PCD_Start+0x62>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2201      	movs	r2, #1
 80013d2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	68db      	ldr	r3, [r3, #12]
 80013da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d009      	beq.n	80013f6 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d105      	bne.n	80013f6 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013ee:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4618      	mov	r0, r3
 80013fc:	f001 fe50 	bl	80030a0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4618      	mov	r0, r3
 8001406:	f002 fef1 	bl	80041ec <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2200      	movs	r2, #0
 800140e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001412:	2300      	movs	r3, #0
}
 8001414:	4618      	mov	r0, r3
 8001416:	3710      	adds	r7, #16
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}

0800141c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800141c:	b590      	push	{r4, r7, lr}
 800141e:	b08d      	sub	sp, #52	@ 0x34
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800142a:	6a3b      	ldr	r3, [r7, #32]
 800142c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4618      	mov	r0, r3
 8001434:	f002 ffaf 	bl	8004396 <USB_GetMode>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	f040 848c 	bne.w	8001d58 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4618      	mov	r0, r3
 8001446:	f002 ff13 	bl	8004270 <USB_ReadInterrupts>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	f000 8482 	beq.w	8001d56 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	0a1b      	lsrs	r3, r3, #8
 800145c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4618      	mov	r0, r3
 800146c:	f002 ff00 	bl	8004270 <USB_ReadInterrupts>
 8001470:	4603      	mov	r3, r0
 8001472:	f003 0302 	and.w	r3, r3, #2
 8001476:	2b02      	cmp	r3, #2
 8001478:	d107      	bne.n	800148a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	695a      	ldr	r2, [r3, #20]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f002 0202 	and.w	r2, r2, #2
 8001488:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4618      	mov	r0, r3
 8001490:	f002 feee 	bl	8004270 <USB_ReadInterrupts>
 8001494:	4603      	mov	r3, r0
 8001496:	f003 0310 	and.w	r3, r3, #16
 800149a:	2b10      	cmp	r3, #16
 800149c:	d161      	bne.n	8001562 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	699a      	ldr	r2, [r3, #24]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f022 0210 	bic.w	r2, r2, #16
 80014ac:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80014ae:	6a3b      	ldr	r3, [r7, #32]
 80014b0:	6a1b      	ldr	r3, [r3, #32]
 80014b2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	f003 020f 	and.w	r2, r3, #15
 80014ba:	4613      	mov	r3, r2
 80014bc:	00db      	lsls	r3, r3, #3
 80014be:	4413      	add	r3, r2
 80014c0:	009b      	lsls	r3, r3, #2
 80014c2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80014c6:	687a      	ldr	r2, [r7, #4]
 80014c8:	4413      	add	r3, r2
 80014ca:	3304      	adds	r3, #4
 80014cc:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80014ce:	69bb      	ldr	r3, [r7, #24]
 80014d0:	0c5b      	lsrs	r3, r3, #17
 80014d2:	f003 030f 	and.w	r3, r3, #15
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	d124      	bne.n	8001524 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80014da:	69ba      	ldr	r2, [r7, #24]
 80014dc:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80014e0:	4013      	ands	r3, r2
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d035      	beq.n	8001552 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80014ea:	69bb      	ldr	r3, [r7, #24]
 80014ec:	091b      	lsrs	r3, r3, #4
 80014ee:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80014f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	461a      	mov	r2, r3
 80014f8:	6a38      	ldr	r0, [r7, #32]
 80014fa:	f002 fd25 	bl	8003f48 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	68da      	ldr	r2, [r3, #12]
 8001502:	69bb      	ldr	r3, [r7, #24]
 8001504:	091b      	lsrs	r3, r3, #4
 8001506:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800150a:	441a      	add	r2, r3
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	695a      	ldr	r2, [r3, #20]
 8001514:	69bb      	ldr	r3, [r7, #24]
 8001516:	091b      	lsrs	r3, r3, #4
 8001518:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800151c:	441a      	add	r2, r3
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	615a      	str	r2, [r3, #20]
 8001522:	e016      	b.n	8001552 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001524:	69bb      	ldr	r3, [r7, #24]
 8001526:	0c5b      	lsrs	r3, r3, #17
 8001528:	f003 030f 	and.w	r3, r3, #15
 800152c:	2b06      	cmp	r3, #6
 800152e:	d110      	bne.n	8001552 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001536:	2208      	movs	r2, #8
 8001538:	4619      	mov	r1, r3
 800153a:	6a38      	ldr	r0, [r7, #32]
 800153c:	f002 fd04 	bl	8003f48 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	695a      	ldr	r2, [r3, #20]
 8001544:	69bb      	ldr	r3, [r7, #24]
 8001546:	091b      	lsrs	r3, r3, #4
 8001548:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800154c:	441a      	add	r2, r3
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	699a      	ldr	r2, [r3, #24]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f042 0210 	orr.w	r2, r2, #16
 8001560:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4618      	mov	r0, r3
 8001568:	f002 fe82 	bl	8004270 <USB_ReadInterrupts>
 800156c:	4603      	mov	r3, r0
 800156e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001572:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001576:	f040 80a7 	bne.w	80016c8 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800157a:	2300      	movs	r3, #0
 800157c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4618      	mov	r0, r3
 8001584:	f002 fe87 	bl	8004296 <USB_ReadDevAllOutEpInterrupt>
 8001588:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800158a:	e099      	b.n	80016c0 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800158c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800158e:	f003 0301 	and.w	r3, r3, #1
 8001592:	2b00      	cmp	r3, #0
 8001594:	f000 808e 	beq.w	80016b4 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800159e:	b2d2      	uxtb	r2, r2
 80015a0:	4611      	mov	r1, r2
 80015a2:	4618      	mov	r0, r3
 80015a4:	f002 feab 	bl	80042fe <USB_ReadDevOutEPInterrupt>
 80015a8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	f003 0301 	and.w	r3, r3, #1
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d00c      	beq.n	80015ce <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80015b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015b6:	015a      	lsls	r2, r3, #5
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	4413      	add	r3, r2
 80015bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80015c0:	461a      	mov	r2, r3
 80015c2:	2301      	movs	r3, #1
 80015c4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80015c6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	f000 fea1 	bl	8002310 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	f003 0308 	and.w	r3, r3, #8
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d00c      	beq.n	80015f2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80015d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015da:	015a      	lsls	r2, r3, #5
 80015dc:	69fb      	ldr	r3, [r7, #28]
 80015de:	4413      	add	r3, r2
 80015e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80015e4:	461a      	mov	r2, r3
 80015e6:	2308      	movs	r3, #8
 80015e8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80015ea:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	f000 ff77 	bl	80024e0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	f003 0310 	and.w	r3, r3, #16
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d008      	beq.n	800160e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80015fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015fe:	015a      	lsls	r2, r3, #5
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	4413      	add	r3, r2
 8001604:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001608:	461a      	mov	r2, r3
 800160a:	2310      	movs	r3, #16
 800160c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	f003 0302 	and.w	r3, r3, #2
 8001614:	2b00      	cmp	r3, #0
 8001616:	d030      	beq.n	800167a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001618:	6a3b      	ldr	r3, [r7, #32]
 800161a:	695b      	ldr	r3, [r3, #20]
 800161c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001620:	2b80      	cmp	r3, #128	@ 0x80
 8001622:	d109      	bne.n	8001638 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	69fa      	ldr	r2, [r7, #28]
 800162e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001632:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001636:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001638:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800163a:	4613      	mov	r3, r2
 800163c:	00db      	lsls	r3, r3, #3
 800163e:	4413      	add	r3, r2
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001646:	687a      	ldr	r2, [r7, #4]
 8001648:	4413      	add	r3, r2
 800164a:	3304      	adds	r3, #4
 800164c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	78db      	ldrb	r3, [r3, #3]
 8001652:	2b01      	cmp	r3, #1
 8001654:	d108      	bne.n	8001668 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	2200      	movs	r2, #0
 800165a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800165c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800165e:	b2db      	uxtb	r3, r3
 8001660:	4619      	mov	r1, r3
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f005 fa20 	bl	8006aa8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800166a:	015a      	lsls	r2, r3, #5
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	4413      	add	r3, r2
 8001670:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001674:	461a      	mov	r2, r3
 8001676:	2302      	movs	r3, #2
 8001678:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	f003 0320 	and.w	r3, r3, #32
 8001680:	2b00      	cmp	r3, #0
 8001682:	d008      	beq.n	8001696 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001686:	015a      	lsls	r2, r3, #5
 8001688:	69fb      	ldr	r3, [r7, #28]
 800168a:	4413      	add	r3, r2
 800168c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001690:	461a      	mov	r2, r3
 8001692:	2320      	movs	r3, #32
 8001694:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800169c:	2b00      	cmp	r3, #0
 800169e:	d009      	beq.n	80016b4 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80016a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016a2:	015a      	lsls	r2, r3, #5
 80016a4:	69fb      	ldr	r3, [r7, #28]
 80016a6:	4413      	add	r3, r2
 80016a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80016ac:	461a      	mov	r2, r3
 80016ae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016b2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80016b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016b6:	3301      	adds	r3, #1
 80016b8:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80016ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016bc:	085b      	lsrs	r3, r3, #1
 80016be:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80016c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	f47f af62 	bne.w	800158c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4618      	mov	r0, r3
 80016ce:	f002 fdcf 	bl	8004270 <USB_ReadInterrupts>
 80016d2:	4603      	mov	r3, r0
 80016d4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80016d8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80016dc:	f040 80db 	bne.w	8001896 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4618      	mov	r0, r3
 80016e6:	f002 fdf0 	bl	80042ca <USB_ReadDevAllInEpInterrupt>
 80016ea:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80016ec:	2300      	movs	r3, #0
 80016ee:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80016f0:	e0cd      	b.n	800188e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80016f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016f4:	f003 0301 	and.w	r3, r3, #1
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	f000 80c2 	beq.w	8001882 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001704:	b2d2      	uxtb	r2, r2
 8001706:	4611      	mov	r1, r2
 8001708:	4618      	mov	r0, r3
 800170a:	f002 fe16 	bl	800433a <USB_ReadDevInEPInterrupt>
 800170e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	f003 0301 	and.w	r3, r3, #1
 8001716:	2b00      	cmp	r3, #0
 8001718:	d057      	beq.n	80017ca <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800171a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800171c:	f003 030f 	and.w	r3, r3, #15
 8001720:	2201      	movs	r2, #1
 8001722:	fa02 f303 	lsl.w	r3, r2, r3
 8001726:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800172e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	43db      	mvns	r3, r3
 8001734:	69f9      	ldr	r1, [r7, #28]
 8001736:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800173a:	4013      	ands	r3, r2
 800173c:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800173e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001740:	015a      	lsls	r2, r3, #5
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	4413      	add	r3, r2
 8001746:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800174a:	461a      	mov	r2, r3
 800174c:	2301      	movs	r3, #1
 800174e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	799b      	ldrb	r3, [r3, #6]
 8001754:	2b01      	cmp	r3, #1
 8001756:	d132      	bne.n	80017be <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001758:	6879      	ldr	r1, [r7, #4]
 800175a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800175c:	4613      	mov	r3, r2
 800175e:	00db      	lsls	r3, r3, #3
 8001760:	4413      	add	r3, r2
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	440b      	add	r3, r1
 8001766:	3320      	adds	r3, #32
 8001768:	6819      	ldr	r1, [r3, #0]
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800176e:	4613      	mov	r3, r2
 8001770:	00db      	lsls	r3, r3, #3
 8001772:	4413      	add	r3, r2
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	4403      	add	r3, r0
 8001778:	331c      	adds	r3, #28
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4419      	add	r1, r3
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001782:	4613      	mov	r3, r2
 8001784:	00db      	lsls	r3, r3, #3
 8001786:	4413      	add	r3, r2
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	4403      	add	r3, r0
 800178c:	3320      	adds	r3, #32
 800178e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001792:	2b00      	cmp	r3, #0
 8001794:	d113      	bne.n	80017be <HAL_PCD_IRQHandler+0x3a2>
 8001796:	6879      	ldr	r1, [r7, #4]
 8001798:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800179a:	4613      	mov	r3, r2
 800179c:	00db      	lsls	r3, r3, #3
 800179e:	4413      	add	r3, r2
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	440b      	add	r3, r1
 80017a4:	3324      	adds	r3, #36	@ 0x24
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d108      	bne.n	80017be <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6818      	ldr	r0, [r3, #0]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80017b6:	461a      	mov	r2, r3
 80017b8:	2101      	movs	r1, #1
 80017ba:	f002 fe1d 	bl	80043f8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80017be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	4619      	mov	r1, r3
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	f005 f8f4 	bl	80069b2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	f003 0308 	and.w	r3, r3, #8
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d008      	beq.n	80017e6 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80017d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017d6:	015a      	lsls	r2, r3, #5
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	4413      	add	r3, r2
 80017dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80017e0:	461a      	mov	r2, r3
 80017e2:	2308      	movs	r3, #8
 80017e4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	f003 0310 	and.w	r3, r3, #16
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d008      	beq.n	8001802 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80017f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017f2:	015a      	lsls	r2, r3, #5
 80017f4:	69fb      	ldr	r3, [r7, #28]
 80017f6:	4413      	add	r3, r2
 80017f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80017fc:	461a      	mov	r2, r3
 80017fe:	2310      	movs	r3, #16
 8001800:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001808:	2b00      	cmp	r3, #0
 800180a:	d008      	beq.n	800181e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800180c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800180e:	015a      	lsls	r2, r3, #5
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	4413      	add	r3, r2
 8001814:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001818:	461a      	mov	r2, r3
 800181a:	2340      	movs	r3, #64	@ 0x40
 800181c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	f003 0302 	and.w	r3, r3, #2
 8001824:	2b00      	cmp	r3, #0
 8001826:	d023      	beq.n	8001870 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001828:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800182a:	6a38      	ldr	r0, [r7, #32]
 800182c:	f001 fe0a 	bl	8003444 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001830:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001832:	4613      	mov	r3, r2
 8001834:	00db      	lsls	r3, r3, #3
 8001836:	4413      	add	r3, r2
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	3310      	adds	r3, #16
 800183c:	687a      	ldr	r2, [r7, #4]
 800183e:	4413      	add	r3, r2
 8001840:	3304      	adds	r3, #4
 8001842:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	78db      	ldrb	r3, [r3, #3]
 8001848:	2b01      	cmp	r3, #1
 800184a:	d108      	bne.n	800185e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	2200      	movs	r2, #0
 8001850:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001854:	b2db      	uxtb	r3, r3
 8001856:	4619      	mov	r1, r3
 8001858:	6878      	ldr	r0, [r7, #4]
 800185a:	f005 f937 	bl	8006acc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800185e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001860:	015a      	lsls	r2, r3, #5
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	4413      	add	r3, r2
 8001866:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800186a:	461a      	mov	r2, r3
 800186c:	2302      	movs	r3, #2
 800186e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001876:	2b00      	cmp	r3, #0
 8001878:	d003      	beq.n	8001882 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800187a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	f000 fcbb 	bl	80021f8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001884:	3301      	adds	r3, #1
 8001886:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001888:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800188a:	085b      	lsrs	r3, r3, #1
 800188c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800188e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001890:	2b00      	cmp	r3, #0
 8001892:	f47f af2e 	bne.w	80016f2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4618      	mov	r0, r3
 800189c:	f002 fce8 	bl	8004270 <USB_ReadInterrupts>
 80018a0:	4603      	mov	r3, r0
 80018a2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80018a6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80018aa:	d122      	bne.n	80018f2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	69fa      	ldr	r2, [r7, #28]
 80018b6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80018ba:	f023 0301 	bic.w	r3, r3, #1
 80018be:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d108      	bne.n	80018dc <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2200      	movs	r2, #0
 80018ce:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80018d2:	2100      	movs	r1, #0
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f000 fea1 	bl	800261c <HAL_PCDEx_LPM_Callback>
 80018da:	e002      	b.n	80018e2 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	f005 f8d5 	bl	8006a8c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	695a      	ldr	r2, [r3, #20]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80018f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4618      	mov	r0, r3
 80018f8:	f002 fcba 	bl	8004270 <USB_ReadInterrupts>
 80018fc:	4603      	mov	r3, r0
 80018fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001902:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001906:	d112      	bne.n	800192e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	f003 0301 	and.w	r3, r3, #1
 8001914:	2b01      	cmp	r3, #1
 8001916:	d102      	bne.n	800191e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	f005 f891 	bl	8006a40 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	695a      	ldr	r2, [r3, #20]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800192c:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4618      	mov	r0, r3
 8001934:	f002 fc9c 	bl	8004270 <USB_ReadInterrupts>
 8001938:	4603      	mov	r3, r0
 800193a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800193e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001942:	f040 80b7 	bne.w	8001ab4 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	69fa      	ldr	r2, [r7, #28]
 8001950:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001954:	f023 0301 	bic.w	r3, r3, #1
 8001958:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	2110      	movs	r1, #16
 8001960:	4618      	mov	r0, r3
 8001962:	f001 fd6f 	bl	8003444 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001966:	2300      	movs	r3, #0
 8001968:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800196a:	e046      	b.n	80019fa <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800196c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800196e:	015a      	lsls	r2, r3, #5
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	4413      	add	r3, r2
 8001974:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001978:	461a      	mov	r2, r3
 800197a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800197e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001980:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001982:	015a      	lsls	r2, r3, #5
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	4413      	add	r3, r2
 8001988:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001990:	0151      	lsls	r1, r2, #5
 8001992:	69fa      	ldr	r2, [r7, #28]
 8001994:	440a      	add	r2, r1
 8001996:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800199a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800199e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80019a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019a2:	015a      	lsls	r2, r3, #5
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	4413      	add	r3, r2
 80019a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80019ac:	461a      	mov	r2, r3
 80019ae:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80019b2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80019b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019b6:	015a      	lsls	r2, r3, #5
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	4413      	add	r3, r2
 80019bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80019c4:	0151      	lsls	r1, r2, #5
 80019c6:	69fa      	ldr	r2, [r7, #28]
 80019c8:	440a      	add	r2, r1
 80019ca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80019ce:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80019d2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80019d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019d6:	015a      	lsls	r2, r3, #5
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	4413      	add	r3, r2
 80019dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80019e4:	0151      	lsls	r1, r2, #5
 80019e6:	69fa      	ldr	r2, [r7, #28]
 80019e8:	440a      	add	r2, r1
 80019ea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80019ee:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80019f2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019f6:	3301      	adds	r3, #1
 80019f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	791b      	ldrb	r3, [r3, #4]
 80019fe:	461a      	mov	r2, r3
 8001a00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d3b2      	bcc.n	800196c <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001a0c:	69db      	ldr	r3, [r3, #28]
 8001a0e:	69fa      	ldr	r2, [r7, #28]
 8001a10:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001a14:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8001a18:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	7bdb      	ldrb	r3, [r3, #15]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d016      	beq.n	8001a50 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001a28:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001a2c:	69fa      	ldr	r2, [r7, #28]
 8001a2e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001a32:	f043 030b 	orr.w	r3, r3, #11
 8001a36:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001a40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a42:	69fa      	ldr	r2, [r7, #28]
 8001a44:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001a48:	f043 030b 	orr.w	r3, r3, #11
 8001a4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a4e:	e015      	b.n	8001a7c <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001a56:	695b      	ldr	r3, [r3, #20]
 8001a58:	69fa      	ldr	r2, [r7, #28]
 8001a5a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001a5e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001a62:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8001a66:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001a68:	69fb      	ldr	r3, [r7, #28]
 8001a6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001a6e:	691b      	ldr	r3, [r3, #16]
 8001a70:	69fa      	ldr	r2, [r7, #28]
 8001a72:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001a76:	f043 030b 	orr.w	r3, r3, #11
 8001a7a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	69fa      	ldr	r2, [r7, #28]
 8001a86:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001a8a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8001a8e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6818      	ldr	r0, [r3, #0]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	f002 fcaa 	bl	80043f8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	695a      	ldr	r2, [r3, #20]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8001ab2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f002 fbd9 	bl	8004270 <USB_ReadInterrupts>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001ac4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001ac8:	d123      	bne.n	8001b12 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f002 fc6f 	bl	80043b2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f001 fd2c 	bl	8003536 <USB_GetDevSpeed>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681c      	ldr	r4, [r3, #0]
 8001aea:	f001 f9c7 	bl	8002e7c <HAL_RCC_GetHCLKFreq>
 8001aee:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001af4:	461a      	mov	r2, r3
 8001af6:	4620      	mov	r0, r4
 8001af8:	f001 fa30 	bl	8002f5c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f004 ff80 	bl	8006a02 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	695a      	ldr	r2, [r3, #20]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8001b10:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4618      	mov	r0, r3
 8001b18:	f002 fbaa 	bl	8004270 <USB_ReadInterrupts>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	f003 0308 	and.w	r3, r3, #8
 8001b22:	2b08      	cmp	r3, #8
 8001b24:	d10a      	bne.n	8001b3c <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f004 ff5d 	bl	80069e6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	695a      	ldr	r2, [r3, #20]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f002 0208 	and.w	r2, r2, #8
 8001b3a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4618      	mov	r0, r3
 8001b42:	f002 fb95 	bl	8004270 <USB_ReadInterrupts>
 8001b46:	4603      	mov	r3, r0
 8001b48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b4c:	2b80      	cmp	r3, #128	@ 0x80
 8001b4e:	d123      	bne.n	8001b98 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001b50:	6a3b      	ldr	r3, [r7, #32]
 8001b52:	699b      	ldr	r3, [r3, #24]
 8001b54:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001b58:	6a3b      	ldr	r3, [r7, #32]
 8001b5a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b60:	e014      	b.n	8001b8c <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001b62:	6879      	ldr	r1, [r7, #4]
 8001b64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b66:	4613      	mov	r3, r2
 8001b68:	00db      	lsls	r3, r3, #3
 8001b6a:	4413      	add	r3, r2
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	440b      	add	r3, r1
 8001b70:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d105      	bne.n	8001b86 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	4619      	mov	r1, r3
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f000 fb08 	bl	8002196 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b88:	3301      	adds	r3, #1
 8001b8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	791b      	ldrb	r3, [r3, #4]
 8001b90:	461a      	mov	r2, r3
 8001b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d3e4      	bcc.n	8001b62 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f002 fb67 	bl	8004270 <USB_ReadInterrupts>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ba8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001bac:	d13c      	bne.n	8001c28 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001bae:	2301      	movs	r3, #1
 8001bb0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bb2:	e02b      	b.n	8001c0c <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bb6:	015a      	lsls	r2, r3, #5
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	4413      	add	r3, r2
 8001bbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001bc4:	6879      	ldr	r1, [r7, #4]
 8001bc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001bc8:	4613      	mov	r3, r2
 8001bca:	00db      	lsls	r3, r3, #3
 8001bcc:	4413      	add	r3, r2
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	440b      	add	r3, r1
 8001bd2:	3318      	adds	r3, #24
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d115      	bne.n	8001c06 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001bda:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	da12      	bge.n	8001c06 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001be0:	6879      	ldr	r1, [r7, #4]
 8001be2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001be4:	4613      	mov	r3, r2
 8001be6:	00db      	lsls	r3, r3, #3
 8001be8:	4413      	add	r3, r2
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	440b      	add	r3, r1
 8001bee:	3317      	adds	r3, #23
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	4619      	mov	r1, r3
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f000 fac8 	bl	8002196 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c08:	3301      	adds	r3, #1
 8001c0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	791b      	ldrb	r3, [r3, #4]
 8001c10:	461a      	mov	r2, r3
 8001c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d3cd      	bcc.n	8001bb4 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	695a      	ldr	r2, [r3, #20]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8001c26:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f002 fb1f 	bl	8004270 <USB_ReadInterrupts>
 8001c32:	4603      	mov	r3, r0
 8001c34:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c38:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001c3c:	d156      	bne.n	8001cec <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001c3e:	2301      	movs	r3, #1
 8001c40:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c42:	e045      	b.n	8001cd0 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c46:	015a      	lsls	r2, r3, #5
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	4413      	add	r3, r2
 8001c4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001c54:	6879      	ldr	r1, [r7, #4]
 8001c56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c58:	4613      	mov	r3, r2
 8001c5a:	00db      	lsls	r3, r3, #3
 8001c5c:	4413      	add	r3, r2
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	440b      	add	r3, r1
 8001c62:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d12e      	bne.n	8001cca <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001c6c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	da2b      	bge.n	8001cca <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001c72:	69bb      	ldr	r3, [r7, #24]
 8001c74:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8001c7e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d121      	bne.n	8001cca <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001c86:	6879      	ldr	r1, [r7, #4]
 8001c88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c8a:	4613      	mov	r3, r2
 8001c8c:	00db      	lsls	r3, r3, #3
 8001c8e:	4413      	add	r3, r2
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	440b      	add	r3, r1
 8001c94:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001c98:	2201      	movs	r2, #1
 8001c9a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001c9c:	6a3b      	ldr	r3, [r7, #32]
 8001c9e:	699b      	ldr	r3, [r3, #24]
 8001ca0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001ca4:	6a3b      	ldr	r3, [r7, #32]
 8001ca6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001ca8:	6a3b      	ldr	r3, [r7, #32]
 8001caa:	695b      	ldr	r3, [r3, #20]
 8001cac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d10a      	bne.n	8001cca <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001cb4:	69fb      	ldr	r3, [r7, #28]
 8001cb6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	69fa      	ldr	r2, [r7, #28]
 8001cbe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001cc2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001cc6:	6053      	str	r3, [r2, #4]
            break;
 8001cc8:	e008      	b.n	8001cdc <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ccc:	3301      	adds	r3, #1
 8001cce:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	791b      	ldrb	r3, [r3, #4]
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d3b3      	bcc.n	8001c44 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	695a      	ldr	r2, [r3, #20]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8001cea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f002 fabd 	bl	8004270 <USB_ReadInterrupts>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001cfc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d00:	d10a      	bne.n	8001d18 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f004 fef4 	bl	8006af0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	695a      	ldr	r2, [r3, #20]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8001d16:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f002 faa7 	bl	8004270 <USB_ReadInterrupts>
 8001d22:	4603      	mov	r3, r0
 8001d24:	f003 0304 	and.w	r3, r3, #4
 8001d28:	2b04      	cmp	r3, #4
 8001d2a:	d115      	bne.n	8001d58 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001d34:	69bb      	ldr	r3, [r7, #24]
 8001d36:	f003 0304 	and.w	r3, r3, #4
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d002      	beq.n	8001d44 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f004 fee4 	bl	8006b0c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	6859      	ldr	r1, [r3, #4]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	69ba      	ldr	r2, [r7, #24]
 8001d50:	430a      	orrs	r2, r1
 8001d52:	605a      	str	r2, [r3, #4]
 8001d54:	e000      	b.n	8001d58 <HAL_PCD_IRQHandler+0x93c>
      return;
 8001d56:	bf00      	nop
    }
  }
}
 8001d58:	3734      	adds	r7, #52	@ 0x34
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd90      	pop	{r4, r7, pc}

08001d5e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001d5e:	b580      	push	{r7, lr}
 8001d60:	b082      	sub	sp, #8
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	6078      	str	r0, [r7, #4]
 8001d66:	460b      	mov	r3, r1
 8001d68:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d101      	bne.n	8001d78 <HAL_PCD_SetAddress+0x1a>
 8001d74:	2302      	movs	r3, #2
 8001d76:	e012      	b.n	8001d9e <HAL_PCD_SetAddress+0x40>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	78fa      	ldrb	r2, [r7, #3]
 8001d84:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	78fa      	ldrb	r2, [r7, #3]
 8001d8c:	4611      	mov	r1, r2
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f002 fa06 	bl	80041a0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2200      	movs	r2, #0
 8001d98:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001d9c:	2300      	movs	r3, #0
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3708      	adds	r7, #8
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}

08001da6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001da6:	b580      	push	{r7, lr}
 8001da8:	b084      	sub	sp, #16
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	6078      	str	r0, [r7, #4]
 8001dae:	4608      	mov	r0, r1
 8001db0:	4611      	mov	r1, r2
 8001db2:	461a      	mov	r2, r3
 8001db4:	4603      	mov	r3, r0
 8001db6:	70fb      	strb	r3, [r7, #3]
 8001db8:	460b      	mov	r3, r1
 8001dba:	803b      	strh	r3, [r7, #0]
 8001dbc:	4613      	mov	r3, r2
 8001dbe:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001dc4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	da0f      	bge.n	8001dec <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001dcc:	78fb      	ldrb	r3, [r7, #3]
 8001dce:	f003 020f 	and.w	r2, r3, #15
 8001dd2:	4613      	mov	r3, r2
 8001dd4:	00db      	lsls	r3, r3, #3
 8001dd6:	4413      	add	r3, r2
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	3310      	adds	r3, #16
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	4413      	add	r3, r2
 8001de0:	3304      	adds	r3, #4
 8001de2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	2201      	movs	r2, #1
 8001de8:	705a      	strb	r2, [r3, #1]
 8001dea:	e00f      	b.n	8001e0c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001dec:	78fb      	ldrb	r3, [r7, #3]
 8001dee:	f003 020f 	and.w	r2, r3, #15
 8001df2:	4613      	mov	r3, r2
 8001df4:	00db      	lsls	r3, r3, #3
 8001df6:	4413      	add	r3, r2
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	4413      	add	r3, r2
 8001e02:	3304      	adds	r3, #4
 8001e04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001e0c:	78fb      	ldrb	r3, [r7, #3]
 8001e0e:	f003 030f 	and.w	r3, r3, #15
 8001e12:	b2da      	uxtb	r2, r3
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001e18:	883a      	ldrh	r2, [r7, #0]
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	78ba      	ldrb	r2, [r7, #2]
 8001e22:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	785b      	ldrb	r3, [r3, #1]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d004      	beq.n	8001e36 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	461a      	mov	r2, r3
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001e36:	78bb      	ldrb	r3, [r7, #2]
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d102      	bne.n	8001e42 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d101      	bne.n	8001e50 <HAL_PCD_EP_Open+0xaa>
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	e00e      	b.n	8001e6e <HAL_PCD_EP_Open+0xc8>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2201      	movs	r2, #1
 8001e54:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	68f9      	ldr	r1, [r7, #12]
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f001 fb8e 	bl	8003580 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2200      	movs	r2, #0
 8001e68:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8001e6c:	7afb      	ldrb	r3, [r7, #11]
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3710      	adds	r7, #16
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}

08001e76 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e76:	b580      	push	{r7, lr}
 8001e78:	b084      	sub	sp, #16
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	6078      	str	r0, [r7, #4]
 8001e7e:	460b      	mov	r3, r1
 8001e80:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001e82:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	da0f      	bge.n	8001eaa <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e8a:	78fb      	ldrb	r3, [r7, #3]
 8001e8c:	f003 020f 	and.w	r2, r3, #15
 8001e90:	4613      	mov	r3, r2
 8001e92:	00db      	lsls	r3, r3, #3
 8001e94:	4413      	add	r3, r2
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	3310      	adds	r3, #16
 8001e9a:	687a      	ldr	r2, [r7, #4]
 8001e9c:	4413      	add	r3, r2
 8001e9e:	3304      	adds	r3, #4
 8001ea0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	705a      	strb	r2, [r3, #1]
 8001ea8:	e00f      	b.n	8001eca <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001eaa:	78fb      	ldrb	r3, [r7, #3]
 8001eac:	f003 020f 	and.w	r2, r3, #15
 8001eb0:	4613      	mov	r3, r2
 8001eb2:	00db      	lsls	r3, r3, #3
 8001eb4:	4413      	add	r3, r2
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001ebc:	687a      	ldr	r2, [r7, #4]
 8001ebe:	4413      	add	r3, r2
 8001ec0:	3304      	adds	r3, #4
 8001ec2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001eca:	78fb      	ldrb	r3, [r7, #3]
 8001ecc:	f003 030f 	and.w	r3, r3, #15
 8001ed0:	b2da      	uxtb	r2, r3
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d101      	bne.n	8001ee4 <HAL_PCD_EP_Close+0x6e>
 8001ee0:	2302      	movs	r3, #2
 8001ee2:	e00e      	b.n	8001f02 <HAL_PCD_EP_Close+0x8c>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	68f9      	ldr	r1, [r7, #12]
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f001 fbcc 	bl	8003690 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2200      	movs	r2, #0
 8001efc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8001f00:	2300      	movs	r3, #0
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3710      	adds	r7, #16
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}

08001f0a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001f0a:	b580      	push	{r7, lr}
 8001f0c:	b086      	sub	sp, #24
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	60f8      	str	r0, [r7, #12]
 8001f12:	607a      	str	r2, [r7, #4]
 8001f14:	603b      	str	r3, [r7, #0]
 8001f16:	460b      	mov	r3, r1
 8001f18:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f1a:	7afb      	ldrb	r3, [r7, #11]
 8001f1c:	f003 020f 	and.w	r2, r3, #15
 8001f20:	4613      	mov	r3, r2
 8001f22:	00db      	lsls	r3, r3, #3
 8001f24:	4413      	add	r3, r2
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001f2c:	68fa      	ldr	r2, [r7, #12]
 8001f2e:	4413      	add	r3, r2
 8001f30:	3304      	adds	r3, #4
 8001f32:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	683a      	ldr	r2, [r7, #0]
 8001f3e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	2200      	movs	r2, #0
 8001f44:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f4c:	7afb      	ldrb	r3, [r7, #11]
 8001f4e:	f003 030f 	and.w	r3, r3, #15
 8001f52:	b2da      	uxtb	r2, r3
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	799b      	ldrb	r3, [r3, #6]
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d102      	bne.n	8001f66 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	6818      	ldr	r0, [r3, #0]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	799b      	ldrb	r3, [r3, #6]
 8001f6e:	461a      	mov	r2, r3
 8001f70:	6979      	ldr	r1, [r7, #20]
 8001f72:	f001 fc69 	bl	8003848 <USB_EPStartXfer>

  return HAL_OK;
 8001f76:	2300      	movs	r3, #0
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3718      	adds	r7, #24
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	460b      	mov	r3, r1
 8001f8a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001f8c:	78fb      	ldrb	r3, [r7, #3]
 8001f8e:	f003 020f 	and.w	r2, r3, #15
 8001f92:	6879      	ldr	r1, [r7, #4]
 8001f94:	4613      	mov	r3, r2
 8001f96:	00db      	lsls	r3, r3, #3
 8001f98:	4413      	add	r3, r2
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	440b      	add	r3, r1
 8001f9e:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8001fa2:	681b      	ldr	r3, [r3, #0]
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b086      	sub	sp, #24
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	60f8      	str	r0, [r7, #12]
 8001fb8:	607a      	str	r2, [r7, #4]
 8001fba:	603b      	str	r3, [r7, #0]
 8001fbc:	460b      	mov	r3, r1
 8001fbe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fc0:	7afb      	ldrb	r3, [r7, #11]
 8001fc2:	f003 020f 	and.w	r2, r3, #15
 8001fc6:	4613      	mov	r3, r2
 8001fc8:	00db      	lsls	r3, r3, #3
 8001fca:	4413      	add	r3, r2
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	3310      	adds	r3, #16
 8001fd0:	68fa      	ldr	r2, [r7, #12]
 8001fd2:	4413      	add	r3, r2
 8001fd4:	3304      	adds	r3, #4
 8001fd6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	683a      	ldr	r2, [r7, #0]
 8001fe2:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	2201      	movs	r2, #1
 8001fee:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ff0:	7afb      	ldrb	r3, [r7, #11]
 8001ff2:	f003 030f 	and.w	r3, r3, #15
 8001ff6:	b2da      	uxtb	r2, r3
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	799b      	ldrb	r3, [r3, #6]
 8002000:	2b01      	cmp	r3, #1
 8002002:	d102      	bne.n	800200a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002004:	687a      	ldr	r2, [r7, #4]
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	6818      	ldr	r0, [r3, #0]
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	799b      	ldrb	r3, [r3, #6]
 8002012:	461a      	mov	r2, r3
 8002014:	6979      	ldr	r1, [r7, #20]
 8002016:	f001 fc17 	bl	8003848 <USB_EPStartXfer>

  return HAL_OK;
 800201a:	2300      	movs	r3, #0
}
 800201c:	4618      	mov	r0, r3
 800201e:	3718      	adds	r7, #24
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}

08002024 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b084      	sub	sp, #16
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	460b      	mov	r3, r1
 800202e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002030:	78fb      	ldrb	r3, [r7, #3]
 8002032:	f003 030f 	and.w	r3, r3, #15
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	7912      	ldrb	r2, [r2, #4]
 800203a:	4293      	cmp	r3, r2
 800203c:	d901      	bls.n	8002042 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e04f      	b.n	80020e2 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002042:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002046:	2b00      	cmp	r3, #0
 8002048:	da0f      	bge.n	800206a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800204a:	78fb      	ldrb	r3, [r7, #3]
 800204c:	f003 020f 	and.w	r2, r3, #15
 8002050:	4613      	mov	r3, r2
 8002052:	00db      	lsls	r3, r3, #3
 8002054:	4413      	add	r3, r2
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	3310      	adds	r3, #16
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	4413      	add	r3, r2
 800205e:	3304      	adds	r3, #4
 8002060:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2201      	movs	r2, #1
 8002066:	705a      	strb	r2, [r3, #1]
 8002068:	e00d      	b.n	8002086 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800206a:	78fa      	ldrb	r2, [r7, #3]
 800206c:	4613      	mov	r3, r2
 800206e:	00db      	lsls	r3, r3, #3
 8002070:	4413      	add	r3, r2
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	4413      	add	r3, r2
 800207c:	3304      	adds	r3, #4
 800207e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2200      	movs	r2, #0
 8002084:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	2201      	movs	r2, #1
 800208a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800208c:	78fb      	ldrb	r3, [r7, #3]
 800208e:	f003 030f 	and.w	r3, r3, #15
 8002092:	b2da      	uxtb	r2, r3
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d101      	bne.n	80020a6 <HAL_PCD_EP_SetStall+0x82>
 80020a2:	2302      	movs	r3, #2
 80020a4:	e01d      	b.n	80020e2 <HAL_PCD_EP_SetStall+0xbe>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2201      	movs	r2, #1
 80020aa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	68f9      	ldr	r1, [r7, #12]
 80020b4:	4618      	mov	r0, r3
 80020b6:	f001 ff9f 	bl	8003ff8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80020ba:	78fb      	ldrb	r3, [r7, #3]
 80020bc:	f003 030f 	and.w	r3, r3, #15
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d109      	bne.n	80020d8 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6818      	ldr	r0, [r3, #0]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	7999      	ldrb	r1, [r3, #6]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80020d2:	461a      	mov	r2, r3
 80020d4:	f002 f990 	bl	80043f8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2200      	movs	r2, #0
 80020dc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80020e0:	2300      	movs	r3, #0
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3710      	adds	r7, #16
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}

080020ea <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020ea:	b580      	push	{r7, lr}
 80020ec:	b084      	sub	sp, #16
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	6078      	str	r0, [r7, #4]
 80020f2:	460b      	mov	r3, r1
 80020f4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80020f6:	78fb      	ldrb	r3, [r7, #3]
 80020f8:	f003 030f 	and.w	r3, r3, #15
 80020fc:	687a      	ldr	r2, [r7, #4]
 80020fe:	7912      	ldrb	r2, [r2, #4]
 8002100:	4293      	cmp	r3, r2
 8002102:	d901      	bls.n	8002108 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	e042      	b.n	800218e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002108:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800210c:	2b00      	cmp	r3, #0
 800210e:	da0f      	bge.n	8002130 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002110:	78fb      	ldrb	r3, [r7, #3]
 8002112:	f003 020f 	and.w	r2, r3, #15
 8002116:	4613      	mov	r3, r2
 8002118:	00db      	lsls	r3, r3, #3
 800211a:	4413      	add	r3, r2
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	3310      	adds	r3, #16
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	4413      	add	r3, r2
 8002124:	3304      	adds	r3, #4
 8002126:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2201      	movs	r2, #1
 800212c:	705a      	strb	r2, [r3, #1]
 800212e:	e00f      	b.n	8002150 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002130:	78fb      	ldrb	r3, [r7, #3]
 8002132:	f003 020f 	and.w	r2, r3, #15
 8002136:	4613      	mov	r3, r2
 8002138:	00db      	lsls	r3, r3, #3
 800213a:	4413      	add	r3, r2
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	4413      	add	r3, r2
 8002146:	3304      	adds	r3, #4
 8002148:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	2200      	movs	r2, #0
 800214e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2200      	movs	r2, #0
 8002154:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002156:	78fb      	ldrb	r3, [r7, #3]
 8002158:	f003 030f 	and.w	r3, r3, #15
 800215c:	b2da      	uxtb	r2, r3
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002168:	2b01      	cmp	r3, #1
 800216a:	d101      	bne.n	8002170 <HAL_PCD_EP_ClrStall+0x86>
 800216c:	2302      	movs	r3, #2
 800216e:	e00e      	b.n	800218e <HAL_PCD_EP_ClrStall+0xa4>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2201      	movs	r2, #1
 8002174:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	68f9      	ldr	r1, [r7, #12]
 800217e:	4618      	mov	r0, r3
 8002180:	f001 ffa8 	bl	80040d4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2200      	movs	r2, #0
 8002188:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800218c:	2300      	movs	r3, #0
}
 800218e:	4618      	mov	r0, r3
 8002190:	3710      	adds	r7, #16
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}

08002196 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002196:	b580      	push	{r7, lr}
 8002198:	b084      	sub	sp, #16
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
 800219e:	460b      	mov	r3, r1
 80021a0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80021a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	da0c      	bge.n	80021c4 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021aa:	78fb      	ldrb	r3, [r7, #3]
 80021ac:	f003 020f 	and.w	r2, r3, #15
 80021b0:	4613      	mov	r3, r2
 80021b2:	00db      	lsls	r3, r3, #3
 80021b4:	4413      	add	r3, r2
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	3310      	adds	r3, #16
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	4413      	add	r3, r2
 80021be:	3304      	adds	r3, #4
 80021c0:	60fb      	str	r3, [r7, #12]
 80021c2:	e00c      	b.n	80021de <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021c4:	78fb      	ldrb	r3, [r7, #3]
 80021c6:	f003 020f 	and.w	r2, r3, #15
 80021ca:	4613      	mov	r3, r2
 80021cc:	00db      	lsls	r3, r3, #3
 80021ce:	4413      	add	r3, r2
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	4413      	add	r3, r2
 80021da:	3304      	adds	r3, #4
 80021dc:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	68f9      	ldr	r1, [r7, #12]
 80021e4:	4618      	mov	r0, r3
 80021e6:	f001 fdc7 	bl	8003d78 <USB_EPStopXfer>
 80021ea:	4603      	mov	r3, r0
 80021ec:	72fb      	strb	r3, [r7, #11]

  return ret;
 80021ee:	7afb      	ldrb	r3, [r7, #11]
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3710      	adds	r7, #16
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}

080021f8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b08a      	sub	sp, #40	@ 0x28
 80021fc:	af02      	add	r7, sp, #8
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800220c:	683a      	ldr	r2, [r7, #0]
 800220e:	4613      	mov	r3, r2
 8002210:	00db      	lsls	r3, r3, #3
 8002212:	4413      	add	r3, r2
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	3310      	adds	r3, #16
 8002218:	687a      	ldr	r2, [r7, #4]
 800221a:	4413      	add	r3, r2
 800221c:	3304      	adds	r3, #4
 800221e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	695a      	ldr	r2, [r3, #20]
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	691b      	ldr	r3, [r3, #16]
 8002228:	429a      	cmp	r2, r3
 800222a:	d901      	bls.n	8002230 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e06b      	b.n	8002308 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	691a      	ldr	r2, [r3, #16]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	695b      	ldr	r3, [r3, #20]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	69fa      	ldr	r2, [r7, #28]
 8002242:	429a      	cmp	r2, r3
 8002244:	d902      	bls.n	800224c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	3303      	adds	r3, #3
 8002250:	089b      	lsrs	r3, r3, #2
 8002252:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002254:	e02a      	b.n	80022ac <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	691a      	ldr	r2, [r3, #16]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	695b      	ldr	r3, [r3, #20]
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	69fa      	ldr	r2, [r7, #28]
 8002268:	429a      	cmp	r2, r3
 800226a:	d902      	bls.n	8002272 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	3303      	adds	r3, #3
 8002276:	089b      	lsrs	r3, r3, #2
 8002278:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	68d9      	ldr	r1, [r3, #12]
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	b2da      	uxtb	r2, r3
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800228a:	9300      	str	r3, [sp, #0]
 800228c:	4603      	mov	r3, r0
 800228e:	6978      	ldr	r0, [r7, #20]
 8002290:	f001 fe1c 	bl	8003ecc <USB_WritePacket>

    ep->xfer_buff  += len;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	68da      	ldr	r2, [r3, #12]
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	441a      	add	r2, r3
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	695a      	ldr	r2, [r3, #20]
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	441a      	add	r2, r3
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	015a      	lsls	r2, r3, #5
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	4413      	add	r3, r2
 80022b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80022b8:	699b      	ldr	r3, [r3, #24]
 80022ba:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	429a      	cmp	r2, r3
 80022c0:	d809      	bhi.n	80022d6 <PCD_WriteEmptyTxFifo+0xde>
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	695a      	ldr	r2, [r3, #20]
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d203      	bcs.n	80022d6 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	691b      	ldr	r3, [r3, #16]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d1bf      	bne.n	8002256 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	691a      	ldr	r2, [r3, #16]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	695b      	ldr	r3, [r3, #20]
 80022de:	429a      	cmp	r2, r3
 80022e0:	d811      	bhi.n	8002306 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	f003 030f 	and.w	r3, r3, #15
 80022e8:	2201      	movs	r2, #1
 80022ea:	fa02 f303 	lsl.w	r3, r2, r3
 80022ee:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80022f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	43db      	mvns	r3, r3
 80022fc:	6939      	ldr	r1, [r7, #16]
 80022fe:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002302:	4013      	ands	r3, r2
 8002304:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8002306:	2300      	movs	r3, #0
}
 8002308:	4618      	mov	r0, r3
 800230a:	3720      	adds	r7, #32
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}

08002310 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b088      	sub	sp, #32
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	333c      	adds	r3, #60	@ 0x3c
 8002328:	3304      	adds	r3, #4
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	015a      	lsls	r2, r3, #5
 8002332:	69bb      	ldr	r3, [r7, #24]
 8002334:	4413      	add	r3, r2
 8002336:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	799b      	ldrb	r3, [r3, #6]
 8002342:	2b01      	cmp	r3, #1
 8002344:	d17b      	bne.n	800243e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	f003 0308 	and.w	r3, r3, #8
 800234c:	2b00      	cmp	r3, #0
 800234e:	d015      	beq.n	800237c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	4a61      	ldr	r2, [pc, #388]	@ (80024d8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002354:	4293      	cmp	r3, r2
 8002356:	f240 80b9 	bls.w	80024cc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002360:	2b00      	cmp	r3, #0
 8002362:	f000 80b3 	beq.w	80024cc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	015a      	lsls	r2, r3, #5
 800236a:	69bb      	ldr	r3, [r7, #24]
 800236c:	4413      	add	r3, r2
 800236e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002372:	461a      	mov	r2, r3
 8002374:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002378:	6093      	str	r3, [r2, #8]
 800237a:	e0a7      	b.n	80024cc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	f003 0320 	and.w	r3, r3, #32
 8002382:	2b00      	cmp	r3, #0
 8002384:	d009      	beq.n	800239a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	015a      	lsls	r2, r3, #5
 800238a:	69bb      	ldr	r3, [r7, #24]
 800238c:	4413      	add	r3, r2
 800238e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002392:	461a      	mov	r2, r3
 8002394:	2320      	movs	r3, #32
 8002396:	6093      	str	r3, [r2, #8]
 8002398:	e098      	b.n	80024cc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	f040 8093 	bne.w	80024cc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	4a4b      	ldr	r2, [pc, #300]	@ (80024d8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d90f      	bls.n	80023ce <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d00a      	beq.n	80023ce <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	015a      	lsls	r2, r3, #5
 80023bc:	69bb      	ldr	r3, [r7, #24]
 80023be:	4413      	add	r3, r2
 80023c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80023c4:	461a      	mov	r2, r3
 80023c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80023ca:	6093      	str	r3, [r2, #8]
 80023cc:	e07e      	b.n	80024cc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80023ce:	683a      	ldr	r2, [r7, #0]
 80023d0:	4613      	mov	r3, r2
 80023d2:	00db      	lsls	r3, r3, #3
 80023d4:	4413      	add	r3, r2
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	4413      	add	r3, r2
 80023e0:	3304      	adds	r3, #4
 80023e2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	6a1a      	ldr	r2, [r3, #32]
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	0159      	lsls	r1, r3, #5
 80023ec:	69bb      	ldr	r3, [r7, #24]
 80023ee:	440b      	add	r3, r1
 80023f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80023f4:	691b      	ldr	r3, [r3, #16]
 80023f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023fa:	1ad2      	subs	r2, r2, r3
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d114      	bne.n	8002430 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	691b      	ldr	r3, [r3, #16]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d109      	bne.n	8002422 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6818      	ldr	r0, [r3, #0]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002418:	461a      	mov	r2, r3
 800241a:	2101      	movs	r1, #1
 800241c:	f001 ffec 	bl	80043f8 <USB_EP0_OutStart>
 8002420:	e006      	b.n	8002430 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	68da      	ldr	r2, [r3, #12]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	695b      	ldr	r3, [r3, #20]
 800242a:	441a      	add	r2, r3
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	b2db      	uxtb	r3, r3
 8002434:	4619      	mov	r1, r3
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f004 faa0 	bl	800697c <HAL_PCD_DataOutStageCallback>
 800243c:	e046      	b.n	80024cc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	4a26      	ldr	r2, [pc, #152]	@ (80024dc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d124      	bne.n	8002490 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d00a      	beq.n	8002466 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	015a      	lsls	r2, r3, #5
 8002454:	69bb      	ldr	r3, [r7, #24]
 8002456:	4413      	add	r3, r2
 8002458:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800245c:	461a      	mov	r2, r3
 800245e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002462:	6093      	str	r3, [r2, #8]
 8002464:	e032      	b.n	80024cc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	f003 0320 	and.w	r3, r3, #32
 800246c:	2b00      	cmp	r3, #0
 800246e:	d008      	beq.n	8002482 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	015a      	lsls	r2, r3, #5
 8002474:	69bb      	ldr	r3, [r7, #24]
 8002476:	4413      	add	r3, r2
 8002478:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800247c:	461a      	mov	r2, r3
 800247e:	2320      	movs	r3, #32
 8002480:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	b2db      	uxtb	r3, r3
 8002486:	4619      	mov	r1, r3
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	f004 fa77 	bl	800697c <HAL_PCD_DataOutStageCallback>
 800248e:	e01d      	b.n	80024cc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d114      	bne.n	80024c0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002496:	6879      	ldr	r1, [r7, #4]
 8002498:	683a      	ldr	r2, [r7, #0]
 800249a:	4613      	mov	r3, r2
 800249c:	00db      	lsls	r3, r3, #3
 800249e:	4413      	add	r3, r2
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	440b      	add	r3, r1
 80024a4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d108      	bne.n	80024c0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6818      	ldr	r0, [r3, #0]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80024b8:	461a      	mov	r2, r3
 80024ba:	2100      	movs	r1, #0
 80024bc:	f001 ff9c 	bl	80043f8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	4619      	mov	r1, r3
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f004 fa58 	bl	800697c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80024cc:	2300      	movs	r3, #0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3720      	adds	r7, #32
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	4f54300a 	.word	0x4f54300a
 80024dc:	4f54310a 	.word	0x4f54310a

080024e0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b086      	sub	sp, #24
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	333c      	adds	r3, #60	@ 0x3c
 80024f8:	3304      	adds	r3, #4
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	015a      	lsls	r2, r3, #5
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	4413      	add	r3, r2
 8002506:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	4a15      	ldr	r2, [pc, #84]	@ (8002568 <PCD_EP_OutSetupPacket_int+0x88>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d90e      	bls.n	8002534 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800251c:	2b00      	cmp	r3, #0
 800251e:	d009      	beq.n	8002534 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	015a      	lsls	r2, r3, #5
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	4413      	add	r3, r2
 8002528:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800252c:	461a      	mov	r2, r3
 800252e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002532:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f004 fa0f 	bl	8006958 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	4a0a      	ldr	r2, [pc, #40]	@ (8002568 <PCD_EP_OutSetupPacket_int+0x88>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d90c      	bls.n	800255c <PCD_EP_OutSetupPacket_int+0x7c>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	799b      	ldrb	r3, [r3, #6]
 8002546:	2b01      	cmp	r3, #1
 8002548:	d108      	bne.n	800255c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6818      	ldr	r0, [r3, #0]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002554:	461a      	mov	r2, r3
 8002556:	2101      	movs	r1, #1
 8002558:	f001 ff4e 	bl	80043f8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800255c:	2300      	movs	r3, #0
}
 800255e:	4618      	mov	r0, r3
 8002560:	3718      	adds	r7, #24
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	4f54300a 	.word	0x4f54300a

0800256c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800256c:	b480      	push	{r7}
 800256e:	b085      	sub	sp, #20
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	460b      	mov	r3, r1
 8002576:	70fb      	strb	r3, [r7, #3]
 8002578:	4613      	mov	r3, r2
 800257a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002582:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002584:	78fb      	ldrb	r3, [r7, #3]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d107      	bne.n	800259a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800258a:	883b      	ldrh	r3, [r7, #0]
 800258c:	0419      	lsls	r1, r3, #16
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	68ba      	ldr	r2, [r7, #8]
 8002594:	430a      	orrs	r2, r1
 8002596:	629a      	str	r2, [r3, #40]	@ 0x28
 8002598:	e028      	b.n	80025ec <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025a0:	0c1b      	lsrs	r3, r3, #16
 80025a2:	68ba      	ldr	r2, [r7, #8]
 80025a4:	4413      	add	r3, r2
 80025a6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80025a8:	2300      	movs	r3, #0
 80025aa:	73fb      	strb	r3, [r7, #15]
 80025ac:	e00d      	b.n	80025ca <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	7bfb      	ldrb	r3, [r7, #15]
 80025b4:	3340      	adds	r3, #64	@ 0x40
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	4413      	add	r3, r2
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	0c1b      	lsrs	r3, r3, #16
 80025be:	68ba      	ldr	r2, [r7, #8]
 80025c0:	4413      	add	r3, r2
 80025c2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80025c4:	7bfb      	ldrb	r3, [r7, #15]
 80025c6:	3301      	adds	r3, #1
 80025c8:	73fb      	strb	r3, [r7, #15]
 80025ca:	7bfa      	ldrb	r2, [r7, #15]
 80025cc:	78fb      	ldrb	r3, [r7, #3]
 80025ce:	3b01      	subs	r3, #1
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d3ec      	bcc.n	80025ae <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80025d4:	883b      	ldrh	r3, [r7, #0]
 80025d6:	0418      	lsls	r0, r3, #16
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6819      	ldr	r1, [r3, #0]
 80025dc:	78fb      	ldrb	r3, [r7, #3]
 80025de:	3b01      	subs	r3, #1
 80025e0:	68ba      	ldr	r2, [r7, #8]
 80025e2:	4302      	orrs	r2, r0
 80025e4:	3340      	adds	r3, #64	@ 0x40
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	440b      	add	r3, r1
 80025ea:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80025ec:	2300      	movs	r3, #0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3714      	adds	r7, #20
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr

080025fa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80025fa:	b480      	push	{r7}
 80025fc:	b083      	sub	sp, #12
 80025fe:	af00      	add	r7, sp, #0
 8002600:	6078      	str	r0, [r7, #4]
 8002602:	460b      	mov	r3, r1
 8002604:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	887a      	ldrh	r2, [r7, #2]
 800260c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800260e:	2300      	movs	r3, #0
}
 8002610:	4618      	mov	r0, r3
 8002612:	370c      	adds	r7, #12
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr

0800261c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	460b      	mov	r3, r1
 8002626:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002628:	bf00      	nop
 800262a:	370c      	adds	r7, #12
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr

08002634 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b086      	sub	sp, #24
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d101      	bne.n	8002646 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e267      	b.n	8002b16 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0301 	and.w	r3, r3, #1
 800264e:	2b00      	cmp	r3, #0
 8002650:	d075      	beq.n	800273e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002652:	4b88      	ldr	r3, [pc, #544]	@ (8002874 <HAL_RCC_OscConfig+0x240>)
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	f003 030c 	and.w	r3, r3, #12
 800265a:	2b04      	cmp	r3, #4
 800265c:	d00c      	beq.n	8002678 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800265e:	4b85      	ldr	r3, [pc, #532]	@ (8002874 <HAL_RCC_OscConfig+0x240>)
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002666:	2b08      	cmp	r3, #8
 8002668:	d112      	bne.n	8002690 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800266a:	4b82      	ldr	r3, [pc, #520]	@ (8002874 <HAL_RCC_OscConfig+0x240>)
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002672:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002676:	d10b      	bne.n	8002690 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002678:	4b7e      	ldr	r3, [pc, #504]	@ (8002874 <HAL_RCC_OscConfig+0x240>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002680:	2b00      	cmp	r3, #0
 8002682:	d05b      	beq.n	800273c <HAL_RCC_OscConfig+0x108>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d157      	bne.n	800273c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e242      	b.n	8002b16 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002698:	d106      	bne.n	80026a8 <HAL_RCC_OscConfig+0x74>
 800269a:	4b76      	ldr	r3, [pc, #472]	@ (8002874 <HAL_RCC_OscConfig+0x240>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a75      	ldr	r2, [pc, #468]	@ (8002874 <HAL_RCC_OscConfig+0x240>)
 80026a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026a4:	6013      	str	r3, [r2, #0]
 80026a6:	e01d      	b.n	80026e4 <HAL_RCC_OscConfig+0xb0>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80026b0:	d10c      	bne.n	80026cc <HAL_RCC_OscConfig+0x98>
 80026b2:	4b70      	ldr	r3, [pc, #448]	@ (8002874 <HAL_RCC_OscConfig+0x240>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a6f      	ldr	r2, [pc, #444]	@ (8002874 <HAL_RCC_OscConfig+0x240>)
 80026b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80026bc:	6013      	str	r3, [r2, #0]
 80026be:	4b6d      	ldr	r3, [pc, #436]	@ (8002874 <HAL_RCC_OscConfig+0x240>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a6c      	ldr	r2, [pc, #432]	@ (8002874 <HAL_RCC_OscConfig+0x240>)
 80026c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026c8:	6013      	str	r3, [r2, #0]
 80026ca:	e00b      	b.n	80026e4 <HAL_RCC_OscConfig+0xb0>
 80026cc:	4b69      	ldr	r3, [pc, #420]	@ (8002874 <HAL_RCC_OscConfig+0x240>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a68      	ldr	r2, [pc, #416]	@ (8002874 <HAL_RCC_OscConfig+0x240>)
 80026d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026d6:	6013      	str	r3, [r2, #0]
 80026d8:	4b66      	ldr	r3, [pc, #408]	@ (8002874 <HAL_RCC_OscConfig+0x240>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a65      	ldr	r2, [pc, #404]	@ (8002874 <HAL_RCC_OscConfig+0x240>)
 80026de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d013      	beq.n	8002714 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ec:	f7fe fa5c 	bl	8000ba8 <HAL_GetTick>
 80026f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026f2:	e008      	b.n	8002706 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026f4:	f7fe fa58 	bl	8000ba8 <HAL_GetTick>
 80026f8:	4602      	mov	r2, r0
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	2b64      	cmp	r3, #100	@ 0x64
 8002700:	d901      	bls.n	8002706 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	e207      	b.n	8002b16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002706:	4b5b      	ldr	r3, [pc, #364]	@ (8002874 <HAL_RCC_OscConfig+0x240>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d0f0      	beq.n	80026f4 <HAL_RCC_OscConfig+0xc0>
 8002712:	e014      	b.n	800273e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002714:	f7fe fa48 	bl	8000ba8 <HAL_GetTick>
 8002718:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800271a:	e008      	b.n	800272e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800271c:	f7fe fa44 	bl	8000ba8 <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	2b64      	cmp	r3, #100	@ 0x64
 8002728:	d901      	bls.n	800272e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e1f3      	b.n	8002b16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800272e:	4b51      	ldr	r3, [pc, #324]	@ (8002874 <HAL_RCC_OscConfig+0x240>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d1f0      	bne.n	800271c <HAL_RCC_OscConfig+0xe8>
 800273a:	e000      	b.n	800273e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800273c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0302 	and.w	r3, r3, #2
 8002746:	2b00      	cmp	r3, #0
 8002748:	d063      	beq.n	8002812 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800274a:	4b4a      	ldr	r3, [pc, #296]	@ (8002874 <HAL_RCC_OscConfig+0x240>)
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	f003 030c 	and.w	r3, r3, #12
 8002752:	2b00      	cmp	r3, #0
 8002754:	d00b      	beq.n	800276e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002756:	4b47      	ldr	r3, [pc, #284]	@ (8002874 <HAL_RCC_OscConfig+0x240>)
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800275e:	2b08      	cmp	r3, #8
 8002760:	d11c      	bne.n	800279c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002762:	4b44      	ldr	r3, [pc, #272]	@ (8002874 <HAL_RCC_OscConfig+0x240>)
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d116      	bne.n	800279c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800276e:	4b41      	ldr	r3, [pc, #260]	@ (8002874 <HAL_RCC_OscConfig+0x240>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0302 	and.w	r3, r3, #2
 8002776:	2b00      	cmp	r3, #0
 8002778:	d005      	beq.n	8002786 <HAL_RCC_OscConfig+0x152>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	2b01      	cmp	r3, #1
 8002780:	d001      	beq.n	8002786 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e1c7      	b.n	8002b16 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002786:	4b3b      	ldr	r3, [pc, #236]	@ (8002874 <HAL_RCC_OscConfig+0x240>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	691b      	ldr	r3, [r3, #16]
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	4937      	ldr	r1, [pc, #220]	@ (8002874 <HAL_RCC_OscConfig+0x240>)
 8002796:	4313      	orrs	r3, r2
 8002798:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800279a:	e03a      	b.n	8002812 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d020      	beq.n	80027e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027a4:	4b34      	ldr	r3, [pc, #208]	@ (8002878 <HAL_RCC_OscConfig+0x244>)
 80027a6:	2201      	movs	r2, #1
 80027a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027aa:	f7fe f9fd 	bl	8000ba8 <HAL_GetTick>
 80027ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027b0:	e008      	b.n	80027c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027b2:	f7fe f9f9 	bl	8000ba8 <HAL_GetTick>
 80027b6:	4602      	mov	r2, r0
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	1ad3      	subs	r3, r2, r3
 80027bc:	2b02      	cmp	r3, #2
 80027be:	d901      	bls.n	80027c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80027c0:	2303      	movs	r3, #3
 80027c2:	e1a8      	b.n	8002b16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027c4:	4b2b      	ldr	r3, [pc, #172]	@ (8002874 <HAL_RCC_OscConfig+0x240>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0302 	and.w	r3, r3, #2
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d0f0      	beq.n	80027b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027d0:	4b28      	ldr	r3, [pc, #160]	@ (8002874 <HAL_RCC_OscConfig+0x240>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	691b      	ldr	r3, [r3, #16]
 80027dc:	00db      	lsls	r3, r3, #3
 80027de:	4925      	ldr	r1, [pc, #148]	@ (8002874 <HAL_RCC_OscConfig+0x240>)
 80027e0:	4313      	orrs	r3, r2
 80027e2:	600b      	str	r3, [r1, #0]
 80027e4:	e015      	b.n	8002812 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027e6:	4b24      	ldr	r3, [pc, #144]	@ (8002878 <HAL_RCC_OscConfig+0x244>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ec:	f7fe f9dc 	bl	8000ba8 <HAL_GetTick>
 80027f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027f2:	e008      	b.n	8002806 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027f4:	f7fe f9d8 	bl	8000ba8 <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d901      	bls.n	8002806 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e187      	b.n	8002b16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002806:	4b1b      	ldr	r3, [pc, #108]	@ (8002874 <HAL_RCC_OscConfig+0x240>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0302 	and.w	r3, r3, #2
 800280e:	2b00      	cmp	r3, #0
 8002810:	d1f0      	bne.n	80027f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0308 	and.w	r3, r3, #8
 800281a:	2b00      	cmp	r3, #0
 800281c:	d036      	beq.n	800288c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	695b      	ldr	r3, [r3, #20]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d016      	beq.n	8002854 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002826:	4b15      	ldr	r3, [pc, #84]	@ (800287c <HAL_RCC_OscConfig+0x248>)
 8002828:	2201      	movs	r2, #1
 800282a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800282c:	f7fe f9bc 	bl	8000ba8 <HAL_GetTick>
 8002830:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002832:	e008      	b.n	8002846 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002834:	f7fe f9b8 	bl	8000ba8 <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	2b02      	cmp	r3, #2
 8002840:	d901      	bls.n	8002846 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e167      	b.n	8002b16 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002846:	4b0b      	ldr	r3, [pc, #44]	@ (8002874 <HAL_RCC_OscConfig+0x240>)
 8002848:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800284a:	f003 0302 	and.w	r3, r3, #2
 800284e:	2b00      	cmp	r3, #0
 8002850:	d0f0      	beq.n	8002834 <HAL_RCC_OscConfig+0x200>
 8002852:	e01b      	b.n	800288c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002854:	4b09      	ldr	r3, [pc, #36]	@ (800287c <HAL_RCC_OscConfig+0x248>)
 8002856:	2200      	movs	r2, #0
 8002858:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800285a:	f7fe f9a5 	bl	8000ba8 <HAL_GetTick>
 800285e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002860:	e00e      	b.n	8002880 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002862:	f7fe f9a1 	bl	8000ba8 <HAL_GetTick>
 8002866:	4602      	mov	r2, r0
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	2b02      	cmp	r3, #2
 800286e:	d907      	bls.n	8002880 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002870:	2303      	movs	r3, #3
 8002872:	e150      	b.n	8002b16 <HAL_RCC_OscConfig+0x4e2>
 8002874:	40023800 	.word	0x40023800
 8002878:	42470000 	.word	0x42470000
 800287c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002880:	4b88      	ldr	r3, [pc, #544]	@ (8002aa4 <HAL_RCC_OscConfig+0x470>)
 8002882:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002884:	f003 0302 	and.w	r3, r3, #2
 8002888:	2b00      	cmp	r3, #0
 800288a:	d1ea      	bne.n	8002862 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0304 	and.w	r3, r3, #4
 8002894:	2b00      	cmp	r3, #0
 8002896:	f000 8097 	beq.w	80029c8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800289a:	2300      	movs	r3, #0
 800289c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800289e:	4b81      	ldr	r3, [pc, #516]	@ (8002aa4 <HAL_RCC_OscConfig+0x470>)
 80028a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d10f      	bne.n	80028ca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028aa:	2300      	movs	r3, #0
 80028ac:	60bb      	str	r3, [r7, #8]
 80028ae:	4b7d      	ldr	r3, [pc, #500]	@ (8002aa4 <HAL_RCC_OscConfig+0x470>)
 80028b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b2:	4a7c      	ldr	r2, [pc, #496]	@ (8002aa4 <HAL_RCC_OscConfig+0x470>)
 80028b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80028ba:	4b7a      	ldr	r3, [pc, #488]	@ (8002aa4 <HAL_RCC_OscConfig+0x470>)
 80028bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028c2:	60bb      	str	r3, [r7, #8]
 80028c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028c6:	2301      	movs	r3, #1
 80028c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028ca:	4b77      	ldr	r3, [pc, #476]	@ (8002aa8 <HAL_RCC_OscConfig+0x474>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d118      	bne.n	8002908 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028d6:	4b74      	ldr	r3, [pc, #464]	@ (8002aa8 <HAL_RCC_OscConfig+0x474>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a73      	ldr	r2, [pc, #460]	@ (8002aa8 <HAL_RCC_OscConfig+0x474>)
 80028dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028e2:	f7fe f961 	bl	8000ba8 <HAL_GetTick>
 80028e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028e8:	e008      	b.n	80028fc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028ea:	f7fe f95d 	bl	8000ba8 <HAL_GetTick>
 80028ee:	4602      	mov	r2, r0
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d901      	bls.n	80028fc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80028f8:	2303      	movs	r3, #3
 80028fa:	e10c      	b.n	8002b16 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028fc:	4b6a      	ldr	r3, [pc, #424]	@ (8002aa8 <HAL_RCC_OscConfig+0x474>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002904:	2b00      	cmp	r3, #0
 8002906:	d0f0      	beq.n	80028ea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	2b01      	cmp	r3, #1
 800290e:	d106      	bne.n	800291e <HAL_RCC_OscConfig+0x2ea>
 8002910:	4b64      	ldr	r3, [pc, #400]	@ (8002aa4 <HAL_RCC_OscConfig+0x470>)
 8002912:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002914:	4a63      	ldr	r2, [pc, #396]	@ (8002aa4 <HAL_RCC_OscConfig+0x470>)
 8002916:	f043 0301 	orr.w	r3, r3, #1
 800291a:	6713      	str	r3, [r2, #112]	@ 0x70
 800291c:	e01c      	b.n	8002958 <HAL_RCC_OscConfig+0x324>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	2b05      	cmp	r3, #5
 8002924:	d10c      	bne.n	8002940 <HAL_RCC_OscConfig+0x30c>
 8002926:	4b5f      	ldr	r3, [pc, #380]	@ (8002aa4 <HAL_RCC_OscConfig+0x470>)
 8002928:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800292a:	4a5e      	ldr	r2, [pc, #376]	@ (8002aa4 <HAL_RCC_OscConfig+0x470>)
 800292c:	f043 0304 	orr.w	r3, r3, #4
 8002930:	6713      	str	r3, [r2, #112]	@ 0x70
 8002932:	4b5c      	ldr	r3, [pc, #368]	@ (8002aa4 <HAL_RCC_OscConfig+0x470>)
 8002934:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002936:	4a5b      	ldr	r2, [pc, #364]	@ (8002aa4 <HAL_RCC_OscConfig+0x470>)
 8002938:	f043 0301 	orr.w	r3, r3, #1
 800293c:	6713      	str	r3, [r2, #112]	@ 0x70
 800293e:	e00b      	b.n	8002958 <HAL_RCC_OscConfig+0x324>
 8002940:	4b58      	ldr	r3, [pc, #352]	@ (8002aa4 <HAL_RCC_OscConfig+0x470>)
 8002942:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002944:	4a57      	ldr	r2, [pc, #348]	@ (8002aa4 <HAL_RCC_OscConfig+0x470>)
 8002946:	f023 0301 	bic.w	r3, r3, #1
 800294a:	6713      	str	r3, [r2, #112]	@ 0x70
 800294c:	4b55      	ldr	r3, [pc, #340]	@ (8002aa4 <HAL_RCC_OscConfig+0x470>)
 800294e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002950:	4a54      	ldr	r2, [pc, #336]	@ (8002aa4 <HAL_RCC_OscConfig+0x470>)
 8002952:	f023 0304 	bic.w	r3, r3, #4
 8002956:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d015      	beq.n	800298c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002960:	f7fe f922 	bl	8000ba8 <HAL_GetTick>
 8002964:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002966:	e00a      	b.n	800297e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002968:	f7fe f91e 	bl	8000ba8 <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002976:	4293      	cmp	r3, r2
 8002978:	d901      	bls.n	800297e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e0cb      	b.n	8002b16 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800297e:	4b49      	ldr	r3, [pc, #292]	@ (8002aa4 <HAL_RCC_OscConfig+0x470>)
 8002980:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002982:	f003 0302 	and.w	r3, r3, #2
 8002986:	2b00      	cmp	r3, #0
 8002988:	d0ee      	beq.n	8002968 <HAL_RCC_OscConfig+0x334>
 800298a:	e014      	b.n	80029b6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800298c:	f7fe f90c 	bl	8000ba8 <HAL_GetTick>
 8002990:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002992:	e00a      	b.n	80029aa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002994:	f7fe f908 	bl	8000ba8 <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d901      	bls.n	80029aa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	e0b5      	b.n	8002b16 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029aa:	4b3e      	ldr	r3, [pc, #248]	@ (8002aa4 <HAL_RCC_OscConfig+0x470>)
 80029ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029ae:	f003 0302 	and.w	r3, r3, #2
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d1ee      	bne.n	8002994 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029b6:	7dfb      	ldrb	r3, [r7, #23]
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d105      	bne.n	80029c8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029bc:	4b39      	ldr	r3, [pc, #228]	@ (8002aa4 <HAL_RCC_OscConfig+0x470>)
 80029be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029c0:	4a38      	ldr	r2, [pc, #224]	@ (8002aa4 <HAL_RCC_OscConfig+0x470>)
 80029c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029c6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	699b      	ldr	r3, [r3, #24]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	f000 80a1 	beq.w	8002b14 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029d2:	4b34      	ldr	r3, [pc, #208]	@ (8002aa4 <HAL_RCC_OscConfig+0x470>)
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	f003 030c 	and.w	r3, r3, #12
 80029da:	2b08      	cmp	r3, #8
 80029dc:	d05c      	beq.n	8002a98 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	699b      	ldr	r3, [r3, #24]
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d141      	bne.n	8002a6a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029e6:	4b31      	ldr	r3, [pc, #196]	@ (8002aac <HAL_RCC_OscConfig+0x478>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ec:	f7fe f8dc 	bl	8000ba8 <HAL_GetTick>
 80029f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029f2:	e008      	b.n	8002a06 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029f4:	f7fe f8d8 	bl	8000ba8 <HAL_GetTick>
 80029f8:	4602      	mov	r2, r0
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d901      	bls.n	8002a06 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	e087      	b.n	8002b16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a06:	4b27      	ldr	r3, [pc, #156]	@ (8002aa4 <HAL_RCC_OscConfig+0x470>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d1f0      	bne.n	80029f4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	69da      	ldr	r2, [r3, #28]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6a1b      	ldr	r3, [r3, #32]
 8002a1a:	431a      	orrs	r2, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a20:	019b      	lsls	r3, r3, #6
 8002a22:	431a      	orrs	r2, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a28:	085b      	lsrs	r3, r3, #1
 8002a2a:	3b01      	subs	r3, #1
 8002a2c:	041b      	lsls	r3, r3, #16
 8002a2e:	431a      	orrs	r2, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a34:	061b      	lsls	r3, r3, #24
 8002a36:	491b      	ldr	r1, [pc, #108]	@ (8002aa4 <HAL_RCC_OscConfig+0x470>)
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a3c:	4b1b      	ldr	r3, [pc, #108]	@ (8002aac <HAL_RCC_OscConfig+0x478>)
 8002a3e:	2201      	movs	r2, #1
 8002a40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a42:	f7fe f8b1 	bl	8000ba8 <HAL_GetTick>
 8002a46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a48:	e008      	b.n	8002a5c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a4a:	f7fe f8ad 	bl	8000ba8 <HAL_GetTick>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	1ad3      	subs	r3, r2, r3
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d901      	bls.n	8002a5c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a58:	2303      	movs	r3, #3
 8002a5a:	e05c      	b.n	8002b16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a5c:	4b11      	ldr	r3, [pc, #68]	@ (8002aa4 <HAL_RCC_OscConfig+0x470>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d0f0      	beq.n	8002a4a <HAL_RCC_OscConfig+0x416>
 8002a68:	e054      	b.n	8002b14 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a6a:	4b10      	ldr	r3, [pc, #64]	@ (8002aac <HAL_RCC_OscConfig+0x478>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a70:	f7fe f89a 	bl	8000ba8 <HAL_GetTick>
 8002a74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a76:	e008      	b.n	8002a8a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a78:	f7fe f896 	bl	8000ba8 <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d901      	bls.n	8002a8a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e045      	b.n	8002b16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a8a:	4b06      	ldr	r3, [pc, #24]	@ (8002aa4 <HAL_RCC_OscConfig+0x470>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d1f0      	bne.n	8002a78 <HAL_RCC_OscConfig+0x444>
 8002a96:	e03d      	b.n	8002b14 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	699b      	ldr	r3, [r3, #24]
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d107      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e038      	b.n	8002b16 <HAL_RCC_OscConfig+0x4e2>
 8002aa4:	40023800 	.word	0x40023800
 8002aa8:	40007000 	.word	0x40007000
 8002aac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ab0:	4b1b      	ldr	r3, [pc, #108]	@ (8002b20 <HAL_RCC_OscConfig+0x4ec>)
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	699b      	ldr	r3, [r3, #24]
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d028      	beq.n	8002b10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d121      	bne.n	8002b10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d11a      	bne.n	8002b10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ada:	68fa      	ldr	r2, [r7, #12]
 8002adc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002ae6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d111      	bne.n	8002b10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002af6:	085b      	lsrs	r3, r3, #1
 8002af8:	3b01      	subs	r3, #1
 8002afa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d107      	bne.n	8002b10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b0a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d001      	beq.n	8002b14 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e000      	b.n	8002b16 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3718      	adds	r7, #24
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	40023800 	.word	0x40023800

08002b24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b084      	sub	sp, #16
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d101      	bne.n	8002b38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e0cc      	b.n	8002cd2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b38:	4b68      	ldr	r3, [pc, #416]	@ (8002cdc <HAL_RCC_ClockConfig+0x1b8>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0307 	and.w	r3, r3, #7
 8002b40:	683a      	ldr	r2, [r7, #0]
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d90c      	bls.n	8002b60 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b46:	4b65      	ldr	r3, [pc, #404]	@ (8002cdc <HAL_RCC_ClockConfig+0x1b8>)
 8002b48:	683a      	ldr	r2, [r7, #0]
 8002b4a:	b2d2      	uxtb	r2, r2
 8002b4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b4e:	4b63      	ldr	r3, [pc, #396]	@ (8002cdc <HAL_RCC_ClockConfig+0x1b8>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0307 	and.w	r3, r3, #7
 8002b56:	683a      	ldr	r2, [r7, #0]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d001      	beq.n	8002b60 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e0b8      	b.n	8002cd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0302 	and.w	r3, r3, #2
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d020      	beq.n	8002bae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0304 	and.w	r3, r3, #4
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d005      	beq.n	8002b84 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b78:	4b59      	ldr	r3, [pc, #356]	@ (8002ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	4a58      	ldr	r2, [pc, #352]	@ (8002ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b7e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002b82:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0308 	and.w	r3, r3, #8
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d005      	beq.n	8002b9c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b90:	4b53      	ldr	r3, [pc, #332]	@ (8002ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	4a52      	ldr	r2, [pc, #328]	@ (8002ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b96:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002b9a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b9c:	4b50      	ldr	r3, [pc, #320]	@ (8002ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	494d      	ldr	r1, [pc, #308]	@ (8002ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8002baa:	4313      	orrs	r3, r2
 8002bac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0301 	and.w	r3, r3, #1
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d044      	beq.n	8002c44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d107      	bne.n	8002bd2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bc2:	4b47      	ldr	r3, [pc, #284]	@ (8002ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d119      	bne.n	8002c02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e07f      	b.n	8002cd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d003      	beq.n	8002be2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bde:	2b03      	cmp	r3, #3
 8002be0:	d107      	bne.n	8002bf2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002be2:	4b3f      	ldr	r3, [pc, #252]	@ (8002ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d109      	bne.n	8002c02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e06f      	b.n	8002cd2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bf2:	4b3b      	ldr	r3, [pc, #236]	@ (8002ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0302 	and.w	r3, r3, #2
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d101      	bne.n	8002c02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e067      	b.n	8002cd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c02:	4b37      	ldr	r3, [pc, #220]	@ (8002ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	f023 0203 	bic.w	r2, r3, #3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	4934      	ldr	r1, [pc, #208]	@ (8002ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c10:	4313      	orrs	r3, r2
 8002c12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c14:	f7fd ffc8 	bl	8000ba8 <HAL_GetTick>
 8002c18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c1a:	e00a      	b.n	8002c32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c1c:	f7fd ffc4 	bl	8000ba8 <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d901      	bls.n	8002c32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e04f      	b.n	8002cd2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c32:	4b2b      	ldr	r3, [pc, #172]	@ (8002ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	f003 020c 	and.w	r2, r3, #12
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d1eb      	bne.n	8002c1c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c44:	4b25      	ldr	r3, [pc, #148]	@ (8002cdc <HAL_RCC_ClockConfig+0x1b8>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 0307 	and.w	r3, r3, #7
 8002c4c:	683a      	ldr	r2, [r7, #0]
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d20c      	bcs.n	8002c6c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c52:	4b22      	ldr	r3, [pc, #136]	@ (8002cdc <HAL_RCC_ClockConfig+0x1b8>)
 8002c54:	683a      	ldr	r2, [r7, #0]
 8002c56:	b2d2      	uxtb	r2, r2
 8002c58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c5a:	4b20      	ldr	r3, [pc, #128]	@ (8002cdc <HAL_RCC_ClockConfig+0x1b8>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0307 	and.w	r3, r3, #7
 8002c62:	683a      	ldr	r2, [r7, #0]
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d001      	beq.n	8002c6c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e032      	b.n	8002cd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0304 	and.w	r3, r3, #4
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d008      	beq.n	8002c8a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c78:	4b19      	ldr	r3, [pc, #100]	@ (8002ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	4916      	ldr	r1, [pc, #88]	@ (8002ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c86:	4313      	orrs	r3, r2
 8002c88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0308 	and.w	r3, r3, #8
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d009      	beq.n	8002caa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c96:	4b12      	ldr	r3, [pc, #72]	@ (8002ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	691b      	ldr	r3, [r3, #16]
 8002ca2:	00db      	lsls	r3, r3, #3
 8002ca4:	490e      	ldr	r1, [pc, #56]	@ (8002ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002caa:	f000 f821 	bl	8002cf0 <HAL_RCC_GetSysClockFreq>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	4b0b      	ldr	r3, [pc, #44]	@ (8002ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	091b      	lsrs	r3, r3, #4
 8002cb6:	f003 030f 	and.w	r3, r3, #15
 8002cba:	490a      	ldr	r1, [pc, #40]	@ (8002ce4 <HAL_RCC_ClockConfig+0x1c0>)
 8002cbc:	5ccb      	ldrb	r3, [r1, r3]
 8002cbe:	fa22 f303 	lsr.w	r3, r2, r3
 8002cc2:	4a09      	ldr	r2, [pc, #36]	@ (8002ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8002cc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002cc6:	4b09      	ldr	r3, [pc, #36]	@ (8002cec <HAL_RCC_ClockConfig+0x1c8>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f7fd ff28 	bl	8000b20 <HAL_InitTick>

  return HAL_OK;
 8002cd0:	2300      	movs	r3, #0
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3710      	adds	r7, #16
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	40023c00 	.word	0x40023c00
 8002ce0:	40023800 	.word	0x40023800
 8002ce4:	080072a0 	.word	0x080072a0
 8002ce8:	20000010 	.word	0x20000010
 8002cec:	20000014 	.word	0x20000014

08002cf0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cf0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cf4:	b090      	sub	sp, #64	@ 0x40
 8002cf6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	637b      	str	r3, [r7, #52]	@ 0x34
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d00:	2300      	movs	r3, #0
 8002d02:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002d04:	2300      	movs	r3, #0
 8002d06:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d08:	4b59      	ldr	r3, [pc, #356]	@ (8002e70 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	f003 030c 	and.w	r3, r3, #12
 8002d10:	2b08      	cmp	r3, #8
 8002d12:	d00d      	beq.n	8002d30 <HAL_RCC_GetSysClockFreq+0x40>
 8002d14:	2b08      	cmp	r3, #8
 8002d16:	f200 80a1 	bhi.w	8002e5c <HAL_RCC_GetSysClockFreq+0x16c>
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d002      	beq.n	8002d24 <HAL_RCC_GetSysClockFreq+0x34>
 8002d1e:	2b04      	cmp	r3, #4
 8002d20:	d003      	beq.n	8002d2a <HAL_RCC_GetSysClockFreq+0x3a>
 8002d22:	e09b      	b.n	8002e5c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d24:	4b53      	ldr	r3, [pc, #332]	@ (8002e74 <HAL_RCC_GetSysClockFreq+0x184>)
 8002d26:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8002d28:	e09b      	b.n	8002e62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d2a:	4b53      	ldr	r3, [pc, #332]	@ (8002e78 <HAL_RCC_GetSysClockFreq+0x188>)
 8002d2c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002d2e:	e098      	b.n	8002e62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d30:	4b4f      	ldr	r3, [pc, #316]	@ (8002e70 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d38:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d3a:	4b4d      	ldr	r3, [pc, #308]	@ (8002e70 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d028      	beq.n	8002d98 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d46:	4b4a      	ldr	r3, [pc, #296]	@ (8002e70 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	099b      	lsrs	r3, r3, #6
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	623b      	str	r3, [r7, #32]
 8002d50:	627a      	str	r2, [r7, #36]	@ 0x24
 8002d52:	6a3b      	ldr	r3, [r7, #32]
 8002d54:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002d58:	2100      	movs	r1, #0
 8002d5a:	4b47      	ldr	r3, [pc, #284]	@ (8002e78 <HAL_RCC_GetSysClockFreq+0x188>)
 8002d5c:	fb03 f201 	mul.w	r2, r3, r1
 8002d60:	2300      	movs	r3, #0
 8002d62:	fb00 f303 	mul.w	r3, r0, r3
 8002d66:	4413      	add	r3, r2
 8002d68:	4a43      	ldr	r2, [pc, #268]	@ (8002e78 <HAL_RCC_GetSysClockFreq+0x188>)
 8002d6a:	fba0 1202 	umull	r1, r2, r0, r2
 8002d6e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002d70:	460a      	mov	r2, r1
 8002d72:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002d74:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d76:	4413      	add	r3, r2
 8002d78:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	61bb      	str	r3, [r7, #24]
 8002d80:	61fa      	str	r2, [r7, #28]
 8002d82:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d86:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002d8a:	f7fd fa25 	bl	80001d8 <__aeabi_uldivmod>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	460b      	mov	r3, r1
 8002d92:	4613      	mov	r3, r2
 8002d94:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d96:	e053      	b.n	8002e40 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d98:	4b35      	ldr	r3, [pc, #212]	@ (8002e70 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	099b      	lsrs	r3, r3, #6
 8002d9e:	2200      	movs	r2, #0
 8002da0:	613b      	str	r3, [r7, #16]
 8002da2:	617a      	str	r2, [r7, #20]
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002daa:	f04f 0b00 	mov.w	fp, #0
 8002dae:	4652      	mov	r2, sl
 8002db0:	465b      	mov	r3, fp
 8002db2:	f04f 0000 	mov.w	r0, #0
 8002db6:	f04f 0100 	mov.w	r1, #0
 8002dba:	0159      	lsls	r1, r3, #5
 8002dbc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002dc0:	0150      	lsls	r0, r2, #5
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	460b      	mov	r3, r1
 8002dc6:	ebb2 080a 	subs.w	r8, r2, sl
 8002dca:	eb63 090b 	sbc.w	r9, r3, fp
 8002dce:	f04f 0200 	mov.w	r2, #0
 8002dd2:	f04f 0300 	mov.w	r3, #0
 8002dd6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002dda:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002dde:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002de2:	ebb2 0408 	subs.w	r4, r2, r8
 8002de6:	eb63 0509 	sbc.w	r5, r3, r9
 8002dea:	f04f 0200 	mov.w	r2, #0
 8002dee:	f04f 0300 	mov.w	r3, #0
 8002df2:	00eb      	lsls	r3, r5, #3
 8002df4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002df8:	00e2      	lsls	r2, r4, #3
 8002dfa:	4614      	mov	r4, r2
 8002dfc:	461d      	mov	r5, r3
 8002dfe:	eb14 030a 	adds.w	r3, r4, sl
 8002e02:	603b      	str	r3, [r7, #0]
 8002e04:	eb45 030b 	adc.w	r3, r5, fp
 8002e08:	607b      	str	r3, [r7, #4]
 8002e0a:	f04f 0200 	mov.w	r2, #0
 8002e0e:	f04f 0300 	mov.w	r3, #0
 8002e12:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e16:	4629      	mov	r1, r5
 8002e18:	028b      	lsls	r3, r1, #10
 8002e1a:	4621      	mov	r1, r4
 8002e1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e20:	4621      	mov	r1, r4
 8002e22:	028a      	lsls	r2, r1, #10
 8002e24:	4610      	mov	r0, r2
 8002e26:	4619      	mov	r1, r3
 8002e28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	60bb      	str	r3, [r7, #8]
 8002e2e:	60fa      	str	r2, [r7, #12]
 8002e30:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e34:	f7fd f9d0 	bl	80001d8 <__aeabi_uldivmod>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	460b      	mov	r3, r1
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e40:	4b0b      	ldr	r3, [pc, #44]	@ (8002e70 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	0c1b      	lsrs	r3, r3, #16
 8002e46:	f003 0303 	and.w	r3, r3, #3
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	005b      	lsls	r3, r3, #1
 8002e4e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8002e50:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002e52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e54:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e58:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002e5a:	e002      	b.n	8002e62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e5c:	4b05      	ldr	r3, [pc, #20]	@ (8002e74 <HAL_RCC_GetSysClockFreq+0x184>)
 8002e5e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002e60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3740      	adds	r7, #64	@ 0x40
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e6e:	bf00      	nop
 8002e70:	40023800 	.word	0x40023800
 8002e74:	00f42400 	.word	0x00f42400
 8002e78:	017d7840 	.word	0x017d7840

08002e7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e80:	4b03      	ldr	r3, [pc, #12]	@ (8002e90 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e82:	681b      	ldr	r3, [r3, #0]
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	20000010 	.word	0x20000010

08002e94 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002e94:	b084      	sub	sp, #16
 8002e96:	b580      	push	{r7, lr}
 8002e98:	b084      	sub	sp, #16
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	6078      	str	r0, [r7, #4]
 8002e9e:	f107 001c 	add.w	r0, r7, #28
 8002ea2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002ea6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d123      	bne.n	8002ef6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002eb2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	68db      	ldr	r3, [r3, #12]
 8002ebe:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8002ec2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	68db      	ldr	r3, [r3, #12]
 8002ece:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002ed6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d105      	bne.n	8002eea <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	68db      	ldr	r3, [r3, #12]
 8002ee2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f001 fae2 	bl	80044b4 <USB_CoreReset>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	73fb      	strb	r3, [r7, #15]
 8002ef4:	e01b      	b.n	8002f2e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	68db      	ldr	r3, [r3, #12]
 8002efa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f001 fad6 	bl	80044b4 <USB_CoreReset>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002f0c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d106      	bne.n	8002f22 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f18:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	639a      	str	r2, [r3, #56]	@ 0x38
 8002f20:	e005      	b.n	8002f2e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f26:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002f2e:	7fbb      	ldrb	r3, [r7, #30]
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d10b      	bne.n	8002f4c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	f043 0206 	orr.w	r2, r3, #6
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	f043 0220 	orr.w	r2, r3, #32
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002f4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3710      	adds	r7, #16
 8002f52:	46bd      	mov	sp, r7
 8002f54:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002f58:	b004      	add	sp, #16
 8002f5a:	4770      	bx	lr

08002f5c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b087      	sub	sp, #28
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	60f8      	str	r0, [r7, #12]
 8002f64:	60b9      	str	r1, [r7, #8]
 8002f66:	4613      	mov	r3, r2
 8002f68:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002f6a:	79fb      	ldrb	r3, [r7, #7]
 8002f6c:	2b02      	cmp	r3, #2
 8002f6e:	d165      	bne.n	800303c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	4a41      	ldr	r2, [pc, #260]	@ (8003078 <USB_SetTurnaroundTime+0x11c>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d906      	bls.n	8002f86 <USB_SetTurnaroundTime+0x2a>
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	4a40      	ldr	r2, [pc, #256]	@ (800307c <USB_SetTurnaroundTime+0x120>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d202      	bcs.n	8002f86 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002f80:	230f      	movs	r3, #15
 8002f82:	617b      	str	r3, [r7, #20]
 8002f84:	e062      	b.n	800304c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	4a3c      	ldr	r2, [pc, #240]	@ (800307c <USB_SetTurnaroundTime+0x120>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d306      	bcc.n	8002f9c <USB_SetTurnaroundTime+0x40>
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	4a3b      	ldr	r2, [pc, #236]	@ (8003080 <USB_SetTurnaroundTime+0x124>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d202      	bcs.n	8002f9c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002f96:	230e      	movs	r3, #14
 8002f98:	617b      	str	r3, [r7, #20]
 8002f9a:	e057      	b.n	800304c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	4a38      	ldr	r2, [pc, #224]	@ (8003080 <USB_SetTurnaroundTime+0x124>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d306      	bcc.n	8002fb2 <USB_SetTurnaroundTime+0x56>
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	4a37      	ldr	r2, [pc, #220]	@ (8003084 <USB_SetTurnaroundTime+0x128>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d202      	bcs.n	8002fb2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002fac:	230d      	movs	r3, #13
 8002fae:	617b      	str	r3, [r7, #20]
 8002fb0:	e04c      	b.n	800304c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	4a33      	ldr	r2, [pc, #204]	@ (8003084 <USB_SetTurnaroundTime+0x128>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d306      	bcc.n	8002fc8 <USB_SetTurnaroundTime+0x6c>
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	4a32      	ldr	r2, [pc, #200]	@ (8003088 <USB_SetTurnaroundTime+0x12c>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d802      	bhi.n	8002fc8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8002fc2:	230c      	movs	r3, #12
 8002fc4:	617b      	str	r3, [r7, #20]
 8002fc6:	e041      	b.n	800304c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	4a2f      	ldr	r2, [pc, #188]	@ (8003088 <USB_SetTurnaroundTime+0x12c>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d906      	bls.n	8002fde <USB_SetTurnaroundTime+0x82>
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	4a2e      	ldr	r2, [pc, #184]	@ (800308c <USB_SetTurnaroundTime+0x130>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d802      	bhi.n	8002fde <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8002fd8:	230b      	movs	r3, #11
 8002fda:	617b      	str	r3, [r7, #20]
 8002fdc:	e036      	b.n	800304c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	4a2a      	ldr	r2, [pc, #168]	@ (800308c <USB_SetTurnaroundTime+0x130>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d906      	bls.n	8002ff4 <USB_SetTurnaroundTime+0x98>
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	4a29      	ldr	r2, [pc, #164]	@ (8003090 <USB_SetTurnaroundTime+0x134>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d802      	bhi.n	8002ff4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8002fee:	230a      	movs	r3, #10
 8002ff0:	617b      	str	r3, [r7, #20]
 8002ff2:	e02b      	b.n	800304c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	4a26      	ldr	r2, [pc, #152]	@ (8003090 <USB_SetTurnaroundTime+0x134>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d906      	bls.n	800300a <USB_SetTurnaroundTime+0xae>
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	4a25      	ldr	r2, [pc, #148]	@ (8003094 <USB_SetTurnaroundTime+0x138>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d202      	bcs.n	800300a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003004:	2309      	movs	r3, #9
 8003006:	617b      	str	r3, [r7, #20]
 8003008:	e020      	b.n	800304c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	4a21      	ldr	r2, [pc, #132]	@ (8003094 <USB_SetTurnaroundTime+0x138>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d306      	bcc.n	8003020 <USB_SetTurnaroundTime+0xc4>
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	4a20      	ldr	r2, [pc, #128]	@ (8003098 <USB_SetTurnaroundTime+0x13c>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d802      	bhi.n	8003020 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800301a:	2308      	movs	r3, #8
 800301c:	617b      	str	r3, [r7, #20]
 800301e:	e015      	b.n	800304c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	4a1d      	ldr	r2, [pc, #116]	@ (8003098 <USB_SetTurnaroundTime+0x13c>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d906      	bls.n	8003036 <USB_SetTurnaroundTime+0xda>
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	4a1c      	ldr	r2, [pc, #112]	@ (800309c <USB_SetTurnaroundTime+0x140>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d202      	bcs.n	8003036 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003030:	2307      	movs	r3, #7
 8003032:	617b      	str	r3, [r7, #20]
 8003034:	e00a      	b.n	800304c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003036:	2306      	movs	r3, #6
 8003038:	617b      	str	r3, [r7, #20]
 800303a:	e007      	b.n	800304c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800303c:	79fb      	ldrb	r3, [r7, #7]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d102      	bne.n	8003048 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003042:	2309      	movs	r3, #9
 8003044:	617b      	str	r3, [r7, #20]
 8003046:	e001      	b.n	800304c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003048:	2309      	movs	r3, #9
 800304a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	68da      	ldr	r2, [r3, #12]
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	029b      	lsls	r3, r3, #10
 8003060:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8003064:	431a      	orrs	r2, r3
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800306a:	2300      	movs	r3, #0
}
 800306c:	4618      	mov	r0, r3
 800306e:	371c      	adds	r7, #28
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr
 8003078:	00d8acbf 	.word	0x00d8acbf
 800307c:	00e4e1c0 	.word	0x00e4e1c0
 8003080:	00f42400 	.word	0x00f42400
 8003084:	01067380 	.word	0x01067380
 8003088:	011a499f 	.word	0x011a499f
 800308c:	01312cff 	.word	0x01312cff
 8003090:	014ca43f 	.word	0x014ca43f
 8003094:	016e3600 	.word	0x016e3600
 8003098:	01a6ab1f 	.word	0x01a6ab1f
 800309c:	01e84800 	.word	0x01e84800

080030a0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	f043 0201 	orr.w	r2, r3, #1
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80030b4:	2300      	movs	r3, #0
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	370c      	adds	r7, #12
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr

080030c2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80030c2:	b480      	push	{r7}
 80030c4:	b083      	sub	sp, #12
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	f023 0201 	bic.w	r2, r3, #1
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80030d6:	2300      	movs	r3, #0
}
 80030d8:	4618      	mov	r0, r3
 80030da:	370c      	adds	r7, #12
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr

080030e4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b084      	sub	sp, #16
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	460b      	mov	r3, r1
 80030ee:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80030f0:	2300      	movs	r3, #0
 80030f2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003100:	78fb      	ldrb	r3, [r7, #3]
 8003102:	2b01      	cmp	r3, #1
 8003104:	d115      	bne.n	8003132 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003112:	200a      	movs	r0, #10
 8003114:	f7fd fd54 	bl	8000bc0 <HAL_Delay>
      ms += 10U;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	330a      	adds	r3, #10
 800311c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f001 f939 	bl	8004396 <USB_GetMode>
 8003124:	4603      	mov	r3, r0
 8003126:	2b01      	cmp	r3, #1
 8003128:	d01e      	beq.n	8003168 <USB_SetCurrentMode+0x84>
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2bc7      	cmp	r3, #199	@ 0xc7
 800312e:	d9f0      	bls.n	8003112 <USB_SetCurrentMode+0x2e>
 8003130:	e01a      	b.n	8003168 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003132:	78fb      	ldrb	r3, [r7, #3]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d115      	bne.n	8003164 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003144:	200a      	movs	r0, #10
 8003146:	f7fd fd3b 	bl	8000bc0 <HAL_Delay>
      ms += 10U;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	330a      	adds	r3, #10
 800314e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	f001 f920 	bl	8004396 <USB_GetMode>
 8003156:	4603      	mov	r3, r0
 8003158:	2b00      	cmp	r3, #0
 800315a:	d005      	beq.n	8003168 <USB_SetCurrentMode+0x84>
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2bc7      	cmp	r3, #199	@ 0xc7
 8003160:	d9f0      	bls.n	8003144 <USB_SetCurrentMode+0x60>
 8003162:	e001      	b.n	8003168 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e005      	b.n	8003174 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2bc8      	cmp	r3, #200	@ 0xc8
 800316c:	d101      	bne.n	8003172 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e000      	b.n	8003174 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003172:	2300      	movs	r3, #0
}
 8003174:	4618      	mov	r0, r3
 8003176:	3710      	adds	r7, #16
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}

0800317c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800317c:	b084      	sub	sp, #16
 800317e:	b580      	push	{r7, lr}
 8003180:	b086      	sub	sp, #24
 8003182:	af00      	add	r7, sp, #0
 8003184:	6078      	str	r0, [r7, #4]
 8003186:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800318a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800318e:	2300      	movs	r3, #0
 8003190:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003196:	2300      	movs	r3, #0
 8003198:	613b      	str	r3, [r7, #16]
 800319a:	e009      	b.n	80031b0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	3340      	adds	r3, #64	@ 0x40
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	4413      	add	r3, r2
 80031a6:	2200      	movs	r2, #0
 80031a8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	3301      	adds	r3, #1
 80031ae:	613b      	str	r3, [r7, #16]
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	2b0e      	cmp	r3, #14
 80031b4:	d9f2      	bls.n	800319c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80031b6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d11c      	bne.n	80031f8 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	68fa      	ldr	r2, [r7, #12]
 80031c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80031cc:	f043 0302 	orr.w	r3, r3, #2
 80031d0:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031d6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031e2:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031ee:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	639a      	str	r2, [r3, #56]	@ 0x38
 80031f6:	e00b      	b.n	8003210 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031fc:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003208:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003216:	461a      	mov	r2, r3
 8003218:	2300      	movs	r3, #0
 800321a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800321c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8003220:	2b01      	cmp	r3, #1
 8003222:	d10d      	bne.n	8003240 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003224:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003228:	2b00      	cmp	r3, #0
 800322a:	d104      	bne.n	8003236 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800322c:	2100      	movs	r1, #0
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f000 f968 	bl	8003504 <USB_SetDevSpeed>
 8003234:	e008      	b.n	8003248 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003236:	2101      	movs	r1, #1
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f000 f963 	bl	8003504 <USB_SetDevSpeed>
 800323e:	e003      	b.n	8003248 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003240:	2103      	movs	r1, #3
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f000 f95e 	bl	8003504 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003248:	2110      	movs	r1, #16
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f000 f8fa 	bl	8003444 <USB_FlushTxFifo>
 8003250:	4603      	mov	r3, r0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d001      	beq.n	800325a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f000 f924 	bl	80034a8 <USB_FlushRxFifo>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d001      	beq.n	800326a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003270:	461a      	mov	r2, r3
 8003272:	2300      	movs	r3, #0
 8003274:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800327c:	461a      	mov	r2, r3
 800327e:	2300      	movs	r3, #0
 8003280:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003288:	461a      	mov	r2, r3
 800328a:	2300      	movs	r3, #0
 800328c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800328e:	2300      	movs	r3, #0
 8003290:	613b      	str	r3, [r7, #16]
 8003292:	e043      	b.n	800331c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	015a      	lsls	r2, r3, #5
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	4413      	add	r3, r2
 800329c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80032a6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80032aa:	d118      	bne.n	80032de <USB_DevInit+0x162>
    {
      if (i == 0U)
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d10a      	bne.n	80032c8 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	015a      	lsls	r2, r3, #5
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	4413      	add	r3, r2
 80032ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80032be:	461a      	mov	r2, r3
 80032c0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80032c4:	6013      	str	r3, [r2, #0]
 80032c6:	e013      	b.n	80032f0 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	015a      	lsls	r2, r3, #5
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	4413      	add	r3, r2
 80032d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80032d4:	461a      	mov	r2, r3
 80032d6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80032da:	6013      	str	r3, [r2, #0]
 80032dc:	e008      	b.n	80032f0 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	015a      	lsls	r2, r3, #5
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	4413      	add	r3, r2
 80032e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80032ea:	461a      	mov	r2, r3
 80032ec:	2300      	movs	r3, #0
 80032ee:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	015a      	lsls	r2, r3, #5
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	4413      	add	r3, r2
 80032f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80032fc:	461a      	mov	r2, r3
 80032fe:	2300      	movs	r3, #0
 8003300:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	015a      	lsls	r2, r3, #5
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	4413      	add	r3, r2
 800330a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800330e:	461a      	mov	r2, r3
 8003310:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003314:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	3301      	adds	r3, #1
 800331a:	613b      	str	r3, [r7, #16]
 800331c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003320:	461a      	mov	r2, r3
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	4293      	cmp	r3, r2
 8003326:	d3b5      	bcc.n	8003294 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003328:	2300      	movs	r3, #0
 800332a:	613b      	str	r3, [r7, #16]
 800332c:	e043      	b.n	80033b6 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	015a      	lsls	r2, r3, #5
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	4413      	add	r3, r2
 8003336:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003340:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003344:	d118      	bne.n	8003378 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d10a      	bne.n	8003362 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	015a      	lsls	r2, r3, #5
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	4413      	add	r3, r2
 8003354:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003358:	461a      	mov	r2, r3
 800335a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800335e:	6013      	str	r3, [r2, #0]
 8003360:	e013      	b.n	800338a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	015a      	lsls	r2, r3, #5
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	4413      	add	r3, r2
 800336a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800336e:	461a      	mov	r2, r3
 8003370:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003374:	6013      	str	r3, [r2, #0]
 8003376:	e008      	b.n	800338a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	015a      	lsls	r2, r3, #5
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	4413      	add	r3, r2
 8003380:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003384:	461a      	mov	r2, r3
 8003386:	2300      	movs	r3, #0
 8003388:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	015a      	lsls	r2, r3, #5
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	4413      	add	r3, r2
 8003392:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003396:	461a      	mov	r2, r3
 8003398:	2300      	movs	r3, #0
 800339a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	015a      	lsls	r2, r3, #5
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	4413      	add	r3, r2
 80033a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033a8:	461a      	mov	r2, r3
 80033aa:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80033ae:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	3301      	adds	r3, #1
 80033b4:	613b      	str	r3, [r7, #16]
 80033b6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80033ba:	461a      	mov	r2, r3
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	4293      	cmp	r3, r2
 80033c0:	d3b5      	bcc.n	800332e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80033c8:	691b      	ldr	r3, [r3, #16]
 80033ca:	68fa      	ldr	r2, [r7, #12]
 80033cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80033d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80033d4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80033e2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80033e4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d105      	bne.n	80033f8 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	699b      	ldr	r3, [r3, #24]
 80033f0:	f043 0210 	orr.w	r2, r3, #16
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	699a      	ldr	r2, [r3, #24]
 80033fc:	4b10      	ldr	r3, [pc, #64]	@ (8003440 <USB_DevInit+0x2c4>)
 80033fe:	4313      	orrs	r3, r2
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003404:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003408:	2b00      	cmp	r3, #0
 800340a:	d005      	beq.n	8003418 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	699b      	ldr	r3, [r3, #24]
 8003410:	f043 0208 	orr.w	r2, r3, #8
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003418:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800341c:	2b01      	cmp	r3, #1
 800341e:	d107      	bne.n	8003430 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	699b      	ldr	r3, [r3, #24]
 8003424:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003428:	f043 0304 	orr.w	r3, r3, #4
 800342c:	687a      	ldr	r2, [r7, #4]
 800342e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003430:	7dfb      	ldrb	r3, [r7, #23]
}
 8003432:	4618      	mov	r0, r3
 8003434:	3718      	adds	r7, #24
 8003436:	46bd      	mov	sp, r7
 8003438:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800343c:	b004      	add	sp, #16
 800343e:	4770      	bx	lr
 8003440:	803c3800 	.word	0x803c3800

08003444 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003444:	b480      	push	{r7}
 8003446:	b085      	sub	sp, #20
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800344e:	2300      	movs	r3, #0
 8003450:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	3301      	adds	r3, #1
 8003456:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800345e:	d901      	bls.n	8003464 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003460:	2303      	movs	r3, #3
 8003462:	e01b      	b.n	800349c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	691b      	ldr	r3, [r3, #16]
 8003468:	2b00      	cmp	r3, #0
 800346a:	daf2      	bge.n	8003452 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800346c:	2300      	movs	r3, #0
 800346e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	019b      	lsls	r3, r3, #6
 8003474:	f043 0220 	orr.w	r2, r3, #32
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	3301      	adds	r3, #1
 8003480:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003488:	d901      	bls.n	800348e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800348a:	2303      	movs	r3, #3
 800348c:	e006      	b.n	800349c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	f003 0320 	and.w	r3, r3, #32
 8003496:	2b20      	cmp	r3, #32
 8003498:	d0f0      	beq.n	800347c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800349a:	2300      	movs	r3, #0
}
 800349c:	4618      	mov	r0, r3
 800349e:	3714      	adds	r7, #20
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr

080034a8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b085      	sub	sp, #20
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80034b0:	2300      	movs	r3, #0
 80034b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	3301      	adds	r3, #1
 80034b8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80034c0:	d901      	bls.n	80034c6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e018      	b.n	80034f8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	691b      	ldr	r3, [r3, #16]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	daf2      	bge.n	80034b4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80034ce:	2300      	movs	r3, #0
 80034d0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2210      	movs	r2, #16
 80034d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	3301      	adds	r3, #1
 80034dc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80034e4:	d901      	bls.n	80034ea <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80034e6:	2303      	movs	r3, #3
 80034e8:	e006      	b.n	80034f8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	691b      	ldr	r3, [r3, #16]
 80034ee:	f003 0310 	and.w	r3, r3, #16
 80034f2:	2b10      	cmp	r3, #16
 80034f4:	d0f0      	beq.n	80034d8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80034f6:	2300      	movs	r3, #0
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3714      	adds	r7, #20
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr

08003504 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003504:	b480      	push	{r7}
 8003506:	b085      	sub	sp, #20
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	460b      	mov	r3, r1
 800350e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	78fb      	ldrb	r3, [r7, #3]
 800351e:	68f9      	ldr	r1, [r7, #12]
 8003520:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003524:	4313      	orrs	r3, r2
 8003526:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003528:	2300      	movs	r3, #0
}
 800352a:	4618      	mov	r0, r3
 800352c:	3714      	adds	r7, #20
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr

08003536 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8003536:	b480      	push	{r7}
 8003538:	b087      	sub	sp, #28
 800353a:	af00      	add	r7, sp, #0
 800353c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	f003 0306 	and.w	r3, r3, #6
 800354e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d102      	bne.n	800355c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003556:	2300      	movs	r3, #0
 8003558:	75fb      	strb	r3, [r7, #23]
 800355a:	e00a      	b.n	8003572 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2b02      	cmp	r3, #2
 8003560:	d002      	beq.n	8003568 <USB_GetDevSpeed+0x32>
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2b06      	cmp	r3, #6
 8003566:	d102      	bne.n	800356e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003568:	2302      	movs	r3, #2
 800356a:	75fb      	strb	r3, [r7, #23]
 800356c:	e001      	b.n	8003572 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800356e:	230f      	movs	r3, #15
 8003570:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003572:	7dfb      	ldrb	r3, [r7, #23]
}
 8003574:	4618      	mov	r0, r3
 8003576:	371c      	adds	r7, #28
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr

08003580 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003580:	b480      	push	{r7}
 8003582:	b085      	sub	sp, #20
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	781b      	ldrb	r3, [r3, #0]
 8003592:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	785b      	ldrb	r3, [r3, #1]
 8003598:	2b01      	cmp	r3, #1
 800359a:	d13a      	bne.n	8003612 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80035a2:	69da      	ldr	r2, [r3, #28]
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	781b      	ldrb	r3, [r3, #0]
 80035a8:	f003 030f 	and.w	r3, r3, #15
 80035ac:	2101      	movs	r1, #1
 80035ae:	fa01 f303 	lsl.w	r3, r1, r3
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	68f9      	ldr	r1, [r7, #12]
 80035b6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80035ba:	4313      	orrs	r3, r2
 80035bc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	015a      	lsls	r2, r3, #5
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	4413      	add	r3, r2
 80035c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d155      	bne.n	8003680 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	015a      	lsls	r2, r3, #5
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	4413      	add	r3, r2
 80035dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	791b      	ldrb	r3, [r3, #4]
 80035ee:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80035f0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	059b      	lsls	r3, r3, #22
 80035f6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80035f8:	4313      	orrs	r3, r2
 80035fa:	68ba      	ldr	r2, [r7, #8]
 80035fc:	0151      	lsls	r1, r2, #5
 80035fe:	68fa      	ldr	r2, [r7, #12]
 8003600:	440a      	add	r2, r1
 8003602:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003606:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800360a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800360e:	6013      	str	r3, [r2, #0]
 8003610:	e036      	b.n	8003680 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003618:	69da      	ldr	r2, [r3, #28]
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	781b      	ldrb	r3, [r3, #0]
 800361e:	f003 030f 	and.w	r3, r3, #15
 8003622:	2101      	movs	r1, #1
 8003624:	fa01 f303 	lsl.w	r3, r1, r3
 8003628:	041b      	lsls	r3, r3, #16
 800362a:	68f9      	ldr	r1, [r7, #12]
 800362c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003630:	4313      	orrs	r3, r2
 8003632:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	015a      	lsls	r2, r3, #5
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	4413      	add	r3, r2
 800363c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003646:	2b00      	cmp	r3, #0
 8003648:	d11a      	bne.n	8003680 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	015a      	lsls	r2, r3, #5
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	4413      	add	r3, r2
 8003652:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	791b      	ldrb	r3, [r3, #4]
 8003664:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003666:	430b      	orrs	r3, r1
 8003668:	4313      	orrs	r3, r2
 800366a:	68ba      	ldr	r2, [r7, #8]
 800366c:	0151      	lsls	r1, r2, #5
 800366e:	68fa      	ldr	r2, [r7, #12]
 8003670:	440a      	add	r2, r1
 8003672:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003676:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800367a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800367e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003680:	2300      	movs	r3, #0
}
 8003682:	4618      	mov	r0, r3
 8003684:	3714      	adds	r7, #20
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr
	...

08003690 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003690:	b480      	push	{r7}
 8003692:	b085      	sub	sp, #20
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
 8003698:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	781b      	ldrb	r3, [r3, #0]
 80036a2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	785b      	ldrb	r3, [r3, #1]
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d161      	bne.n	8003770 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	015a      	lsls	r2, r3, #5
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	4413      	add	r3, r2
 80036b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80036be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80036c2:	d11f      	bne.n	8003704 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	015a      	lsls	r2, r3, #5
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	4413      	add	r3, r2
 80036cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	68ba      	ldr	r2, [r7, #8]
 80036d4:	0151      	lsls	r1, r2, #5
 80036d6:	68fa      	ldr	r2, [r7, #12]
 80036d8:	440a      	add	r2, r1
 80036da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80036de:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80036e2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	015a      	lsls	r2, r3, #5
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	4413      	add	r3, r2
 80036ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	68ba      	ldr	r2, [r7, #8]
 80036f4:	0151      	lsls	r1, r2, #5
 80036f6:	68fa      	ldr	r2, [r7, #12]
 80036f8:	440a      	add	r2, r1
 80036fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80036fe:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003702:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800370a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	f003 030f 	and.w	r3, r3, #15
 8003714:	2101      	movs	r1, #1
 8003716:	fa01 f303 	lsl.w	r3, r1, r3
 800371a:	b29b      	uxth	r3, r3
 800371c:	43db      	mvns	r3, r3
 800371e:	68f9      	ldr	r1, [r7, #12]
 8003720:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003724:	4013      	ands	r3, r2
 8003726:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800372e:	69da      	ldr	r2, [r3, #28]
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	781b      	ldrb	r3, [r3, #0]
 8003734:	f003 030f 	and.w	r3, r3, #15
 8003738:	2101      	movs	r1, #1
 800373a:	fa01 f303 	lsl.w	r3, r1, r3
 800373e:	b29b      	uxth	r3, r3
 8003740:	43db      	mvns	r3, r3
 8003742:	68f9      	ldr	r1, [r7, #12]
 8003744:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003748:	4013      	ands	r3, r2
 800374a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	015a      	lsls	r2, r3, #5
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	4413      	add	r3, r2
 8003754:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	0159      	lsls	r1, r3, #5
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	440b      	add	r3, r1
 8003762:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003766:	4619      	mov	r1, r3
 8003768:	4b35      	ldr	r3, [pc, #212]	@ (8003840 <USB_DeactivateEndpoint+0x1b0>)
 800376a:	4013      	ands	r3, r2
 800376c:	600b      	str	r3, [r1, #0]
 800376e:	e060      	b.n	8003832 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	015a      	lsls	r2, r3, #5
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	4413      	add	r3, r2
 8003778:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003782:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003786:	d11f      	bne.n	80037c8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	015a      	lsls	r2, r3, #5
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	4413      	add	r3, r2
 8003790:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	68ba      	ldr	r2, [r7, #8]
 8003798:	0151      	lsls	r1, r2, #5
 800379a:	68fa      	ldr	r2, [r7, #12]
 800379c:	440a      	add	r2, r1
 800379e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80037a2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80037a6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	015a      	lsls	r2, r3, #5
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	4413      	add	r3, r2
 80037b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	68ba      	ldr	r2, [r7, #8]
 80037b8:	0151      	lsls	r1, r2, #5
 80037ba:	68fa      	ldr	r2, [r7, #12]
 80037bc:	440a      	add	r2, r1
 80037be:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80037c2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80037c6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037ce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	781b      	ldrb	r3, [r3, #0]
 80037d4:	f003 030f 	and.w	r3, r3, #15
 80037d8:	2101      	movs	r1, #1
 80037da:	fa01 f303 	lsl.w	r3, r1, r3
 80037de:	041b      	lsls	r3, r3, #16
 80037e0:	43db      	mvns	r3, r3
 80037e2:	68f9      	ldr	r1, [r7, #12]
 80037e4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80037e8:	4013      	ands	r3, r2
 80037ea:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037f2:	69da      	ldr	r2, [r3, #28]
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	781b      	ldrb	r3, [r3, #0]
 80037f8:	f003 030f 	and.w	r3, r3, #15
 80037fc:	2101      	movs	r1, #1
 80037fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003802:	041b      	lsls	r3, r3, #16
 8003804:	43db      	mvns	r3, r3
 8003806:	68f9      	ldr	r1, [r7, #12]
 8003808:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800380c:	4013      	ands	r3, r2
 800380e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	015a      	lsls	r2, r3, #5
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	4413      	add	r3, r2
 8003818:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	0159      	lsls	r1, r3, #5
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	440b      	add	r3, r1
 8003826:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800382a:	4619      	mov	r1, r3
 800382c:	4b05      	ldr	r3, [pc, #20]	@ (8003844 <USB_DeactivateEndpoint+0x1b4>)
 800382e:	4013      	ands	r3, r2
 8003830:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003832:	2300      	movs	r3, #0
}
 8003834:	4618      	mov	r0, r3
 8003836:	3714      	adds	r7, #20
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr
 8003840:	ec337800 	.word	0xec337800
 8003844:	eff37800 	.word	0xeff37800

08003848 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b08a      	sub	sp, #40	@ 0x28
 800384c:	af02      	add	r7, sp, #8
 800384e:	60f8      	str	r0, [r7, #12]
 8003850:	60b9      	str	r1, [r7, #8]
 8003852:	4613      	mov	r3, r2
 8003854:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	781b      	ldrb	r3, [r3, #0]
 800385e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	785b      	ldrb	r3, [r3, #1]
 8003864:	2b01      	cmp	r3, #1
 8003866:	f040 817a 	bne.w	8003b5e <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	691b      	ldr	r3, [r3, #16]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d132      	bne.n	80038d8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003872:	69bb      	ldr	r3, [r7, #24]
 8003874:	015a      	lsls	r2, r3, #5
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	4413      	add	r3, r2
 800387a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800387e:	691b      	ldr	r3, [r3, #16]
 8003880:	69ba      	ldr	r2, [r7, #24]
 8003882:	0151      	lsls	r1, r2, #5
 8003884:	69fa      	ldr	r2, [r7, #28]
 8003886:	440a      	add	r2, r1
 8003888:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800388c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8003890:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8003894:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003896:	69bb      	ldr	r3, [r7, #24]
 8003898:	015a      	lsls	r2, r3, #5
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	4413      	add	r3, r2
 800389e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038a2:	691b      	ldr	r3, [r3, #16]
 80038a4:	69ba      	ldr	r2, [r7, #24]
 80038a6:	0151      	lsls	r1, r2, #5
 80038a8:	69fa      	ldr	r2, [r7, #28]
 80038aa:	440a      	add	r2, r1
 80038ac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80038b0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80038b4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80038b6:	69bb      	ldr	r3, [r7, #24]
 80038b8:	015a      	lsls	r2, r3, #5
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	4413      	add	r3, r2
 80038be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038c2:	691b      	ldr	r3, [r3, #16]
 80038c4:	69ba      	ldr	r2, [r7, #24]
 80038c6:	0151      	lsls	r1, r2, #5
 80038c8:	69fa      	ldr	r2, [r7, #28]
 80038ca:	440a      	add	r2, r1
 80038cc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80038d0:	0cdb      	lsrs	r3, r3, #19
 80038d2:	04db      	lsls	r3, r3, #19
 80038d4:	6113      	str	r3, [r2, #16]
 80038d6:	e092      	b.n	80039fe <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80038d8:	69bb      	ldr	r3, [r7, #24]
 80038da:	015a      	lsls	r2, r3, #5
 80038dc:	69fb      	ldr	r3, [r7, #28]
 80038de:	4413      	add	r3, r2
 80038e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038e4:	691b      	ldr	r3, [r3, #16]
 80038e6:	69ba      	ldr	r2, [r7, #24]
 80038e8:	0151      	lsls	r1, r2, #5
 80038ea:	69fa      	ldr	r2, [r7, #28]
 80038ec:	440a      	add	r2, r1
 80038ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80038f2:	0cdb      	lsrs	r3, r3, #19
 80038f4:	04db      	lsls	r3, r3, #19
 80038f6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80038f8:	69bb      	ldr	r3, [r7, #24]
 80038fa:	015a      	lsls	r2, r3, #5
 80038fc:	69fb      	ldr	r3, [r7, #28]
 80038fe:	4413      	add	r3, r2
 8003900:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003904:	691b      	ldr	r3, [r3, #16]
 8003906:	69ba      	ldr	r2, [r7, #24]
 8003908:	0151      	lsls	r1, r2, #5
 800390a:	69fa      	ldr	r2, [r7, #28]
 800390c:	440a      	add	r2, r1
 800390e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003912:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8003916:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800391a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800391c:	69bb      	ldr	r3, [r7, #24]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d11a      	bne.n	8003958 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	691a      	ldr	r2, [r3, #16]
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	429a      	cmp	r2, r3
 800392c:	d903      	bls.n	8003936 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	689a      	ldr	r2, [r3, #8]
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	015a      	lsls	r2, r3, #5
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	4413      	add	r3, r2
 800393e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003942:	691b      	ldr	r3, [r3, #16]
 8003944:	69ba      	ldr	r2, [r7, #24]
 8003946:	0151      	lsls	r1, r2, #5
 8003948:	69fa      	ldr	r2, [r7, #28]
 800394a:	440a      	add	r2, r1
 800394c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003950:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003954:	6113      	str	r3, [r2, #16]
 8003956:	e01b      	b.n	8003990 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003958:	69bb      	ldr	r3, [r7, #24]
 800395a:	015a      	lsls	r2, r3, #5
 800395c:	69fb      	ldr	r3, [r7, #28]
 800395e:	4413      	add	r3, r2
 8003960:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003964:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	6919      	ldr	r1, [r3, #16]
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	440b      	add	r3, r1
 8003970:	1e59      	subs	r1, r3, #1
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	fbb1 f3f3 	udiv	r3, r1, r3
 800397a:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800397c:	4ba2      	ldr	r3, [pc, #648]	@ (8003c08 <USB_EPStartXfer+0x3c0>)
 800397e:	400b      	ands	r3, r1
 8003980:	69b9      	ldr	r1, [r7, #24]
 8003982:	0148      	lsls	r0, r1, #5
 8003984:	69f9      	ldr	r1, [r7, #28]
 8003986:	4401      	add	r1, r0
 8003988:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800398c:	4313      	orrs	r3, r2
 800398e:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003990:	69bb      	ldr	r3, [r7, #24]
 8003992:	015a      	lsls	r2, r3, #5
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	4413      	add	r3, r2
 8003998:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800399c:	691a      	ldr	r2, [r3, #16]
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	691b      	ldr	r3, [r3, #16]
 80039a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039a6:	69b9      	ldr	r1, [r7, #24]
 80039a8:	0148      	lsls	r0, r1, #5
 80039aa:	69f9      	ldr	r1, [r7, #28]
 80039ac:	4401      	add	r1, r0
 80039ae:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80039b2:	4313      	orrs	r3, r2
 80039b4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	791b      	ldrb	r3, [r3, #4]
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d11f      	bne.n	80039fe <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80039be:	69bb      	ldr	r3, [r7, #24]
 80039c0:	015a      	lsls	r2, r3, #5
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	4413      	add	r3, r2
 80039c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039ca:	691b      	ldr	r3, [r3, #16]
 80039cc:	69ba      	ldr	r2, [r7, #24]
 80039ce:	0151      	lsls	r1, r2, #5
 80039d0:	69fa      	ldr	r2, [r7, #28]
 80039d2:	440a      	add	r2, r1
 80039d4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80039d8:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80039dc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80039de:	69bb      	ldr	r3, [r7, #24]
 80039e0:	015a      	lsls	r2, r3, #5
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	4413      	add	r3, r2
 80039e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039ea:	691b      	ldr	r3, [r3, #16]
 80039ec:	69ba      	ldr	r2, [r7, #24]
 80039ee:	0151      	lsls	r1, r2, #5
 80039f0:	69fa      	ldr	r2, [r7, #28]
 80039f2:	440a      	add	r2, r1
 80039f4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80039f8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80039fc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80039fe:	79fb      	ldrb	r3, [r7, #7]
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d14b      	bne.n	8003a9c <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	69db      	ldr	r3, [r3, #28]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d009      	beq.n	8003a20 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003a0c:	69bb      	ldr	r3, [r7, #24]
 8003a0e:	015a      	lsls	r2, r3, #5
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	4413      	add	r3, r2
 8003a14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a18:	461a      	mov	r2, r3
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	69db      	ldr	r3, [r3, #28]
 8003a1e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	791b      	ldrb	r3, [r3, #4]
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d128      	bne.n	8003a7a <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003a28:	69fb      	ldr	r3, [r7, #28]
 8003a2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d110      	bne.n	8003a5a <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003a38:	69bb      	ldr	r3, [r7, #24]
 8003a3a:	015a      	lsls	r2, r3, #5
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	4413      	add	r3, r2
 8003a40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	69ba      	ldr	r2, [r7, #24]
 8003a48:	0151      	lsls	r1, r2, #5
 8003a4a:	69fa      	ldr	r2, [r7, #28]
 8003a4c:	440a      	add	r2, r1
 8003a4e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003a52:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003a56:	6013      	str	r3, [r2, #0]
 8003a58:	e00f      	b.n	8003a7a <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003a5a:	69bb      	ldr	r3, [r7, #24]
 8003a5c:	015a      	lsls	r2, r3, #5
 8003a5e:	69fb      	ldr	r3, [r7, #28]
 8003a60:	4413      	add	r3, r2
 8003a62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	69ba      	ldr	r2, [r7, #24]
 8003a6a:	0151      	lsls	r1, r2, #5
 8003a6c:	69fa      	ldr	r2, [r7, #28]
 8003a6e:	440a      	add	r2, r1
 8003a70:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003a74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a78:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003a7a:	69bb      	ldr	r3, [r7, #24]
 8003a7c:	015a      	lsls	r2, r3, #5
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	4413      	add	r3, r2
 8003a82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	69ba      	ldr	r2, [r7, #24]
 8003a8a:	0151      	lsls	r1, r2, #5
 8003a8c:	69fa      	ldr	r2, [r7, #28]
 8003a8e:	440a      	add	r2, r1
 8003a90:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003a94:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8003a98:	6013      	str	r3, [r2, #0]
 8003a9a:	e165      	b.n	8003d68 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	015a      	lsls	r2, r3, #5
 8003aa0:	69fb      	ldr	r3, [r7, #28]
 8003aa2:	4413      	add	r3, r2
 8003aa4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	69ba      	ldr	r2, [r7, #24]
 8003aac:	0151      	lsls	r1, r2, #5
 8003aae:	69fa      	ldr	r2, [r7, #28]
 8003ab0:	440a      	add	r2, r1
 8003ab2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003ab6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8003aba:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	791b      	ldrb	r3, [r3, #4]
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d015      	beq.n	8003af0 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	691b      	ldr	r3, [r3, #16]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	f000 814d 	beq.w	8003d68 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ad4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	781b      	ldrb	r3, [r3, #0]
 8003ada:	f003 030f 	and.w	r3, r3, #15
 8003ade:	2101      	movs	r1, #1
 8003ae0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ae4:	69f9      	ldr	r1, [r7, #28]
 8003ae6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003aea:	4313      	orrs	r3, r2
 8003aec:	634b      	str	r3, [r1, #52]	@ 0x34
 8003aee:	e13b      	b.n	8003d68 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d110      	bne.n	8003b22 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003b00:	69bb      	ldr	r3, [r7, #24]
 8003b02:	015a      	lsls	r2, r3, #5
 8003b04:	69fb      	ldr	r3, [r7, #28]
 8003b06:	4413      	add	r3, r2
 8003b08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	69ba      	ldr	r2, [r7, #24]
 8003b10:	0151      	lsls	r1, r2, #5
 8003b12:	69fa      	ldr	r2, [r7, #28]
 8003b14:	440a      	add	r2, r1
 8003b16:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003b1a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003b1e:	6013      	str	r3, [r2, #0]
 8003b20:	e00f      	b.n	8003b42 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003b22:	69bb      	ldr	r3, [r7, #24]
 8003b24:	015a      	lsls	r2, r3, #5
 8003b26:	69fb      	ldr	r3, [r7, #28]
 8003b28:	4413      	add	r3, r2
 8003b2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	69ba      	ldr	r2, [r7, #24]
 8003b32:	0151      	lsls	r1, r2, #5
 8003b34:	69fa      	ldr	r2, [r7, #28]
 8003b36:	440a      	add	r2, r1
 8003b38:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003b3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b40:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	68d9      	ldr	r1, [r3, #12]
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	781a      	ldrb	r2, [r3, #0]
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	691b      	ldr	r3, [r3, #16]
 8003b4e:	b298      	uxth	r0, r3
 8003b50:	79fb      	ldrb	r3, [r7, #7]
 8003b52:	9300      	str	r3, [sp, #0]
 8003b54:	4603      	mov	r3, r0
 8003b56:	68f8      	ldr	r0, [r7, #12]
 8003b58:	f000 f9b8 	bl	8003ecc <USB_WritePacket>
 8003b5c:	e104      	b.n	8003d68 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003b5e:	69bb      	ldr	r3, [r7, #24]
 8003b60:	015a      	lsls	r2, r3, #5
 8003b62:	69fb      	ldr	r3, [r7, #28]
 8003b64:	4413      	add	r3, r2
 8003b66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b6a:	691b      	ldr	r3, [r3, #16]
 8003b6c:	69ba      	ldr	r2, [r7, #24]
 8003b6e:	0151      	lsls	r1, r2, #5
 8003b70:	69fa      	ldr	r2, [r7, #28]
 8003b72:	440a      	add	r2, r1
 8003b74:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003b78:	0cdb      	lsrs	r3, r3, #19
 8003b7a:	04db      	lsls	r3, r3, #19
 8003b7c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003b7e:	69bb      	ldr	r3, [r7, #24]
 8003b80:	015a      	lsls	r2, r3, #5
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	4413      	add	r3, r2
 8003b86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b8a:	691b      	ldr	r3, [r3, #16]
 8003b8c:	69ba      	ldr	r2, [r7, #24]
 8003b8e:	0151      	lsls	r1, r2, #5
 8003b90:	69fa      	ldr	r2, [r7, #28]
 8003b92:	440a      	add	r2, r1
 8003b94:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003b98:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8003b9c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8003ba0:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8003ba2:	69bb      	ldr	r3, [r7, #24]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d131      	bne.n	8003c0c <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	691b      	ldr	r3, [r3, #16]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d003      	beq.n	8003bb8 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	689a      	ldr	r2, [r3, #8]
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	689a      	ldr	r2, [r3, #8]
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8003bc0:	69bb      	ldr	r3, [r7, #24]
 8003bc2:	015a      	lsls	r2, r3, #5
 8003bc4:	69fb      	ldr	r3, [r7, #28]
 8003bc6:	4413      	add	r3, r2
 8003bc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003bcc:	691a      	ldr	r2, [r3, #16]
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	6a1b      	ldr	r3, [r3, #32]
 8003bd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bd6:	69b9      	ldr	r1, [r7, #24]
 8003bd8:	0148      	lsls	r0, r1, #5
 8003bda:	69f9      	ldr	r1, [r7, #28]
 8003bdc:	4401      	add	r1, r0
 8003bde:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8003be2:	4313      	orrs	r3, r2
 8003be4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003be6:	69bb      	ldr	r3, [r7, #24]
 8003be8:	015a      	lsls	r2, r3, #5
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	4413      	add	r3, r2
 8003bee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003bf2:	691b      	ldr	r3, [r3, #16]
 8003bf4:	69ba      	ldr	r2, [r7, #24]
 8003bf6:	0151      	lsls	r1, r2, #5
 8003bf8:	69fa      	ldr	r2, [r7, #28]
 8003bfa:	440a      	add	r2, r1
 8003bfc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003c00:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003c04:	6113      	str	r3, [r2, #16]
 8003c06:	e061      	b.n	8003ccc <USB_EPStartXfer+0x484>
 8003c08:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	691b      	ldr	r3, [r3, #16]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d123      	bne.n	8003c5c <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003c14:	69bb      	ldr	r3, [r7, #24]
 8003c16:	015a      	lsls	r2, r3, #5
 8003c18:	69fb      	ldr	r3, [r7, #28]
 8003c1a:	4413      	add	r3, r2
 8003c1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c20:	691a      	ldr	r2, [r3, #16]
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c2a:	69b9      	ldr	r1, [r7, #24]
 8003c2c:	0148      	lsls	r0, r1, #5
 8003c2e:	69f9      	ldr	r1, [r7, #28]
 8003c30:	4401      	add	r1, r0
 8003c32:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8003c36:	4313      	orrs	r3, r2
 8003c38:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003c3a:	69bb      	ldr	r3, [r7, #24]
 8003c3c:	015a      	lsls	r2, r3, #5
 8003c3e:	69fb      	ldr	r3, [r7, #28]
 8003c40:	4413      	add	r3, r2
 8003c42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c46:	691b      	ldr	r3, [r3, #16]
 8003c48:	69ba      	ldr	r2, [r7, #24]
 8003c4a:	0151      	lsls	r1, r2, #5
 8003c4c:	69fa      	ldr	r2, [r7, #28]
 8003c4e:	440a      	add	r2, r1
 8003c50:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003c54:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003c58:	6113      	str	r3, [r2, #16]
 8003c5a:	e037      	b.n	8003ccc <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	691a      	ldr	r2, [r3, #16]
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	4413      	add	r3, r2
 8003c66:	1e5a      	subs	r2, r3, #1
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c70:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	8afa      	ldrh	r2, [r7, #22]
 8003c78:	fb03 f202 	mul.w	r2, r3, r2
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003c80:	69bb      	ldr	r3, [r7, #24]
 8003c82:	015a      	lsls	r2, r3, #5
 8003c84:	69fb      	ldr	r3, [r7, #28]
 8003c86:	4413      	add	r3, r2
 8003c88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c8c:	691a      	ldr	r2, [r3, #16]
 8003c8e:	8afb      	ldrh	r3, [r7, #22]
 8003c90:	04d9      	lsls	r1, r3, #19
 8003c92:	4b38      	ldr	r3, [pc, #224]	@ (8003d74 <USB_EPStartXfer+0x52c>)
 8003c94:	400b      	ands	r3, r1
 8003c96:	69b9      	ldr	r1, [r7, #24]
 8003c98:	0148      	lsls	r0, r1, #5
 8003c9a:	69f9      	ldr	r1, [r7, #28]
 8003c9c:	4401      	add	r1, r0
 8003c9e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8003ca6:	69bb      	ldr	r3, [r7, #24]
 8003ca8:	015a      	lsls	r2, r3, #5
 8003caa:	69fb      	ldr	r3, [r7, #28]
 8003cac:	4413      	add	r3, r2
 8003cae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003cb2:	691a      	ldr	r2, [r3, #16]
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	6a1b      	ldr	r3, [r3, #32]
 8003cb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cbc:	69b9      	ldr	r1, [r7, #24]
 8003cbe:	0148      	lsls	r0, r1, #5
 8003cc0:	69f9      	ldr	r1, [r7, #28]
 8003cc2:	4401      	add	r1, r0
 8003cc4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8003ccc:	79fb      	ldrb	r3, [r7, #7]
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d10d      	bne.n	8003cee <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d009      	beq.n	8003cee <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	68d9      	ldr	r1, [r3, #12]
 8003cde:	69bb      	ldr	r3, [r7, #24]
 8003ce0:	015a      	lsls	r2, r3, #5
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	4413      	add	r3, r2
 8003ce6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003cea:	460a      	mov	r2, r1
 8003cec:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	791b      	ldrb	r3, [r3, #4]
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d128      	bne.n	8003d48 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003cf6:	69fb      	ldr	r3, [r7, #28]
 8003cf8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d110      	bne.n	8003d28 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003d06:	69bb      	ldr	r3, [r7, #24]
 8003d08:	015a      	lsls	r2, r3, #5
 8003d0a:	69fb      	ldr	r3, [r7, #28]
 8003d0c:	4413      	add	r3, r2
 8003d0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	69ba      	ldr	r2, [r7, #24]
 8003d16:	0151      	lsls	r1, r2, #5
 8003d18:	69fa      	ldr	r2, [r7, #28]
 8003d1a:	440a      	add	r2, r1
 8003d1c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003d20:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003d24:	6013      	str	r3, [r2, #0]
 8003d26:	e00f      	b.n	8003d48 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003d28:	69bb      	ldr	r3, [r7, #24]
 8003d2a:	015a      	lsls	r2, r3, #5
 8003d2c:	69fb      	ldr	r3, [r7, #28]
 8003d2e:	4413      	add	r3, r2
 8003d30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	69ba      	ldr	r2, [r7, #24]
 8003d38:	0151      	lsls	r1, r2, #5
 8003d3a:	69fa      	ldr	r2, [r7, #28]
 8003d3c:	440a      	add	r2, r1
 8003d3e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003d42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d46:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003d48:	69bb      	ldr	r3, [r7, #24]
 8003d4a:	015a      	lsls	r2, r3, #5
 8003d4c:	69fb      	ldr	r3, [r7, #28]
 8003d4e:	4413      	add	r3, r2
 8003d50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	69ba      	ldr	r2, [r7, #24]
 8003d58:	0151      	lsls	r1, r2, #5
 8003d5a:	69fa      	ldr	r2, [r7, #28]
 8003d5c:	440a      	add	r2, r1
 8003d5e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003d62:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8003d66:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003d68:	2300      	movs	r3, #0
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3720      	adds	r7, #32
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	1ff80000 	.word	0x1ff80000

08003d78 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b087      	sub	sp, #28
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003d82:	2300      	movs	r3, #0
 8003d84:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8003d86:	2300      	movs	r3, #0
 8003d88:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	785b      	ldrb	r3, [r3, #1]
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d14a      	bne.n	8003e2c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	781b      	ldrb	r3, [r3, #0]
 8003d9a:	015a      	lsls	r2, r3, #5
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	4413      	add	r3, r2
 8003da0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003daa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003dae:	f040 8086 	bne.w	8003ebe <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	781b      	ldrb	r3, [r3, #0]
 8003db6:	015a      	lsls	r2, r3, #5
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	4413      	add	r3, r2
 8003dbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	683a      	ldr	r2, [r7, #0]
 8003dc4:	7812      	ldrb	r2, [r2, #0]
 8003dc6:	0151      	lsls	r1, r2, #5
 8003dc8:	693a      	ldr	r2, [r7, #16]
 8003dca:	440a      	add	r2, r1
 8003dcc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003dd0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003dd4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	781b      	ldrb	r3, [r3, #0]
 8003dda:	015a      	lsls	r2, r3, #5
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	4413      	add	r3, r2
 8003de0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	683a      	ldr	r2, [r7, #0]
 8003de8:	7812      	ldrb	r2, [r2, #0]
 8003dea:	0151      	lsls	r1, r2, #5
 8003dec:	693a      	ldr	r2, [r7, #16]
 8003dee:	440a      	add	r2, r1
 8003df0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003df4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003df8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	3301      	adds	r3, #1
 8003dfe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d902      	bls.n	8003e10 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	75fb      	strb	r3, [r7, #23]
          break;
 8003e0e:	e056      	b.n	8003ebe <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	781b      	ldrb	r3, [r3, #0]
 8003e14:	015a      	lsls	r2, r3, #5
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	4413      	add	r3, r2
 8003e1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003e24:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003e28:	d0e7      	beq.n	8003dfa <USB_EPStopXfer+0x82>
 8003e2a:	e048      	b.n	8003ebe <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	781b      	ldrb	r3, [r3, #0]
 8003e30:	015a      	lsls	r2, r3, #5
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	4413      	add	r3, r2
 8003e36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003e40:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003e44:	d13b      	bne.n	8003ebe <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	781b      	ldrb	r3, [r3, #0]
 8003e4a:	015a      	lsls	r2, r3, #5
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	4413      	add	r3, r2
 8003e50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	683a      	ldr	r2, [r7, #0]
 8003e58:	7812      	ldrb	r2, [r2, #0]
 8003e5a:	0151      	lsls	r1, r2, #5
 8003e5c:	693a      	ldr	r2, [r7, #16]
 8003e5e:	440a      	add	r2, r1
 8003e60:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003e64:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003e68:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	781b      	ldrb	r3, [r3, #0]
 8003e6e:	015a      	lsls	r2, r3, #5
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	4413      	add	r3, r2
 8003e74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	683a      	ldr	r2, [r7, #0]
 8003e7c:	7812      	ldrb	r2, [r2, #0]
 8003e7e:	0151      	lsls	r1, r2, #5
 8003e80:	693a      	ldr	r2, [r7, #16]
 8003e82:	440a      	add	r2, r1
 8003e84:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003e88:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003e8c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	3301      	adds	r3, #1
 8003e92:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d902      	bls.n	8003ea4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	75fb      	strb	r3, [r7, #23]
          break;
 8003ea2:	e00c      	b.n	8003ebe <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	781b      	ldrb	r3, [r3, #0]
 8003ea8:	015a      	lsls	r2, r3, #5
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	4413      	add	r3, r2
 8003eae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003eb8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003ebc:	d0e7      	beq.n	8003e8e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8003ebe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	371c      	adds	r7, #28
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eca:	4770      	bx	lr

08003ecc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b089      	sub	sp, #36	@ 0x24
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	60f8      	str	r0, [r7, #12]
 8003ed4:	60b9      	str	r1, [r7, #8]
 8003ed6:	4611      	mov	r1, r2
 8003ed8:	461a      	mov	r2, r3
 8003eda:	460b      	mov	r3, r1
 8003edc:	71fb      	strb	r3, [r7, #7]
 8003ede:	4613      	mov	r3, r2
 8003ee0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8003eea:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d123      	bne.n	8003f3a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003ef2:	88bb      	ldrh	r3, [r7, #4]
 8003ef4:	3303      	adds	r3, #3
 8003ef6:	089b      	lsrs	r3, r3, #2
 8003ef8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003efa:	2300      	movs	r3, #0
 8003efc:	61bb      	str	r3, [r7, #24]
 8003efe:	e018      	b.n	8003f32 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003f00:	79fb      	ldrb	r3, [r7, #7]
 8003f02:	031a      	lsls	r2, r3, #12
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	4413      	add	r3, r2
 8003f08:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	69fb      	ldr	r3, [r7, #28]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003f14:	69fb      	ldr	r3, [r7, #28]
 8003f16:	3301      	adds	r3, #1
 8003f18:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	3301      	adds	r3, #1
 8003f1e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003f20:	69fb      	ldr	r3, [r7, #28]
 8003f22:	3301      	adds	r3, #1
 8003f24:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	3301      	adds	r3, #1
 8003f2a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003f2c:	69bb      	ldr	r3, [r7, #24]
 8003f2e:	3301      	adds	r3, #1
 8003f30:	61bb      	str	r3, [r7, #24]
 8003f32:	69ba      	ldr	r2, [r7, #24]
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d3e2      	bcc.n	8003f00 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003f3a:	2300      	movs	r3, #0
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3724      	adds	r7, #36	@ 0x24
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr

08003f48 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b08b      	sub	sp, #44	@ 0x2c
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	60f8      	str	r0, [r7, #12]
 8003f50:	60b9      	str	r1, [r7, #8]
 8003f52:	4613      	mov	r3, r2
 8003f54:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8003f5e:	88fb      	ldrh	r3, [r7, #6]
 8003f60:	089b      	lsrs	r3, r3, #2
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8003f66:	88fb      	ldrh	r3, [r7, #6]
 8003f68:	f003 0303 	and.w	r3, r3, #3
 8003f6c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8003f6e:	2300      	movs	r3, #0
 8003f70:	623b      	str	r3, [r7, #32]
 8003f72:	e014      	b.n	8003f9e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003f74:	69bb      	ldr	r3, [r7, #24]
 8003f76:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f7e:	601a      	str	r2, [r3, #0]
    pDest++;
 8003f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f82:	3301      	adds	r3, #1
 8003f84:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8003f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f88:	3301      	adds	r3, #1
 8003f8a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8003f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f8e:	3301      	adds	r3, #1
 8003f90:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8003f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f94:	3301      	adds	r3, #1
 8003f96:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8003f98:	6a3b      	ldr	r3, [r7, #32]
 8003f9a:	3301      	adds	r3, #1
 8003f9c:	623b      	str	r3, [r7, #32]
 8003f9e:	6a3a      	ldr	r2, [r7, #32]
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d3e6      	bcc.n	8003f74 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8003fa6:	8bfb      	ldrh	r3, [r7, #30]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d01e      	beq.n	8003fea <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8003fac:	2300      	movs	r3, #0
 8003fae:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003fb0:	69bb      	ldr	r3, [r7, #24]
 8003fb2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	f107 0310 	add.w	r3, r7, #16
 8003fbc:	6812      	ldr	r2, [r2, #0]
 8003fbe:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003fc0:	693a      	ldr	r2, [r7, #16]
 8003fc2:	6a3b      	ldr	r3, [r7, #32]
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	00db      	lsls	r3, r3, #3
 8003fc8:	fa22 f303 	lsr.w	r3, r2, r3
 8003fcc:	b2da      	uxtb	r2, r3
 8003fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fd0:	701a      	strb	r2, [r3, #0]
      i++;
 8003fd2:	6a3b      	ldr	r3, [r7, #32]
 8003fd4:	3301      	adds	r3, #1
 8003fd6:	623b      	str	r3, [r7, #32]
      pDest++;
 8003fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fda:	3301      	adds	r3, #1
 8003fdc:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8003fde:	8bfb      	ldrh	r3, [r7, #30]
 8003fe0:	3b01      	subs	r3, #1
 8003fe2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8003fe4:	8bfb      	ldrh	r3, [r7, #30]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d1ea      	bne.n	8003fc0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8003fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	372c      	adds	r7, #44	@ 0x2c
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr

08003ff8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b085      	sub	sp, #20
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	781b      	ldrb	r3, [r3, #0]
 800400a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	785b      	ldrb	r3, [r3, #1]
 8004010:	2b01      	cmp	r3, #1
 8004012:	d12c      	bne.n	800406e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	015a      	lsls	r2, r3, #5
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	4413      	add	r3, r2
 800401c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	2b00      	cmp	r3, #0
 8004024:	db12      	blt.n	800404c <USB_EPSetStall+0x54>
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d00f      	beq.n	800404c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	015a      	lsls	r2, r3, #5
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	4413      	add	r3, r2
 8004034:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	68ba      	ldr	r2, [r7, #8]
 800403c:	0151      	lsls	r1, r2, #5
 800403e:	68fa      	ldr	r2, [r7, #12]
 8004040:	440a      	add	r2, r1
 8004042:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004046:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800404a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	015a      	lsls	r2, r3, #5
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	4413      	add	r3, r2
 8004054:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	68ba      	ldr	r2, [r7, #8]
 800405c:	0151      	lsls	r1, r2, #5
 800405e:	68fa      	ldr	r2, [r7, #12]
 8004060:	440a      	add	r2, r1
 8004062:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004066:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800406a:	6013      	str	r3, [r2, #0]
 800406c:	e02b      	b.n	80040c6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	015a      	lsls	r2, r3, #5
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	4413      	add	r3, r2
 8004076:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	2b00      	cmp	r3, #0
 800407e:	db12      	blt.n	80040a6 <USB_EPSetStall+0xae>
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d00f      	beq.n	80040a6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	015a      	lsls	r2, r3, #5
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	4413      	add	r3, r2
 800408e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	68ba      	ldr	r2, [r7, #8]
 8004096:	0151      	lsls	r1, r2, #5
 8004098:	68fa      	ldr	r2, [r7, #12]
 800409a:	440a      	add	r2, r1
 800409c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80040a0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80040a4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	015a      	lsls	r2, r3, #5
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	4413      	add	r3, r2
 80040ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	68ba      	ldr	r2, [r7, #8]
 80040b6:	0151      	lsls	r1, r2, #5
 80040b8:	68fa      	ldr	r2, [r7, #12]
 80040ba:	440a      	add	r2, r1
 80040bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80040c0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80040c4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80040c6:	2300      	movs	r3, #0
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3714      	adds	r7, #20
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr

080040d4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b085      	sub	sp, #20
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	781b      	ldrb	r3, [r3, #0]
 80040e6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	785b      	ldrb	r3, [r3, #1]
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d128      	bne.n	8004142 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	015a      	lsls	r2, r3, #5
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	4413      	add	r3, r2
 80040f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	68ba      	ldr	r2, [r7, #8]
 8004100:	0151      	lsls	r1, r2, #5
 8004102:	68fa      	ldr	r2, [r7, #12]
 8004104:	440a      	add	r2, r1
 8004106:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800410a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800410e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	791b      	ldrb	r3, [r3, #4]
 8004114:	2b03      	cmp	r3, #3
 8004116:	d003      	beq.n	8004120 <USB_EPClearStall+0x4c>
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	791b      	ldrb	r3, [r3, #4]
 800411c:	2b02      	cmp	r3, #2
 800411e:	d138      	bne.n	8004192 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	015a      	lsls	r2, r3, #5
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	4413      	add	r3, r2
 8004128:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	68ba      	ldr	r2, [r7, #8]
 8004130:	0151      	lsls	r1, r2, #5
 8004132:	68fa      	ldr	r2, [r7, #12]
 8004134:	440a      	add	r2, r1
 8004136:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800413a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800413e:	6013      	str	r3, [r2, #0]
 8004140:	e027      	b.n	8004192 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	015a      	lsls	r2, r3, #5
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	4413      	add	r3, r2
 800414a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	68ba      	ldr	r2, [r7, #8]
 8004152:	0151      	lsls	r1, r2, #5
 8004154:	68fa      	ldr	r2, [r7, #12]
 8004156:	440a      	add	r2, r1
 8004158:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800415c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004160:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	791b      	ldrb	r3, [r3, #4]
 8004166:	2b03      	cmp	r3, #3
 8004168:	d003      	beq.n	8004172 <USB_EPClearStall+0x9e>
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	791b      	ldrb	r3, [r3, #4]
 800416e:	2b02      	cmp	r3, #2
 8004170:	d10f      	bne.n	8004192 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	015a      	lsls	r2, r3, #5
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	4413      	add	r3, r2
 800417a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	68ba      	ldr	r2, [r7, #8]
 8004182:	0151      	lsls	r1, r2, #5
 8004184:	68fa      	ldr	r2, [r7, #12]
 8004186:	440a      	add	r2, r1
 8004188:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800418c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004190:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004192:	2300      	movs	r3, #0
}
 8004194:	4618      	mov	r0, r3
 8004196:	3714      	adds	r7, #20
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr

080041a0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b085      	sub	sp, #20
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
 80041a8:	460b      	mov	r3, r1
 80041aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	68fa      	ldr	r2, [r7, #12]
 80041ba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80041be:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80041c2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	78fb      	ldrb	r3, [r7, #3]
 80041ce:	011b      	lsls	r3, r3, #4
 80041d0:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80041d4:	68f9      	ldr	r1, [r7, #12]
 80041d6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80041da:	4313      	orrs	r3, r2
 80041dc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80041de:	2300      	movs	r3, #0
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3714      	adds	r7, #20
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr

080041ec <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b085      	sub	sp, #20
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	68fa      	ldr	r2, [r7, #12]
 8004202:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004206:	f023 0303 	bic.w	r3, r3, #3
 800420a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	68fa      	ldr	r2, [r7, #12]
 8004216:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800421a:	f023 0302 	bic.w	r3, r3, #2
 800421e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004220:	2300      	movs	r3, #0
}
 8004222:	4618      	mov	r0, r3
 8004224:	3714      	adds	r7, #20
 8004226:	46bd      	mov	sp, r7
 8004228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422c:	4770      	bx	lr

0800422e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800422e:	b480      	push	{r7}
 8004230:	b085      	sub	sp, #20
 8004232:	af00      	add	r7, sp, #0
 8004234:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	68fa      	ldr	r2, [r7, #12]
 8004244:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004248:	f023 0303 	bic.w	r3, r3, #3
 800424c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	68fa      	ldr	r2, [r7, #12]
 8004258:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800425c:	f043 0302 	orr.w	r3, r3, #2
 8004260:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004262:	2300      	movs	r3, #0
}
 8004264:	4618      	mov	r0, r3
 8004266:	3714      	adds	r7, #20
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr

08004270 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8004270:	b480      	push	{r7}
 8004272:	b085      	sub	sp, #20
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	695b      	ldr	r3, [r3, #20]
 800427c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	699b      	ldr	r3, [r3, #24]
 8004282:	68fa      	ldr	r2, [r7, #12]
 8004284:	4013      	ands	r3, r2
 8004286:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004288:	68fb      	ldr	r3, [r7, #12]
}
 800428a:	4618      	mov	r0, r3
 800428c:	3714      	adds	r7, #20
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr

08004296 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004296:	b480      	push	{r7}
 8004298:	b085      	sub	sp, #20
 800429a:	af00      	add	r7, sp, #0
 800429c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042a8:	699b      	ldr	r3, [r3, #24]
 80042aa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042b2:	69db      	ldr	r3, [r3, #28]
 80042b4:	68ba      	ldr	r2, [r7, #8]
 80042b6:	4013      	ands	r3, r2
 80042b8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	0c1b      	lsrs	r3, r3, #16
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3714      	adds	r7, #20
 80042c2:	46bd      	mov	sp, r7
 80042c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c8:	4770      	bx	lr

080042ca <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80042ca:	b480      	push	{r7}
 80042cc:	b085      	sub	sp, #20
 80042ce:	af00      	add	r7, sp, #0
 80042d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042dc:	699b      	ldr	r3, [r3, #24]
 80042de:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042e6:	69db      	ldr	r3, [r3, #28]
 80042e8:	68ba      	ldr	r2, [r7, #8]
 80042ea:	4013      	ands	r3, r2
 80042ec:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	b29b      	uxth	r3, r3
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3714      	adds	r7, #20
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr

080042fe <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80042fe:	b480      	push	{r7}
 8004300:	b085      	sub	sp, #20
 8004302:	af00      	add	r7, sp, #0
 8004304:	6078      	str	r0, [r7, #4]
 8004306:	460b      	mov	r3, r1
 8004308:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800430e:	78fb      	ldrb	r3, [r7, #3]
 8004310:	015a      	lsls	r2, r3, #5
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	4413      	add	r3, r2
 8004316:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004324:	695b      	ldr	r3, [r3, #20]
 8004326:	68ba      	ldr	r2, [r7, #8]
 8004328:	4013      	ands	r3, r2
 800432a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800432c:	68bb      	ldr	r3, [r7, #8]
}
 800432e:	4618      	mov	r0, r3
 8004330:	3714      	adds	r7, #20
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr

0800433a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800433a:	b480      	push	{r7}
 800433c:	b087      	sub	sp, #28
 800433e:	af00      	add	r7, sp, #0
 8004340:	6078      	str	r0, [r7, #4]
 8004342:	460b      	mov	r3, r1
 8004344:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004350:	691b      	ldr	r3, [r3, #16]
 8004352:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800435a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800435c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800435e:	78fb      	ldrb	r3, [r7, #3]
 8004360:	f003 030f 	and.w	r3, r3, #15
 8004364:	68fa      	ldr	r2, [r7, #12]
 8004366:	fa22 f303 	lsr.w	r3, r2, r3
 800436a:	01db      	lsls	r3, r3, #7
 800436c:	b2db      	uxtb	r3, r3
 800436e:	693a      	ldr	r2, [r7, #16]
 8004370:	4313      	orrs	r3, r2
 8004372:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004374:	78fb      	ldrb	r3, [r7, #3]
 8004376:	015a      	lsls	r2, r3, #5
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	4413      	add	r3, r2
 800437c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	693a      	ldr	r2, [r7, #16]
 8004384:	4013      	ands	r3, r2
 8004386:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004388:	68bb      	ldr	r3, [r7, #8]
}
 800438a:	4618      	mov	r0, r3
 800438c:	371c      	adds	r7, #28
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr

08004396 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004396:	b480      	push	{r7}
 8004398:	b083      	sub	sp, #12
 800439a:	af00      	add	r7, sp, #0
 800439c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	695b      	ldr	r3, [r3, #20]
 80043a2:	f003 0301 	and.w	r3, r3, #1
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	370c      	adds	r7, #12
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr

080043b2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80043b2:	b480      	push	{r7}
 80043b4:	b085      	sub	sp, #20
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	68fa      	ldr	r2, [r7, #12]
 80043c8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80043cc:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80043d0:	f023 0307 	bic.w	r3, r3, #7
 80043d4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	68fa      	ldr	r2, [r7, #12]
 80043e0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80043e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043e8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80043ea:	2300      	movs	r3, #0
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3714      	adds	r7, #20
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr

080043f8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b087      	sub	sp, #28
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	60f8      	str	r0, [r7, #12]
 8004400:	460b      	mov	r3, r1
 8004402:	607a      	str	r2, [r7, #4]
 8004404:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	333c      	adds	r3, #60	@ 0x3c
 800440e:	3304      	adds	r3, #4
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	4a26      	ldr	r2, [pc, #152]	@ (80044b0 <USB_EP0_OutStart+0xb8>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d90a      	bls.n	8004432 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004428:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800442c:	d101      	bne.n	8004432 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800442e:	2300      	movs	r3, #0
 8004430:	e037      	b.n	80044a2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004438:	461a      	mov	r2, r3
 800443a:	2300      	movs	r3, #0
 800443c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004444:	691b      	ldr	r3, [r3, #16]
 8004446:	697a      	ldr	r2, [r7, #20]
 8004448:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800444c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004450:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004458:	691b      	ldr	r3, [r3, #16]
 800445a:	697a      	ldr	r2, [r7, #20]
 800445c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004460:	f043 0318 	orr.w	r3, r3, #24
 8004464:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800446c:	691b      	ldr	r3, [r3, #16]
 800446e:	697a      	ldr	r2, [r7, #20]
 8004470:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004474:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8004478:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800447a:	7afb      	ldrb	r3, [r7, #11]
 800447c:	2b01      	cmp	r3, #1
 800447e:	d10f      	bne.n	80044a0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004486:	461a      	mov	r2, r3
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	697a      	ldr	r2, [r7, #20]
 8004496:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800449a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800449e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80044a0:	2300      	movs	r3, #0
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	371c      	adds	r7, #28
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr
 80044ae:	bf00      	nop
 80044b0:	4f54300a 	.word	0x4f54300a

080044b4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b085      	sub	sp, #20
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80044bc:	2300      	movs	r3, #0
 80044be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	3301      	adds	r3, #1
 80044c4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80044cc:	d901      	bls.n	80044d2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80044ce:	2303      	movs	r3, #3
 80044d0:	e01b      	b.n	800450a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	691b      	ldr	r3, [r3, #16]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	daf2      	bge.n	80044c0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80044da:	2300      	movs	r3, #0
 80044dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	691b      	ldr	r3, [r3, #16]
 80044e2:	f043 0201 	orr.w	r2, r3, #1
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	3301      	adds	r3, #1
 80044ee:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80044f6:	d901      	bls.n	80044fc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80044f8:	2303      	movs	r3, #3
 80044fa:	e006      	b.n	800450a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	691b      	ldr	r3, [r3, #16]
 8004500:	f003 0301 	and.w	r3, r3, #1
 8004504:	2b01      	cmp	r3, #1
 8004506:	d0f0      	beq.n	80044ea <USB_CoreReset+0x36>

  return HAL_OK;
 8004508:	2300      	movs	r3, #0
}
 800450a:	4618      	mov	r0, r3
 800450c:	3714      	adds	r7, #20
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr
	...

08004518 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b084      	sub	sp, #16
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	460b      	mov	r3, r1
 8004522:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004524:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8004528:	f002 fc88 	bl	8006e3c <USBD_static_malloc>
 800452c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d109      	bne.n	8004548 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	32b0      	adds	r2, #176	@ 0xb0
 800453e:	2100      	movs	r1, #0
 8004540:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004544:	2302      	movs	r3, #2
 8004546:	e0d4      	b.n	80046f2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8004548:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800454c:	2100      	movs	r1, #0
 800454e:	68f8      	ldr	r0, [r7, #12]
 8004550:	f002 fd9c 	bl	800708c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	32b0      	adds	r2, #176	@ 0xb0
 800455e:	68f9      	ldr	r1, [r7, #12]
 8004560:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	32b0      	adds	r2, #176	@ 0xb0
 800456e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	7c1b      	ldrb	r3, [r3, #16]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d138      	bne.n	80045f2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004580:	4b5e      	ldr	r3, [pc, #376]	@ (80046fc <USBD_CDC_Init+0x1e4>)
 8004582:	7819      	ldrb	r1, [r3, #0]
 8004584:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004588:	2202      	movs	r2, #2
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f002 fb33 	bl	8006bf6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004590:	4b5a      	ldr	r3, [pc, #360]	@ (80046fc <USBD_CDC_Init+0x1e4>)
 8004592:	781b      	ldrb	r3, [r3, #0]
 8004594:	f003 020f 	and.w	r2, r3, #15
 8004598:	6879      	ldr	r1, [r7, #4]
 800459a:	4613      	mov	r3, r2
 800459c:	009b      	lsls	r3, r3, #2
 800459e:	4413      	add	r3, r2
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	440b      	add	r3, r1
 80045a4:	3324      	adds	r3, #36	@ 0x24
 80045a6:	2201      	movs	r2, #1
 80045a8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80045aa:	4b55      	ldr	r3, [pc, #340]	@ (8004700 <USBD_CDC_Init+0x1e8>)
 80045ac:	7819      	ldrb	r1, [r3, #0]
 80045ae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80045b2:	2202      	movs	r2, #2
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f002 fb1e 	bl	8006bf6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80045ba:	4b51      	ldr	r3, [pc, #324]	@ (8004700 <USBD_CDC_Init+0x1e8>)
 80045bc:	781b      	ldrb	r3, [r3, #0]
 80045be:	f003 020f 	and.w	r2, r3, #15
 80045c2:	6879      	ldr	r1, [r7, #4]
 80045c4:	4613      	mov	r3, r2
 80045c6:	009b      	lsls	r3, r3, #2
 80045c8:	4413      	add	r3, r2
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	440b      	add	r3, r1
 80045ce:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80045d2:	2201      	movs	r2, #1
 80045d4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80045d6:	4b4b      	ldr	r3, [pc, #300]	@ (8004704 <USBD_CDC_Init+0x1ec>)
 80045d8:	781b      	ldrb	r3, [r3, #0]
 80045da:	f003 020f 	and.w	r2, r3, #15
 80045de:	6879      	ldr	r1, [r7, #4]
 80045e0:	4613      	mov	r3, r2
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	4413      	add	r3, r2
 80045e6:	009b      	lsls	r3, r3, #2
 80045e8:	440b      	add	r3, r1
 80045ea:	3326      	adds	r3, #38	@ 0x26
 80045ec:	2210      	movs	r2, #16
 80045ee:	801a      	strh	r2, [r3, #0]
 80045f0:	e035      	b.n	800465e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80045f2:	4b42      	ldr	r3, [pc, #264]	@ (80046fc <USBD_CDC_Init+0x1e4>)
 80045f4:	7819      	ldrb	r1, [r3, #0]
 80045f6:	2340      	movs	r3, #64	@ 0x40
 80045f8:	2202      	movs	r2, #2
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f002 fafb 	bl	8006bf6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004600:	4b3e      	ldr	r3, [pc, #248]	@ (80046fc <USBD_CDC_Init+0x1e4>)
 8004602:	781b      	ldrb	r3, [r3, #0]
 8004604:	f003 020f 	and.w	r2, r3, #15
 8004608:	6879      	ldr	r1, [r7, #4]
 800460a:	4613      	mov	r3, r2
 800460c:	009b      	lsls	r3, r3, #2
 800460e:	4413      	add	r3, r2
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	440b      	add	r3, r1
 8004614:	3324      	adds	r3, #36	@ 0x24
 8004616:	2201      	movs	r2, #1
 8004618:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800461a:	4b39      	ldr	r3, [pc, #228]	@ (8004700 <USBD_CDC_Init+0x1e8>)
 800461c:	7819      	ldrb	r1, [r3, #0]
 800461e:	2340      	movs	r3, #64	@ 0x40
 8004620:	2202      	movs	r2, #2
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f002 fae7 	bl	8006bf6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004628:	4b35      	ldr	r3, [pc, #212]	@ (8004700 <USBD_CDC_Init+0x1e8>)
 800462a:	781b      	ldrb	r3, [r3, #0]
 800462c:	f003 020f 	and.w	r2, r3, #15
 8004630:	6879      	ldr	r1, [r7, #4]
 8004632:	4613      	mov	r3, r2
 8004634:	009b      	lsls	r3, r3, #2
 8004636:	4413      	add	r3, r2
 8004638:	009b      	lsls	r3, r3, #2
 800463a:	440b      	add	r3, r1
 800463c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004640:	2201      	movs	r2, #1
 8004642:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004644:	4b2f      	ldr	r3, [pc, #188]	@ (8004704 <USBD_CDC_Init+0x1ec>)
 8004646:	781b      	ldrb	r3, [r3, #0]
 8004648:	f003 020f 	and.w	r2, r3, #15
 800464c:	6879      	ldr	r1, [r7, #4]
 800464e:	4613      	mov	r3, r2
 8004650:	009b      	lsls	r3, r3, #2
 8004652:	4413      	add	r3, r2
 8004654:	009b      	lsls	r3, r3, #2
 8004656:	440b      	add	r3, r1
 8004658:	3326      	adds	r3, #38	@ 0x26
 800465a:	2210      	movs	r2, #16
 800465c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800465e:	4b29      	ldr	r3, [pc, #164]	@ (8004704 <USBD_CDC_Init+0x1ec>)
 8004660:	7819      	ldrb	r1, [r3, #0]
 8004662:	2308      	movs	r3, #8
 8004664:	2203      	movs	r2, #3
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f002 fac5 	bl	8006bf6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800466c:	4b25      	ldr	r3, [pc, #148]	@ (8004704 <USBD_CDC_Init+0x1ec>)
 800466e:	781b      	ldrb	r3, [r3, #0]
 8004670:	f003 020f 	and.w	r2, r3, #15
 8004674:	6879      	ldr	r1, [r7, #4]
 8004676:	4613      	mov	r3, r2
 8004678:	009b      	lsls	r3, r3, #2
 800467a:	4413      	add	r3, r2
 800467c:	009b      	lsls	r3, r3, #2
 800467e:	440b      	add	r3, r1
 8004680:	3324      	adds	r3, #36	@ 0x24
 8004682:	2201      	movs	r2, #1
 8004684:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2200      	movs	r2, #0
 800468a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	33b0      	adds	r3, #176	@ 0xb0
 8004698:	009b      	lsls	r3, r3, #2
 800469a:	4413      	add	r3, r2
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2200      	movs	r2, #0
 80046a6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2200      	movs	r2, #0
 80046ae:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d101      	bne.n	80046c0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80046bc:	2302      	movs	r3, #2
 80046be:	e018      	b.n	80046f2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	7c1b      	ldrb	r3, [r3, #16]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d10a      	bne.n	80046de <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80046c8:	4b0d      	ldr	r3, [pc, #52]	@ (8004700 <USBD_CDC_Init+0x1e8>)
 80046ca:	7819      	ldrb	r1, [r3, #0]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80046d2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f002 fb7c 	bl	8006dd4 <USBD_LL_PrepareReceive>
 80046dc:	e008      	b.n	80046f0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80046de:	4b08      	ldr	r3, [pc, #32]	@ (8004700 <USBD_CDC_Init+0x1e8>)
 80046e0:	7819      	ldrb	r1, [r3, #0]
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80046e8:	2340      	movs	r3, #64	@ 0x40
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f002 fb72 	bl	8006dd4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80046f0:	2300      	movs	r3, #0
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3710      	adds	r7, #16
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}
 80046fa:	bf00      	nop
 80046fc:	200000a3 	.word	0x200000a3
 8004700:	200000a4 	.word	0x200000a4
 8004704:	200000a5 	.word	0x200000a5

08004708 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b082      	sub	sp, #8
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
 8004710:	460b      	mov	r3, r1
 8004712:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8004714:	4b3a      	ldr	r3, [pc, #232]	@ (8004800 <USBD_CDC_DeInit+0xf8>)
 8004716:	781b      	ldrb	r3, [r3, #0]
 8004718:	4619      	mov	r1, r3
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f002 fa91 	bl	8006c42 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8004720:	4b37      	ldr	r3, [pc, #220]	@ (8004800 <USBD_CDC_DeInit+0xf8>)
 8004722:	781b      	ldrb	r3, [r3, #0]
 8004724:	f003 020f 	and.w	r2, r3, #15
 8004728:	6879      	ldr	r1, [r7, #4]
 800472a:	4613      	mov	r3, r2
 800472c:	009b      	lsls	r3, r3, #2
 800472e:	4413      	add	r3, r2
 8004730:	009b      	lsls	r3, r3, #2
 8004732:	440b      	add	r3, r1
 8004734:	3324      	adds	r3, #36	@ 0x24
 8004736:	2200      	movs	r2, #0
 8004738:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800473a:	4b32      	ldr	r3, [pc, #200]	@ (8004804 <USBD_CDC_DeInit+0xfc>)
 800473c:	781b      	ldrb	r3, [r3, #0]
 800473e:	4619      	mov	r1, r3
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f002 fa7e 	bl	8006c42 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8004746:	4b2f      	ldr	r3, [pc, #188]	@ (8004804 <USBD_CDC_DeInit+0xfc>)
 8004748:	781b      	ldrb	r3, [r3, #0]
 800474a:	f003 020f 	and.w	r2, r3, #15
 800474e:	6879      	ldr	r1, [r7, #4]
 8004750:	4613      	mov	r3, r2
 8004752:	009b      	lsls	r3, r3, #2
 8004754:	4413      	add	r3, r2
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	440b      	add	r3, r1
 800475a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800475e:	2200      	movs	r2, #0
 8004760:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8004762:	4b29      	ldr	r3, [pc, #164]	@ (8004808 <USBD_CDC_DeInit+0x100>)
 8004764:	781b      	ldrb	r3, [r3, #0]
 8004766:	4619      	mov	r1, r3
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f002 fa6a 	bl	8006c42 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800476e:	4b26      	ldr	r3, [pc, #152]	@ (8004808 <USBD_CDC_DeInit+0x100>)
 8004770:	781b      	ldrb	r3, [r3, #0]
 8004772:	f003 020f 	and.w	r2, r3, #15
 8004776:	6879      	ldr	r1, [r7, #4]
 8004778:	4613      	mov	r3, r2
 800477a:	009b      	lsls	r3, r3, #2
 800477c:	4413      	add	r3, r2
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	440b      	add	r3, r1
 8004782:	3324      	adds	r3, #36	@ 0x24
 8004784:	2200      	movs	r2, #0
 8004786:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8004788:	4b1f      	ldr	r3, [pc, #124]	@ (8004808 <USBD_CDC_DeInit+0x100>)
 800478a:	781b      	ldrb	r3, [r3, #0]
 800478c:	f003 020f 	and.w	r2, r3, #15
 8004790:	6879      	ldr	r1, [r7, #4]
 8004792:	4613      	mov	r3, r2
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	4413      	add	r3, r2
 8004798:	009b      	lsls	r3, r3, #2
 800479a:	440b      	add	r3, r1
 800479c:	3326      	adds	r3, #38	@ 0x26
 800479e:	2200      	movs	r2, #0
 80047a0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	32b0      	adds	r2, #176	@ 0xb0
 80047ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d01f      	beq.n	80047f4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80047ba:	687a      	ldr	r2, [r7, #4]
 80047bc:	33b0      	adds	r3, #176	@ 0xb0
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	4413      	add	r3, r2
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	32b0      	adds	r2, #176	@ 0xb0
 80047d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047d6:	4618      	mov	r0, r3
 80047d8:	f002 fb3e 	bl	8006e58 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	32b0      	adds	r2, #176	@ 0xb0
 80047e6:	2100      	movs	r1, #0
 80047e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2200      	movs	r2, #0
 80047f0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80047f4:	2300      	movs	r3, #0
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3708      	adds	r7, #8
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}
 80047fe:	bf00      	nop
 8004800:	200000a3 	.word	0x200000a3
 8004804:	200000a4 	.word	0x200000a4
 8004808:	200000a5 	.word	0x200000a5

0800480c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b086      	sub	sp, #24
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
 8004814:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	32b0      	adds	r2, #176	@ 0xb0
 8004820:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004824:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8004826:	2300      	movs	r3, #0
 8004828:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800482a:	2300      	movs	r3, #0
 800482c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800482e:	2300      	movs	r3, #0
 8004830:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d101      	bne.n	800483c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8004838:	2303      	movs	r3, #3
 800483a:	e0bf      	b.n	80049bc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	781b      	ldrb	r3, [r3, #0]
 8004840:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8004844:	2b00      	cmp	r3, #0
 8004846:	d050      	beq.n	80048ea <USBD_CDC_Setup+0xde>
 8004848:	2b20      	cmp	r3, #32
 800484a:	f040 80af 	bne.w	80049ac <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	88db      	ldrh	r3, [r3, #6]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d03a      	beq.n	80048cc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	781b      	ldrb	r3, [r3, #0]
 800485a:	b25b      	sxtb	r3, r3
 800485c:	2b00      	cmp	r3, #0
 800485e:	da1b      	bge.n	8004898 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	33b0      	adds	r3, #176	@ 0xb0
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	4413      	add	r3, r2
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	683a      	ldr	r2, [r7, #0]
 8004874:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8004876:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004878:	683a      	ldr	r2, [r7, #0]
 800487a:	88d2      	ldrh	r2, [r2, #6]
 800487c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	88db      	ldrh	r3, [r3, #6]
 8004882:	2b07      	cmp	r3, #7
 8004884:	bf28      	it	cs
 8004886:	2307      	movcs	r3, #7
 8004888:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	89fa      	ldrh	r2, [r7, #14]
 800488e:	4619      	mov	r1, r3
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	f001 fd87 	bl	80063a4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8004896:	e090      	b.n	80049ba <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	785a      	ldrb	r2, [r3, #1]
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	88db      	ldrh	r3, [r3, #6]
 80048a6:	2b3f      	cmp	r3, #63	@ 0x3f
 80048a8:	d803      	bhi.n	80048b2 <USBD_CDC_Setup+0xa6>
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	88db      	ldrh	r3, [r3, #6]
 80048ae:	b2da      	uxtb	r2, r3
 80048b0:	e000      	b.n	80048b4 <USBD_CDC_Setup+0xa8>
 80048b2:	2240      	movs	r2, #64	@ 0x40
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80048ba:	6939      	ldr	r1, [r7, #16]
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80048c2:	461a      	mov	r2, r3
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f001 fd99 	bl	80063fc <USBD_CtlPrepareRx>
      break;
 80048ca:	e076      	b.n	80049ba <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	33b0      	adds	r3, #176	@ 0xb0
 80048d6:	009b      	lsls	r3, r3, #2
 80048d8:	4413      	add	r3, r2
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	683a      	ldr	r2, [r7, #0]
 80048e0:	7850      	ldrb	r0, [r2, #1]
 80048e2:	2200      	movs	r2, #0
 80048e4:	6839      	ldr	r1, [r7, #0]
 80048e6:	4798      	blx	r3
      break;
 80048e8:	e067      	b.n	80049ba <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	785b      	ldrb	r3, [r3, #1]
 80048ee:	2b0b      	cmp	r3, #11
 80048f0:	d851      	bhi.n	8004996 <USBD_CDC_Setup+0x18a>
 80048f2:	a201      	add	r2, pc, #4	@ (adr r2, 80048f8 <USBD_CDC_Setup+0xec>)
 80048f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048f8:	08004929 	.word	0x08004929
 80048fc:	080049a5 	.word	0x080049a5
 8004900:	08004997 	.word	0x08004997
 8004904:	08004997 	.word	0x08004997
 8004908:	08004997 	.word	0x08004997
 800490c:	08004997 	.word	0x08004997
 8004910:	08004997 	.word	0x08004997
 8004914:	08004997 	.word	0x08004997
 8004918:	08004997 	.word	0x08004997
 800491c:	08004997 	.word	0x08004997
 8004920:	08004953 	.word	0x08004953
 8004924:	0800497d 	.word	0x0800497d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800492e:	b2db      	uxtb	r3, r3
 8004930:	2b03      	cmp	r3, #3
 8004932:	d107      	bne.n	8004944 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004934:	f107 030a 	add.w	r3, r7, #10
 8004938:	2202      	movs	r2, #2
 800493a:	4619      	mov	r1, r3
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	f001 fd31 	bl	80063a4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004942:	e032      	b.n	80049aa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8004944:	6839      	ldr	r1, [r7, #0]
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f001 fcbb 	bl	80062c2 <USBD_CtlError>
            ret = USBD_FAIL;
 800494c:	2303      	movs	r3, #3
 800494e:	75fb      	strb	r3, [r7, #23]
          break;
 8004950:	e02b      	b.n	80049aa <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004958:	b2db      	uxtb	r3, r3
 800495a:	2b03      	cmp	r3, #3
 800495c:	d107      	bne.n	800496e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800495e:	f107 030d 	add.w	r3, r7, #13
 8004962:	2201      	movs	r2, #1
 8004964:	4619      	mov	r1, r3
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f001 fd1c 	bl	80063a4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800496c:	e01d      	b.n	80049aa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800496e:	6839      	ldr	r1, [r7, #0]
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f001 fca6 	bl	80062c2 <USBD_CtlError>
            ret = USBD_FAIL;
 8004976:	2303      	movs	r3, #3
 8004978:	75fb      	strb	r3, [r7, #23]
          break;
 800497a:	e016      	b.n	80049aa <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004982:	b2db      	uxtb	r3, r3
 8004984:	2b03      	cmp	r3, #3
 8004986:	d00f      	beq.n	80049a8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8004988:	6839      	ldr	r1, [r7, #0]
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f001 fc99 	bl	80062c2 <USBD_CtlError>
            ret = USBD_FAIL;
 8004990:	2303      	movs	r3, #3
 8004992:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8004994:	e008      	b.n	80049a8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8004996:	6839      	ldr	r1, [r7, #0]
 8004998:	6878      	ldr	r0, [r7, #4]
 800499a:	f001 fc92 	bl	80062c2 <USBD_CtlError>
          ret = USBD_FAIL;
 800499e:	2303      	movs	r3, #3
 80049a0:	75fb      	strb	r3, [r7, #23]
          break;
 80049a2:	e002      	b.n	80049aa <USBD_CDC_Setup+0x19e>
          break;
 80049a4:	bf00      	nop
 80049a6:	e008      	b.n	80049ba <USBD_CDC_Setup+0x1ae>
          break;
 80049a8:	bf00      	nop
      }
      break;
 80049aa:	e006      	b.n	80049ba <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80049ac:	6839      	ldr	r1, [r7, #0]
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f001 fc87 	bl	80062c2 <USBD_CtlError>
      ret = USBD_FAIL;
 80049b4:	2303      	movs	r3, #3
 80049b6:	75fb      	strb	r3, [r7, #23]
      break;
 80049b8:	bf00      	nop
  }

  return (uint8_t)ret;
 80049ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80049bc:	4618      	mov	r0, r3
 80049be:	3718      	adds	r7, #24
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}

080049c4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b084      	sub	sp, #16
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	460b      	mov	r3, r1
 80049ce:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80049d6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	32b0      	adds	r2, #176	@ 0xb0
 80049e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d101      	bne.n	80049ee <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80049ea:	2303      	movs	r3, #3
 80049ec:	e065      	b.n	8004aba <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	32b0      	adds	r2, #176	@ 0xb0
 80049f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049fc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80049fe:	78fb      	ldrb	r3, [r7, #3]
 8004a00:	f003 020f 	and.w	r2, r3, #15
 8004a04:	6879      	ldr	r1, [r7, #4]
 8004a06:	4613      	mov	r3, r2
 8004a08:	009b      	lsls	r3, r3, #2
 8004a0a:	4413      	add	r3, r2
 8004a0c:	009b      	lsls	r3, r3, #2
 8004a0e:	440b      	add	r3, r1
 8004a10:	3318      	adds	r3, #24
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d02f      	beq.n	8004a78 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8004a18:	78fb      	ldrb	r3, [r7, #3]
 8004a1a:	f003 020f 	and.w	r2, r3, #15
 8004a1e:	6879      	ldr	r1, [r7, #4]
 8004a20:	4613      	mov	r3, r2
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	4413      	add	r3, r2
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	440b      	add	r3, r1
 8004a2a:	3318      	adds	r3, #24
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	78fb      	ldrb	r3, [r7, #3]
 8004a30:	f003 010f 	and.w	r1, r3, #15
 8004a34:	68f8      	ldr	r0, [r7, #12]
 8004a36:	460b      	mov	r3, r1
 8004a38:	00db      	lsls	r3, r3, #3
 8004a3a:	440b      	add	r3, r1
 8004a3c:	009b      	lsls	r3, r3, #2
 8004a3e:	4403      	add	r3, r0
 8004a40:	331c      	adds	r3, #28
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	fbb2 f1f3 	udiv	r1, r2, r3
 8004a48:	fb01 f303 	mul.w	r3, r1, r3
 8004a4c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d112      	bne.n	8004a78 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8004a52:	78fb      	ldrb	r3, [r7, #3]
 8004a54:	f003 020f 	and.w	r2, r3, #15
 8004a58:	6879      	ldr	r1, [r7, #4]
 8004a5a:	4613      	mov	r3, r2
 8004a5c:	009b      	lsls	r3, r3, #2
 8004a5e:	4413      	add	r3, r2
 8004a60:	009b      	lsls	r3, r3, #2
 8004a62:	440b      	add	r3, r1
 8004a64:	3318      	adds	r3, #24
 8004a66:	2200      	movs	r2, #0
 8004a68:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004a6a:	78f9      	ldrb	r1, [r7, #3]
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	2200      	movs	r2, #0
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f002 f98e 	bl	8006d92 <USBD_LL_Transmit>
 8004a76:	e01f      	b.n	8004ab8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004a86:	687a      	ldr	r2, [r7, #4]
 8004a88:	33b0      	adds	r3, #176	@ 0xb0
 8004a8a:	009b      	lsls	r3, r3, #2
 8004a8c:	4413      	add	r3, r2
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	691b      	ldr	r3, [r3, #16]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d010      	beq.n	8004ab8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004a9c:	687a      	ldr	r2, [r7, #4]
 8004a9e:	33b0      	adds	r3, #176	@ 0xb0
 8004aa0:	009b      	lsls	r3, r3, #2
 8004aa2:	4413      	add	r3, r2
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	691b      	ldr	r3, [r3, #16]
 8004aa8:	68ba      	ldr	r2, [r7, #8]
 8004aaa:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8004aae:	68ba      	ldr	r2, [r7, #8]
 8004ab0:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8004ab4:	78fa      	ldrb	r2, [r7, #3]
 8004ab6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8004ab8:	2300      	movs	r3, #0
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3710      	adds	r7, #16
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}

08004ac2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004ac2:	b580      	push	{r7, lr}
 8004ac4:	b084      	sub	sp, #16
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	6078      	str	r0, [r7, #4]
 8004aca:	460b      	mov	r3, r1
 8004acc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	32b0      	adds	r2, #176	@ 0xb0
 8004ad8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004adc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	32b0      	adds	r2, #176	@ 0xb0
 8004ae8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d101      	bne.n	8004af4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8004af0:	2303      	movs	r3, #3
 8004af2:	e01a      	b.n	8004b2a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004af4:	78fb      	ldrb	r3, [r7, #3]
 8004af6:	4619      	mov	r1, r3
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f002 f98c 	bl	8006e16 <USBD_LL_GetRxDataSize>
 8004afe:	4602      	mov	r2, r0
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004b0c:	687a      	ldr	r2, [r7, #4]
 8004b0e:	33b0      	adds	r3, #176	@ 0xb0
 8004b10:	009b      	lsls	r3, r3, #2
 8004b12:	4413      	add	r3, r2
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	68fa      	ldr	r2, [r7, #12]
 8004b1a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8004b1e:	68fa      	ldr	r2, [r7, #12]
 8004b20:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8004b24:	4611      	mov	r1, r2
 8004b26:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8004b28:	2300      	movs	r3, #0
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3710      	adds	r7, #16
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}

08004b32 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004b32:	b580      	push	{r7, lr}
 8004b34:	b084      	sub	sp, #16
 8004b36:	af00      	add	r7, sp, #0
 8004b38:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	32b0      	adds	r2, #176	@ 0xb0
 8004b44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b48:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d101      	bne.n	8004b54 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004b50:	2303      	movs	r3, #3
 8004b52:	e024      	b.n	8004b9e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	33b0      	adds	r3, #176	@ 0xb0
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	4413      	add	r3, r2
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d019      	beq.n	8004b9c <USBD_CDC_EP0_RxReady+0x6a>
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8004b6e:	2bff      	cmp	r3, #255	@ 0xff
 8004b70:	d014      	beq.n	8004b9c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004b78:	687a      	ldr	r2, [r7, #4]
 8004b7a:	33b0      	adds	r3, #176	@ 0xb0
 8004b7c:	009b      	lsls	r3, r3, #2
 8004b7e:	4413      	add	r3, r2
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	68fa      	ldr	r2, [r7, #12]
 8004b86:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8004b8a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8004b8c:	68fa      	ldr	r2, [r7, #12]
 8004b8e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8004b92:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	22ff      	movs	r2, #255	@ 0xff
 8004b98:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8004b9c:	2300      	movs	r3, #0
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3710      	adds	r7, #16
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}
	...

08004ba8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b086      	sub	sp, #24
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004bb0:	2182      	movs	r1, #130	@ 0x82
 8004bb2:	4818      	ldr	r0, [pc, #96]	@ (8004c14 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004bb4:	f000 fd4f 	bl	8005656 <USBD_GetEpDesc>
 8004bb8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004bba:	2101      	movs	r1, #1
 8004bbc:	4815      	ldr	r0, [pc, #84]	@ (8004c14 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004bbe:	f000 fd4a 	bl	8005656 <USBD_GetEpDesc>
 8004bc2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004bc4:	2181      	movs	r1, #129	@ 0x81
 8004bc6:	4813      	ldr	r0, [pc, #76]	@ (8004c14 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004bc8:	f000 fd45 	bl	8005656 <USBD_GetEpDesc>
 8004bcc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d002      	beq.n	8004bda <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	2210      	movs	r2, #16
 8004bd8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d006      	beq.n	8004bee <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	2200      	movs	r2, #0
 8004be4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004be8:	711a      	strb	r2, [r3, #4]
 8004bea:	2200      	movs	r2, #0
 8004bec:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d006      	beq.n	8004c02 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004bfc:	711a      	strb	r2, [r3, #4]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2243      	movs	r2, #67	@ 0x43
 8004c06:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004c08:	4b02      	ldr	r3, [pc, #8]	@ (8004c14 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3718      	adds	r7, #24
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	20000060 	.word	0x20000060

08004c18 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b086      	sub	sp, #24
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004c20:	2182      	movs	r1, #130	@ 0x82
 8004c22:	4818      	ldr	r0, [pc, #96]	@ (8004c84 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004c24:	f000 fd17 	bl	8005656 <USBD_GetEpDesc>
 8004c28:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004c2a:	2101      	movs	r1, #1
 8004c2c:	4815      	ldr	r0, [pc, #84]	@ (8004c84 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004c2e:	f000 fd12 	bl	8005656 <USBD_GetEpDesc>
 8004c32:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004c34:	2181      	movs	r1, #129	@ 0x81
 8004c36:	4813      	ldr	r0, [pc, #76]	@ (8004c84 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004c38:	f000 fd0d 	bl	8005656 <USBD_GetEpDesc>
 8004c3c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d002      	beq.n	8004c4a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	2210      	movs	r2, #16
 8004c48:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d006      	beq.n	8004c5e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	2200      	movs	r2, #0
 8004c54:	711a      	strb	r2, [r3, #4]
 8004c56:	2200      	movs	r2, #0
 8004c58:	f042 0202 	orr.w	r2, r2, #2
 8004c5c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d006      	beq.n	8004c72 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2200      	movs	r2, #0
 8004c68:	711a      	strb	r2, [r3, #4]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	f042 0202 	orr.w	r2, r2, #2
 8004c70:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2243      	movs	r2, #67	@ 0x43
 8004c76:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004c78:	4b02      	ldr	r3, [pc, #8]	@ (8004c84 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3718      	adds	r7, #24
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}
 8004c82:	bf00      	nop
 8004c84:	20000060 	.word	0x20000060

08004c88 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b086      	sub	sp, #24
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004c90:	2182      	movs	r1, #130	@ 0x82
 8004c92:	4818      	ldr	r0, [pc, #96]	@ (8004cf4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004c94:	f000 fcdf 	bl	8005656 <USBD_GetEpDesc>
 8004c98:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004c9a:	2101      	movs	r1, #1
 8004c9c:	4815      	ldr	r0, [pc, #84]	@ (8004cf4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004c9e:	f000 fcda 	bl	8005656 <USBD_GetEpDesc>
 8004ca2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004ca4:	2181      	movs	r1, #129	@ 0x81
 8004ca6:	4813      	ldr	r0, [pc, #76]	@ (8004cf4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004ca8:	f000 fcd5 	bl	8005656 <USBD_GetEpDesc>
 8004cac:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d002      	beq.n	8004cba <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	2210      	movs	r2, #16
 8004cb8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d006      	beq.n	8004cce <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004cc8:	711a      	strb	r2, [r3, #4]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d006      	beq.n	8004ce2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004cdc:	711a      	strb	r2, [r3, #4]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2243      	movs	r2, #67	@ 0x43
 8004ce6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004ce8:	4b02      	ldr	r3, [pc, #8]	@ (8004cf4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3718      	adds	r7, #24
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
 8004cf2:	bf00      	nop
 8004cf4:	20000060 	.word	0x20000060

08004cf8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b083      	sub	sp, #12
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	220a      	movs	r2, #10
 8004d04:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8004d06:	4b03      	ldr	r3, [pc, #12]	@ (8004d14 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	370c      	adds	r7, #12
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d12:	4770      	bx	lr
 8004d14:	2000001c 	.word	0x2000001c

08004d18 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b083      	sub	sp, #12
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
 8004d20:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d101      	bne.n	8004d2c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8004d28:	2303      	movs	r3, #3
 8004d2a:	e009      	b.n	8004d40 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004d32:	687a      	ldr	r2, [r7, #4]
 8004d34:	33b0      	adds	r3, #176	@ 0xb0
 8004d36:	009b      	lsls	r3, r3, #2
 8004d38:	4413      	add	r3, r2
 8004d3a:	683a      	ldr	r2, [r7, #0]
 8004d3c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8004d3e:	2300      	movs	r3, #0
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	370c      	adds	r7, #12
 8004d44:	46bd      	mov	sp, r7
 8004d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4a:	4770      	bx	lr

08004d4c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b087      	sub	sp, #28
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	60f8      	str	r0, [r7, #12]
 8004d54:	60b9      	str	r1, [r7, #8]
 8004d56:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	32b0      	adds	r2, #176	@ 0xb0
 8004d62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d66:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d101      	bne.n	8004d72 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8004d6e:	2303      	movs	r3, #3
 8004d70:	e008      	b.n	8004d84 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	68ba      	ldr	r2, [r7, #8]
 8004d76:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8004d82:	2300      	movs	r3, #0
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	371c      	adds	r7, #28
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8e:	4770      	bx	lr

08004d90 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b085      	sub	sp, #20
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
 8004d98:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	32b0      	adds	r2, #176	@ 0xb0
 8004da4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004da8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d101      	bne.n	8004db4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8004db0:	2303      	movs	r3, #3
 8004db2:	e004      	b.n	8004dbe <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	683a      	ldr	r2, [r7, #0]
 8004db8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8004dbc:	2300      	movs	r3, #0
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3714      	adds	r7, #20
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc8:	4770      	bx	lr
	...

08004dcc <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b084      	sub	sp, #16
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	32b0      	adds	r2, #176	@ 0xb0
 8004dde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004de2:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8004de4:	2301      	movs	r3, #1
 8004de6:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d101      	bne.n	8004df2 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8004dee:	2303      	movs	r3, #3
 8004df0:	e025      	b.n	8004e3e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d11f      	bne.n	8004e3c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8004e04:	4b10      	ldr	r3, [pc, #64]	@ (8004e48 <USBD_CDC_TransmitPacket+0x7c>)
 8004e06:	781b      	ldrb	r3, [r3, #0]
 8004e08:	f003 020f 	and.w	r2, r3, #15
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	4613      	mov	r3, r2
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	4413      	add	r3, r2
 8004e1a:	009b      	lsls	r3, r3, #2
 8004e1c:	4403      	add	r3, r0
 8004e1e:	3318      	adds	r3, #24
 8004e20:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8004e22:	4b09      	ldr	r3, [pc, #36]	@ (8004e48 <USBD_CDC_TransmitPacket+0x7c>)
 8004e24:	7819      	ldrb	r1, [r3, #0]
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f001 ffad 	bl	8006d92 <USBD_LL_Transmit>

    ret = USBD_OK;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8004e3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3710      	adds	r7, #16
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}
 8004e46:	bf00      	nop
 8004e48:	200000a3 	.word	0x200000a3

08004e4c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b084      	sub	sp, #16
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	32b0      	adds	r2, #176	@ 0xb0
 8004e5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e62:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	32b0      	adds	r2, #176	@ 0xb0
 8004e6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d101      	bne.n	8004e7a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8004e76:	2303      	movs	r3, #3
 8004e78:	e018      	b.n	8004eac <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	7c1b      	ldrb	r3, [r3, #16]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d10a      	bne.n	8004e98 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004e82:	4b0c      	ldr	r3, [pc, #48]	@ (8004eb4 <USBD_CDC_ReceivePacket+0x68>)
 8004e84:	7819      	ldrb	r1, [r3, #0]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004e8c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004e90:	6878      	ldr	r0, [r7, #4]
 8004e92:	f001 ff9f 	bl	8006dd4 <USBD_LL_PrepareReceive>
 8004e96:	e008      	b.n	8004eaa <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004e98:	4b06      	ldr	r3, [pc, #24]	@ (8004eb4 <USBD_CDC_ReceivePacket+0x68>)
 8004e9a:	7819      	ldrb	r1, [r3, #0]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004ea2:	2340      	movs	r3, #64	@ 0x40
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	f001 ff95 	bl	8006dd4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004eaa:	2300      	movs	r3, #0
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	3710      	adds	r7, #16
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}
 8004eb4:	200000a4 	.word	0x200000a4

08004eb8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b086      	sub	sp, #24
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	60f8      	str	r0, [r7, #12]
 8004ec0:	60b9      	str	r1, [r7, #8]
 8004ec2:	4613      	mov	r3, r2
 8004ec4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d101      	bne.n	8004ed0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8004ecc:	2303      	movs	r3, #3
 8004ece:	e01f      	b.n	8004f10 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2200      	movs	r2, #0
 8004edc:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d003      	beq.n	8004ef6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	68ba      	ldr	r2, [r7, #8]
 8004ef2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2201      	movs	r2, #1
 8004efa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	79fa      	ldrb	r2, [r7, #7]
 8004f02:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8004f04:	68f8      	ldr	r0, [r7, #12]
 8004f06:	f001 fe0f 	bl	8006b28 <USBD_LL_Init>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8004f0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	3718      	adds	r7, #24
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}

08004f18 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b084      	sub	sp, #16
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004f22:	2300      	movs	r3, #0
 8004f24:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d101      	bne.n	8004f30 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8004f2c:	2303      	movs	r3, #3
 8004f2e:	e025      	b.n	8004f7c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	683a      	ldr	r2, [r7, #0]
 8004f34:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	32ae      	adds	r2, #174	@ 0xae
 8004f42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d00f      	beq.n	8004f6c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	32ae      	adds	r2, #174	@ 0xae
 8004f56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f5c:	f107 020e 	add.w	r2, r7, #14
 8004f60:	4610      	mov	r0, r2
 8004f62:	4798      	blx	r3
 8004f64:	4602      	mov	r2, r0
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8004f72:	1c5a      	adds	r2, r3, #1
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8004f7a:	2300      	movs	r3, #0
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3710      	adds	r7, #16
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}

08004f84 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b082      	sub	sp, #8
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8004f8c:	6878      	ldr	r0, [r7, #4]
 8004f8e:	f001 fe17 	bl	8006bc0 <USBD_LL_Start>
 8004f92:	4603      	mov	r3, r0
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	3708      	adds	r7, #8
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}

08004f9c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b083      	sub	sp, #12
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004fa4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	370c      	adds	r7, #12
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr

08004fb2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004fb2:	b580      	push	{r7, lr}
 8004fb4:	b084      	sub	sp, #16
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	6078      	str	r0, [r7, #4]
 8004fba:	460b      	mov	r3, r1
 8004fbc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d009      	beq.n	8004fe0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	78fa      	ldrb	r2, [r7, #3]
 8004fd6:	4611      	mov	r1, r2
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	4798      	blx	r3
 8004fdc:	4603      	mov	r3, r0
 8004fde:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8004fe0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3710      	adds	r7, #16
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}

08004fea <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004fea:	b580      	push	{r7, lr}
 8004fec:	b084      	sub	sp, #16
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	6078      	str	r0, [r7, #4]
 8004ff2:	460b      	mov	r3, r1
 8004ff4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	78fa      	ldrb	r2, [r7, #3]
 8005004:	4611      	mov	r1, r2
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	4798      	blx	r3
 800500a:	4603      	mov	r3, r0
 800500c:	2b00      	cmp	r3, #0
 800500e:	d001      	beq.n	8005014 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005010:	2303      	movs	r3, #3
 8005012:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005014:	7bfb      	ldrb	r3, [r7, #15]
}
 8005016:	4618      	mov	r0, r3
 8005018:	3710      	adds	r7, #16
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}

0800501e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800501e:	b580      	push	{r7, lr}
 8005020:	b084      	sub	sp, #16
 8005022:	af00      	add	r7, sp, #0
 8005024:	6078      	str	r0, [r7, #4]
 8005026:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800502e:	6839      	ldr	r1, [r7, #0]
 8005030:	4618      	mov	r0, r3
 8005032:	f001 f90c 	bl	800624e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2201      	movs	r2, #1
 800503a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8005044:	461a      	mov	r2, r3
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005052:	f003 031f 	and.w	r3, r3, #31
 8005056:	2b02      	cmp	r3, #2
 8005058:	d01a      	beq.n	8005090 <USBD_LL_SetupStage+0x72>
 800505a:	2b02      	cmp	r3, #2
 800505c:	d822      	bhi.n	80050a4 <USBD_LL_SetupStage+0x86>
 800505e:	2b00      	cmp	r3, #0
 8005060:	d002      	beq.n	8005068 <USBD_LL_SetupStage+0x4a>
 8005062:	2b01      	cmp	r3, #1
 8005064:	d00a      	beq.n	800507c <USBD_LL_SetupStage+0x5e>
 8005066:	e01d      	b.n	80050a4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800506e:	4619      	mov	r1, r3
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f000 fb63 	bl	800573c <USBD_StdDevReq>
 8005076:	4603      	mov	r3, r0
 8005078:	73fb      	strb	r3, [r7, #15]
      break;
 800507a:	e020      	b.n	80050be <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005082:	4619      	mov	r1, r3
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	f000 fbcb 	bl	8005820 <USBD_StdItfReq>
 800508a:	4603      	mov	r3, r0
 800508c:	73fb      	strb	r3, [r7, #15]
      break;
 800508e:	e016      	b.n	80050be <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005096:	4619      	mov	r1, r3
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f000 fc2d 	bl	80058f8 <USBD_StdEPReq>
 800509e:	4603      	mov	r3, r0
 80050a0:	73fb      	strb	r3, [r7, #15]
      break;
 80050a2:	e00c      	b.n	80050be <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80050aa:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80050ae:	b2db      	uxtb	r3, r3
 80050b0:	4619      	mov	r1, r3
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f001 fde4 	bl	8006c80 <USBD_LL_StallEP>
 80050b8:	4603      	mov	r3, r0
 80050ba:	73fb      	strb	r3, [r7, #15]
      break;
 80050bc:	bf00      	nop
  }

  return ret;
 80050be:	7bfb      	ldrb	r3, [r7, #15]
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3710      	adds	r7, #16
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}

080050c8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b086      	sub	sp, #24
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	60f8      	str	r0, [r7, #12]
 80050d0:	460b      	mov	r3, r1
 80050d2:	607a      	str	r2, [r7, #4]
 80050d4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80050d6:	2300      	movs	r3, #0
 80050d8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80050da:	7afb      	ldrb	r3, [r7, #11]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d16e      	bne.n	80051be <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80050e6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80050ee:	2b03      	cmp	r3, #3
 80050f0:	f040 8098 	bne.w	8005224 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	689a      	ldr	r2, [r3, #8]
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	68db      	ldr	r3, [r3, #12]
 80050fc:	429a      	cmp	r2, r3
 80050fe:	d913      	bls.n	8005128 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	689a      	ldr	r2, [r3, #8]
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	68db      	ldr	r3, [r3, #12]
 8005108:	1ad2      	subs	r2, r2, r3
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	68da      	ldr	r2, [r3, #12]
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	4293      	cmp	r3, r2
 8005118:	bf28      	it	cs
 800511a:	4613      	movcs	r3, r2
 800511c:	461a      	mov	r2, r3
 800511e:	6879      	ldr	r1, [r7, #4]
 8005120:	68f8      	ldr	r0, [r7, #12]
 8005122:	f001 f988 	bl	8006436 <USBD_CtlContinueRx>
 8005126:	e07d      	b.n	8005224 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800512e:	f003 031f 	and.w	r3, r3, #31
 8005132:	2b02      	cmp	r3, #2
 8005134:	d014      	beq.n	8005160 <USBD_LL_DataOutStage+0x98>
 8005136:	2b02      	cmp	r3, #2
 8005138:	d81d      	bhi.n	8005176 <USBD_LL_DataOutStage+0xae>
 800513a:	2b00      	cmp	r3, #0
 800513c:	d002      	beq.n	8005144 <USBD_LL_DataOutStage+0x7c>
 800513e:	2b01      	cmp	r3, #1
 8005140:	d003      	beq.n	800514a <USBD_LL_DataOutStage+0x82>
 8005142:	e018      	b.n	8005176 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005144:	2300      	movs	r3, #0
 8005146:	75bb      	strb	r3, [r7, #22]
            break;
 8005148:	e018      	b.n	800517c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8005150:	b2db      	uxtb	r3, r3
 8005152:	4619      	mov	r1, r3
 8005154:	68f8      	ldr	r0, [r7, #12]
 8005156:	f000 fa64 	bl	8005622 <USBD_CoreFindIF>
 800515a:	4603      	mov	r3, r0
 800515c:	75bb      	strb	r3, [r7, #22]
            break;
 800515e:	e00d      	b.n	800517c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8005166:	b2db      	uxtb	r3, r3
 8005168:	4619      	mov	r1, r3
 800516a:	68f8      	ldr	r0, [r7, #12]
 800516c:	f000 fa66 	bl	800563c <USBD_CoreFindEP>
 8005170:	4603      	mov	r3, r0
 8005172:	75bb      	strb	r3, [r7, #22]
            break;
 8005174:	e002      	b.n	800517c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005176:	2300      	movs	r3, #0
 8005178:	75bb      	strb	r3, [r7, #22]
            break;
 800517a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800517c:	7dbb      	ldrb	r3, [r7, #22]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d119      	bne.n	80051b6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005188:	b2db      	uxtb	r3, r3
 800518a:	2b03      	cmp	r3, #3
 800518c:	d113      	bne.n	80051b6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800518e:	7dba      	ldrb	r2, [r7, #22]
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	32ae      	adds	r2, #174	@ 0xae
 8005194:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005198:	691b      	ldr	r3, [r3, #16]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d00b      	beq.n	80051b6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800519e:	7dba      	ldrb	r2, [r7, #22]
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80051a6:	7dba      	ldrb	r2, [r7, #22]
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	32ae      	adds	r2, #174	@ 0xae
 80051ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051b0:	691b      	ldr	r3, [r3, #16]
 80051b2:	68f8      	ldr	r0, [r7, #12]
 80051b4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80051b6:	68f8      	ldr	r0, [r7, #12]
 80051b8:	f001 f94e 	bl	8006458 <USBD_CtlSendStatus>
 80051bc:	e032      	b.n	8005224 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80051be:	7afb      	ldrb	r3, [r7, #11]
 80051c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80051c4:	b2db      	uxtb	r3, r3
 80051c6:	4619      	mov	r1, r3
 80051c8:	68f8      	ldr	r0, [r7, #12]
 80051ca:	f000 fa37 	bl	800563c <USBD_CoreFindEP>
 80051ce:	4603      	mov	r3, r0
 80051d0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80051d2:	7dbb      	ldrb	r3, [r7, #22]
 80051d4:	2bff      	cmp	r3, #255	@ 0xff
 80051d6:	d025      	beq.n	8005224 <USBD_LL_DataOutStage+0x15c>
 80051d8:	7dbb      	ldrb	r3, [r7, #22]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d122      	bne.n	8005224 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80051e4:	b2db      	uxtb	r3, r3
 80051e6:	2b03      	cmp	r3, #3
 80051e8:	d117      	bne.n	800521a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80051ea:	7dba      	ldrb	r2, [r7, #22]
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	32ae      	adds	r2, #174	@ 0xae
 80051f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051f4:	699b      	ldr	r3, [r3, #24]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d00f      	beq.n	800521a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80051fa:	7dba      	ldrb	r2, [r7, #22]
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005202:	7dba      	ldrb	r2, [r7, #22]
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	32ae      	adds	r2, #174	@ 0xae
 8005208:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800520c:	699b      	ldr	r3, [r3, #24]
 800520e:	7afa      	ldrb	r2, [r7, #11]
 8005210:	4611      	mov	r1, r2
 8005212:	68f8      	ldr	r0, [r7, #12]
 8005214:	4798      	blx	r3
 8005216:	4603      	mov	r3, r0
 8005218:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800521a:	7dfb      	ldrb	r3, [r7, #23]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d001      	beq.n	8005224 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005220:	7dfb      	ldrb	r3, [r7, #23]
 8005222:	e000      	b.n	8005226 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005224:	2300      	movs	r3, #0
}
 8005226:	4618      	mov	r0, r3
 8005228:	3718      	adds	r7, #24
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}

0800522e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800522e:	b580      	push	{r7, lr}
 8005230:	b086      	sub	sp, #24
 8005232:	af00      	add	r7, sp, #0
 8005234:	60f8      	str	r0, [r7, #12]
 8005236:	460b      	mov	r3, r1
 8005238:	607a      	str	r2, [r7, #4]
 800523a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800523c:	7afb      	ldrb	r3, [r7, #11]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d16f      	bne.n	8005322 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	3314      	adds	r3, #20
 8005246:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800524e:	2b02      	cmp	r3, #2
 8005250:	d15a      	bne.n	8005308 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	689a      	ldr	r2, [r3, #8]
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	68db      	ldr	r3, [r3, #12]
 800525a:	429a      	cmp	r2, r3
 800525c:	d914      	bls.n	8005288 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	689a      	ldr	r2, [r3, #8]
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	68db      	ldr	r3, [r3, #12]
 8005266:	1ad2      	subs	r2, r2, r3
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	689b      	ldr	r3, [r3, #8]
 8005270:	461a      	mov	r2, r3
 8005272:	6879      	ldr	r1, [r7, #4]
 8005274:	68f8      	ldr	r0, [r7, #12]
 8005276:	f001 f8b0 	bl	80063da <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800527a:	2300      	movs	r3, #0
 800527c:	2200      	movs	r2, #0
 800527e:	2100      	movs	r1, #0
 8005280:	68f8      	ldr	r0, [r7, #12]
 8005282:	f001 fda7 	bl	8006dd4 <USBD_LL_PrepareReceive>
 8005286:	e03f      	b.n	8005308 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	68da      	ldr	r2, [r3, #12]
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	689b      	ldr	r3, [r3, #8]
 8005290:	429a      	cmp	r2, r3
 8005292:	d11c      	bne.n	80052ce <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	685a      	ldr	r2, [r3, #4]
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800529c:	429a      	cmp	r2, r3
 800529e:	d316      	bcc.n	80052ce <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	685a      	ldr	r2, [r3, #4]
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80052aa:	429a      	cmp	r2, r3
 80052ac:	d20f      	bcs.n	80052ce <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80052ae:	2200      	movs	r2, #0
 80052b0:	2100      	movs	r1, #0
 80052b2:	68f8      	ldr	r0, [r7, #12]
 80052b4:	f001 f891 	bl	80063da <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2200      	movs	r2, #0
 80052bc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80052c0:	2300      	movs	r3, #0
 80052c2:	2200      	movs	r2, #0
 80052c4:	2100      	movs	r1, #0
 80052c6:	68f8      	ldr	r0, [r7, #12]
 80052c8:	f001 fd84 	bl	8006dd4 <USBD_LL_PrepareReceive>
 80052cc:	e01c      	b.n	8005308 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80052d4:	b2db      	uxtb	r3, r3
 80052d6:	2b03      	cmp	r3, #3
 80052d8:	d10f      	bne.n	80052fa <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80052e0:	68db      	ldr	r3, [r3, #12]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d009      	beq.n	80052fa <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2200      	movs	r2, #0
 80052ea:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80052f4:	68db      	ldr	r3, [r3, #12]
 80052f6:	68f8      	ldr	r0, [r7, #12]
 80052f8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80052fa:	2180      	movs	r1, #128	@ 0x80
 80052fc:	68f8      	ldr	r0, [r7, #12]
 80052fe:	f001 fcbf 	bl	8006c80 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005302:	68f8      	ldr	r0, [r7, #12]
 8005304:	f001 f8bb 	bl	800647e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800530e:	2b00      	cmp	r3, #0
 8005310:	d03a      	beq.n	8005388 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005312:	68f8      	ldr	r0, [r7, #12]
 8005314:	f7ff fe42 	bl	8004f9c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2200      	movs	r2, #0
 800531c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8005320:	e032      	b.n	8005388 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005322:	7afb      	ldrb	r3, [r7, #11]
 8005324:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005328:	b2db      	uxtb	r3, r3
 800532a:	4619      	mov	r1, r3
 800532c:	68f8      	ldr	r0, [r7, #12]
 800532e:	f000 f985 	bl	800563c <USBD_CoreFindEP>
 8005332:	4603      	mov	r3, r0
 8005334:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005336:	7dfb      	ldrb	r3, [r7, #23]
 8005338:	2bff      	cmp	r3, #255	@ 0xff
 800533a:	d025      	beq.n	8005388 <USBD_LL_DataInStage+0x15a>
 800533c:	7dfb      	ldrb	r3, [r7, #23]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d122      	bne.n	8005388 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005348:	b2db      	uxtb	r3, r3
 800534a:	2b03      	cmp	r3, #3
 800534c:	d11c      	bne.n	8005388 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800534e:	7dfa      	ldrb	r2, [r7, #23]
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	32ae      	adds	r2, #174	@ 0xae
 8005354:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005358:	695b      	ldr	r3, [r3, #20]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d014      	beq.n	8005388 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800535e:	7dfa      	ldrb	r2, [r7, #23]
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005366:	7dfa      	ldrb	r2, [r7, #23]
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	32ae      	adds	r2, #174	@ 0xae
 800536c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005370:	695b      	ldr	r3, [r3, #20]
 8005372:	7afa      	ldrb	r2, [r7, #11]
 8005374:	4611      	mov	r1, r2
 8005376:	68f8      	ldr	r0, [r7, #12]
 8005378:	4798      	blx	r3
 800537a:	4603      	mov	r3, r0
 800537c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800537e:	7dbb      	ldrb	r3, [r7, #22]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d001      	beq.n	8005388 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005384:	7dbb      	ldrb	r3, [r7, #22]
 8005386:	e000      	b.n	800538a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005388:	2300      	movs	r3, #0
}
 800538a:	4618      	mov	r0, r3
 800538c:	3718      	adds	r7, #24
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}

08005392 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005392:	b580      	push	{r7, lr}
 8005394:	b084      	sub	sp, #16
 8005396:	af00      	add	r7, sp, #0
 8005398:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800539a:	2300      	movs	r3, #0
 800539c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2201      	movs	r2, #1
 80053a2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2200      	movs	r2, #0
 80053aa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2200      	movs	r2, #0
 80053b2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2200      	movs	r2, #0
 80053b8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2200      	movs	r2, #0
 80053c0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d014      	beq.n	80053f8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d00e      	beq.n	80053f8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	6852      	ldr	r2, [r2, #4]
 80053e6:	b2d2      	uxtb	r2, r2
 80053e8:	4611      	mov	r1, r2
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	4798      	blx	r3
 80053ee:	4603      	mov	r3, r0
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d001      	beq.n	80053f8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80053f4:	2303      	movs	r3, #3
 80053f6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80053f8:	2340      	movs	r3, #64	@ 0x40
 80053fa:	2200      	movs	r2, #0
 80053fc:	2100      	movs	r1, #0
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f001 fbf9 	bl	8006bf6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2201      	movs	r2, #1
 8005408:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2240      	movs	r2, #64	@ 0x40
 8005410:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005414:	2340      	movs	r3, #64	@ 0x40
 8005416:	2200      	movs	r2, #0
 8005418:	2180      	movs	r1, #128	@ 0x80
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f001 fbeb 	bl	8006bf6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2201      	movs	r2, #1
 8005424:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2240      	movs	r2, #64	@ 0x40
 800542a:	621a      	str	r2, [r3, #32]

  return ret;
 800542c:	7bfb      	ldrb	r3, [r7, #15]
}
 800542e:	4618      	mov	r0, r3
 8005430:	3710      	adds	r7, #16
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}

08005436 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005436:	b480      	push	{r7}
 8005438:	b083      	sub	sp, #12
 800543a:	af00      	add	r7, sp, #0
 800543c:	6078      	str	r0, [r7, #4]
 800543e:	460b      	mov	r3, r1
 8005440:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	78fa      	ldrb	r2, [r7, #3]
 8005446:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005448:	2300      	movs	r3, #0
}
 800544a:	4618      	mov	r0, r3
 800544c:	370c      	adds	r7, #12
 800544e:	46bd      	mov	sp, r7
 8005450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005454:	4770      	bx	lr

08005456 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005456:	b480      	push	{r7}
 8005458:	b083      	sub	sp, #12
 800545a:	af00      	add	r7, sp, #0
 800545c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005464:	b2db      	uxtb	r3, r3
 8005466:	2b04      	cmp	r3, #4
 8005468:	d006      	beq.n	8005478 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005470:	b2da      	uxtb	r2, r3
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2204      	movs	r2, #4
 800547c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8005480:	2300      	movs	r3, #0
}
 8005482:	4618      	mov	r0, r3
 8005484:	370c      	adds	r7, #12
 8005486:	46bd      	mov	sp, r7
 8005488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548c:	4770      	bx	lr

0800548e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800548e:	b480      	push	{r7}
 8005490:	b083      	sub	sp, #12
 8005492:	af00      	add	r7, sp, #0
 8005494:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800549c:	b2db      	uxtb	r3, r3
 800549e:	2b04      	cmp	r3, #4
 80054a0:	d106      	bne.n	80054b0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80054a8:	b2da      	uxtb	r2, r3
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80054b0:	2300      	movs	r3, #0
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	370c      	adds	r7, #12
 80054b6:	46bd      	mov	sp, r7
 80054b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054bc:	4770      	bx	lr

080054be <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80054be:	b580      	push	{r7, lr}
 80054c0:	b082      	sub	sp, #8
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	2b03      	cmp	r3, #3
 80054d0:	d110      	bne.n	80054f4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d00b      	beq.n	80054f4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80054e2:	69db      	ldr	r3, [r3, #28]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d005      	beq.n	80054f4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80054ee:	69db      	ldr	r3, [r3, #28]
 80054f0:	6878      	ldr	r0, [r7, #4]
 80054f2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80054f4:	2300      	movs	r3, #0
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3708      	adds	r7, #8
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}

080054fe <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80054fe:	b580      	push	{r7, lr}
 8005500:	b082      	sub	sp, #8
 8005502:	af00      	add	r7, sp, #0
 8005504:	6078      	str	r0, [r7, #4]
 8005506:	460b      	mov	r3, r1
 8005508:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	32ae      	adds	r2, #174	@ 0xae
 8005514:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d101      	bne.n	8005520 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800551c:	2303      	movs	r3, #3
 800551e:	e01c      	b.n	800555a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005526:	b2db      	uxtb	r3, r3
 8005528:	2b03      	cmp	r3, #3
 800552a:	d115      	bne.n	8005558 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	32ae      	adds	r2, #174	@ 0xae
 8005536:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800553a:	6a1b      	ldr	r3, [r3, #32]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d00b      	beq.n	8005558 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	32ae      	adds	r2, #174	@ 0xae
 800554a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800554e:	6a1b      	ldr	r3, [r3, #32]
 8005550:	78fa      	ldrb	r2, [r7, #3]
 8005552:	4611      	mov	r1, r2
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005558:	2300      	movs	r3, #0
}
 800555a:	4618      	mov	r0, r3
 800555c:	3708      	adds	r7, #8
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}

08005562 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005562:	b580      	push	{r7, lr}
 8005564:	b082      	sub	sp, #8
 8005566:	af00      	add	r7, sp, #0
 8005568:	6078      	str	r0, [r7, #4]
 800556a:	460b      	mov	r3, r1
 800556c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	32ae      	adds	r2, #174	@ 0xae
 8005578:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d101      	bne.n	8005584 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005580:	2303      	movs	r3, #3
 8005582:	e01c      	b.n	80055be <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800558a:	b2db      	uxtb	r3, r3
 800558c:	2b03      	cmp	r3, #3
 800558e:	d115      	bne.n	80055bc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	32ae      	adds	r2, #174	@ 0xae
 800559a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800559e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d00b      	beq.n	80055bc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	32ae      	adds	r2, #174	@ 0xae
 80055ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055b4:	78fa      	ldrb	r2, [r7, #3]
 80055b6:	4611      	mov	r1, r2
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80055bc:	2300      	movs	r3, #0
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3708      	adds	r7, #8
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}

080055c6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80055c6:	b480      	push	{r7}
 80055c8:	b083      	sub	sp, #12
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80055ce:	2300      	movs	r3, #0
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	370c      	adds	r7, #12
 80055d4:	46bd      	mov	sp, r7
 80055d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055da:	4770      	bx	lr

080055dc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b084      	sub	sp, #16
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80055e4:	2300      	movs	r3, #0
 80055e6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2201      	movs	r2, #1
 80055ec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d00e      	beq.n	8005618 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	6852      	ldr	r2, [r2, #4]
 8005606:	b2d2      	uxtb	r2, r2
 8005608:	4611      	mov	r1, r2
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	4798      	blx	r3
 800560e:	4603      	mov	r3, r0
 8005610:	2b00      	cmp	r3, #0
 8005612:	d001      	beq.n	8005618 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005614:	2303      	movs	r3, #3
 8005616:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005618:	7bfb      	ldrb	r3, [r7, #15]
}
 800561a:	4618      	mov	r0, r3
 800561c:	3710      	adds	r7, #16
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}

08005622 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005622:	b480      	push	{r7}
 8005624:	b083      	sub	sp, #12
 8005626:	af00      	add	r7, sp, #0
 8005628:	6078      	str	r0, [r7, #4]
 800562a:	460b      	mov	r3, r1
 800562c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800562e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005630:	4618      	mov	r0, r3
 8005632:	370c      	adds	r7, #12
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr

0800563c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800563c:	b480      	push	{r7}
 800563e:	b083      	sub	sp, #12
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
 8005644:	460b      	mov	r3, r1
 8005646:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005648:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800564a:	4618      	mov	r0, r3
 800564c:	370c      	adds	r7, #12
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr

08005656 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8005656:	b580      	push	{r7, lr}
 8005658:	b086      	sub	sp, #24
 800565a:	af00      	add	r7, sp, #0
 800565c:	6078      	str	r0, [r7, #4]
 800565e:	460b      	mov	r3, r1
 8005660:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800566a:	2300      	movs	r3, #0
 800566c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	885b      	ldrh	r3, [r3, #2]
 8005672:	b29b      	uxth	r3, r3
 8005674:	68fa      	ldr	r2, [r7, #12]
 8005676:	7812      	ldrb	r2, [r2, #0]
 8005678:	4293      	cmp	r3, r2
 800567a:	d91f      	bls.n	80056bc <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	781b      	ldrb	r3, [r3, #0]
 8005680:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8005682:	e013      	b.n	80056ac <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005684:	f107 030a 	add.w	r3, r7, #10
 8005688:	4619      	mov	r1, r3
 800568a:	6978      	ldr	r0, [r7, #20]
 800568c:	f000 f81b 	bl	80056c6 <USBD_GetNextDesc>
 8005690:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	785b      	ldrb	r3, [r3, #1]
 8005696:	2b05      	cmp	r3, #5
 8005698:	d108      	bne.n	80056ac <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	789b      	ldrb	r3, [r3, #2]
 80056a2:	78fa      	ldrb	r2, [r7, #3]
 80056a4:	429a      	cmp	r2, r3
 80056a6:	d008      	beq.n	80056ba <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80056a8:	2300      	movs	r3, #0
 80056aa:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	885b      	ldrh	r3, [r3, #2]
 80056b0:	b29a      	uxth	r2, r3
 80056b2:	897b      	ldrh	r3, [r7, #10]
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d8e5      	bhi.n	8005684 <USBD_GetEpDesc+0x2e>
 80056b8:	e000      	b.n	80056bc <USBD_GetEpDesc+0x66>
          break;
 80056ba:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80056bc:	693b      	ldr	r3, [r7, #16]
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3718      	adds	r7, #24
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}

080056c6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80056c6:	b480      	push	{r7}
 80056c8:	b085      	sub	sp, #20
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	6078      	str	r0, [r7, #4]
 80056ce:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	881b      	ldrh	r3, [r3, #0]
 80056d8:	68fa      	ldr	r2, [r7, #12]
 80056da:	7812      	ldrb	r2, [r2, #0]
 80056dc:	4413      	add	r3, r2
 80056de:	b29a      	uxth	r2, r3
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	781b      	ldrb	r3, [r3, #0]
 80056e8:	461a      	mov	r2, r3
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	4413      	add	r3, r2
 80056ee:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80056f0:	68fb      	ldr	r3, [r7, #12]
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3714      	adds	r7, #20
 80056f6:	46bd      	mov	sp, r7
 80056f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fc:	4770      	bx	lr

080056fe <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80056fe:	b480      	push	{r7}
 8005700:	b087      	sub	sp, #28
 8005702:	af00      	add	r7, sp, #0
 8005704:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	781b      	ldrb	r3, [r3, #0]
 800570e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	3301      	adds	r3, #1
 8005714:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	781b      	ldrb	r3, [r3, #0]
 800571a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800571c:	8a3b      	ldrh	r3, [r7, #16]
 800571e:	021b      	lsls	r3, r3, #8
 8005720:	b21a      	sxth	r2, r3
 8005722:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005726:	4313      	orrs	r3, r2
 8005728:	b21b      	sxth	r3, r3
 800572a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800572c:	89fb      	ldrh	r3, [r7, #14]
}
 800572e:	4618      	mov	r0, r3
 8005730:	371c      	adds	r7, #28
 8005732:	46bd      	mov	sp, r7
 8005734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005738:	4770      	bx	lr
	...

0800573c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b084      	sub	sp, #16
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
 8005744:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005746:	2300      	movs	r3, #0
 8005748:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	781b      	ldrb	r3, [r3, #0]
 800574e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005752:	2b40      	cmp	r3, #64	@ 0x40
 8005754:	d005      	beq.n	8005762 <USBD_StdDevReq+0x26>
 8005756:	2b40      	cmp	r3, #64	@ 0x40
 8005758:	d857      	bhi.n	800580a <USBD_StdDevReq+0xce>
 800575a:	2b00      	cmp	r3, #0
 800575c:	d00f      	beq.n	800577e <USBD_StdDevReq+0x42>
 800575e:	2b20      	cmp	r3, #32
 8005760:	d153      	bne.n	800580a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	32ae      	adds	r2, #174	@ 0xae
 800576c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005770:	689b      	ldr	r3, [r3, #8]
 8005772:	6839      	ldr	r1, [r7, #0]
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	4798      	blx	r3
 8005778:	4603      	mov	r3, r0
 800577a:	73fb      	strb	r3, [r7, #15]
      break;
 800577c:	e04a      	b.n	8005814 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	785b      	ldrb	r3, [r3, #1]
 8005782:	2b09      	cmp	r3, #9
 8005784:	d83b      	bhi.n	80057fe <USBD_StdDevReq+0xc2>
 8005786:	a201      	add	r2, pc, #4	@ (adr r2, 800578c <USBD_StdDevReq+0x50>)
 8005788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800578c:	080057e1 	.word	0x080057e1
 8005790:	080057f5 	.word	0x080057f5
 8005794:	080057ff 	.word	0x080057ff
 8005798:	080057eb 	.word	0x080057eb
 800579c:	080057ff 	.word	0x080057ff
 80057a0:	080057bf 	.word	0x080057bf
 80057a4:	080057b5 	.word	0x080057b5
 80057a8:	080057ff 	.word	0x080057ff
 80057ac:	080057d7 	.word	0x080057d7
 80057b0:	080057c9 	.word	0x080057c9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80057b4:	6839      	ldr	r1, [r7, #0]
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f000 fa3c 	bl	8005c34 <USBD_GetDescriptor>
          break;
 80057bc:	e024      	b.n	8005808 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80057be:	6839      	ldr	r1, [r7, #0]
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	f000 fba1 	bl	8005f08 <USBD_SetAddress>
          break;
 80057c6:	e01f      	b.n	8005808 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80057c8:	6839      	ldr	r1, [r7, #0]
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f000 fbe0 	bl	8005f90 <USBD_SetConfig>
 80057d0:	4603      	mov	r3, r0
 80057d2:	73fb      	strb	r3, [r7, #15]
          break;
 80057d4:	e018      	b.n	8005808 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80057d6:	6839      	ldr	r1, [r7, #0]
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	f000 fc83 	bl	80060e4 <USBD_GetConfig>
          break;
 80057de:	e013      	b.n	8005808 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80057e0:	6839      	ldr	r1, [r7, #0]
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f000 fcb4 	bl	8006150 <USBD_GetStatus>
          break;
 80057e8:	e00e      	b.n	8005808 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80057ea:	6839      	ldr	r1, [r7, #0]
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	f000 fce3 	bl	80061b8 <USBD_SetFeature>
          break;
 80057f2:	e009      	b.n	8005808 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80057f4:	6839      	ldr	r1, [r7, #0]
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f000 fd07 	bl	800620a <USBD_ClrFeature>
          break;
 80057fc:	e004      	b.n	8005808 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80057fe:	6839      	ldr	r1, [r7, #0]
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f000 fd5e 	bl	80062c2 <USBD_CtlError>
          break;
 8005806:	bf00      	nop
      }
      break;
 8005808:	e004      	b.n	8005814 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800580a:	6839      	ldr	r1, [r7, #0]
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f000 fd58 	bl	80062c2 <USBD_CtlError>
      break;
 8005812:	bf00      	nop
  }

  return ret;
 8005814:	7bfb      	ldrb	r3, [r7, #15]
}
 8005816:	4618      	mov	r0, r3
 8005818:	3710      	adds	r7, #16
 800581a:	46bd      	mov	sp, r7
 800581c:	bd80      	pop	{r7, pc}
 800581e:	bf00      	nop

08005820 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b084      	sub	sp, #16
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800582a:	2300      	movs	r3, #0
 800582c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	781b      	ldrb	r3, [r3, #0]
 8005832:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005836:	2b40      	cmp	r3, #64	@ 0x40
 8005838:	d005      	beq.n	8005846 <USBD_StdItfReq+0x26>
 800583a:	2b40      	cmp	r3, #64	@ 0x40
 800583c:	d852      	bhi.n	80058e4 <USBD_StdItfReq+0xc4>
 800583e:	2b00      	cmp	r3, #0
 8005840:	d001      	beq.n	8005846 <USBD_StdItfReq+0x26>
 8005842:	2b20      	cmp	r3, #32
 8005844:	d14e      	bne.n	80058e4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800584c:	b2db      	uxtb	r3, r3
 800584e:	3b01      	subs	r3, #1
 8005850:	2b02      	cmp	r3, #2
 8005852:	d840      	bhi.n	80058d6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	889b      	ldrh	r3, [r3, #4]
 8005858:	b2db      	uxtb	r3, r3
 800585a:	2b01      	cmp	r3, #1
 800585c:	d836      	bhi.n	80058cc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	889b      	ldrh	r3, [r3, #4]
 8005862:	b2db      	uxtb	r3, r3
 8005864:	4619      	mov	r1, r3
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f7ff fedb 	bl	8005622 <USBD_CoreFindIF>
 800586c:	4603      	mov	r3, r0
 800586e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005870:	7bbb      	ldrb	r3, [r7, #14]
 8005872:	2bff      	cmp	r3, #255	@ 0xff
 8005874:	d01d      	beq.n	80058b2 <USBD_StdItfReq+0x92>
 8005876:	7bbb      	ldrb	r3, [r7, #14]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d11a      	bne.n	80058b2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800587c:	7bba      	ldrb	r2, [r7, #14]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	32ae      	adds	r2, #174	@ 0xae
 8005882:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d00f      	beq.n	80058ac <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800588c:	7bba      	ldrb	r2, [r7, #14]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005894:	7bba      	ldrb	r2, [r7, #14]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	32ae      	adds	r2, #174	@ 0xae
 800589a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	6839      	ldr	r1, [r7, #0]
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	4798      	blx	r3
 80058a6:	4603      	mov	r3, r0
 80058a8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80058aa:	e004      	b.n	80058b6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80058ac:	2303      	movs	r3, #3
 80058ae:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80058b0:	e001      	b.n	80058b6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80058b2:	2303      	movs	r3, #3
 80058b4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	88db      	ldrh	r3, [r3, #6]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d110      	bne.n	80058e0 <USBD_StdItfReq+0xc0>
 80058be:	7bfb      	ldrb	r3, [r7, #15]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d10d      	bne.n	80058e0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f000 fdc7 	bl	8006458 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80058ca:	e009      	b.n	80058e0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80058cc:	6839      	ldr	r1, [r7, #0]
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f000 fcf7 	bl	80062c2 <USBD_CtlError>
          break;
 80058d4:	e004      	b.n	80058e0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80058d6:	6839      	ldr	r1, [r7, #0]
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f000 fcf2 	bl	80062c2 <USBD_CtlError>
          break;
 80058de:	e000      	b.n	80058e2 <USBD_StdItfReq+0xc2>
          break;
 80058e0:	bf00      	nop
      }
      break;
 80058e2:	e004      	b.n	80058ee <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80058e4:	6839      	ldr	r1, [r7, #0]
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f000 fceb 	bl	80062c2 <USBD_CtlError>
      break;
 80058ec:	bf00      	nop
  }

  return ret;
 80058ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3710      	adds	r7, #16
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}

080058f8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b084      	sub	sp, #16
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
 8005900:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8005902:	2300      	movs	r3, #0
 8005904:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	889b      	ldrh	r3, [r3, #4]
 800590a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	781b      	ldrb	r3, [r3, #0]
 8005910:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005914:	2b40      	cmp	r3, #64	@ 0x40
 8005916:	d007      	beq.n	8005928 <USBD_StdEPReq+0x30>
 8005918:	2b40      	cmp	r3, #64	@ 0x40
 800591a:	f200 817f 	bhi.w	8005c1c <USBD_StdEPReq+0x324>
 800591e:	2b00      	cmp	r3, #0
 8005920:	d02a      	beq.n	8005978 <USBD_StdEPReq+0x80>
 8005922:	2b20      	cmp	r3, #32
 8005924:	f040 817a 	bne.w	8005c1c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8005928:	7bbb      	ldrb	r3, [r7, #14]
 800592a:	4619      	mov	r1, r3
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f7ff fe85 	bl	800563c <USBD_CoreFindEP>
 8005932:	4603      	mov	r3, r0
 8005934:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005936:	7b7b      	ldrb	r3, [r7, #13]
 8005938:	2bff      	cmp	r3, #255	@ 0xff
 800593a:	f000 8174 	beq.w	8005c26 <USBD_StdEPReq+0x32e>
 800593e:	7b7b      	ldrb	r3, [r7, #13]
 8005940:	2b00      	cmp	r3, #0
 8005942:	f040 8170 	bne.w	8005c26 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8005946:	7b7a      	ldrb	r2, [r7, #13]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800594e:	7b7a      	ldrb	r2, [r7, #13]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	32ae      	adds	r2, #174	@ 0xae
 8005954:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005958:	689b      	ldr	r3, [r3, #8]
 800595a:	2b00      	cmp	r3, #0
 800595c:	f000 8163 	beq.w	8005c26 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8005960:	7b7a      	ldrb	r2, [r7, #13]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	32ae      	adds	r2, #174	@ 0xae
 8005966:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	6839      	ldr	r1, [r7, #0]
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	4798      	blx	r3
 8005972:	4603      	mov	r3, r0
 8005974:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005976:	e156      	b.n	8005c26 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	785b      	ldrb	r3, [r3, #1]
 800597c:	2b03      	cmp	r3, #3
 800597e:	d008      	beq.n	8005992 <USBD_StdEPReq+0x9a>
 8005980:	2b03      	cmp	r3, #3
 8005982:	f300 8145 	bgt.w	8005c10 <USBD_StdEPReq+0x318>
 8005986:	2b00      	cmp	r3, #0
 8005988:	f000 809b 	beq.w	8005ac2 <USBD_StdEPReq+0x1ca>
 800598c:	2b01      	cmp	r3, #1
 800598e:	d03c      	beq.n	8005a0a <USBD_StdEPReq+0x112>
 8005990:	e13e      	b.n	8005c10 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005998:	b2db      	uxtb	r3, r3
 800599a:	2b02      	cmp	r3, #2
 800599c:	d002      	beq.n	80059a4 <USBD_StdEPReq+0xac>
 800599e:	2b03      	cmp	r3, #3
 80059a0:	d016      	beq.n	80059d0 <USBD_StdEPReq+0xd8>
 80059a2:	e02c      	b.n	80059fe <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80059a4:	7bbb      	ldrb	r3, [r7, #14]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d00d      	beq.n	80059c6 <USBD_StdEPReq+0xce>
 80059aa:	7bbb      	ldrb	r3, [r7, #14]
 80059ac:	2b80      	cmp	r3, #128	@ 0x80
 80059ae:	d00a      	beq.n	80059c6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80059b0:	7bbb      	ldrb	r3, [r7, #14]
 80059b2:	4619      	mov	r1, r3
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	f001 f963 	bl	8006c80 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80059ba:	2180      	movs	r1, #128	@ 0x80
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f001 f95f 	bl	8006c80 <USBD_LL_StallEP>
 80059c2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80059c4:	e020      	b.n	8005a08 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80059c6:	6839      	ldr	r1, [r7, #0]
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f000 fc7a 	bl	80062c2 <USBD_CtlError>
              break;
 80059ce:	e01b      	b.n	8005a08 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	885b      	ldrh	r3, [r3, #2]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d10e      	bne.n	80059f6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80059d8:	7bbb      	ldrb	r3, [r7, #14]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d00b      	beq.n	80059f6 <USBD_StdEPReq+0xfe>
 80059de:	7bbb      	ldrb	r3, [r7, #14]
 80059e0:	2b80      	cmp	r3, #128	@ 0x80
 80059e2:	d008      	beq.n	80059f6 <USBD_StdEPReq+0xfe>
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	88db      	ldrh	r3, [r3, #6]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d104      	bne.n	80059f6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80059ec:	7bbb      	ldrb	r3, [r7, #14]
 80059ee:	4619      	mov	r1, r3
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	f001 f945 	bl	8006c80 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f000 fd2e 	bl	8006458 <USBD_CtlSendStatus>

              break;
 80059fc:	e004      	b.n	8005a08 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80059fe:	6839      	ldr	r1, [r7, #0]
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	f000 fc5e 	bl	80062c2 <USBD_CtlError>
              break;
 8005a06:	bf00      	nop
          }
          break;
 8005a08:	e107      	b.n	8005c1a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005a10:	b2db      	uxtb	r3, r3
 8005a12:	2b02      	cmp	r3, #2
 8005a14:	d002      	beq.n	8005a1c <USBD_StdEPReq+0x124>
 8005a16:	2b03      	cmp	r3, #3
 8005a18:	d016      	beq.n	8005a48 <USBD_StdEPReq+0x150>
 8005a1a:	e04b      	b.n	8005ab4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005a1c:	7bbb      	ldrb	r3, [r7, #14]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d00d      	beq.n	8005a3e <USBD_StdEPReq+0x146>
 8005a22:	7bbb      	ldrb	r3, [r7, #14]
 8005a24:	2b80      	cmp	r3, #128	@ 0x80
 8005a26:	d00a      	beq.n	8005a3e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005a28:	7bbb      	ldrb	r3, [r7, #14]
 8005a2a:	4619      	mov	r1, r3
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f001 f927 	bl	8006c80 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005a32:	2180      	movs	r1, #128	@ 0x80
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f001 f923 	bl	8006c80 <USBD_LL_StallEP>
 8005a3a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005a3c:	e040      	b.n	8005ac0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8005a3e:	6839      	ldr	r1, [r7, #0]
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f000 fc3e 	bl	80062c2 <USBD_CtlError>
              break;
 8005a46:	e03b      	b.n	8005ac0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	885b      	ldrh	r3, [r3, #2]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d136      	bne.n	8005abe <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005a50:	7bbb      	ldrb	r3, [r7, #14]
 8005a52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d004      	beq.n	8005a64 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005a5a:	7bbb      	ldrb	r3, [r7, #14]
 8005a5c:	4619      	mov	r1, r3
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f001 f92d 	bl	8006cbe <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f000 fcf7 	bl	8006458 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8005a6a:	7bbb      	ldrb	r3, [r7, #14]
 8005a6c:	4619      	mov	r1, r3
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f7ff fde4 	bl	800563c <USBD_CoreFindEP>
 8005a74:	4603      	mov	r3, r0
 8005a76:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005a78:	7b7b      	ldrb	r3, [r7, #13]
 8005a7a:	2bff      	cmp	r3, #255	@ 0xff
 8005a7c:	d01f      	beq.n	8005abe <USBD_StdEPReq+0x1c6>
 8005a7e:	7b7b      	ldrb	r3, [r7, #13]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d11c      	bne.n	8005abe <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8005a84:	7b7a      	ldrb	r2, [r7, #13]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8005a8c:	7b7a      	ldrb	r2, [r7, #13]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	32ae      	adds	r2, #174	@ 0xae
 8005a92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a96:	689b      	ldr	r3, [r3, #8]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d010      	beq.n	8005abe <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005a9c:	7b7a      	ldrb	r2, [r7, #13]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	32ae      	adds	r2, #174	@ 0xae
 8005aa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005aa6:	689b      	ldr	r3, [r3, #8]
 8005aa8:	6839      	ldr	r1, [r7, #0]
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	4798      	blx	r3
 8005aae:	4603      	mov	r3, r0
 8005ab0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8005ab2:	e004      	b.n	8005abe <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8005ab4:	6839      	ldr	r1, [r7, #0]
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f000 fc03 	bl	80062c2 <USBD_CtlError>
              break;
 8005abc:	e000      	b.n	8005ac0 <USBD_StdEPReq+0x1c8>
              break;
 8005abe:	bf00      	nop
          }
          break;
 8005ac0:	e0ab      	b.n	8005c1a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005ac8:	b2db      	uxtb	r3, r3
 8005aca:	2b02      	cmp	r3, #2
 8005acc:	d002      	beq.n	8005ad4 <USBD_StdEPReq+0x1dc>
 8005ace:	2b03      	cmp	r3, #3
 8005ad0:	d032      	beq.n	8005b38 <USBD_StdEPReq+0x240>
 8005ad2:	e097      	b.n	8005c04 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005ad4:	7bbb      	ldrb	r3, [r7, #14]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d007      	beq.n	8005aea <USBD_StdEPReq+0x1f2>
 8005ada:	7bbb      	ldrb	r3, [r7, #14]
 8005adc:	2b80      	cmp	r3, #128	@ 0x80
 8005ade:	d004      	beq.n	8005aea <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8005ae0:	6839      	ldr	r1, [r7, #0]
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f000 fbed 	bl	80062c2 <USBD_CtlError>
                break;
 8005ae8:	e091      	b.n	8005c0e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005aea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	da0b      	bge.n	8005b0a <USBD_StdEPReq+0x212>
 8005af2:	7bbb      	ldrb	r3, [r7, #14]
 8005af4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005af8:	4613      	mov	r3, r2
 8005afa:	009b      	lsls	r3, r3, #2
 8005afc:	4413      	add	r3, r2
 8005afe:	009b      	lsls	r3, r3, #2
 8005b00:	3310      	adds	r3, #16
 8005b02:	687a      	ldr	r2, [r7, #4]
 8005b04:	4413      	add	r3, r2
 8005b06:	3304      	adds	r3, #4
 8005b08:	e00b      	b.n	8005b22 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005b0a:	7bbb      	ldrb	r3, [r7, #14]
 8005b0c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005b10:	4613      	mov	r3, r2
 8005b12:	009b      	lsls	r3, r3, #2
 8005b14:	4413      	add	r3, r2
 8005b16:	009b      	lsls	r3, r3, #2
 8005b18:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005b1c:	687a      	ldr	r2, [r7, #4]
 8005b1e:	4413      	add	r3, r2
 8005b20:	3304      	adds	r3, #4
 8005b22:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	2200      	movs	r2, #0
 8005b28:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	2202      	movs	r2, #2
 8005b2e:	4619      	mov	r1, r3
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	f000 fc37 	bl	80063a4 <USBD_CtlSendData>
              break;
 8005b36:	e06a      	b.n	8005c0e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005b38:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	da11      	bge.n	8005b64 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005b40:	7bbb      	ldrb	r3, [r7, #14]
 8005b42:	f003 020f 	and.w	r2, r3, #15
 8005b46:	6879      	ldr	r1, [r7, #4]
 8005b48:	4613      	mov	r3, r2
 8005b4a:	009b      	lsls	r3, r3, #2
 8005b4c:	4413      	add	r3, r2
 8005b4e:	009b      	lsls	r3, r3, #2
 8005b50:	440b      	add	r3, r1
 8005b52:	3324      	adds	r3, #36	@ 0x24
 8005b54:	881b      	ldrh	r3, [r3, #0]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d117      	bne.n	8005b8a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8005b5a:	6839      	ldr	r1, [r7, #0]
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	f000 fbb0 	bl	80062c2 <USBD_CtlError>
                  break;
 8005b62:	e054      	b.n	8005c0e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005b64:	7bbb      	ldrb	r3, [r7, #14]
 8005b66:	f003 020f 	and.w	r2, r3, #15
 8005b6a:	6879      	ldr	r1, [r7, #4]
 8005b6c:	4613      	mov	r3, r2
 8005b6e:	009b      	lsls	r3, r3, #2
 8005b70:	4413      	add	r3, r2
 8005b72:	009b      	lsls	r3, r3, #2
 8005b74:	440b      	add	r3, r1
 8005b76:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005b7a:	881b      	ldrh	r3, [r3, #0]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d104      	bne.n	8005b8a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8005b80:	6839      	ldr	r1, [r7, #0]
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f000 fb9d 	bl	80062c2 <USBD_CtlError>
                  break;
 8005b88:	e041      	b.n	8005c0e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005b8a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	da0b      	bge.n	8005baa <USBD_StdEPReq+0x2b2>
 8005b92:	7bbb      	ldrb	r3, [r7, #14]
 8005b94:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005b98:	4613      	mov	r3, r2
 8005b9a:	009b      	lsls	r3, r3, #2
 8005b9c:	4413      	add	r3, r2
 8005b9e:	009b      	lsls	r3, r3, #2
 8005ba0:	3310      	adds	r3, #16
 8005ba2:	687a      	ldr	r2, [r7, #4]
 8005ba4:	4413      	add	r3, r2
 8005ba6:	3304      	adds	r3, #4
 8005ba8:	e00b      	b.n	8005bc2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005baa:	7bbb      	ldrb	r3, [r7, #14]
 8005bac:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005bb0:	4613      	mov	r3, r2
 8005bb2:	009b      	lsls	r3, r3, #2
 8005bb4:	4413      	add	r3, r2
 8005bb6:	009b      	lsls	r3, r3, #2
 8005bb8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005bbc:	687a      	ldr	r2, [r7, #4]
 8005bbe:	4413      	add	r3, r2
 8005bc0:	3304      	adds	r3, #4
 8005bc2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005bc4:	7bbb      	ldrb	r3, [r7, #14]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d002      	beq.n	8005bd0 <USBD_StdEPReq+0x2d8>
 8005bca:	7bbb      	ldrb	r3, [r7, #14]
 8005bcc:	2b80      	cmp	r3, #128	@ 0x80
 8005bce:	d103      	bne.n	8005bd8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	601a      	str	r2, [r3, #0]
 8005bd6:	e00e      	b.n	8005bf6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005bd8:	7bbb      	ldrb	r3, [r7, #14]
 8005bda:	4619      	mov	r1, r3
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f001 f88d 	bl	8006cfc <USBD_LL_IsStallEP>
 8005be2:	4603      	mov	r3, r0
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d003      	beq.n	8005bf0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	2201      	movs	r2, #1
 8005bec:	601a      	str	r2, [r3, #0]
 8005bee:	e002      	b.n	8005bf6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	2202      	movs	r2, #2
 8005bfa:	4619      	mov	r1, r3
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	f000 fbd1 	bl	80063a4 <USBD_CtlSendData>
              break;
 8005c02:	e004      	b.n	8005c0e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8005c04:	6839      	ldr	r1, [r7, #0]
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	f000 fb5b 	bl	80062c2 <USBD_CtlError>
              break;
 8005c0c:	bf00      	nop
          }
          break;
 8005c0e:	e004      	b.n	8005c1a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8005c10:	6839      	ldr	r1, [r7, #0]
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f000 fb55 	bl	80062c2 <USBD_CtlError>
          break;
 8005c18:	bf00      	nop
      }
      break;
 8005c1a:	e005      	b.n	8005c28 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8005c1c:	6839      	ldr	r1, [r7, #0]
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f000 fb4f 	bl	80062c2 <USBD_CtlError>
      break;
 8005c24:	e000      	b.n	8005c28 <USBD_StdEPReq+0x330>
      break;
 8005c26:	bf00      	nop
  }

  return ret;
 8005c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3710      	adds	r7, #16
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}
	...

08005c34 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b084      	sub	sp, #16
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
 8005c3c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005c42:	2300      	movs	r3, #0
 8005c44:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005c46:	2300      	movs	r3, #0
 8005c48:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	885b      	ldrh	r3, [r3, #2]
 8005c4e:	0a1b      	lsrs	r3, r3, #8
 8005c50:	b29b      	uxth	r3, r3
 8005c52:	3b01      	subs	r3, #1
 8005c54:	2b06      	cmp	r3, #6
 8005c56:	f200 8128 	bhi.w	8005eaa <USBD_GetDescriptor+0x276>
 8005c5a:	a201      	add	r2, pc, #4	@ (adr r2, 8005c60 <USBD_GetDescriptor+0x2c>)
 8005c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c60:	08005c7d 	.word	0x08005c7d
 8005c64:	08005c95 	.word	0x08005c95
 8005c68:	08005cd5 	.word	0x08005cd5
 8005c6c:	08005eab 	.word	0x08005eab
 8005c70:	08005eab 	.word	0x08005eab
 8005c74:	08005e4b 	.word	0x08005e4b
 8005c78:	08005e77 	.word	0x08005e77
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	687a      	ldr	r2, [r7, #4]
 8005c86:	7c12      	ldrb	r2, [r2, #16]
 8005c88:	f107 0108 	add.w	r1, r7, #8
 8005c8c:	4610      	mov	r0, r2
 8005c8e:	4798      	blx	r3
 8005c90:	60f8      	str	r0, [r7, #12]
      break;
 8005c92:	e112      	b.n	8005eba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	7c1b      	ldrb	r3, [r3, #16]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d10d      	bne.n	8005cb8 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005ca2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ca4:	f107 0208 	add.w	r2, r7, #8
 8005ca8:	4610      	mov	r0, r2
 8005caa:	4798      	blx	r3
 8005cac:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	3301      	adds	r3, #1
 8005cb2:	2202      	movs	r2, #2
 8005cb4:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005cb6:	e100      	b.n	8005eba <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005cbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cc0:	f107 0208 	add.w	r2, r7, #8
 8005cc4:	4610      	mov	r0, r2
 8005cc6:	4798      	blx	r3
 8005cc8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	3301      	adds	r3, #1
 8005cce:	2202      	movs	r2, #2
 8005cd0:	701a      	strb	r2, [r3, #0]
      break;
 8005cd2:	e0f2      	b.n	8005eba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	885b      	ldrh	r3, [r3, #2]
 8005cd8:	b2db      	uxtb	r3, r3
 8005cda:	2b05      	cmp	r3, #5
 8005cdc:	f200 80ac 	bhi.w	8005e38 <USBD_GetDescriptor+0x204>
 8005ce0:	a201      	add	r2, pc, #4	@ (adr r2, 8005ce8 <USBD_GetDescriptor+0xb4>)
 8005ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ce6:	bf00      	nop
 8005ce8:	08005d01 	.word	0x08005d01
 8005cec:	08005d35 	.word	0x08005d35
 8005cf0:	08005d69 	.word	0x08005d69
 8005cf4:	08005d9d 	.word	0x08005d9d
 8005cf8:	08005dd1 	.word	0x08005dd1
 8005cfc:	08005e05 	.word	0x08005e05
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d00b      	beq.n	8005d24 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	687a      	ldr	r2, [r7, #4]
 8005d16:	7c12      	ldrb	r2, [r2, #16]
 8005d18:	f107 0108 	add.w	r1, r7, #8
 8005d1c:	4610      	mov	r0, r2
 8005d1e:	4798      	blx	r3
 8005d20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005d22:	e091      	b.n	8005e48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005d24:	6839      	ldr	r1, [r7, #0]
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f000 facb 	bl	80062c2 <USBD_CtlError>
            err++;
 8005d2c:	7afb      	ldrb	r3, [r7, #11]
 8005d2e:	3301      	adds	r3, #1
 8005d30:	72fb      	strb	r3, [r7, #11]
          break;
 8005d32:	e089      	b.n	8005e48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005d3a:	689b      	ldr	r3, [r3, #8]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d00b      	beq.n	8005d58 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005d46:	689b      	ldr	r3, [r3, #8]
 8005d48:	687a      	ldr	r2, [r7, #4]
 8005d4a:	7c12      	ldrb	r2, [r2, #16]
 8005d4c:	f107 0108 	add.w	r1, r7, #8
 8005d50:	4610      	mov	r0, r2
 8005d52:	4798      	blx	r3
 8005d54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005d56:	e077      	b.n	8005e48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005d58:	6839      	ldr	r1, [r7, #0]
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f000 fab1 	bl	80062c2 <USBD_CtlError>
            err++;
 8005d60:	7afb      	ldrb	r3, [r7, #11]
 8005d62:	3301      	adds	r3, #1
 8005d64:	72fb      	strb	r3, [r7, #11]
          break;
 8005d66:	e06f      	b.n	8005e48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005d6e:	68db      	ldr	r3, [r3, #12]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d00b      	beq.n	8005d8c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005d7a:	68db      	ldr	r3, [r3, #12]
 8005d7c:	687a      	ldr	r2, [r7, #4]
 8005d7e:	7c12      	ldrb	r2, [r2, #16]
 8005d80:	f107 0108 	add.w	r1, r7, #8
 8005d84:	4610      	mov	r0, r2
 8005d86:	4798      	blx	r3
 8005d88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005d8a:	e05d      	b.n	8005e48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005d8c:	6839      	ldr	r1, [r7, #0]
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f000 fa97 	bl	80062c2 <USBD_CtlError>
            err++;
 8005d94:	7afb      	ldrb	r3, [r7, #11]
 8005d96:	3301      	adds	r3, #1
 8005d98:	72fb      	strb	r3, [r7, #11]
          break;
 8005d9a:	e055      	b.n	8005e48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005da2:	691b      	ldr	r3, [r3, #16]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d00b      	beq.n	8005dc0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005dae:	691b      	ldr	r3, [r3, #16]
 8005db0:	687a      	ldr	r2, [r7, #4]
 8005db2:	7c12      	ldrb	r2, [r2, #16]
 8005db4:	f107 0108 	add.w	r1, r7, #8
 8005db8:	4610      	mov	r0, r2
 8005dba:	4798      	blx	r3
 8005dbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005dbe:	e043      	b.n	8005e48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005dc0:	6839      	ldr	r1, [r7, #0]
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f000 fa7d 	bl	80062c2 <USBD_CtlError>
            err++;
 8005dc8:	7afb      	ldrb	r3, [r7, #11]
 8005dca:	3301      	adds	r3, #1
 8005dcc:	72fb      	strb	r3, [r7, #11]
          break;
 8005dce:	e03b      	b.n	8005e48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005dd6:	695b      	ldr	r3, [r3, #20]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d00b      	beq.n	8005df4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005de2:	695b      	ldr	r3, [r3, #20]
 8005de4:	687a      	ldr	r2, [r7, #4]
 8005de6:	7c12      	ldrb	r2, [r2, #16]
 8005de8:	f107 0108 	add.w	r1, r7, #8
 8005dec:	4610      	mov	r0, r2
 8005dee:	4798      	blx	r3
 8005df0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005df2:	e029      	b.n	8005e48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005df4:	6839      	ldr	r1, [r7, #0]
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f000 fa63 	bl	80062c2 <USBD_CtlError>
            err++;
 8005dfc:	7afb      	ldrb	r3, [r7, #11]
 8005dfe:	3301      	adds	r3, #1
 8005e00:	72fb      	strb	r3, [r7, #11]
          break;
 8005e02:	e021      	b.n	8005e48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005e0a:	699b      	ldr	r3, [r3, #24]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d00b      	beq.n	8005e28 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005e16:	699b      	ldr	r3, [r3, #24]
 8005e18:	687a      	ldr	r2, [r7, #4]
 8005e1a:	7c12      	ldrb	r2, [r2, #16]
 8005e1c:	f107 0108 	add.w	r1, r7, #8
 8005e20:	4610      	mov	r0, r2
 8005e22:	4798      	blx	r3
 8005e24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005e26:	e00f      	b.n	8005e48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005e28:	6839      	ldr	r1, [r7, #0]
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f000 fa49 	bl	80062c2 <USBD_CtlError>
            err++;
 8005e30:	7afb      	ldrb	r3, [r7, #11]
 8005e32:	3301      	adds	r3, #1
 8005e34:	72fb      	strb	r3, [r7, #11]
          break;
 8005e36:	e007      	b.n	8005e48 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8005e38:	6839      	ldr	r1, [r7, #0]
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f000 fa41 	bl	80062c2 <USBD_CtlError>
          err++;
 8005e40:	7afb      	ldrb	r3, [r7, #11]
 8005e42:	3301      	adds	r3, #1
 8005e44:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8005e46:	bf00      	nop
      }
      break;
 8005e48:	e037      	b.n	8005eba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	7c1b      	ldrb	r3, [r3, #16]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d109      	bne.n	8005e66 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005e58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e5a:	f107 0208 	add.w	r2, r7, #8
 8005e5e:	4610      	mov	r0, r2
 8005e60:	4798      	blx	r3
 8005e62:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005e64:	e029      	b.n	8005eba <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005e66:	6839      	ldr	r1, [r7, #0]
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	f000 fa2a 	bl	80062c2 <USBD_CtlError>
        err++;
 8005e6e:	7afb      	ldrb	r3, [r7, #11]
 8005e70:	3301      	adds	r3, #1
 8005e72:	72fb      	strb	r3, [r7, #11]
      break;
 8005e74:	e021      	b.n	8005eba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	7c1b      	ldrb	r3, [r3, #16]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d10d      	bne.n	8005e9a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e86:	f107 0208 	add.w	r2, r7, #8
 8005e8a:	4610      	mov	r0, r2
 8005e8c:	4798      	blx	r3
 8005e8e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	3301      	adds	r3, #1
 8005e94:	2207      	movs	r2, #7
 8005e96:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005e98:	e00f      	b.n	8005eba <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005e9a:	6839      	ldr	r1, [r7, #0]
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f000 fa10 	bl	80062c2 <USBD_CtlError>
        err++;
 8005ea2:	7afb      	ldrb	r3, [r7, #11]
 8005ea4:	3301      	adds	r3, #1
 8005ea6:	72fb      	strb	r3, [r7, #11]
      break;
 8005ea8:	e007      	b.n	8005eba <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8005eaa:	6839      	ldr	r1, [r7, #0]
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f000 fa08 	bl	80062c2 <USBD_CtlError>
      err++;
 8005eb2:	7afb      	ldrb	r3, [r7, #11]
 8005eb4:	3301      	adds	r3, #1
 8005eb6:	72fb      	strb	r3, [r7, #11]
      break;
 8005eb8:	bf00      	nop
  }

  if (err != 0U)
 8005eba:	7afb      	ldrb	r3, [r7, #11]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d11e      	bne.n	8005efe <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	88db      	ldrh	r3, [r3, #6]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d016      	beq.n	8005ef6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8005ec8:	893b      	ldrh	r3, [r7, #8]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d00e      	beq.n	8005eec <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	88da      	ldrh	r2, [r3, #6]
 8005ed2:	893b      	ldrh	r3, [r7, #8]
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	bf28      	it	cs
 8005ed8:	4613      	movcs	r3, r2
 8005eda:	b29b      	uxth	r3, r3
 8005edc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005ede:	893b      	ldrh	r3, [r7, #8]
 8005ee0:	461a      	mov	r2, r3
 8005ee2:	68f9      	ldr	r1, [r7, #12]
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f000 fa5d 	bl	80063a4 <USBD_CtlSendData>
 8005eea:	e009      	b.n	8005f00 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8005eec:	6839      	ldr	r1, [r7, #0]
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f000 f9e7 	bl	80062c2 <USBD_CtlError>
 8005ef4:	e004      	b.n	8005f00 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f000 faae 	bl	8006458 <USBD_CtlSendStatus>
 8005efc:	e000      	b.n	8005f00 <USBD_GetDescriptor+0x2cc>
    return;
 8005efe:	bf00      	nop
  }
}
 8005f00:	3710      	adds	r7, #16
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}
 8005f06:	bf00      	nop

08005f08 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b084      	sub	sp, #16
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
 8005f10:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	889b      	ldrh	r3, [r3, #4]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d131      	bne.n	8005f7e <USBD_SetAddress+0x76>
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	88db      	ldrh	r3, [r3, #6]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d12d      	bne.n	8005f7e <USBD_SetAddress+0x76>
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	885b      	ldrh	r3, [r3, #2]
 8005f26:	2b7f      	cmp	r3, #127	@ 0x7f
 8005f28:	d829      	bhi.n	8005f7e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	885b      	ldrh	r3, [r3, #2]
 8005f2e:	b2db      	uxtb	r3, r3
 8005f30:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f34:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005f3c:	b2db      	uxtb	r3, r3
 8005f3e:	2b03      	cmp	r3, #3
 8005f40:	d104      	bne.n	8005f4c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8005f42:	6839      	ldr	r1, [r7, #0]
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f000 f9bc 	bl	80062c2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f4a:	e01d      	b.n	8005f88 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	7bfa      	ldrb	r2, [r7, #15]
 8005f50:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005f54:	7bfb      	ldrb	r3, [r7, #15]
 8005f56:	4619      	mov	r1, r3
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f000 fefb 	bl	8006d54 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f000 fa7a 	bl	8006458 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005f64:	7bfb      	ldrb	r3, [r7, #15]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d004      	beq.n	8005f74 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2202      	movs	r2, #2
 8005f6e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f72:	e009      	b.n	8005f88 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2201      	movs	r2, #1
 8005f78:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f7c:	e004      	b.n	8005f88 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005f7e:	6839      	ldr	r1, [r7, #0]
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f000 f99e 	bl	80062c2 <USBD_CtlError>
  }
}
 8005f86:	bf00      	nop
 8005f88:	bf00      	nop
 8005f8a:	3710      	adds	r7, #16
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bd80      	pop	{r7, pc}

08005f90 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b084      	sub	sp, #16
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
 8005f98:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	885b      	ldrh	r3, [r3, #2]
 8005fa2:	b2da      	uxtb	r2, r3
 8005fa4:	4b4e      	ldr	r3, [pc, #312]	@ (80060e0 <USBD_SetConfig+0x150>)
 8005fa6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005fa8:	4b4d      	ldr	r3, [pc, #308]	@ (80060e0 <USBD_SetConfig+0x150>)
 8005faa:	781b      	ldrb	r3, [r3, #0]
 8005fac:	2b01      	cmp	r3, #1
 8005fae:	d905      	bls.n	8005fbc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8005fb0:	6839      	ldr	r1, [r7, #0]
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f000 f985 	bl	80062c2 <USBD_CtlError>
    return USBD_FAIL;
 8005fb8:	2303      	movs	r3, #3
 8005fba:	e08c      	b.n	80060d6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005fc2:	b2db      	uxtb	r3, r3
 8005fc4:	2b02      	cmp	r3, #2
 8005fc6:	d002      	beq.n	8005fce <USBD_SetConfig+0x3e>
 8005fc8:	2b03      	cmp	r3, #3
 8005fca:	d029      	beq.n	8006020 <USBD_SetConfig+0x90>
 8005fcc:	e075      	b.n	80060ba <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8005fce:	4b44      	ldr	r3, [pc, #272]	@ (80060e0 <USBD_SetConfig+0x150>)
 8005fd0:	781b      	ldrb	r3, [r3, #0]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d020      	beq.n	8006018 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8005fd6:	4b42      	ldr	r3, [pc, #264]	@ (80060e0 <USBD_SetConfig+0x150>)
 8005fd8:	781b      	ldrb	r3, [r3, #0]
 8005fda:	461a      	mov	r2, r3
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005fe0:	4b3f      	ldr	r3, [pc, #252]	@ (80060e0 <USBD_SetConfig+0x150>)
 8005fe2:	781b      	ldrb	r3, [r3, #0]
 8005fe4:	4619      	mov	r1, r3
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f7fe ffe3 	bl	8004fb2 <USBD_SetClassConfig>
 8005fec:	4603      	mov	r3, r0
 8005fee:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8005ff0:	7bfb      	ldrb	r3, [r7, #15]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d008      	beq.n	8006008 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8005ff6:	6839      	ldr	r1, [r7, #0]
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f000 f962 	bl	80062c2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2202      	movs	r2, #2
 8006002:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006006:	e065      	b.n	80060d4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	f000 fa25 	bl	8006458 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2203      	movs	r2, #3
 8006012:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8006016:	e05d      	b.n	80060d4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	f000 fa1d 	bl	8006458 <USBD_CtlSendStatus>
      break;
 800601e:	e059      	b.n	80060d4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006020:	4b2f      	ldr	r3, [pc, #188]	@ (80060e0 <USBD_SetConfig+0x150>)
 8006022:	781b      	ldrb	r3, [r3, #0]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d112      	bne.n	800604e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2202      	movs	r2, #2
 800602c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8006030:	4b2b      	ldr	r3, [pc, #172]	@ (80060e0 <USBD_SetConfig+0x150>)
 8006032:	781b      	ldrb	r3, [r3, #0]
 8006034:	461a      	mov	r2, r3
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800603a:	4b29      	ldr	r3, [pc, #164]	@ (80060e0 <USBD_SetConfig+0x150>)
 800603c:	781b      	ldrb	r3, [r3, #0]
 800603e:	4619      	mov	r1, r3
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	f7fe ffd2 	bl	8004fea <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f000 fa06 	bl	8006458 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800604c:	e042      	b.n	80060d4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800604e:	4b24      	ldr	r3, [pc, #144]	@ (80060e0 <USBD_SetConfig+0x150>)
 8006050:	781b      	ldrb	r3, [r3, #0]
 8006052:	461a      	mov	r2, r3
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	429a      	cmp	r2, r3
 800605a:	d02a      	beq.n	80060b2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	685b      	ldr	r3, [r3, #4]
 8006060:	b2db      	uxtb	r3, r3
 8006062:	4619      	mov	r1, r3
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f7fe ffc0 	bl	8004fea <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800606a:	4b1d      	ldr	r3, [pc, #116]	@ (80060e0 <USBD_SetConfig+0x150>)
 800606c:	781b      	ldrb	r3, [r3, #0]
 800606e:	461a      	mov	r2, r3
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006074:	4b1a      	ldr	r3, [pc, #104]	@ (80060e0 <USBD_SetConfig+0x150>)
 8006076:	781b      	ldrb	r3, [r3, #0]
 8006078:	4619      	mov	r1, r3
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f7fe ff99 	bl	8004fb2 <USBD_SetClassConfig>
 8006080:	4603      	mov	r3, r0
 8006082:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006084:	7bfb      	ldrb	r3, [r7, #15]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d00f      	beq.n	80060aa <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800608a:	6839      	ldr	r1, [r7, #0]
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f000 f918 	bl	80062c2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	b2db      	uxtb	r3, r3
 8006098:	4619      	mov	r1, r3
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f7fe ffa5 	bl	8004fea <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2202      	movs	r2, #2
 80060a4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80060a8:	e014      	b.n	80060d4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f000 f9d4 	bl	8006458 <USBD_CtlSendStatus>
      break;
 80060b0:	e010      	b.n	80060d4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f000 f9d0 	bl	8006458 <USBD_CtlSendStatus>
      break;
 80060b8:	e00c      	b.n	80060d4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80060ba:	6839      	ldr	r1, [r7, #0]
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f000 f900 	bl	80062c2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80060c2:	4b07      	ldr	r3, [pc, #28]	@ (80060e0 <USBD_SetConfig+0x150>)
 80060c4:	781b      	ldrb	r3, [r3, #0]
 80060c6:	4619      	mov	r1, r3
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	f7fe ff8e 	bl	8004fea <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80060ce:	2303      	movs	r3, #3
 80060d0:	73fb      	strb	r3, [r7, #15]
      break;
 80060d2:	bf00      	nop
  }

  return ret;
 80060d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	3710      	adds	r7, #16
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}
 80060de:	bf00      	nop
 80060e0:	200001cc 	.word	0x200001cc

080060e4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b082      	sub	sp, #8
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
 80060ec:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	88db      	ldrh	r3, [r3, #6]
 80060f2:	2b01      	cmp	r3, #1
 80060f4:	d004      	beq.n	8006100 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80060f6:	6839      	ldr	r1, [r7, #0]
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f000 f8e2 	bl	80062c2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80060fe:	e023      	b.n	8006148 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006106:	b2db      	uxtb	r3, r3
 8006108:	2b02      	cmp	r3, #2
 800610a:	dc02      	bgt.n	8006112 <USBD_GetConfig+0x2e>
 800610c:	2b00      	cmp	r3, #0
 800610e:	dc03      	bgt.n	8006118 <USBD_GetConfig+0x34>
 8006110:	e015      	b.n	800613e <USBD_GetConfig+0x5a>
 8006112:	2b03      	cmp	r3, #3
 8006114:	d00b      	beq.n	800612e <USBD_GetConfig+0x4a>
 8006116:	e012      	b.n	800613e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2200      	movs	r2, #0
 800611c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	3308      	adds	r3, #8
 8006122:	2201      	movs	r2, #1
 8006124:	4619      	mov	r1, r3
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f000 f93c 	bl	80063a4 <USBD_CtlSendData>
        break;
 800612c:	e00c      	b.n	8006148 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	3304      	adds	r3, #4
 8006132:	2201      	movs	r2, #1
 8006134:	4619      	mov	r1, r3
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	f000 f934 	bl	80063a4 <USBD_CtlSendData>
        break;
 800613c:	e004      	b.n	8006148 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800613e:	6839      	ldr	r1, [r7, #0]
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	f000 f8be 	bl	80062c2 <USBD_CtlError>
        break;
 8006146:	bf00      	nop
}
 8006148:	bf00      	nop
 800614a:	3708      	adds	r7, #8
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}

08006150 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b082      	sub	sp, #8
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
 8006158:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006160:	b2db      	uxtb	r3, r3
 8006162:	3b01      	subs	r3, #1
 8006164:	2b02      	cmp	r3, #2
 8006166:	d81e      	bhi.n	80061a6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	88db      	ldrh	r3, [r3, #6]
 800616c:	2b02      	cmp	r3, #2
 800616e:	d004      	beq.n	800617a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006170:	6839      	ldr	r1, [r7, #0]
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f000 f8a5 	bl	80062c2 <USBD_CtlError>
        break;
 8006178:	e01a      	b.n	80061b0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2201      	movs	r2, #1
 800617e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8006186:	2b00      	cmp	r3, #0
 8006188:	d005      	beq.n	8006196 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	68db      	ldr	r3, [r3, #12]
 800618e:	f043 0202 	orr.w	r2, r3, #2
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	330c      	adds	r3, #12
 800619a:	2202      	movs	r2, #2
 800619c:	4619      	mov	r1, r3
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f000 f900 	bl	80063a4 <USBD_CtlSendData>
      break;
 80061a4:	e004      	b.n	80061b0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80061a6:	6839      	ldr	r1, [r7, #0]
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	f000 f88a 	bl	80062c2 <USBD_CtlError>
      break;
 80061ae:	bf00      	nop
  }
}
 80061b0:	bf00      	nop
 80061b2:	3708      	adds	r7, #8
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}

080061b8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b082      	sub	sp, #8
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
 80061c0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	885b      	ldrh	r3, [r3, #2]
 80061c6:	2b01      	cmp	r3, #1
 80061c8:	d107      	bne.n	80061da <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2201      	movs	r2, #1
 80061ce:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f000 f940 	bl	8006458 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80061d8:	e013      	b.n	8006202 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	885b      	ldrh	r3, [r3, #2]
 80061de:	2b02      	cmp	r3, #2
 80061e0:	d10b      	bne.n	80061fa <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	889b      	ldrh	r3, [r3, #4]
 80061e6:	0a1b      	lsrs	r3, r3, #8
 80061e8:	b29b      	uxth	r3, r3
 80061ea:	b2da      	uxtb	r2, r3
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f000 f930 	bl	8006458 <USBD_CtlSendStatus>
}
 80061f8:	e003      	b.n	8006202 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80061fa:	6839      	ldr	r1, [r7, #0]
 80061fc:	6878      	ldr	r0, [r7, #4]
 80061fe:	f000 f860 	bl	80062c2 <USBD_CtlError>
}
 8006202:	bf00      	nop
 8006204:	3708      	adds	r7, #8
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}

0800620a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800620a:	b580      	push	{r7, lr}
 800620c:	b082      	sub	sp, #8
 800620e:	af00      	add	r7, sp, #0
 8006210:	6078      	str	r0, [r7, #4]
 8006212:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800621a:	b2db      	uxtb	r3, r3
 800621c:	3b01      	subs	r3, #1
 800621e:	2b02      	cmp	r3, #2
 8006220:	d80b      	bhi.n	800623a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	885b      	ldrh	r3, [r3, #2]
 8006226:	2b01      	cmp	r3, #1
 8006228:	d10c      	bne.n	8006244 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2200      	movs	r2, #0
 800622e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f000 f910 	bl	8006458 <USBD_CtlSendStatus>
      }
      break;
 8006238:	e004      	b.n	8006244 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800623a:	6839      	ldr	r1, [r7, #0]
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	f000 f840 	bl	80062c2 <USBD_CtlError>
      break;
 8006242:	e000      	b.n	8006246 <USBD_ClrFeature+0x3c>
      break;
 8006244:	bf00      	nop
  }
}
 8006246:	bf00      	nop
 8006248:	3708      	adds	r7, #8
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}

0800624e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800624e:	b580      	push	{r7, lr}
 8006250:	b084      	sub	sp, #16
 8006252:	af00      	add	r7, sp, #0
 8006254:	6078      	str	r0, [r7, #4]
 8006256:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	781a      	ldrb	r2, [r3, #0]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	3301      	adds	r3, #1
 8006268:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	781a      	ldrb	r2, [r3, #0]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	3301      	adds	r3, #1
 8006276:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006278:	68f8      	ldr	r0, [r7, #12]
 800627a:	f7ff fa40 	bl	80056fe <SWAPBYTE>
 800627e:	4603      	mov	r3, r0
 8006280:	461a      	mov	r2, r3
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	3301      	adds	r3, #1
 800628a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	3301      	adds	r3, #1
 8006290:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006292:	68f8      	ldr	r0, [r7, #12]
 8006294:	f7ff fa33 	bl	80056fe <SWAPBYTE>
 8006298:	4603      	mov	r3, r0
 800629a:	461a      	mov	r2, r3
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	3301      	adds	r3, #1
 80062a4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	3301      	adds	r3, #1
 80062aa:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80062ac:	68f8      	ldr	r0, [r7, #12]
 80062ae:	f7ff fa26 	bl	80056fe <SWAPBYTE>
 80062b2:	4603      	mov	r3, r0
 80062b4:	461a      	mov	r2, r3
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	80da      	strh	r2, [r3, #6]
}
 80062ba:	bf00      	nop
 80062bc:	3710      	adds	r7, #16
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}

080062c2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80062c2:	b580      	push	{r7, lr}
 80062c4:	b082      	sub	sp, #8
 80062c6:	af00      	add	r7, sp, #0
 80062c8:	6078      	str	r0, [r7, #4]
 80062ca:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80062cc:	2180      	movs	r1, #128	@ 0x80
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f000 fcd6 	bl	8006c80 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80062d4:	2100      	movs	r1, #0
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f000 fcd2 	bl	8006c80 <USBD_LL_StallEP>
}
 80062dc:	bf00      	nop
 80062de:	3708      	adds	r7, #8
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}

080062e4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b086      	sub	sp, #24
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	60f8      	str	r0, [r7, #12]
 80062ec:	60b9      	str	r1, [r7, #8]
 80062ee:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80062f0:	2300      	movs	r3, #0
 80062f2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d036      	beq.n	8006368 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80062fe:	6938      	ldr	r0, [r7, #16]
 8006300:	f000 f836 	bl	8006370 <USBD_GetLen>
 8006304:	4603      	mov	r3, r0
 8006306:	3301      	adds	r3, #1
 8006308:	b29b      	uxth	r3, r3
 800630a:	005b      	lsls	r3, r3, #1
 800630c:	b29a      	uxth	r2, r3
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006312:	7dfb      	ldrb	r3, [r7, #23]
 8006314:	68ba      	ldr	r2, [r7, #8]
 8006316:	4413      	add	r3, r2
 8006318:	687a      	ldr	r2, [r7, #4]
 800631a:	7812      	ldrb	r2, [r2, #0]
 800631c:	701a      	strb	r2, [r3, #0]
  idx++;
 800631e:	7dfb      	ldrb	r3, [r7, #23]
 8006320:	3301      	adds	r3, #1
 8006322:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006324:	7dfb      	ldrb	r3, [r7, #23]
 8006326:	68ba      	ldr	r2, [r7, #8]
 8006328:	4413      	add	r3, r2
 800632a:	2203      	movs	r2, #3
 800632c:	701a      	strb	r2, [r3, #0]
  idx++;
 800632e:	7dfb      	ldrb	r3, [r7, #23]
 8006330:	3301      	adds	r3, #1
 8006332:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006334:	e013      	b.n	800635e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006336:	7dfb      	ldrb	r3, [r7, #23]
 8006338:	68ba      	ldr	r2, [r7, #8]
 800633a:	4413      	add	r3, r2
 800633c:	693a      	ldr	r2, [r7, #16]
 800633e:	7812      	ldrb	r2, [r2, #0]
 8006340:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	3301      	adds	r3, #1
 8006346:	613b      	str	r3, [r7, #16]
    idx++;
 8006348:	7dfb      	ldrb	r3, [r7, #23]
 800634a:	3301      	adds	r3, #1
 800634c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800634e:	7dfb      	ldrb	r3, [r7, #23]
 8006350:	68ba      	ldr	r2, [r7, #8]
 8006352:	4413      	add	r3, r2
 8006354:	2200      	movs	r2, #0
 8006356:	701a      	strb	r2, [r3, #0]
    idx++;
 8006358:	7dfb      	ldrb	r3, [r7, #23]
 800635a:	3301      	adds	r3, #1
 800635c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	781b      	ldrb	r3, [r3, #0]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d1e7      	bne.n	8006336 <USBD_GetString+0x52>
 8006366:	e000      	b.n	800636a <USBD_GetString+0x86>
    return;
 8006368:	bf00      	nop
  }
}
 800636a:	3718      	adds	r7, #24
 800636c:	46bd      	mov	sp, r7
 800636e:	bd80      	pop	{r7, pc}

08006370 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006370:	b480      	push	{r7}
 8006372:	b085      	sub	sp, #20
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006378:	2300      	movs	r3, #0
 800637a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006380:	e005      	b.n	800638e <USBD_GetLen+0x1e>
  {
    len++;
 8006382:	7bfb      	ldrb	r3, [r7, #15]
 8006384:	3301      	adds	r3, #1
 8006386:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	3301      	adds	r3, #1
 800638c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	781b      	ldrb	r3, [r3, #0]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d1f5      	bne.n	8006382 <USBD_GetLen+0x12>
  }

  return len;
 8006396:	7bfb      	ldrb	r3, [r7, #15]
}
 8006398:	4618      	mov	r0, r3
 800639a:	3714      	adds	r7, #20
 800639c:	46bd      	mov	sp, r7
 800639e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a2:	4770      	bx	lr

080063a4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b084      	sub	sp, #16
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	60f8      	str	r0, [r7, #12]
 80063ac:	60b9      	str	r1, [r7, #8]
 80063ae:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	2202      	movs	r2, #2
 80063b4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	687a      	ldr	r2, [r7, #4]
 80063bc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	687a      	ldr	r2, [r7, #4]
 80063c2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	68ba      	ldr	r2, [r7, #8]
 80063c8:	2100      	movs	r1, #0
 80063ca:	68f8      	ldr	r0, [r7, #12]
 80063cc:	f000 fce1 	bl	8006d92 <USBD_LL_Transmit>

  return USBD_OK;
 80063d0:	2300      	movs	r3, #0
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3710      	adds	r7, #16
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}

080063da <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80063da:	b580      	push	{r7, lr}
 80063dc:	b084      	sub	sp, #16
 80063de:	af00      	add	r7, sp, #0
 80063e0:	60f8      	str	r0, [r7, #12]
 80063e2:	60b9      	str	r1, [r7, #8]
 80063e4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	68ba      	ldr	r2, [r7, #8]
 80063ea:	2100      	movs	r1, #0
 80063ec:	68f8      	ldr	r0, [r7, #12]
 80063ee:	f000 fcd0 	bl	8006d92 <USBD_LL_Transmit>

  return USBD_OK;
 80063f2:	2300      	movs	r3, #0
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	3710      	adds	r7, #16
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}

080063fc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b084      	sub	sp, #16
 8006400:	af00      	add	r7, sp, #0
 8006402:	60f8      	str	r0, [r7, #12]
 8006404:	60b9      	str	r1, [r7, #8]
 8006406:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2203      	movs	r2, #3
 800640c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	687a      	ldr	r2, [r7, #4]
 8006414:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	687a      	ldr	r2, [r7, #4]
 800641c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	68ba      	ldr	r2, [r7, #8]
 8006424:	2100      	movs	r1, #0
 8006426:	68f8      	ldr	r0, [r7, #12]
 8006428:	f000 fcd4 	bl	8006dd4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800642c:	2300      	movs	r3, #0
}
 800642e:	4618      	mov	r0, r3
 8006430:	3710      	adds	r7, #16
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}

08006436 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006436:	b580      	push	{r7, lr}
 8006438:	b084      	sub	sp, #16
 800643a:	af00      	add	r7, sp, #0
 800643c:	60f8      	str	r0, [r7, #12]
 800643e:	60b9      	str	r1, [r7, #8]
 8006440:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	68ba      	ldr	r2, [r7, #8]
 8006446:	2100      	movs	r1, #0
 8006448:	68f8      	ldr	r0, [r7, #12]
 800644a:	f000 fcc3 	bl	8006dd4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800644e:	2300      	movs	r3, #0
}
 8006450:	4618      	mov	r0, r3
 8006452:	3710      	adds	r7, #16
 8006454:	46bd      	mov	sp, r7
 8006456:	bd80      	pop	{r7, pc}

08006458 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b082      	sub	sp, #8
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2204      	movs	r2, #4
 8006464:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006468:	2300      	movs	r3, #0
 800646a:	2200      	movs	r2, #0
 800646c:	2100      	movs	r1, #0
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f000 fc8f 	bl	8006d92 <USBD_LL_Transmit>

  return USBD_OK;
 8006474:	2300      	movs	r3, #0
}
 8006476:	4618      	mov	r0, r3
 8006478:	3708      	adds	r7, #8
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}

0800647e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800647e:	b580      	push	{r7, lr}
 8006480:	b082      	sub	sp, #8
 8006482:	af00      	add	r7, sp, #0
 8006484:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2205      	movs	r2, #5
 800648a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800648e:	2300      	movs	r3, #0
 8006490:	2200      	movs	r2, #0
 8006492:	2100      	movs	r1, #0
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	f000 fc9d 	bl	8006dd4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800649a:	2300      	movs	r3, #0
}
 800649c:	4618      	mov	r0, r3
 800649e:	3708      	adds	r7, #8
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}

080064a4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80064a8:	2200      	movs	r2, #0
 80064aa:	4912      	ldr	r1, [pc, #72]	@ (80064f4 <MX_USB_DEVICE_Init+0x50>)
 80064ac:	4812      	ldr	r0, [pc, #72]	@ (80064f8 <MX_USB_DEVICE_Init+0x54>)
 80064ae:	f7fe fd03 	bl	8004eb8 <USBD_Init>
 80064b2:	4603      	mov	r3, r0
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d001      	beq.n	80064bc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80064b8:	f7fa fa0a 	bl	80008d0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80064bc:	490f      	ldr	r1, [pc, #60]	@ (80064fc <MX_USB_DEVICE_Init+0x58>)
 80064be:	480e      	ldr	r0, [pc, #56]	@ (80064f8 <MX_USB_DEVICE_Init+0x54>)
 80064c0:	f7fe fd2a 	bl	8004f18 <USBD_RegisterClass>
 80064c4:	4603      	mov	r3, r0
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d001      	beq.n	80064ce <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80064ca:	f7fa fa01 	bl	80008d0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80064ce:	490c      	ldr	r1, [pc, #48]	@ (8006500 <MX_USB_DEVICE_Init+0x5c>)
 80064d0:	4809      	ldr	r0, [pc, #36]	@ (80064f8 <MX_USB_DEVICE_Init+0x54>)
 80064d2:	f7fe fc21 	bl	8004d18 <USBD_CDC_RegisterInterface>
 80064d6:	4603      	mov	r3, r0
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d001      	beq.n	80064e0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80064dc:	f7fa f9f8 	bl	80008d0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80064e0:	4805      	ldr	r0, [pc, #20]	@ (80064f8 <MX_USB_DEVICE_Init+0x54>)
 80064e2:	f7fe fd4f 	bl	8004f84 <USBD_Start>
 80064e6:	4603      	mov	r3, r0
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d001      	beq.n	80064f0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80064ec:	f7fa f9f0 	bl	80008d0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80064f0:	bf00      	nop
 80064f2:	bd80      	pop	{r7, pc}
 80064f4:	200000bc 	.word	0x200000bc
 80064f8:	200001d0 	.word	0x200001d0
 80064fc:	20000028 	.word	0x20000028
 8006500:	200000a8 	.word	0x200000a8

08006504 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006508:	2200      	movs	r2, #0
 800650a:	4905      	ldr	r1, [pc, #20]	@ (8006520 <CDC_Init_FS+0x1c>)
 800650c:	4805      	ldr	r0, [pc, #20]	@ (8006524 <CDC_Init_FS+0x20>)
 800650e:	f7fe fc1d 	bl	8004d4c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006512:	4905      	ldr	r1, [pc, #20]	@ (8006528 <CDC_Init_FS+0x24>)
 8006514:	4803      	ldr	r0, [pc, #12]	@ (8006524 <CDC_Init_FS+0x20>)
 8006516:	f7fe fc3b 	bl	8004d90 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800651a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800651c:	4618      	mov	r0, r3
 800651e:	bd80      	pop	{r7, pc}
 8006520:	20000cac 	.word	0x20000cac
 8006524:	200001d0 	.word	0x200001d0
 8006528:	200004ac 	.word	0x200004ac

0800652c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800652c:	b480      	push	{r7}
 800652e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006530:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006532:	4618      	mov	r0, r3
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr

0800653c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800653c:	b480      	push	{r7}
 800653e:	b083      	sub	sp, #12
 8006540:	af00      	add	r7, sp, #0
 8006542:	4603      	mov	r3, r0
 8006544:	6039      	str	r1, [r7, #0]
 8006546:	71fb      	strb	r3, [r7, #7]
 8006548:	4613      	mov	r3, r2
 800654a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800654c:	79fb      	ldrb	r3, [r7, #7]
 800654e:	2b23      	cmp	r3, #35	@ 0x23
 8006550:	d84a      	bhi.n	80065e8 <CDC_Control_FS+0xac>
 8006552:	a201      	add	r2, pc, #4	@ (adr r2, 8006558 <CDC_Control_FS+0x1c>)
 8006554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006558:	080065e9 	.word	0x080065e9
 800655c:	080065e9 	.word	0x080065e9
 8006560:	080065e9 	.word	0x080065e9
 8006564:	080065e9 	.word	0x080065e9
 8006568:	080065e9 	.word	0x080065e9
 800656c:	080065e9 	.word	0x080065e9
 8006570:	080065e9 	.word	0x080065e9
 8006574:	080065e9 	.word	0x080065e9
 8006578:	080065e9 	.word	0x080065e9
 800657c:	080065e9 	.word	0x080065e9
 8006580:	080065e9 	.word	0x080065e9
 8006584:	080065e9 	.word	0x080065e9
 8006588:	080065e9 	.word	0x080065e9
 800658c:	080065e9 	.word	0x080065e9
 8006590:	080065e9 	.word	0x080065e9
 8006594:	080065e9 	.word	0x080065e9
 8006598:	080065e9 	.word	0x080065e9
 800659c:	080065e9 	.word	0x080065e9
 80065a0:	080065e9 	.word	0x080065e9
 80065a4:	080065e9 	.word	0x080065e9
 80065a8:	080065e9 	.word	0x080065e9
 80065ac:	080065e9 	.word	0x080065e9
 80065b0:	080065e9 	.word	0x080065e9
 80065b4:	080065e9 	.word	0x080065e9
 80065b8:	080065e9 	.word	0x080065e9
 80065bc:	080065e9 	.word	0x080065e9
 80065c0:	080065e9 	.word	0x080065e9
 80065c4:	080065e9 	.word	0x080065e9
 80065c8:	080065e9 	.word	0x080065e9
 80065cc:	080065e9 	.word	0x080065e9
 80065d0:	080065e9 	.word	0x080065e9
 80065d4:	080065e9 	.word	0x080065e9
 80065d8:	080065e9 	.word	0x080065e9
 80065dc:	080065e9 	.word	0x080065e9
 80065e0:	080065e9 	.word	0x080065e9
 80065e4:	080065e9 	.word	0x080065e9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80065e8:	bf00      	nop
  }

  return (USBD_OK);
 80065ea:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	370c      	adds	r7, #12
 80065f0:	46bd      	mov	sp, r7
 80065f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f6:	4770      	bx	lr

080065f8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b082      	sub	sp, #8
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
 8006600:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006602:	6879      	ldr	r1, [r7, #4]
 8006604:	4805      	ldr	r0, [pc, #20]	@ (800661c <CDC_Receive_FS+0x24>)
 8006606:	f7fe fbc3 	bl	8004d90 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800660a:	4804      	ldr	r0, [pc, #16]	@ (800661c <CDC_Receive_FS+0x24>)
 800660c:	f7fe fc1e 	bl	8004e4c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8006610:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006612:	4618      	mov	r0, r3
 8006614:	3708      	adds	r7, #8
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}
 800661a:	bf00      	nop
 800661c:	200001d0 	.word	0x200001d0

08006620 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b084      	sub	sp, #16
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
 8006628:	460b      	mov	r3, r1
 800662a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800662c:	2300      	movs	r3, #0
 800662e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006630:	4b0d      	ldr	r3, [pc, #52]	@ (8006668 <CDC_Transmit_FS+0x48>)
 8006632:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006636:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800663e:	2b00      	cmp	r3, #0
 8006640:	d001      	beq.n	8006646 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8006642:	2301      	movs	r3, #1
 8006644:	e00b      	b.n	800665e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006646:	887b      	ldrh	r3, [r7, #2]
 8006648:	461a      	mov	r2, r3
 800664a:	6879      	ldr	r1, [r7, #4]
 800664c:	4806      	ldr	r0, [pc, #24]	@ (8006668 <CDC_Transmit_FS+0x48>)
 800664e:	f7fe fb7d 	bl	8004d4c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006652:	4805      	ldr	r0, [pc, #20]	@ (8006668 <CDC_Transmit_FS+0x48>)
 8006654:	f7fe fbba 	bl	8004dcc <USBD_CDC_TransmitPacket>
 8006658:	4603      	mov	r3, r0
 800665a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800665c:	7bfb      	ldrb	r3, [r7, #15]
}
 800665e:	4618      	mov	r0, r3
 8006660:	3710      	adds	r7, #16
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}
 8006666:	bf00      	nop
 8006668:	200001d0 	.word	0x200001d0

0800666c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800666c:	b480      	push	{r7}
 800666e:	b087      	sub	sp, #28
 8006670:	af00      	add	r7, sp, #0
 8006672:	60f8      	str	r0, [r7, #12]
 8006674:	60b9      	str	r1, [r7, #8]
 8006676:	4613      	mov	r3, r2
 8006678:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800667a:	2300      	movs	r3, #0
 800667c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800667e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006682:	4618      	mov	r0, r3
 8006684:	371c      	adds	r7, #28
 8006686:	46bd      	mov	sp, r7
 8006688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668c:	4770      	bx	lr
	...

08006690 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006690:	b480      	push	{r7}
 8006692:	b083      	sub	sp, #12
 8006694:	af00      	add	r7, sp, #0
 8006696:	4603      	mov	r3, r0
 8006698:	6039      	str	r1, [r7, #0]
 800669a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	2212      	movs	r2, #18
 80066a0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80066a2:	4b03      	ldr	r3, [pc, #12]	@ (80066b0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	370c      	adds	r7, #12
 80066a8:	46bd      	mov	sp, r7
 80066aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ae:	4770      	bx	lr
 80066b0:	200000d8 	.word	0x200000d8

080066b4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b083      	sub	sp, #12
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	4603      	mov	r3, r0
 80066bc:	6039      	str	r1, [r7, #0]
 80066be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	2204      	movs	r2, #4
 80066c4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80066c6:	4b03      	ldr	r3, [pc, #12]	@ (80066d4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	370c      	adds	r7, #12
 80066cc:	46bd      	mov	sp, r7
 80066ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d2:	4770      	bx	lr
 80066d4:	200000ec 	.word	0x200000ec

080066d8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b082      	sub	sp, #8
 80066dc:	af00      	add	r7, sp, #0
 80066de:	4603      	mov	r3, r0
 80066e0:	6039      	str	r1, [r7, #0]
 80066e2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80066e4:	79fb      	ldrb	r3, [r7, #7]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d105      	bne.n	80066f6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80066ea:	683a      	ldr	r2, [r7, #0]
 80066ec:	4907      	ldr	r1, [pc, #28]	@ (800670c <USBD_FS_ProductStrDescriptor+0x34>)
 80066ee:	4808      	ldr	r0, [pc, #32]	@ (8006710 <USBD_FS_ProductStrDescriptor+0x38>)
 80066f0:	f7ff fdf8 	bl	80062e4 <USBD_GetString>
 80066f4:	e004      	b.n	8006700 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80066f6:	683a      	ldr	r2, [r7, #0]
 80066f8:	4904      	ldr	r1, [pc, #16]	@ (800670c <USBD_FS_ProductStrDescriptor+0x34>)
 80066fa:	4805      	ldr	r0, [pc, #20]	@ (8006710 <USBD_FS_ProductStrDescriptor+0x38>)
 80066fc:	f7ff fdf2 	bl	80062e4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006700:	4b02      	ldr	r3, [pc, #8]	@ (800670c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006702:	4618      	mov	r0, r3
 8006704:	3708      	adds	r7, #8
 8006706:	46bd      	mov	sp, r7
 8006708:	bd80      	pop	{r7, pc}
 800670a:	bf00      	nop
 800670c:	200014ac 	.word	0x200014ac
 8006710:	08007248 	.word	0x08007248

08006714 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b082      	sub	sp, #8
 8006718:	af00      	add	r7, sp, #0
 800671a:	4603      	mov	r3, r0
 800671c:	6039      	str	r1, [r7, #0]
 800671e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006720:	683a      	ldr	r2, [r7, #0]
 8006722:	4904      	ldr	r1, [pc, #16]	@ (8006734 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006724:	4804      	ldr	r0, [pc, #16]	@ (8006738 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006726:	f7ff fddd 	bl	80062e4 <USBD_GetString>
  return USBD_StrDesc;
 800672a:	4b02      	ldr	r3, [pc, #8]	@ (8006734 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800672c:	4618      	mov	r0, r3
 800672e:	3708      	adds	r7, #8
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}
 8006734:	200014ac 	.word	0x200014ac
 8006738:	08007260 	.word	0x08007260

0800673c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b082      	sub	sp, #8
 8006740:	af00      	add	r7, sp, #0
 8006742:	4603      	mov	r3, r0
 8006744:	6039      	str	r1, [r7, #0]
 8006746:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	221a      	movs	r2, #26
 800674c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800674e:	f000 f843 	bl	80067d8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006752:	4b02      	ldr	r3, [pc, #8]	@ (800675c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006754:	4618      	mov	r0, r3
 8006756:	3708      	adds	r7, #8
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}
 800675c:	200000f0 	.word	0x200000f0

08006760 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b082      	sub	sp, #8
 8006764:	af00      	add	r7, sp, #0
 8006766:	4603      	mov	r3, r0
 8006768:	6039      	str	r1, [r7, #0]
 800676a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800676c:	79fb      	ldrb	r3, [r7, #7]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d105      	bne.n	800677e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006772:	683a      	ldr	r2, [r7, #0]
 8006774:	4907      	ldr	r1, [pc, #28]	@ (8006794 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006776:	4808      	ldr	r0, [pc, #32]	@ (8006798 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006778:	f7ff fdb4 	bl	80062e4 <USBD_GetString>
 800677c:	e004      	b.n	8006788 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800677e:	683a      	ldr	r2, [r7, #0]
 8006780:	4904      	ldr	r1, [pc, #16]	@ (8006794 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006782:	4805      	ldr	r0, [pc, #20]	@ (8006798 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006784:	f7ff fdae 	bl	80062e4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006788:	4b02      	ldr	r3, [pc, #8]	@ (8006794 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800678a:	4618      	mov	r0, r3
 800678c:	3708      	adds	r7, #8
 800678e:	46bd      	mov	sp, r7
 8006790:	bd80      	pop	{r7, pc}
 8006792:	bf00      	nop
 8006794:	200014ac 	.word	0x200014ac
 8006798:	08007274 	.word	0x08007274

0800679c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b082      	sub	sp, #8
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	4603      	mov	r3, r0
 80067a4:	6039      	str	r1, [r7, #0]
 80067a6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80067a8:	79fb      	ldrb	r3, [r7, #7]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d105      	bne.n	80067ba <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80067ae:	683a      	ldr	r2, [r7, #0]
 80067b0:	4907      	ldr	r1, [pc, #28]	@ (80067d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80067b2:	4808      	ldr	r0, [pc, #32]	@ (80067d4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80067b4:	f7ff fd96 	bl	80062e4 <USBD_GetString>
 80067b8:	e004      	b.n	80067c4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80067ba:	683a      	ldr	r2, [r7, #0]
 80067bc:	4904      	ldr	r1, [pc, #16]	@ (80067d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80067be:	4805      	ldr	r0, [pc, #20]	@ (80067d4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80067c0:	f7ff fd90 	bl	80062e4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80067c4:	4b02      	ldr	r3, [pc, #8]	@ (80067d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80067c6:	4618      	mov	r0, r3
 80067c8:	3708      	adds	r7, #8
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bd80      	pop	{r7, pc}
 80067ce:	bf00      	nop
 80067d0:	200014ac 	.word	0x200014ac
 80067d4:	08007280 	.word	0x08007280

080067d8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b084      	sub	sp, #16
 80067dc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80067de:	4b0f      	ldr	r3, [pc, #60]	@ (800681c <Get_SerialNum+0x44>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80067e4:	4b0e      	ldr	r3, [pc, #56]	@ (8006820 <Get_SerialNum+0x48>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80067ea:	4b0e      	ldr	r3, [pc, #56]	@ (8006824 <Get_SerialNum+0x4c>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80067f0:	68fa      	ldr	r2, [r7, #12]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	4413      	add	r3, r2
 80067f6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d009      	beq.n	8006812 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80067fe:	2208      	movs	r2, #8
 8006800:	4909      	ldr	r1, [pc, #36]	@ (8006828 <Get_SerialNum+0x50>)
 8006802:	68f8      	ldr	r0, [r7, #12]
 8006804:	f000 f814 	bl	8006830 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006808:	2204      	movs	r2, #4
 800680a:	4908      	ldr	r1, [pc, #32]	@ (800682c <Get_SerialNum+0x54>)
 800680c:	68b8      	ldr	r0, [r7, #8]
 800680e:	f000 f80f 	bl	8006830 <IntToUnicode>
  }
}
 8006812:	bf00      	nop
 8006814:	3710      	adds	r7, #16
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}
 800681a:	bf00      	nop
 800681c:	1fff7a10 	.word	0x1fff7a10
 8006820:	1fff7a14 	.word	0x1fff7a14
 8006824:	1fff7a18 	.word	0x1fff7a18
 8006828:	200000f2 	.word	0x200000f2
 800682c:	20000102 	.word	0x20000102

08006830 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006830:	b480      	push	{r7}
 8006832:	b087      	sub	sp, #28
 8006834:	af00      	add	r7, sp, #0
 8006836:	60f8      	str	r0, [r7, #12]
 8006838:	60b9      	str	r1, [r7, #8]
 800683a:	4613      	mov	r3, r2
 800683c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800683e:	2300      	movs	r3, #0
 8006840:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006842:	2300      	movs	r3, #0
 8006844:	75fb      	strb	r3, [r7, #23]
 8006846:	e027      	b.n	8006898 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	0f1b      	lsrs	r3, r3, #28
 800684c:	2b09      	cmp	r3, #9
 800684e:	d80b      	bhi.n	8006868 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	0f1b      	lsrs	r3, r3, #28
 8006854:	b2da      	uxtb	r2, r3
 8006856:	7dfb      	ldrb	r3, [r7, #23]
 8006858:	005b      	lsls	r3, r3, #1
 800685a:	4619      	mov	r1, r3
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	440b      	add	r3, r1
 8006860:	3230      	adds	r2, #48	@ 0x30
 8006862:	b2d2      	uxtb	r2, r2
 8006864:	701a      	strb	r2, [r3, #0]
 8006866:	e00a      	b.n	800687e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	0f1b      	lsrs	r3, r3, #28
 800686c:	b2da      	uxtb	r2, r3
 800686e:	7dfb      	ldrb	r3, [r7, #23]
 8006870:	005b      	lsls	r3, r3, #1
 8006872:	4619      	mov	r1, r3
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	440b      	add	r3, r1
 8006878:	3237      	adds	r2, #55	@ 0x37
 800687a:	b2d2      	uxtb	r2, r2
 800687c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	011b      	lsls	r3, r3, #4
 8006882:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006884:	7dfb      	ldrb	r3, [r7, #23]
 8006886:	005b      	lsls	r3, r3, #1
 8006888:	3301      	adds	r3, #1
 800688a:	68ba      	ldr	r2, [r7, #8]
 800688c:	4413      	add	r3, r2
 800688e:	2200      	movs	r2, #0
 8006890:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006892:	7dfb      	ldrb	r3, [r7, #23]
 8006894:	3301      	adds	r3, #1
 8006896:	75fb      	strb	r3, [r7, #23]
 8006898:	7dfa      	ldrb	r2, [r7, #23]
 800689a:	79fb      	ldrb	r3, [r7, #7]
 800689c:	429a      	cmp	r2, r3
 800689e:	d3d3      	bcc.n	8006848 <IntToUnicode+0x18>
  }
}
 80068a0:	bf00      	nop
 80068a2:	bf00      	nop
 80068a4:	371c      	adds	r7, #28
 80068a6:	46bd      	mov	sp, r7
 80068a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ac:	4770      	bx	lr
	...

080068b0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b08a      	sub	sp, #40	@ 0x28
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80068b8:	f107 0314 	add.w	r3, r7, #20
 80068bc:	2200      	movs	r2, #0
 80068be:	601a      	str	r2, [r3, #0]
 80068c0:	605a      	str	r2, [r3, #4]
 80068c2:	609a      	str	r2, [r3, #8]
 80068c4:	60da      	str	r2, [r3, #12]
 80068c6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80068d0:	d13a      	bne.n	8006948 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80068d2:	2300      	movs	r3, #0
 80068d4:	613b      	str	r3, [r7, #16]
 80068d6:	4b1e      	ldr	r3, [pc, #120]	@ (8006950 <HAL_PCD_MspInit+0xa0>)
 80068d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068da:	4a1d      	ldr	r2, [pc, #116]	@ (8006950 <HAL_PCD_MspInit+0xa0>)
 80068dc:	f043 0301 	orr.w	r3, r3, #1
 80068e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80068e2:	4b1b      	ldr	r3, [pc, #108]	@ (8006950 <HAL_PCD_MspInit+0xa0>)
 80068e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068e6:	f003 0301 	and.w	r3, r3, #1
 80068ea:	613b      	str	r3, [r7, #16]
 80068ec:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80068ee:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80068f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80068f4:	2302      	movs	r3, #2
 80068f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068f8:	2300      	movs	r3, #0
 80068fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80068fc:	2303      	movs	r3, #3
 80068fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006900:	230a      	movs	r3, #10
 8006902:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006904:	f107 0314 	add.w	r3, r7, #20
 8006908:	4619      	mov	r1, r3
 800690a:	4812      	ldr	r0, [pc, #72]	@ (8006954 <HAL_PCD_MspInit+0xa4>)
 800690c:	f7fa fa8e 	bl	8000e2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006910:	4b0f      	ldr	r3, [pc, #60]	@ (8006950 <HAL_PCD_MspInit+0xa0>)
 8006912:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006914:	4a0e      	ldr	r2, [pc, #56]	@ (8006950 <HAL_PCD_MspInit+0xa0>)
 8006916:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800691a:	6353      	str	r3, [r2, #52]	@ 0x34
 800691c:	2300      	movs	r3, #0
 800691e:	60fb      	str	r3, [r7, #12]
 8006920:	4b0b      	ldr	r3, [pc, #44]	@ (8006950 <HAL_PCD_MspInit+0xa0>)
 8006922:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006924:	4a0a      	ldr	r2, [pc, #40]	@ (8006950 <HAL_PCD_MspInit+0xa0>)
 8006926:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800692a:	6453      	str	r3, [r2, #68]	@ 0x44
 800692c:	4b08      	ldr	r3, [pc, #32]	@ (8006950 <HAL_PCD_MspInit+0xa0>)
 800692e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006930:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006934:	60fb      	str	r3, [r7, #12]
 8006936:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006938:	2200      	movs	r2, #0
 800693a:	2100      	movs	r1, #0
 800693c:	2043      	movs	r0, #67	@ 0x43
 800693e:	f7fa fa3e 	bl	8000dbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006942:	2043      	movs	r0, #67	@ 0x43
 8006944:	f7fa fa57 	bl	8000df6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006948:	bf00      	nop
 800694a:	3728      	adds	r7, #40	@ 0x28
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}
 8006950:	40023800 	.word	0x40023800
 8006954:	40020000 	.word	0x40020000

08006958 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b082      	sub	sp, #8
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800696c:	4619      	mov	r1, r3
 800696e:	4610      	mov	r0, r2
 8006970:	f7fe fb55 	bl	800501e <USBD_LL_SetupStage>
}
 8006974:	bf00      	nop
 8006976:	3708      	adds	r7, #8
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}

0800697c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b082      	sub	sp, #8
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
 8006984:	460b      	mov	r3, r1
 8006986:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800698e:	78fa      	ldrb	r2, [r7, #3]
 8006990:	6879      	ldr	r1, [r7, #4]
 8006992:	4613      	mov	r3, r2
 8006994:	00db      	lsls	r3, r3, #3
 8006996:	4413      	add	r3, r2
 8006998:	009b      	lsls	r3, r3, #2
 800699a:	440b      	add	r3, r1
 800699c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80069a0:	681a      	ldr	r2, [r3, #0]
 80069a2:	78fb      	ldrb	r3, [r7, #3]
 80069a4:	4619      	mov	r1, r3
 80069a6:	f7fe fb8f 	bl	80050c8 <USBD_LL_DataOutStage>
}
 80069aa:	bf00      	nop
 80069ac:	3708      	adds	r7, #8
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}

080069b2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80069b2:	b580      	push	{r7, lr}
 80069b4:	b082      	sub	sp, #8
 80069b6:	af00      	add	r7, sp, #0
 80069b8:	6078      	str	r0, [r7, #4]
 80069ba:	460b      	mov	r3, r1
 80069bc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80069c4:	78fa      	ldrb	r2, [r7, #3]
 80069c6:	6879      	ldr	r1, [r7, #4]
 80069c8:	4613      	mov	r3, r2
 80069ca:	00db      	lsls	r3, r3, #3
 80069cc:	4413      	add	r3, r2
 80069ce:	009b      	lsls	r3, r3, #2
 80069d0:	440b      	add	r3, r1
 80069d2:	3320      	adds	r3, #32
 80069d4:	681a      	ldr	r2, [r3, #0]
 80069d6:	78fb      	ldrb	r3, [r7, #3]
 80069d8:	4619      	mov	r1, r3
 80069da:	f7fe fc28 	bl	800522e <USBD_LL_DataInStage>
}
 80069de:	bf00      	nop
 80069e0:	3708      	adds	r7, #8
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}

080069e6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80069e6:	b580      	push	{r7, lr}
 80069e8:	b082      	sub	sp, #8
 80069ea:	af00      	add	r7, sp, #0
 80069ec:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80069f4:	4618      	mov	r0, r3
 80069f6:	f7fe fd62 	bl	80054be <USBD_LL_SOF>
}
 80069fa:	bf00      	nop
 80069fc:	3708      	adds	r7, #8
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}

08006a02 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a02:	b580      	push	{r7, lr}
 8006a04:	b084      	sub	sp, #16
 8006a06:	af00      	add	r7, sp, #0
 8006a08:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	79db      	ldrb	r3, [r3, #7]
 8006a12:	2b02      	cmp	r3, #2
 8006a14:	d001      	beq.n	8006a1a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8006a16:	f7f9 ff5b 	bl	80008d0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006a20:	7bfa      	ldrb	r2, [r7, #15]
 8006a22:	4611      	mov	r1, r2
 8006a24:	4618      	mov	r0, r3
 8006a26:	f7fe fd06 	bl	8005436 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006a30:	4618      	mov	r0, r3
 8006a32:	f7fe fcae 	bl	8005392 <USBD_LL_Reset>
}
 8006a36:	bf00      	nop
 8006a38:	3710      	adds	r7, #16
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}
	...

08006a40 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b082      	sub	sp, #8
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006a4e:	4618      	mov	r0, r3
 8006a50:	f7fe fd01 	bl	8005456 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	687a      	ldr	r2, [r7, #4]
 8006a60:	6812      	ldr	r2, [r2, #0]
 8006a62:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006a66:	f043 0301 	orr.w	r3, r3, #1
 8006a6a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	7adb      	ldrb	r3, [r3, #11]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d005      	beq.n	8006a80 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006a74:	4b04      	ldr	r3, [pc, #16]	@ (8006a88 <HAL_PCD_SuspendCallback+0x48>)
 8006a76:	691b      	ldr	r3, [r3, #16]
 8006a78:	4a03      	ldr	r2, [pc, #12]	@ (8006a88 <HAL_PCD_SuspendCallback+0x48>)
 8006a7a:	f043 0306 	orr.w	r3, r3, #6
 8006a7e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006a80:	bf00      	nop
 8006a82:	3708      	adds	r7, #8
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd80      	pop	{r7, pc}
 8006a88:	e000ed00 	.word	0xe000ed00

08006a8c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b082      	sub	sp, #8
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f7fe fcf7 	bl	800548e <USBD_LL_Resume>
}
 8006aa0:	bf00      	nop
 8006aa2:	3708      	adds	r7, #8
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd80      	pop	{r7, pc}

08006aa8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b082      	sub	sp, #8
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
 8006ab0:	460b      	mov	r3, r1
 8006ab2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006aba:	78fa      	ldrb	r2, [r7, #3]
 8006abc:	4611      	mov	r1, r2
 8006abe:	4618      	mov	r0, r3
 8006ac0:	f7fe fd4f 	bl	8005562 <USBD_LL_IsoOUTIncomplete>
}
 8006ac4:	bf00      	nop
 8006ac6:	3708      	adds	r7, #8
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bd80      	pop	{r7, pc}

08006acc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b082      	sub	sp, #8
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
 8006ad4:	460b      	mov	r3, r1
 8006ad6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006ade:	78fa      	ldrb	r2, [r7, #3]
 8006ae0:	4611      	mov	r1, r2
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	f7fe fd0b 	bl	80054fe <USBD_LL_IsoINIncomplete>
}
 8006ae8:	bf00      	nop
 8006aea:	3708      	adds	r7, #8
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bd80      	pop	{r7, pc}

08006af0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b082      	sub	sp, #8
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006afe:	4618      	mov	r0, r3
 8006b00:	f7fe fd61 	bl	80055c6 <USBD_LL_DevConnected>
}
 8006b04:	bf00      	nop
 8006b06:	3708      	adds	r7, #8
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bd80      	pop	{r7, pc}

08006b0c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b082      	sub	sp, #8
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f7fe fd5e 	bl	80055dc <USBD_LL_DevDisconnected>
}
 8006b20:	bf00      	nop
 8006b22:	3708      	adds	r7, #8
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}

08006b28 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b082      	sub	sp, #8
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	781b      	ldrb	r3, [r3, #0]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d13c      	bne.n	8006bb2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006b38:	4a20      	ldr	r2, [pc, #128]	@ (8006bbc <USBD_LL_Init+0x94>)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	4a1e      	ldr	r2, [pc, #120]	@ (8006bbc <USBD_LL_Init+0x94>)
 8006b44:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006b48:	4b1c      	ldr	r3, [pc, #112]	@ (8006bbc <USBD_LL_Init+0x94>)
 8006b4a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8006b4e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006b50:	4b1a      	ldr	r3, [pc, #104]	@ (8006bbc <USBD_LL_Init+0x94>)
 8006b52:	2204      	movs	r2, #4
 8006b54:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006b56:	4b19      	ldr	r3, [pc, #100]	@ (8006bbc <USBD_LL_Init+0x94>)
 8006b58:	2202      	movs	r2, #2
 8006b5a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006b5c:	4b17      	ldr	r3, [pc, #92]	@ (8006bbc <USBD_LL_Init+0x94>)
 8006b5e:	2200      	movs	r2, #0
 8006b60:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006b62:	4b16      	ldr	r3, [pc, #88]	@ (8006bbc <USBD_LL_Init+0x94>)
 8006b64:	2202      	movs	r2, #2
 8006b66:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006b68:	4b14      	ldr	r3, [pc, #80]	@ (8006bbc <USBD_LL_Init+0x94>)
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006b6e:	4b13      	ldr	r3, [pc, #76]	@ (8006bbc <USBD_LL_Init+0x94>)
 8006b70:	2200      	movs	r2, #0
 8006b72:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006b74:	4b11      	ldr	r3, [pc, #68]	@ (8006bbc <USBD_LL_Init+0x94>)
 8006b76:	2200      	movs	r2, #0
 8006b78:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8006b7a:	4b10      	ldr	r3, [pc, #64]	@ (8006bbc <USBD_LL_Init+0x94>)
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006b80:	4b0e      	ldr	r3, [pc, #56]	@ (8006bbc <USBD_LL_Init+0x94>)
 8006b82:	2200      	movs	r2, #0
 8006b84:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006b86:	480d      	ldr	r0, [pc, #52]	@ (8006bbc <USBD_LL_Init+0x94>)
 8006b88:	f7fa fb04 	bl	8001194 <HAL_PCD_Init>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d001      	beq.n	8006b96 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8006b92:	f7f9 fe9d 	bl	80008d0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006b96:	2180      	movs	r1, #128	@ 0x80
 8006b98:	4808      	ldr	r0, [pc, #32]	@ (8006bbc <USBD_LL_Init+0x94>)
 8006b9a:	f7fb fd2e 	bl	80025fa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006b9e:	2240      	movs	r2, #64	@ 0x40
 8006ba0:	2100      	movs	r1, #0
 8006ba2:	4806      	ldr	r0, [pc, #24]	@ (8006bbc <USBD_LL_Init+0x94>)
 8006ba4:	f7fb fce2 	bl	800256c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006ba8:	2280      	movs	r2, #128	@ 0x80
 8006baa:	2101      	movs	r1, #1
 8006bac:	4803      	ldr	r0, [pc, #12]	@ (8006bbc <USBD_LL_Init+0x94>)
 8006bae:	f7fb fcdd 	bl	800256c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006bb2:	2300      	movs	r3, #0
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	3708      	adds	r7, #8
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bd80      	pop	{r7, pc}
 8006bbc:	200016ac 	.word	0x200016ac

08006bc0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b084      	sub	sp, #16
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006bc8:	2300      	movs	r3, #0
 8006bca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006bcc:	2300      	movs	r3, #0
 8006bce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	f7fa fbeb 	bl	80013b2 <HAL_PCD_Start>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006be0:	7bfb      	ldrb	r3, [r7, #15]
 8006be2:	4618      	mov	r0, r3
 8006be4:	f000 f942 	bl	8006e6c <USBD_Get_USB_Status>
 8006be8:	4603      	mov	r3, r0
 8006bea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006bec:	7bbb      	ldrb	r3, [r7, #14]
}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	3710      	adds	r7, #16
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	bd80      	pop	{r7, pc}

08006bf6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006bf6:	b580      	push	{r7, lr}
 8006bf8:	b084      	sub	sp, #16
 8006bfa:	af00      	add	r7, sp, #0
 8006bfc:	6078      	str	r0, [r7, #4]
 8006bfe:	4608      	mov	r0, r1
 8006c00:	4611      	mov	r1, r2
 8006c02:	461a      	mov	r2, r3
 8006c04:	4603      	mov	r3, r0
 8006c06:	70fb      	strb	r3, [r7, #3]
 8006c08:	460b      	mov	r3, r1
 8006c0a:	70bb      	strb	r3, [r7, #2]
 8006c0c:	4613      	mov	r3, r2
 8006c0e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006c10:	2300      	movs	r3, #0
 8006c12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006c14:	2300      	movs	r3, #0
 8006c16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8006c1e:	78bb      	ldrb	r3, [r7, #2]
 8006c20:	883a      	ldrh	r2, [r7, #0]
 8006c22:	78f9      	ldrb	r1, [r7, #3]
 8006c24:	f7fb f8bf 	bl	8001da6 <HAL_PCD_EP_Open>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006c2c:	7bfb      	ldrb	r3, [r7, #15]
 8006c2e:	4618      	mov	r0, r3
 8006c30:	f000 f91c 	bl	8006e6c <USBD_Get_USB_Status>
 8006c34:	4603      	mov	r3, r0
 8006c36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006c38:	7bbb      	ldrb	r3, [r7, #14]
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3710      	adds	r7, #16
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}

08006c42 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006c42:	b580      	push	{r7, lr}
 8006c44:	b084      	sub	sp, #16
 8006c46:	af00      	add	r7, sp, #0
 8006c48:	6078      	str	r0, [r7, #4]
 8006c4a:	460b      	mov	r3, r1
 8006c4c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006c52:	2300      	movs	r3, #0
 8006c54:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006c5c:	78fa      	ldrb	r2, [r7, #3]
 8006c5e:	4611      	mov	r1, r2
 8006c60:	4618      	mov	r0, r3
 8006c62:	f7fb f908 	bl	8001e76 <HAL_PCD_EP_Close>
 8006c66:	4603      	mov	r3, r0
 8006c68:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006c6a:	7bfb      	ldrb	r3, [r7, #15]
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	f000 f8fd 	bl	8006e6c <USBD_Get_USB_Status>
 8006c72:	4603      	mov	r3, r0
 8006c74:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006c76:	7bbb      	ldrb	r3, [r7, #14]
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	3710      	adds	r7, #16
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd80      	pop	{r7, pc}

08006c80 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b084      	sub	sp, #16
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
 8006c88:	460b      	mov	r3, r1
 8006c8a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006c90:	2300      	movs	r3, #0
 8006c92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006c9a:	78fa      	ldrb	r2, [r7, #3]
 8006c9c:	4611      	mov	r1, r2
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f7fb f9c0 	bl	8002024 <HAL_PCD_EP_SetStall>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006ca8:	7bfb      	ldrb	r3, [r7, #15]
 8006caa:	4618      	mov	r0, r3
 8006cac:	f000 f8de 	bl	8006e6c <USBD_Get_USB_Status>
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006cb4:	7bbb      	ldrb	r3, [r7, #14]
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	3710      	adds	r7, #16
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bd80      	pop	{r7, pc}

08006cbe <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006cbe:	b580      	push	{r7, lr}
 8006cc0:	b084      	sub	sp, #16
 8006cc2:	af00      	add	r7, sp, #0
 8006cc4:	6078      	str	r0, [r7, #4]
 8006cc6:	460b      	mov	r3, r1
 8006cc8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006cd8:	78fa      	ldrb	r2, [r7, #3]
 8006cda:	4611      	mov	r1, r2
 8006cdc:	4618      	mov	r0, r3
 8006cde:	f7fb fa04 	bl	80020ea <HAL_PCD_EP_ClrStall>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006ce6:	7bfb      	ldrb	r3, [r7, #15]
 8006ce8:	4618      	mov	r0, r3
 8006cea:	f000 f8bf 	bl	8006e6c <USBD_Get_USB_Status>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006cf2:	7bbb      	ldrb	r3, [r7, #14]
}
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	3710      	adds	r7, #16
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd80      	pop	{r7, pc}

08006cfc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b085      	sub	sp, #20
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
 8006d04:	460b      	mov	r3, r1
 8006d06:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006d0e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006d10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	da0b      	bge.n	8006d30 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006d18:	78fb      	ldrb	r3, [r7, #3]
 8006d1a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006d1e:	68f9      	ldr	r1, [r7, #12]
 8006d20:	4613      	mov	r3, r2
 8006d22:	00db      	lsls	r3, r3, #3
 8006d24:	4413      	add	r3, r2
 8006d26:	009b      	lsls	r3, r3, #2
 8006d28:	440b      	add	r3, r1
 8006d2a:	3316      	adds	r3, #22
 8006d2c:	781b      	ldrb	r3, [r3, #0]
 8006d2e:	e00b      	b.n	8006d48 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006d30:	78fb      	ldrb	r3, [r7, #3]
 8006d32:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006d36:	68f9      	ldr	r1, [r7, #12]
 8006d38:	4613      	mov	r3, r2
 8006d3a:	00db      	lsls	r3, r3, #3
 8006d3c:	4413      	add	r3, r2
 8006d3e:	009b      	lsls	r3, r3, #2
 8006d40:	440b      	add	r3, r1
 8006d42:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8006d46:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006d48:	4618      	mov	r0, r3
 8006d4a:	3714      	adds	r7, #20
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d52:	4770      	bx	lr

08006d54 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b084      	sub	sp, #16
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
 8006d5c:	460b      	mov	r3, r1
 8006d5e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006d60:	2300      	movs	r3, #0
 8006d62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006d64:	2300      	movs	r3, #0
 8006d66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006d6e:	78fa      	ldrb	r2, [r7, #3]
 8006d70:	4611      	mov	r1, r2
 8006d72:	4618      	mov	r0, r3
 8006d74:	f7fa fff3 	bl	8001d5e <HAL_PCD_SetAddress>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006d7c:	7bfb      	ldrb	r3, [r7, #15]
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f000 f874 	bl	8006e6c <USBD_Get_USB_Status>
 8006d84:	4603      	mov	r3, r0
 8006d86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006d88:	7bbb      	ldrb	r3, [r7, #14]
}
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	3710      	adds	r7, #16
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd80      	pop	{r7, pc}

08006d92 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006d92:	b580      	push	{r7, lr}
 8006d94:	b086      	sub	sp, #24
 8006d96:	af00      	add	r7, sp, #0
 8006d98:	60f8      	str	r0, [r7, #12]
 8006d9a:	607a      	str	r2, [r7, #4]
 8006d9c:	603b      	str	r3, [r7, #0]
 8006d9e:	460b      	mov	r3, r1
 8006da0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006da2:	2300      	movs	r3, #0
 8006da4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006da6:	2300      	movs	r3, #0
 8006da8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8006db0:	7af9      	ldrb	r1, [r7, #11]
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	687a      	ldr	r2, [r7, #4]
 8006db6:	f7fb f8fb 	bl	8001fb0 <HAL_PCD_EP_Transmit>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006dbe:	7dfb      	ldrb	r3, [r7, #23]
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	f000 f853 	bl	8006e6c <USBD_Get_USB_Status>
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006dca:	7dbb      	ldrb	r3, [r7, #22]
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	3718      	adds	r7, #24
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}

08006dd4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b086      	sub	sp, #24
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	60f8      	str	r0, [r7, #12]
 8006ddc:	607a      	str	r2, [r7, #4]
 8006dde:	603b      	str	r3, [r7, #0]
 8006de0:	460b      	mov	r3, r1
 8006de2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006de4:	2300      	movs	r3, #0
 8006de6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006de8:	2300      	movs	r3, #0
 8006dea:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8006df2:	7af9      	ldrb	r1, [r7, #11]
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	687a      	ldr	r2, [r7, #4]
 8006df8:	f7fb f887 	bl	8001f0a <HAL_PCD_EP_Receive>
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006e00:	7dfb      	ldrb	r3, [r7, #23]
 8006e02:	4618      	mov	r0, r3
 8006e04:	f000 f832 	bl	8006e6c <USBD_Get_USB_Status>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006e0c:	7dbb      	ldrb	r3, [r7, #22]
}
 8006e0e:	4618      	mov	r0, r3
 8006e10:	3718      	adds	r7, #24
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}

08006e16 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006e16:	b580      	push	{r7, lr}
 8006e18:	b082      	sub	sp, #8
 8006e1a:	af00      	add	r7, sp, #0
 8006e1c:	6078      	str	r0, [r7, #4]
 8006e1e:	460b      	mov	r3, r1
 8006e20:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006e28:	78fa      	ldrb	r2, [r7, #3]
 8006e2a:	4611      	mov	r1, r2
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	f7fb f8a7 	bl	8001f80 <HAL_PCD_EP_GetRxCount>
 8006e32:	4603      	mov	r3, r0
}
 8006e34:	4618      	mov	r0, r3
 8006e36:	3708      	adds	r7, #8
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bd80      	pop	{r7, pc}

08006e3c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b083      	sub	sp, #12
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8006e44:	4b03      	ldr	r3, [pc, #12]	@ (8006e54 <USBD_static_malloc+0x18>)
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	370c      	adds	r7, #12
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e50:	4770      	bx	lr
 8006e52:	bf00      	nop
 8006e54:	20001b90 	.word	0x20001b90

08006e58 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b083      	sub	sp, #12
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]

}
 8006e60:	bf00      	nop
 8006e62:	370c      	adds	r7, #12
 8006e64:	46bd      	mov	sp, r7
 8006e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6a:	4770      	bx	lr

08006e6c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b085      	sub	sp, #20
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	4603      	mov	r3, r0
 8006e74:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e76:	2300      	movs	r3, #0
 8006e78:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006e7a:	79fb      	ldrb	r3, [r7, #7]
 8006e7c:	2b03      	cmp	r3, #3
 8006e7e:	d817      	bhi.n	8006eb0 <USBD_Get_USB_Status+0x44>
 8006e80:	a201      	add	r2, pc, #4	@ (adr r2, 8006e88 <USBD_Get_USB_Status+0x1c>)
 8006e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e86:	bf00      	nop
 8006e88:	08006e99 	.word	0x08006e99
 8006e8c:	08006e9f 	.word	0x08006e9f
 8006e90:	08006ea5 	.word	0x08006ea5
 8006e94:	08006eab 	.word	0x08006eab
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006e98:	2300      	movs	r3, #0
 8006e9a:	73fb      	strb	r3, [r7, #15]
    break;
 8006e9c:	e00b      	b.n	8006eb6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006e9e:	2303      	movs	r3, #3
 8006ea0:	73fb      	strb	r3, [r7, #15]
    break;
 8006ea2:	e008      	b.n	8006eb6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	73fb      	strb	r3, [r7, #15]
    break;
 8006ea8:	e005      	b.n	8006eb6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006eaa:	2303      	movs	r3, #3
 8006eac:	73fb      	strb	r3, [r7, #15]
    break;
 8006eae:	e002      	b.n	8006eb6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006eb0:	2303      	movs	r3, #3
 8006eb2:	73fb      	strb	r3, [r7, #15]
    break;
 8006eb4:	bf00      	nop
  }
  return usb_status;
 8006eb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	3714      	adds	r7, #20
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec2:	4770      	bx	lr

08006ec4 <_ZdlPvj>:
 8006ec4:	f000 b811 	b.w	8006eea <_ZdlPv>

08006ec8 <_Znwj>:
 8006ec8:	2801      	cmp	r0, #1
 8006eca:	bf38      	it	cc
 8006ecc:	2001      	movcc	r0, #1
 8006ece:	b510      	push	{r4, lr}
 8006ed0:	4604      	mov	r4, r0
 8006ed2:	4620      	mov	r0, r4
 8006ed4:	f000 f81c 	bl	8006f10 <malloc>
 8006ed8:	b100      	cbz	r0, 8006edc <_Znwj+0x14>
 8006eda:	bd10      	pop	{r4, pc}
 8006edc:	f000 f808 	bl	8006ef0 <_ZSt15get_new_handlerv>
 8006ee0:	b908      	cbnz	r0, 8006ee6 <_Znwj+0x1e>
 8006ee2:	f000 f80d 	bl	8006f00 <abort>
 8006ee6:	4780      	blx	r0
 8006ee8:	e7f3      	b.n	8006ed2 <_Znwj+0xa>

08006eea <_ZdlPv>:
 8006eea:	f000 b819 	b.w	8006f20 <free>
	...

08006ef0 <_ZSt15get_new_handlerv>:
 8006ef0:	4b02      	ldr	r3, [pc, #8]	@ (8006efc <_ZSt15get_new_handlerv+0xc>)
 8006ef2:	6818      	ldr	r0, [r3, #0]
 8006ef4:	f3bf 8f5b 	dmb	ish
 8006ef8:	4770      	bx	lr
 8006efa:	bf00      	nop
 8006efc:	20001db0 	.word	0x20001db0

08006f00 <abort>:
 8006f00:	b508      	push	{r3, lr}
 8006f02:	2006      	movs	r0, #6
 8006f04:	f000 f8f2 	bl	80070ec <raise>
 8006f08:	2001      	movs	r0, #1
 8006f0a:	f7f9 fd69 	bl	80009e0 <_exit>
	...

08006f10 <malloc>:
 8006f10:	4b02      	ldr	r3, [pc, #8]	@ (8006f1c <malloc+0xc>)
 8006f12:	4601      	mov	r1, r0
 8006f14:	6818      	ldr	r0, [r3, #0]
 8006f16:	f000 b82d 	b.w	8006f74 <_malloc_r>
 8006f1a:	bf00      	nop
 8006f1c:	2000010c 	.word	0x2000010c

08006f20 <free>:
 8006f20:	4b02      	ldr	r3, [pc, #8]	@ (8006f2c <free+0xc>)
 8006f22:	4601      	mov	r1, r0
 8006f24:	6818      	ldr	r0, [r3, #0]
 8006f26:	f000 b939 	b.w	800719c <_free_r>
 8006f2a:	bf00      	nop
 8006f2c:	2000010c 	.word	0x2000010c

08006f30 <sbrk_aligned>:
 8006f30:	b570      	push	{r4, r5, r6, lr}
 8006f32:	4e0f      	ldr	r6, [pc, #60]	@ (8006f70 <sbrk_aligned+0x40>)
 8006f34:	460c      	mov	r4, r1
 8006f36:	6831      	ldr	r1, [r6, #0]
 8006f38:	4605      	mov	r5, r0
 8006f3a:	b911      	cbnz	r1, 8006f42 <sbrk_aligned+0x12>
 8006f3c:	f000 f8f2 	bl	8007124 <_sbrk_r>
 8006f40:	6030      	str	r0, [r6, #0]
 8006f42:	4621      	mov	r1, r4
 8006f44:	4628      	mov	r0, r5
 8006f46:	f000 f8ed 	bl	8007124 <_sbrk_r>
 8006f4a:	1c43      	adds	r3, r0, #1
 8006f4c:	d103      	bne.n	8006f56 <sbrk_aligned+0x26>
 8006f4e:	f04f 34ff 	mov.w	r4, #4294967295
 8006f52:	4620      	mov	r0, r4
 8006f54:	bd70      	pop	{r4, r5, r6, pc}
 8006f56:	1cc4      	adds	r4, r0, #3
 8006f58:	f024 0403 	bic.w	r4, r4, #3
 8006f5c:	42a0      	cmp	r0, r4
 8006f5e:	d0f8      	beq.n	8006f52 <sbrk_aligned+0x22>
 8006f60:	1a21      	subs	r1, r4, r0
 8006f62:	4628      	mov	r0, r5
 8006f64:	f000 f8de 	bl	8007124 <_sbrk_r>
 8006f68:	3001      	adds	r0, #1
 8006f6a:	d1f2      	bne.n	8006f52 <sbrk_aligned+0x22>
 8006f6c:	e7ef      	b.n	8006f4e <sbrk_aligned+0x1e>
 8006f6e:	bf00      	nop
 8006f70:	20001db4 	.word	0x20001db4

08006f74 <_malloc_r>:
 8006f74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f78:	1ccd      	adds	r5, r1, #3
 8006f7a:	f025 0503 	bic.w	r5, r5, #3
 8006f7e:	3508      	adds	r5, #8
 8006f80:	2d0c      	cmp	r5, #12
 8006f82:	bf38      	it	cc
 8006f84:	250c      	movcc	r5, #12
 8006f86:	2d00      	cmp	r5, #0
 8006f88:	4606      	mov	r6, r0
 8006f8a:	db01      	blt.n	8006f90 <_malloc_r+0x1c>
 8006f8c:	42a9      	cmp	r1, r5
 8006f8e:	d904      	bls.n	8006f9a <_malloc_r+0x26>
 8006f90:	230c      	movs	r3, #12
 8006f92:	6033      	str	r3, [r6, #0]
 8006f94:	2000      	movs	r0, #0
 8006f96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f9a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007070 <_malloc_r+0xfc>
 8006f9e:	f000 f869 	bl	8007074 <__malloc_lock>
 8006fa2:	f8d8 3000 	ldr.w	r3, [r8]
 8006fa6:	461c      	mov	r4, r3
 8006fa8:	bb44      	cbnz	r4, 8006ffc <_malloc_r+0x88>
 8006faa:	4629      	mov	r1, r5
 8006fac:	4630      	mov	r0, r6
 8006fae:	f7ff ffbf 	bl	8006f30 <sbrk_aligned>
 8006fb2:	1c43      	adds	r3, r0, #1
 8006fb4:	4604      	mov	r4, r0
 8006fb6:	d158      	bne.n	800706a <_malloc_r+0xf6>
 8006fb8:	f8d8 4000 	ldr.w	r4, [r8]
 8006fbc:	4627      	mov	r7, r4
 8006fbe:	2f00      	cmp	r7, #0
 8006fc0:	d143      	bne.n	800704a <_malloc_r+0xd6>
 8006fc2:	2c00      	cmp	r4, #0
 8006fc4:	d04b      	beq.n	800705e <_malloc_r+0xea>
 8006fc6:	6823      	ldr	r3, [r4, #0]
 8006fc8:	4639      	mov	r1, r7
 8006fca:	4630      	mov	r0, r6
 8006fcc:	eb04 0903 	add.w	r9, r4, r3
 8006fd0:	f000 f8a8 	bl	8007124 <_sbrk_r>
 8006fd4:	4581      	cmp	r9, r0
 8006fd6:	d142      	bne.n	800705e <_malloc_r+0xea>
 8006fd8:	6821      	ldr	r1, [r4, #0]
 8006fda:	1a6d      	subs	r5, r5, r1
 8006fdc:	4629      	mov	r1, r5
 8006fde:	4630      	mov	r0, r6
 8006fe0:	f7ff ffa6 	bl	8006f30 <sbrk_aligned>
 8006fe4:	3001      	adds	r0, #1
 8006fe6:	d03a      	beq.n	800705e <_malloc_r+0xea>
 8006fe8:	6823      	ldr	r3, [r4, #0]
 8006fea:	442b      	add	r3, r5
 8006fec:	6023      	str	r3, [r4, #0]
 8006fee:	f8d8 3000 	ldr.w	r3, [r8]
 8006ff2:	685a      	ldr	r2, [r3, #4]
 8006ff4:	bb62      	cbnz	r2, 8007050 <_malloc_r+0xdc>
 8006ff6:	f8c8 7000 	str.w	r7, [r8]
 8006ffa:	e00f      	b.n	800701c <_malloc_r+0xa8>
 8006ffc:	6822      	ldr	r2, [r4, #0]
 8006ffe:	1b52      	subs	r2, r2, r5
 8007000:	d420      	bmi.n	8007044 <_malloc_r+0xd0>
 8007002:	2a0b      	cmp	r2, #11
 8007004:	d917      	bls.n	8007036 <_malloc_r+0xc2>
 8007006:	1961      	adds	r1, r4, r5
 8007008:	42a3      	cmp	r3, r4
 800700a:	6025      	str	r5, [r4, #0]
 800700c:	bf18      	it	ne
 800700e:	6059      	strne	r1, [r3, #4]
 8007010:	6863      	ldr	r3, [r4, #4]
 8007012:	bf08      	it	eq
 8007014:	f8c8 1000 	streq.w	r1, [r8]
 8007018:	5162      	str	r2, [r4, r5]
 800701a:	604b      	str	r3, [r1, #4]
 800701c:	4630      	mov	r0, r6
 800701e:	f000 f82f 	bl	8007080 <__malloc_unlock>
 8007022:	f104 000b 	add.w	r0, r4, #11
 8007026:	1d23      	adds	r3, r4, #4
 8007028:	f020 0007 	bic.w	r0, r0, #7
 800702c:	1ac2      	subs	r2, r0, r3
 800702e:	bf1c      	itt	ne
 8007030:	1a1b      	subne	r3, r3, r0
 8007032:	50a3      	strne	r3, [r4, r2]
 8007034:	e7af      	b.n	8006f96 <_malloc_r+0x22>
 8007036:	6862      	ldr	r2, [r4, #4]
 8007038:	42a3      	cmp	r3, r4
 800703a:	bf0c      	ite	eq
 800703c:	f8c8 2000 	streq.w	r2, [r8]
 8007040:	605a      	strne	r2, [r3, #4]
 8007042:	e7eb      	b.n	800701c <_malloc_r+0xa8>
 8007044:	4623      	mov	r3, r4
 8007046:	6864      	ldr	r4, [r4, #4]
 8007048:	e7ae      	b.n	8006fa8 <_malloc_r+0x34>
 800704a:	463c      	mov	r4, r7
 800704c:	687f      	ldr	r7, [r7, #4]
 800704e:	e7b6      	b.n	8006fbe <_malloc_r+0x4a>
 8007050:	461a      	mov	r2, r3
 8007052:	685b      	ldr	r3, [r3, #4]
 8007054:	42a3      	cmp	r3, r4
 8007056:	d1fb      	bne.n	8007050 <_malloc_r+0xdc>
 8007058:	2300      	movs	r3, #0
 800705a:	6053      	str	r3, [r2, #4]
 800705c:	e7de      	b.n	800701c <_malloc_r+0xa8>
 800705e:	230c      	movs	r3, #12
 8007060:	6033      	str	r3, [r6, #0]
 8007062:	4630      	mov	r0, r6
 8007064:	f000 f80c 	bl	8007080 <__malloc_unlock>
 8007068:	e794      	b.n	8006f94 <_malloc_r+0x20>
 800706a:	6005      	str	r5, [r0, #0]
 800706c:	e7d6      	b.n	800701c <_malloc_r+0xa8>
 800706e:	bf00      	nop
 8007070:	20001db8 	.word	0x20001db8

08007074 <__malloc_lock>:
 8007074:	4801      	ldr	r0, [pc, #4]	@ (800707c <__malloc_lock+0x8>)
 8007076:	f000 b88f 	b.w	8007198 <__retarget_lock_acquire_recursive>
 800707a:	bf00      	nop
 800707c:	20001ef8 	.word	0x20001ef8

08007080 <__malloc_unlock>:
 8007080:	4801      	ldr	r0, [pc, #4]	@ (8007088 <__malloc_unlock+0x8>)
 8007082:	f000 b88a 	b.w	800719a <__retarget_lock_release_recursive>
 8007086:	bf00      	nop
 8007088:	20001ef8 	.word	0x20001ef8

0800708c <memset>:
 800708c:	4402      	add	r2, r0
 800708e:	4603      	mov	r3, r0
 8007090:	4293      	cmp	r3, r2
 8007092:	d100      	bne.n	8007096 <memset+0xa>
 8007094:	4770      	bx	lr
 8007096:	f803 1b01 	strb.w	r1, [r3], #1
 800709a:	e7f9      	b.n	8007090 <memset+0x4>

0800709c <_raise_r>:
 800709c:	291f      	cmp	r1, #31
 800709e:	b538      	push	{r3, r4, r5, lr}
 80070a0:	4605      	mov	r5, r0
 80070a2:	460c      	mov	r4, r1
 80070a4:	d904      	bls.n	80070b0 <_raise_r+0x14>
 80070a6:	2316      	movs	r3, #22
 80070a8:	6003      	str	r3, [r0, #0]
 80070aa:	f04f 30ff 	mov.w	r0, #4294967295
 80070ae:	bd38      	pop	{r3, r4, r5, pc}
 80070b0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80070b2:	b112      	cbz	r2, 80070ba <_raise_r+0x1e>
 80070b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80070b8:	b94b      	cbnz	r3, 80070ce <_raise_r+0x32>
 80070ba:	4628      	mov	r0, r5
 80070bc:	f000 f830 	bl	8007120 <_getpid_r>
 80070c0:	4622      	mov	r2, r4
 80070c2:	4601      	mov	r1, r0
 80070c4:	4628      	mov	r0, r5
 80070c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80070ca:	f000 b817 	b.w	80070fc <_kill_r>
 80070ce:	2b01      	cmp	r3, #1
 80070d0:	d00a      	beq.n	80070e8 <_raise_r+0x4c>
 80070d2:	1c59      	adds	r1, r3, #1
 80070d4:	d103      	bne.n	80070de <_raise_r+0x42>
 80070d6:	2316      	movs	r3, #22
 80070d8:	6003      	str	r3, [r0, #0]
 80070da:	2001      	movs	r0, #1
 80070dc:	e7e7      	b.n	80070ae <_raise_r+0x12>
 80070de:	2100      	movs	r1, #0
 80070e0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80070e4:	4620      	mov	r0, r4
 80070e6:	4798      	blx	r3
 80070e8:	2000      	movs	r0, #0
 80070ea:	e7e0      	b.n	80070ae <_raise_r+0x12>

080070ec <raise>:
 80070ec:	4b02      	ldr	r3, [pc, #8]	@ (80070f8 <raise+0xc>)
 80070ee:	4601      	mov	r1, r0
 80070f0:	6818      	ldr	r0, [r3, #0]
 80070f2:	f7ff bfd3 	b.w	800709c <_raise_r>
 80070f6:	bf00      	nop
 80070f8:	2000010c 	.word	0x2000010c

080070fc <_kill_r>:
 80070fc:	b538      	push	{r3, r4, r5, lr}
 80070fe:	4d07      	ldr	r5, [pc, #28]	@ (800711c <_kill_r+0x20>)
 8007100:	2300      	movs	r3, #0
 8007102:	4604      	mov	r4, r0
 8007104:	4608      	mov	r0, r1
 8007106:	4611      	mov	r1, r2
 8007108:	602b      	str	r3, [r5, #0]
 800710a:	f7f9 fc59 	bl	80009c0 <_kill>
 800710e:	1c43      	adds	r3, r0, #1
 8007110:	d102      	bne.n	8007118 <_kill_r+0x1c>
 8007112:	682b      	ldr	r3, [r5, #0]
 8007114:	b103      	cbz	r3, 8007118 <_kill_r+0x1c>
 8007116:	6023      	str	r3, [r4, #0]
 8007118:	bd38      	pop	{r3, r4, r5, pc}
 800711a:	bf00      	nop
 800711c:	20001ef4 	.word	0x20001ef4

08007120 <_getpid_r>:
 8007120:	f7f9 bc46 	b.w	80009b0 <_getpid>

08007124 <_sbrk_r>:
 8007124:	b538      	push	{r3, r4, r5, lr}
 8007126:	4d06      	ldr	r5, [pc, #24]	@ (8007140 <_sbrk_r+0x1c>)
 8007128:	2300      	movs	r3, #0
 800712a:	4604      	mov	r4, r0
 800712c:	4608      	mov	r0, r1
 800712e:	602b      	str	r3, [r5, #0]
 8007130:	f7f9 fc62 	bl	80009f8 <_sbrk>
 8007134:	1c43      	adds	r3, r0, #1
 8007136:	d102      	bne.n	800713e <_sbrk_r+0x1a>
 8007138:	682b      	ldr	r3, [r5, #0]
 800713a:	b103      	cbz	r3, 800713e <_sbrk_r+0x1a>
 800713c:	6023      	str	r3, [r4, #0]
 800713e:	bd38      	pop	{r3, r4, r5, pc}
 8007140:	20001ef4 	.word	0x20001ef4

08007144 <__errno>:
 8007144:	4b01      	ldr	r3, [pc, #4]	@ (800714c <__errno+0x8>)
 8007146:	6818      	ldr	r0, [r3, #0]
 8007148:	4770      	bx	lr
 800714a:	bf00      	nop
 800714c:	2000010c 	.word	0x2000010c

08007150 <__libc_init_array>:
 8007150:	b570      	push	{r4, r5, r6, lr}
 8007152:	4d0d      	ldr	r5, [pc, #52]	@ (8007188 <__libc_init_array+0x38>)
 8007154:	4c0d      	ldr	r4, [pc, #52]	@ (800718c <__libc_init_array+0x3c>)
 8007156:	1b64      	subs	r4, r4, r5
 8007158:	10a4      	asrs	r4, r4, #2
 800715a:	2600      	movs	r6, #0
 800715c:	42a6      	cmp	r6, r4
 800715e:	d109      	bne.n	8007174 <__libc_init_array+0x24>
 8007160:	4d0b      	ldr	r5, [pc, #44]	@ (8007190 <__libc_init_array+0x40>)
 8007162:	4c0c      	ldr	r4, [pc, #48]	@ (8007194 <__libc_init_array+0x44>)
 8007164:	f000 f864 	bl	8007230 <_init>
 8007168:	1b64      	subs	r4, r4, r5
 800716a:	10a4      	asrs	r4, r4, #2
 800716c:	2600      	movs	r6, #0
 800716e:	42a6      	cmp	r6, r4
 8007170:	d105      	bne.n	800717e <__libc_init_array+0x2e>
 8007172:	bd70      	pop	{r4, r5, r6, pc}
 8007174:	f855 3b04 	ldr.w	r3, [r5], #4
 8007178:	4798      	blx	r3
 800717a:	3601      	adds	r6, #1
 800717c:	e7ee      	b.n	800715c <__libc_init_array+0xc>
 800717e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007182:	4798      	blx	r3
 8007184:	3601      	adds	r6, #1
 8007186:	e7f2      	b.n	800716e <__libc_init_array+0x1e>
 8007188:	080072b8 	.word	0x080072b8
 800718c:	080072b8 	.word	0x080072b8
 8007190:	080072b8 	.word	0x080072b8
 8007194:	080072bc 	.word	0x080072bc

08007198 <__retarget_lock_acquire_recursive>:
 8007198:	4770      	bx	lr

0800719a <__retarget_lock_release_recursive>:
 800719a:	4770      	bx	lr

0800719c <_free_r>:
 800719c:	b538      	push	{r3, r4, r5, lr}
 800719e:	4605      	mov	r5, r0
 80071a0:	2900      	cmp	r1, #0
 80071a2:	d041      	beq.n	8007228 <_free_r+0x8c>
 80071a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071a8:	1f0c      	subs	r4, r1, #4
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	bfb8      	it	lt
 80071ae:	18e4      	addlt	r4, r4, r3
 80071b0:	f7ff ff60 	bl	8007074 <__malloc_lock>
 80071b4:	4a1d      	ldr	r2, [pc, #116]	@ (800722c <_free_r+0x90>)
 80071b6:	6813      	ldr	r3, [r2, #0]
 80071b8:	b933      	cbnz	r3, 80071c8 <_free_r+0x2c>
 80071ba:	6063      	str	r3, [r4, #4]
 80071bc:	6014      	str	r4, [r2, #0]
 80071be:	4628      	mov	r0, r5
 80071c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80071c4:	f7ff bf5c 	b.w	8007080 <__malloc_unlock>
 80071c8:	42a3      	cmp	r3, r4
 80071ca:	d908      	bls.n	80071de <_free_r+0x42>
 80071cc:	6820      	ldr	r0, [r4, #0]
 80071ce:	1821      	adds	r1, r4, r0
 80071d0:	428b      	cmp	r3, r1
 80071d2:	bf01      	itttt	eq
 80071d4:	6819      	ldreq	r1, [r3, #0]
 80071d6:	685b      	ldreq	r3, [r3, #4]
 80071d8:	1809      	addeq	r1, r1, r0
 80071da:	6021      	streq	r1, [r4, #0]
 80071dc:	e7ed      	b.n	80071ba <_free_r+0x1e>
 80071de:	461a      	mov	r2, r3
 80071e0:	685b      	ldr	r3, [r3, #4]
 80071e2:	b10b      	cbz	r3, 80071e8 <_free_r+0x4c>
 80071e4:	42a3      	cmp	r3, r4
 80071e6:	d9fa      	bls.n	80071de <_free_r+0x42>
 80071e8:	6811      	ldr	r1, [r2, #0]
 80071ea:	1850      	adds	r0, r2, r1
 80071ec:	42a0      	cmp	r0, r4
 80071ee:	d10b      	bne.n	8007208 <_free_r+0x6c>
 80071f0:	6820      	ldr	r0, [r4, #0]
 80071f2:	4401      	add	r1, r0
 80071f4:	1850      	adds	r0, r2, r1
 80071f6:	4283      	cmp	r3, r0
 80071f8:	6011      	str	r1, [r2, #0]
 80071fa:	d1e0      	bne.n	80071be <_free_r+0x22>
 80071fc:	6818      	ldr	r0, [r3, #0]
 80071fe:	685b      	ldr	r3, [r3, #4]
 8007200:	6053      	str	r3, [r2, #4]
 8007202:	4408      	add	r0, r1
 8007204:	6010      	str	r0, [r2, #0]
 8007206:	e7da      	b.n	80071be <_free_r+0x22>
 8007208:	d902      	bls.n	8007210 <_free_r+0x74>
 800720a:	230c      	movs	r3, #12
 800720c:	602b      	str	r3, [r5, #0]
 800720e:	e7d6      	b.n	80071be <_free_r+0x22>
 8007210:	6820      	ldr	r0, [r4, #0]
 8007212:	1821      	adds	r1, r4, r0
 8007214:	428b      	cmp	r3, r1
 8007216:	bf04      	itt	eq
 8007218:	6819      	ldreq	r1, [r3, #0]
 800721a:	685b      	ldreq	r3, [r3, #4]
 800721c:	6063      	str	r3, [r4, #4]
 800721e:	bf04      	itt	eq
 8007220:	1809      	addeq	r1, r1, r0
 8007222:	6021      	streq	r1, [r4, #0]
 8007224:	6054      	str	r4, [r2, #4]
 8007226:	e7ca      	b.n	80071be <_free_r+0x22>
 8007228:	bd38      	pop	{r3, r4, r5, pc}
 800722a:	bf00      	nop
 800722c:	20001db8 	.word	0x20001db8

08007230 <_init>:
 8007230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007232:	bf00      	nop
 8007234:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007236:	bc08      	pop	{r3}
 8007238:	469e      	mov	lr, r3
 800723a:	4770      	bx	lr

0800723c <_fini>:
 800723c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800723e:	bf00      	nop
 8007240:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007242:	bc08      	pop	{r3}
 8007244:	469e      	mov	lr, r3
 8007246:	4770      	bx	lr
